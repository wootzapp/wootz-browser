// Copyright 2023 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

syntax = "proto2";
option optimize_for = LITE_RUNTIME;
option java_package = "org.chromium.components.optimization_guide.proto";
option java_outer_classname = "ModelExecutionProto";

package optimization_guide.proto;

import "components/optimization_guide/proto/common_types.proto";
import "components/optimization_guide/proto/descriptors.proto";
import "components/optimization_guide/proto/redaction.proto";
import "components/optimization_guide/proto/substitution.proto";

message ExecuteRequest {
  // The feature that this execution request is for.
  optional ModelExecutionFeature feature = 1;

  // The metadata associated with this request used to understand how to
  // execute the necessary feature models.
  optional Any request_metadata = 2;
}

message ExecuteResponse {
  reserved 3;

  optional int64 model_version = 1;

  oneof response {
    // The metadata for the response returned for the feature.
    Any response_metadata = 2;
    ErrorResponse error_response = 5;
  }

  optional string server_execution_id = 4;
}

message ErrorResponse {
  optional ErrorState error_state = 1;
}

// Possible failure modes of the service
enum ErrorState {
  ERROR_STATE_UNSPECIFIED = 0;
  ERROR_STATE_INTERNAL_SERVER_ERROR_RETRY = 1;
  ERROR_STATE_INTERNAL_SERVER_ERROR_NO_RETRY = 2;
  ERROR_STATE_UNSUPPORTED_LANGUAGE = 3;
  ERROR_STATE_FILTERED = 4;
  ERROR_STATE_REQUEST_THROTTLED = 5;
  ERROR_STATE_DISABLED = 6;
}

enum ModelExecutionFeature {
  MODEL_EXECUTION_FEATURE_UNSPECIFIED = 0;
  MODEL_EXECUTION_FEATURE_COMPOSE = 1;
  MODEL_EXECUTION_FEATURE_TAB_ORGANIZATION = 2;
  MODEL_EXECUTION_FEATURE_WALLPAPER_SEARCH = 3;
  // This test feature cannot be used for launch but can be used for
  // prototyping. Please reach out to optimization_guide OWNERS when looking to
  // use this enum or want to go beyond prototyping.
  MODEL_EXECUTION_FEATURE_TEST = 4;
}

message OnDeviceModelExecutionConfig {
  // The set of configs for features that leverage the on-device model.
  //
  // It is expected that there is only one feature config per feature.
  repeated OnDeviceModelExecutionFeatureConfig feature_configs = 1;
}

message OnDeviceModelExecutionFeatureConfig {
  // The feature this configuration is for.
  optional ModelExecutionFeature feature = 1;

  // The config used to construct the input for on-device model execution.
  optional OnDeviceModelExecutionInputConfig input_config = 2;

  // The config used to construct the output for on-device model execution.
  optional OnDeviceModelExecutionOutputConfig output_config = 3;
}

message OnDeviceModelExecutionInputConfig {
  // The base name of the request metadata proto this input config is applicable
  // for.
  optional string request_base_name = 1;

  // An ordered list of substituted strings to apply for input context.
  //
  // These will be concatenated in the order they appear here if the conditions
  // apply based on the input request.
  repeated SubstitutedString input_context_substitutions = 3;

  // An ordered list of substituted strings to apply when the model is executed.
  //
  // These will be concatenated in the order they appear here if the conditions
  // apply based on the input request.
  //
  // It is expected that the resulting string here will be concatenated with the
  // resulting string for the input context if `should_ignore_input_context` is
  // not set on any of the used substitutions.
  repeated SubstitutedString execute_substitutions = 2;
}

message OnDeviceModelExecutionOutputConfig {
  // The proto type to use for the response metadata.
  optional string proto_type = 1;

  // The proto field to populate the output string with.
  optional ProtoField proto_field = 2;

  // Rules that result in redacting the output.
  optional RedactRules redact_rules = 3;
}
