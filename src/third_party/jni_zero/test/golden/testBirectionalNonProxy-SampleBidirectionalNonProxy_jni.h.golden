// Copyright 2014 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     third_party/jni_zero/jni_generator.py
// For
//     org/jni_zero/SampleBidirectionalNonProxy

#ifndef org_jni_zero_SampleBidirectionalNonProxy_JNI
#define org_jni_zero_SampleBidirectionalNonProxy_JNI

#include <jni.h>

#include "third_party/jni_zero/jni_export.h"
#include "third_party/jni_zero/jni_zero_helper.h"


// Step 1: Class Accessors.
#ifndef org_jni_1zero_SampleBidirectionalNonProxy_clazz_defined
#define org_jni_1zero_SampleBidirectionalNonProxy_clazz_defined
inline jclass org_jni_1zero_SampleBidirectionalNonProxy_clazz(JNIEnv* env) {
  static const char kClassName[] = "org/jni_zero/SampleBidirectionalNonProxy";
  static std::atomic<jclass> cached_class;
  return jni_zero::internal::LazyGetClass(env, kClassName, &cached_class);
}
#endif



namespace jni_zero {

// Forward declare used conversion functions to avoid a compiler warning that
// triggers if a conversion specialization exists within the including .cc file.

}  // namespace jni_zero


// Step 2: Constants (optional).


// Step 3: Method stubs.
static jint JNI_SampleBidirectionalNonProxy_Init(JNIEnv* env, const jni_zero::JavaParamRef<jobject>&
    jcaller);

JNI_BOUNDARY_EXPORT jint Java_org_jni_1zero_SampleBidirectionalNonProxy_nativeInit(
    JNIEnv* env,
    jobject jcaller) {
  return JNI_SampleBidirectionalNonProxy_Init(env, jni_zero::JavaParamRef<jobject>(env, jcaller));
}

static jint JNI_SampleBidirectionalNonProxy_Init(JNIEnv* env, const jni_zero::JavaParamRef<jobject>&
    jcaller);

JNI_BOUNDARY_EXPORT jint Java_org_jni_1zero_SampleBidirectionalNonProxy_nativeInit(
    JNIEnv* env,
    jobject jcaller) {
  return JNI_SampleBidirectionalNonProxy_Init(env, jni_zero::JavaParamRef<jobject>(env, jcaller));
}

JNI_BOUNDARY_EXPORT jint Java_org_jni_1zero_SampleBidirectionalNonProxy_nativeMethod(
    JNIEnv* env,
    jobject jcaller,
    jlong nativeTest,
    jint arg1) {
  Test* native = reinterpret_cast<Test*>(nativeTest);
  CHECK_NATIVE_PTR(env, jcaller, native, "Method", 0);
  return native->Method(env, jni_zero::JavaParamRef<jobject>(env, jcaller), arg1);
}

JNI_BOUNDARY_EXPORT jint Java_org_jni_1zero_SampleBidirectionalNonProxy_nativeStaticMethod(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeTest,
    jint arg1) {
  Test* native = reinterpret_cast<Test*>(nativeTest);
  CHECK_NATIVE_PTR(env, jcaller, native, "StaticMethod", 0);
  return native->StaticMethod(env, arg1);
}


static std::atomic<jmethodID> g_org_jni_1zero_SampleBidirectionalNonProxy_addStructB2(nullptr);
static void Java_SampleBidirectionalNonProxy_addStructB(JNIEnv* env, const
    jni_zero::JavaRef<jobject>& obj, const jni_zero::JavaRef<jobject>& caller,
    const jni_zero::JavaRef<jobject>& b) {
  jclass clazz = org_jni_1zero_SampleBidirectionalNonProxy_clazz(env);
  CHECK_CLAZZ(env, obj.obj(), clazz);

  jni_zero::internal::JniJavaCallContextChecked call_context;
  call_context.Init<
      jni_zero::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "addStructB",
          "(Lorg/jni_zero/SampleForTests;Lorg/jni_zero/SampleForTests$InnerStructB;)V",
          &g_org_jni_1zero_SampleBidirectionalNonProxy_addStructB2);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id, caller.obj(), b.obj());
}

static std::atomic<jmethodID> g_org_jni_1zero_SampleBidirectionalNonProxy_setBool2(nullptr);
static void Java_SampleBidirectionalNonProxy_setBool(JNIEnv* env, const jni_zero::JavaRef<jobject>&
    obj, const jni_zero::JavaRef<jobject>& b,
    const jni_zero::JavaRef<jobject>& i) {
  jclass clazz = org_jni_1zero_SampleBidirectionalNonProxy_clazz(env);
  CHECK_CLAZZ(env, obj.obj(), clazz);

  jni_zero::internal::JniJavaCallContextChecked call_context;
  call_context.Init<
      jni_zero::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "setBool",
          "(Lorg/jni_zero/Boolean;Ljava/lang/Integer;)V",
          &g_org_jni_1zero_SampleBidirectionalNonProxy_setBool2);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id, b.obj(), i.obj());
}

static std::atomic<jmethodID>
    g_org_jni_1zero_SampleBidirectionalNonProxy_setStringBuilder1(nullptr);
static void Java_SampleBidirectionalNonProxy_setStringBuilder(JNIEnv* env, const
    jni_zero::JavaRef<jobject>& obj, const jni_zero::JavaRef<jobject>& sb) {
  jclass clazz = org_jni_1zero_SampleBidirectionalNonProxy_clazz(env);
  CHECK_CLAZZ(env, obj.obj(), clazz);

  jni_zero::internal::JniJavaCallContextChecked call_context;
  call_context.Init<
      jni_zero::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "setStringBuilder",
          "(Ljava/lang/StringBuilder;)V",
          &g_org_jni_1zero_SampleBidirectionalNonProxy_setStringBuilder1);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id, sb.obj());
}

static std::atomic<jmethodID>
    g_org_jni_1zero_SampleBidirectionalNonProxy_testMethodWithNoParam0(nullptr);
static jdouble Java_SampleBidirectionalNonProxy_testMethodWithNoParam(JNIEnv* env) {
  jclass clazz = org_jni_1zero_SampleBidirectionalNonProxy_clazz(env);
  CHECK_CLAZZ(env, clazz, clazz, 0);

  jni_zero::internal::JniJavaCallContextChecked call_context;
  call_context.Init<
      jni_zero::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "testMethodWithNoParam",
          "()D",
          &g_org_jni_1zero_SampleBidirectionalNonProxy_testMethodWithNoParam0);

  jdouble ret =
      env->CallStaticDoubleMethod(clazz,
          call_context.base.method_id);
  return ret;
}

static std::atomic<jmethodID>
    g_org_jni_1zero_SampleBidirectionalNonProxy_testMethodWithParam1(nullptr);
static void Java_SampleBidirectionalNonProxy_testMethodWithParam(JNIEnv* env, const
    jni_zero::JavaRef<jobject>& obj, JniIntWrapper iParam) {
  jclass clazz = org_jni_1zero_SampleBidirectionalNonProxy_clazz(env);
  CHECK_CLAZZ(env, obj.obj(), clazz);

  jni_zero::internal::JniJavaCallContextChecked call_context;
  call_context.Init<
      jni_zero::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "testMethodWithParam",
          "(I)V",
          &g_org_jni_1zero_SampleBidirectionalNonProxy_testMethodWithParam1);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id, as_jint(iParam));
}

static std::atomic<jmethodID>
    g_org_jni_1zero_SampleBidirectionalNonProxy_testMethodWithParamAndReturn1(nullptr);
static jni_zero::ScopedJavaLocalRef<jstring>
    Java_SampleBidirectionalNonProxy_testMethodWithParamAndReturn(JNIEnv* env, const
    jni_zero::JavaRef<jobject>& obj, JniIntWrapper iParam) {
  jclass clazz = org_jni_1zero_SampleBidirectionalNonProxy_clazz(env);
  CHECK_CLAZZ(env, obj.obj(), clazz, nullptr);

  jni_zero::internal::JniJavaCallContextChecked call_context;
  call_context.Init<
      jni_zero::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "testMethodWithParamAndReturn",
          "(I)Ljava/lang/String;",
          &g_org_jni_1zero_SampleBidirectionalNonProxy_testMethodWithParamAndReturn1);

  jstring ret =
      static_cast<jstring>(env->CallObjectMethod(obj.obj(),
          call_context.base.method_id, as_jint(iParam)));
  return jni_zero::ScopedJavaLocalRef<jstring>(env, ret);
}

static std::atomic<jmethodID>
    g_org_jni_1zero_SampleBidirectionalNonProxy_testStaticMethodWithNoParam0(nullptr);
static jni_zero::ScopedJavaLocalRef<jstring>
    Java_SampleBidirectionalNonProxy_testStaticMethodWithNoParam(JNIEnv* env) {
  jclass clazz = org_jni_1zero_SampleBidirectionalNonProxy_clazz(env);
  CHECK_CLAZZ(env, clazz, clazz, nullptr);

  jni_zero::internal::JniJavaCallContextChecked call_context;
  call_context.Init<
      jni_zero::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "testStaticMethodWithNoParam",
          "()Ljava/lang/String;",
          &g_org_jni_1zero_SampleBidirectionalNonProxy_testStaticMethodWithNoParam0);

  jstring ret =
      static_cast<jstring>(env->CallStaticObjectMethod(clazz,
          call_context.base.method_id));
  return jni_zero::ScopedJavaLocalRef<jstring>(env, ret);
}

static std::atomic<jmethodID>
    g_org_jni_1zero_SampleBidirectionalNonProxy_testStaticMethodWithParam1(nullptr);
static jint Java_SampleBidirectionalNonProxy_testStaticMethodWithParam(JNIEnv* env, JniIntWrapper
    iParam) {
  jclass clazz = org_jni_1zero_SampleBidirectionalNonProxy_clazz(env);
  CHECK_CLAZZ(env, clazz, clazz, 0);

  jni_zero::internal::JniJavaCallContextChecked call_context;
  call_context.Init<
      jni_zero::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "testStaticMethodWithParam",
          "(I)I",
          &g_org_jni_1zero_SampleBidirectionalNonProxy_testStaticMethodWithParam1);

  jint ret =
      env->CallStaticIntMethod(clazz,
          call_context.base.method_id, as_jint(iParam));
  return ret;
}

#endif  // org_jni_zero_SampleBidirectionalNonProxy_JNI
