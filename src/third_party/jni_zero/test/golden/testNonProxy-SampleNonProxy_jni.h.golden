// Copyright 2014 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     third_party/jni_zero/jni_generator.py
// For
//     org/jni_zero/SampleNonProxy

#ifndef org_jni_zero_SampleNonProxy_JNI
#define org_jni_zero_SampleNonProxy_JNI

#include <jni.h>

#include "third_party/jni_zero/jni_export.h"
#include "third_party/jni_zero/jni_zero_helper.h"


// Step 1: Class Accessors.


namespace jni_zero {

// Forward declare used conversion functions to avoid a compiler warning that
// triggers if a conversion specialization exists within the including .cc file.

}  // namespace jni_zero


// Step 2: Constants (optional).


// Step 3: Method stubs.
static jlong JNI_SampleNonProxy_AddBookmark(JNIEnv* env, const jni_zero::JavaParamRef<jobject>&
    jcaller,
    jint nativeChromeBrowserProvider,
    const jni_zero::JavaParamRef<jstring>& url,
    const jni_zero::JavaParamRef<jstring>& title,
    jboolean isFolder,
    jlong parentId);

JNI_BOUNDARY_EXPORT jlong Java_org_jni_1zero_SampleNonProxy_nativeAddBookmark(
    JNIEnv* env,
    jobject jcaller,
    jint nativeChromeBrowserProvider,
    jstring url,
    jstring title,
    jboolean isFolder,
    jlong parentId) {
  return JNI_SampleNonProxy_AddBookmark(env, jni_zero::JavaParamRef<jobject>(env, jcaller),
      nativeChromeBrowserProvider, jni_zero::JavaParamRef<jstring>(env, url),
      jni_zero::JavaParamRef<jstring>(env, title), isFolder, parentId);
}

static jlong JNI_SampleNonProxy_AddBookmarkFromAPI(JNIEnv* env, const
    jni_zero::JavaParamRef<jobject>& jcaller,
    jint nativeChromeBrowserProvider,
    const jni_zero::JavaParamRef<jstring>& url,
    const jni_zero::JavaParamRef<jobject>& created,
    const jni_zero::JavaParamRef<jobject>& isBookmark,
    const jni_zero::JavaParamRef<jobject>& date,
    const jni_zero::JavaParamRef<jbyteArray>& favicon,
    const jni_zero::JavaParamRef<jstring>& title,
    const jni_zero::JavaParamRef<jobject>& visits);

JNI_BOUNDARY_EXPORT jlong Java_org_jni_1zero_SampleNonProxy_nativeAddBookmarkFromAPI(
    JNIEnv* env,
    jobject jcaller,
    jint nativeChromeBrowserProvider,
    jstring url,
    jobject created,
    jobject isBookmark,
    jobject date,
    jbyteArray favicon,
    jstring title,
    jobject visits) {
  return JNI_SampleNonProxy_AddBookmarkFromAPI(env, jni_zero::JavaParamRef<jobject>(env, jcaller),
      nativeChromeBrowserProvider, jni_zero::JavaParamRef<jstring>(env, url),
      jni_zero::JavaParamRef<jobject>(env, created), jni_zero::JavaParamRef<jobject>(env,
      isBookmark), jni_zero::JavaParamRef<jobject>(env, date),
      jni_zero::JavaParamRef<jbyteArray>(env, favicon), jni_zero::JavaParamRef<jstring>(env, title),
      jni_zero::JavaParamRef<jobject>(env, visits));
}

static void JNI_SampleNonProxy_CreateHistoricalTabFromState(JNIEnv* env, const
    jni_zero::JavaParamRef<jbyteArray>& state,
    jint tabIndex);

JNI_BOUNDARY_EXPORT void Java_org_jni_1zero_SampleNonProxy_nativeCreateHistoricalTabFromState(
    JNIEnv* env,
    jclass jcaller,
    jbyteArray state,
    jint tabIndex) {
  return JNI_SampleNonProxy_CreateHistoricalTabFromState(env,
      jni_zero::JavaParamRef<jbyteArray>(env, state), tabIndex);
}

static void JNI_SampleNonProxy_Destroy(JNIEnv* env, const jni_zero::JavaParamRef<jobject>& jcaller,
    jint nativeChromeBrowserProvider);

JNI_BOUNDARY_EXPORT void Java_org_jni_1zero_SampleNonProxy_nativeDestroy(
    JNIEnv* env,
    jobject jcaller,
    jint nativeChromeBrowserProvider) {
  return JNI_SampleNonProxy_Destroy(env, jni_zero::JavaParamRef<jobject>(env, jcaller),
      nativeChromeBrowserProvider);
}

static jint JNI_SampleNonProxy_FindAll(JNIEnv* env, const jni_zero::JavaParamRef<jobject>& jcaller,
    const jni_zero::JavaParamRef<jstring>& find);

JNI_BOUNDARY_EXPORT jint Java_org_jni_1zero_SampleNonProxy_nativeFindAll(
    JNIEnv* env,
    jobject jcaller,
    jstring find) {
  return JNI_SampleNonProxy_FindAll(env, jni_zero::JavaParamRef<jobject>(env, jcaller),
      jni_zero::JavaParamRef<jstring>(env, find));
}

static jni_zero::ScopedJavaLocalRef<jobjectArray> JNI_SampleNonProxy_GetAutofillProfileGUIDs(JNIEnv*
    env);

JNI_BOUNDARY_EXPORT jobjectArray Java_org_jni_1zero_SampleNonProxy_nativeGetAutofillProfileGUIDs(
    JNIEnv* env,
    jclass jcaller) {
  return JNI_SampleNonProxy_GetAutofillProfileGUIDs(env).Release();
}

static jni_zero::ScopedJavaLocalRef<jstring> JNI_SampleNonProxy_GetDomainAndRegistry(JNIEnv* env,
    const jni_zero::JavaParamRef<jstring>& url);

JNI_BOUNDARY_EXPORT jstring Java_org_jni_1zero_SampleNonProxy_nativeGetDomainAndRegistry(
    JNIEnv* env,
    jclass jcaller,
    jstring url) {
  return JNI_SampleNonProxy_GetDomainAndRegistry(env, jni_zero::JavaParamRef<jstring>(env,
      url)).Release();
}

static jni_zero::ScopedJavaLocalRef<jobject> JNI_SampleNonProxy_GetInnerClass(JNIEnv* env);

JNI_BOUNDARY_EXPORT jobject Java_org_jni_1zero_SampleNonProxy_nativeGetInnerClass(
    JNIEnv* env,
    jclass jcaller) {
  return JNI_SampleNonProxy_GetInnerClass(env).Release();
}

static jni_zero::ScopedJavaLocalRef<jbyteArray> JNI_SampleNonProxy_GetStateAsByteArray(JNIEnv* env,
    const jni_zero::JavaParamRef<jobject>& jcaller,
    const jni_zero::JavaParamRef<jobject>& view);

JNI_BOUNDARY_EXPORT jbyteArray Java_org_jni_1zero_SampleNonProxy_nativeGetStateAsByteArray(
    JNIEnv* env,
    jobject jcaller,
    jobject view) {
  return JNI_SampleNonProxy_GetStateAsByteArray(env, jni_zero::JavaParamRef<jobject>(env, jcaller),
      jni_zero::JavaParamRef<jobject>(env, view)).Release();
}

static void JNI_SampleNonProxy_GotOrientation(JNIEnv* env, const jni_zero::JavaParamRef<jobject>&
    jcaller,
    jint nativeDataFetcherImplAndroid,
    jdouble alpha,
    jdouble beta,
    jdouble gamma);

JNI_BOUNDARY_EXPORT void Java_org_jni_1zero_SampleNonProxy_nativeGotOrientation(
    JNIEnv* env,
    jobject jcaller,
    jint nativeDataFetcherImplAndroid,
    jdouble alpha,
    jdouble beta,
    jdouble gamma) {
  return JNI_SampleNonProxy_GotOrientation(env, jni_zero::JavaParamRef<jobject>(env, jcaller),
      nativeDataFetcherImplAndroid, alpha, beta, gamma);
}

static jint JNI_SampleNonProxy_Init(JNIEnv* env, const jni_zero::JavaParamRef<jobject>& jcaller);

JNI_BOUNDARY_EXPORT jint Java_org_jni_1zero_SampleNonProxy_nativeInit(
    JNIEnv* env,
    jobject jcaller) {
  return JNI_SampleNonProxy_Init(env, jni_zero::JavaParamRef<jobject>(env, jcaller));
}

static jint JNI_SampleNonProxy_Init(JNIEnv* env, const jni_zero::JavaParamRef<jobject>& jcaller);

JNI_BOUNDARY_EXPORT jint Java_org_jni_1zero_SampleNonProxy_nativeInit(
    JNIEnv* env,
    jobject jcaller) {
  return JNI_SampleNonProxy_Init(env, jni_zero::JavaParamRef<jobject>(env, jcaller));
}

static jni_zero::ScopedJavaLocalRef<jthrowable> JNI_SampleNonProxy_MessWithJavaException(JNIEnv*
    env, const jni_zero::JavaParamRef<jthrowable>& e);

JNI_BOUNDARY_EXPORT jthrowable Java_org_jni_1zero_SampleNonProxy_nativeMessWithJavaException(
    JNIEnv* env,
    jclass jcaller,
    jthrowable e) {
  return JNI_SampleNonProxy_MessWithJavaException(env, jni_zero::JavaParamRef<jthrowable>(env,
      e)).Release();
}

static jni_zero::ScopedJavaLocalRef<jobject> JNI_SampleNonProxy_QueryBitmap(JNIEnv* env, const
    jni_zero::JavaParamRef<jobject>& jcaller,
    jint nativeChromeBrowserProvider,
    const jni_zero::JavaParamRef<jobjectArray>& projection,
    const jni_zero::JavaParamRef<jstring>& selection,
    const jni_zero::JavaParamRef<jobjectArray>& selectionArgs,
    const jni_zero::JavaParamRef<jstring>& sortOrder);

JNI_BOUNDARY_EXPORT jobject Java_org_jni_1zero_SampleNonProxy_nativeQueryBitmap(
    JNIEnv* env,
    jobject jcaller,
    jint nativeChromeBrowserProvider,
    jobjectArray projection,
    jstring selection,
    jobjectArray selectionArgs,
    jstring sortOrder) {
  return JNI_SampleNonProxy_QueryBitmap(env, jni_zero::JavaParamRef<jobject>(env, jcaller),
      nativeChromeBrowserProvider, jni_zero::JavaParamRef<jobjectArray>(env, projection),
      jni_zero::JavaParamRef<jstring>(env, selection), jni_zero::JavaParamRef<jobjectArray>(env,
      selectionArgs), jni_zero::JavaParamRef<jstring>(env, sortOrder)).Release();
}

static void JNI_SampleNonProxy_SetRecognitionResults(JNIEnv* env, const
    jni_zero::JavaParamRef<jobject>& jcaller,
    jint sessionId,
    const jni_zero::JavaParamRef<jobjectArray>& results);

JNI_BOUNDARY_EXPORT void Java_org_jni_1zero_SampleNonProxy_nativeSetRecognitionResults(
    JNIEnv* env,
    jobject jcaller,
    jint sessionId,
    jobjectArray results) {
  return JNI_SampleNonProxy_SetRecognitionResults(env, jni_zero::JavaParamRef<jobject>(env,
      jcaller), sessionId, jni_zero::JavaParamRef<jobjectArray>(env, results));
}


#endif  // org_jni_zero_SampleNonProxy_JNI
