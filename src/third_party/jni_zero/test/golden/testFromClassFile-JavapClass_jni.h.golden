// Copyright 2014 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     third_party/jni_zero/jni_generator.py
// For
//     org/jni_zero/JavapClass

#ifndef org_jni_zero_JavapClass_JNI
#define org_jni_zero_JavapClass_JNI

#include <jni.h>

#include "third_party/jni_zero/jni_export.h"
#include "third_party/jni_zero/jni_zero_helper.h"


// Step 1: Class Accessors.
#ifndef org_jni_1zero_JavapClass_clazz_defined
#define org_jni_1zero_JavapClass_clazz_defined
inline jclass org_jni_1zero_JavapClass_clazz(JNIEnv* env) {
  static const char kClassName[] = "org/jni_zero/JavapClass";
  static std::atomic<jclass> cached_class;
  return jni_zero::internal::LazyGetClass(env, kClassName, &cached_class);
}
#endif



namespace jni_zero {

// Forward declare used conversion functions to avoid a compiler warning that
// triggers if a conversion specialization exists within the including .cc file.

}  // namespace jni_zero


// Step 2: Constants (optional).

namespace JNI_JavapClass {

enum Java_JavapClass_constant_fields {
  CONST_INT = 3,
};


}  // namespace JNI_JavapClass
// Step 3: Method stubs.
namespace JNI_JavapClass {


static std::atomic<jmethodID> g_org_jni_1zero_JavapClass_Constructor0(nullptr);
[[maybe_unused]] static jni_zero::ScopedJavaLocalRef<jobject> Java_JavapClass_Constructor(JNIEnv*
    env);
static jni_zero::ScopedJavaLocalRef<jobject> Java_JavapClass_Constructor(JNIEnv* env) {
  jclass clazz = org_jni_1zero_JavapClass_clazz(env);
  CHECK_CLAZZ(env, clazz, clazz, nullptr);

  jni_zero::internal::JniJavaCallContextChecked call_context;
  call_context.Init<
      jni_zero::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "<init>",
          "()V",
          &g_org_jni_1zero_JavapClass_Constructor0);

  jobject ret =
      env->NewObject(clazz,
          call_context.base.method_id);
  return jni_zero::ScopedJavaLocalRef<jobject>(env, ret);
}

static std::atomic<jmethodID> g_org_jni_1zero_JavapClass_Constructor__boolean1(nullptr);
[[maybe_unused]] static jni_zero::ScopedJavaLocalRef<jobject>
    Java_JavapClass_Constructor__boolean(JNIEnv* env, jboolean p0);
static jni_zero::ScopedJavaLocalRef<jobject> Java_JavapClass_Constructor__boolean(JNIEnv* env,
    jboolean p0) {
  jclass clazz = org_jni_1zero_JavapClass_clazz(env);
  CHECK_CLAZZ(env, clazz, clazz, nullptr);

  jni_zero::internal::JniJavaCallContextChecked call_context;
  call_context.Init<
      jni_zero::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "<init>",
          "(Z)V",
          &g_org_jni_1zero_JavapClass_Constructor__boolean1);

  jobject ret =
      env->NewObject(clazz,
          call_context.base.method_id, p0);
  return jni_zero::ScopedJavaLocalRef<jobject>(env, ret);
}

static std::atomic<jmethodID> g_org_jni_1zero_JavapClass_Constructor__int1(nullptr);
[[maybe_unused]] static jni_zero::ScopedJavaLocalRef<jobject>
    Java_JavapClass_Constructor__int(JNIEnv* env, JniIntWrapper p0);
static jni_zero::ScopedJavaLocalRef<jobject> Java_JavapClass_Constructor__int(JNIEnv* env,
    JniIntWrapper p0) {
  jclass clazz = org_jni_1zero_JavapClass_clazz(env);
  CHECK_CLAZZ(env, clazz, clazz, nullptr);

  jni_zero::internal::JniJavaCallContextChecked call_context;
  call_context.Init<
      jni_zero::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "<init>",
          "(I)V",
          &g_org_jni_1zero_JavapClass_Constructor__int1);

  jobject ret =
      env->NewObject(clazz,
          call_context.base.method_id, as_jint(p0));
  return jni_zero::ScopedJavaLocalRef<jobject>(env, ret);
}

static std::atomic<jmethodID> g_org_jni_1zero_JavapClass_intMethod1(nullptr);
[[maybe_unused]] static jint Java_JavapClass_intMethod(JNIEnv* env, const
    jni_zero::JavaRef<jobject>& obj, const jni_zero::JavaRef<jstring>& p0);
static jint Java_JavapClass_intMethod(JNIEnv* env, const jni_zero::JavaRef<jobject>& obj, const
    jni_zero::JavaRef<jstring>& p0) {
  jclass clazz = org_jni_1zero_JavapClass_clazz(env);
  CHECK_CLAZZ(env, obj.obj(), clazz, 0);

  jni_zero::internal::JniJavaCallContextChecked call_context;
  call_context.Init<
      jni_zero::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "intMethod",
          "(Ljava/lang/String;)I",
          &g_org_jni_1zero_JavapClass_intMethod1);

  jint ret =
      env->CallIntMethod(obj.obj(),
          call_context.base.method_id, p0.obj());
  return ret;
}

static std::atomic<jmethodID> g_org_jni_1zero_JavapClass_needsMangling__String1(nullptr);
[[maybe_unused]] static void Java_JavapClass_needsMangling__String(JNIEnv* env, const
    jni_zero::JavaRef<jstring>& p0);
static void Java_JavapClass_needsMangling__String(JNIEnv* env, const jni_zero::JavaRef<jstring>& p0)
    {
  jclass clazz = org_jni_1zero_JavapClass_clazz(env);
  CHECK_CLAZZ(env, clazz, clazz);

  jni_zero::internal::JniJavaCallContextChecked call_context;
  call_context.Init<
      jni_zero::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "needsMangling",
          "(Ljava/lang/String;)V",
          &g_org_jni_1zero_JavapClass_needsMangling__String1);

     env->CallStaticVoidMethod(clazz,
          call_context.base.method_id, p0.obj());
}

static std::atomic<jmethodID>
    g_org_jni_1zero_JavapClass_needsMangling__java_util_ArrayList1(nullptr);
[[maybe_unused]] static void Java_JavapClass_needsMangling__java_util_ArrayList(JNIEnv* env, const
    jni_zero::JavaRef<jobject>& p0);
static void Java_JavapClass_needsMangling__java_util_ArrayList(JNIEnv* env, const
    jni_zero::JavaRef<jobject>& p0) {
  jclass clazz = org_jni_1zero_JavapClass_clazz(env);
  CHECK_CLAZZ(env, clazz, clazz);

  jni_zero::internal::JniJavaCallContextChecked call_context;
  call_context.Init<
      jni_zero::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "needsMangling",
          "(Ljava/util/ArrayList;)V",
          &g_org_jni_1zero_JavapClass_needsMangling__java_util_ArrayList1);

     env->CallStaticVoidMethod(clazz,
          call_context.base.method_id, p0.obj());
}

static std::atomic<jmethodID> g_org_jni_1zero_JavapClass_needsMangling__int1(nullptr);
[[maybe_unused]] static void Java_JavapClass_needsMangling__int(JNIEnv* env, JniIntWrapper p0);
static void Java_JavapClass_needsMangling__int(JNIEnv* env, JniIntWrapper p0) {
  jclass clazz = org_jni_1zero_JavapClass_clazz(env);
  CHECK_CLAZZ(env, clazz, clazz);

  jni_zero::internal::JniJavaCallContextChecked call_context;
  call_context.Init<
      jni_zero::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "needsMangling",
          "(I)V",
          &g_org_jni_1zero_JavapClass_needsMangling__int1);

     env->CallStaticVoidMethod(clazz,
          call_context.base.method_id, as_jint(p0));
}

static std::atomic<jmethodID> g_org_jni_1zero_JavapClass_objTest2(nullptr);
[[maybe_unused]] static jni_zero::ScopedJavaLocalRef<jclass> Java_JavapClass_objTest(JNIEnv* env,
    const jni_zero::JavaRef<jobject>& obj, const jni_zero::JavaRef<jobject>& p0,
    const jni_zero::JavaRef<jobjectArray>& p1);
static jni_zero::ScopedJavaLocalRef<jclass> Java_JavapClass_objTest(JNIEnv* env, const
    jni_zero::JavaRef<jobject>& obj, const jni_zero::JavaRef<jobject>& p0,
    const jni_zero::JavaRef<jobjectArray>& p1) {
  jclass clazz = org_jni_1zero_JavapClass_clazz(env);
  CHECK_CLAZZ(env, obj.obj(), clazz, nullptr);

  jni_zero::internal::JniJavaCallContextChecked call_context;
  call_context.Init<
      jni_zero::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "objTest",
          "(Ljava/lang/Object;[Ljava/lang/Runnable;)Ljava/lang/Class;",
          &g_org_jni_1zero_JavapClass_objTest2);

  jclass ret =
      static_cast<jclass>(env->CallObjectMethod(obj.obj(),
          call_context.base.method_id, p0.obj(), p1.obj()));
  return jni_zero::ScopedJavaLocalRef<jclass>(env, ret);
}

static std::atomic<jmethodID> g_org_jni_1zero_JavapClass_staticIntMethod2(nullptr);
[[maybe_unused]] static jint Java_JavapClass_staticIntMethod(JNIEnv* env, const
    jni_zero::JavaRef<jstring>& p0,
    const jni_zero::JavaRef<jobject>& p1);
static jint Java_JavapClass_staticIntMethod(JNIEnv* env, const jni_zero::JavaRef<jstring>& p0,
    const jni_zero::JavaRef<jobject>& p1) {
  jclass clazz = org_jni_1zero_JavapClass_clazz(env);
  CHECK_CLAZZ(env, clazz, clazz, 0);

  jni_zero::internal::JniJavaCallContextChecked call_context;
  call_context.Init<
      jni_zero::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "staticIntMethod",
          "(Ljava/lang/String;Lorg/jni_zero/JavapClass;)I",
          &g_org_jni_1zero_JavapClass_staticIntMethod2);

  jint ret =
      env->CallStaticIntMethod(clazz,
          call_context.base.method_id, p0.obj(), p1.obj());
  return ret;
}

static std::atomic<jmethodID> g_org_jni_1zero_JavapClass_staticIntMethod1(nullptr);
[[maybe_unused]] static jni_zero::ScopedJavaLocalRef<jobjectArray>
    Java_JavapClass_staticIntMethod(JNIEnv* env, const jni_zero::JavaRef<jstring>& p0);
static jni_zero::ScopedJavaLocalRef<jobjectArray> Java_JavapClass_staticIntMethod(JNIEnv* env, const
    jni_zero::JavaRef<jstring>& p0) {
  jclass clazz = org_jni_1zero_JavapClass_clazz(env);
  CHECK_CLAZZ(env, clazz, clazz, nullptr);

  jni_zero::internal::JniJavaCallContextChecked call_context;
  call_context.Init<
      jni_zero::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "staticIntMethod",
          "(Ljava/lang/String;)[[I",
          &g_org_jni_1zero_JavapClass_staticIntMethod1);

  jobjectArray ret =
      static_cast<jobjectArray>(env->CallStaticObjectMethod(clazz,
          call_context.base.method_id, p0.obj()));
  return jni_zero::ScopedJavaLocalRef<jobjectArray>(env, ret);
}

}  // namespace JNI_JavapClass

#endif  // org_jni_zero_JavapClass_JNI
