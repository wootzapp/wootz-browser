// Copyright 2017 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     third_party/jni_zero/jni_registration_generator.py
// Please do not change its content.

#ifndef TEMP_DIR_HEADER_
#define TEMP_DIR_HEADER_

#include <jni.h>

#include <iterator>

#include "third_party/jni_zero/jni_export.h"
#include "third_party/jni_zero/jni_zero_internal.h"
#include "third_party/jni_zero/jni_zero.h"


// Step 1: Class Accessors.


// Step 2: Forward declarations (methods).

JNI_BOUNDARY_EXPORT jobject Java_J_N_M_00024zHpGqF(
    JNIEnv* env,
    jclass jcaller,
    jobject sample);
JNI_BOUNDARY_EXPORT void Java_J_N_MFxD5gzE(
    JNIEnv* env,
    jclass jcaller);
JNI_BOUNDARY_EXPORT jboolean Java_J_N_Mts1shVs(
    JNIEnv* env,
    jclass jcaller);
JNI_BOUNDARY_EXPORT jclass Java_J_N_MHC2XaYW(
    JNIEnv* env,
    jclass jcaller);
JNI_BOUNDARY_EXPORT jobjectArray Java_J_N_MPl4TY3m(
    JNIEnv* env,
    jclass jcaller);
JNI_BOUNDARY_EXPORT jobjectArray Java_J_N_MbcaLfAT(
    JNIEnv* env,
    jclass jcaller,
    jclass __arrayClazz);
JNI_BOUNDARY_EXPORT jintArray Java_J_N_MrxydxEH(
    JNIEnv* env,
    jclass jcaller);
JNI_BOUNDARY_EXPORT jstring Java_J_N_MaQxW6t6(
    JNIEnv* env,
    jclass jcaller);
JNI_BOUNDARY_EXPORT jobjectArray Java_J_N_M8wEusw1(
    JNIEnv* env,
    jclass jcaller);
JNI_BOUNDARY_EXPORT jobject Java_J_N_MpVxNDSC(
    JNIEnv* env,
    jclass jcaller);
JNI_BOUNDARY_EXPORT jobjectArray Java_J_N_M7jE3q3_00024(
    JNIEnv* env,
    jclass jcaller);
JNI_BOUNDARY_EXPORT jstring Java_J_N_MHY_1jLL4(
    JNIEnv* env,
    jclass jcaller);
JNI_BOUNDARY_EXPORT jobjectArray Java_J_N_MF8oFFVb(
    JNIEnv* env,
    jclass jcaller);
JNI_BOUNDARY_EXPORT jobject Java_J_N_Mq7V3oMs(
    JNIEnv* env,
    jclass jcaller);
JNI_BOUNDARY_EXPORT jobjectArray Java_J_N_MRdQpdMz(
    JNIEnv* env,
    jclass jcaller);
JNI_BOUNDARY_EXPORT jthrowable Java_J_N_M6SdcGCv(
    JNIEnv* env,
    jclass jcaller);
JNI_BOUNDARY_EXPORT jobjectArray Java_J_N_Mnt3ot24(
    JNIEnv* env,
    jclass jcaller);
JNI_BOUNDARY_EXPORT jstring Java_J_N_Mepwik1_1(
    JNIEnv* env,
    jclass jcaller,
    jstring stringToReverse);
JNI_BOUNDARY_EXPORT jobjectArray Java_J_N_M5Naw4MO(
    JNIEnv* env,
    jclass jcaller,
    jobjectArray strs);
JNI_BOUNDARY_EXPORT jobjectArray Java_J_N_M3btId9A(
    JNIEnv* env,
    jclass jcaller,
    jobjectArray strs);
JNI_BOUNDARY_EXPORT jintArray Java_J_N_M3dkhKZM(
    JNIEnv* env,
    jclass jcaller,
    jint zint,
    jintArray ints,
    jlong zlong,
    jlongArray longs,
    jshort zshort,
    jshortArray shorts,
    jchar zchar,
    jcharArray chars,
    jbyte zbyte,
    jbyteArray bytes,
    jdouble zdouble,
    jdoubleArray doubles,
    jfloat zfloat,
    jfloatArray floats,
    jboolean zbool,
    jbooleanArray bools);
JNI_BOUNDARY_EXPORT void Java_J_N_MomokuWo(
    JNIEnv* env,
    jclass jcaller,
    jclass clazz,
    jobjectArray classes,
    jthrowable throwable,
    jobjectArray throwables,
    jstring string,
    jobjectArray strings,
    jstring convertedString,
    jobjectArray convertedStrings,
    jstring optionalString,
    jobject tStruct,
    jobjectArray structs,
    jobject obj,
    jobject convertedObj,
    jobjectArray objects,
    jobjectArray convertedObjects);


JNI_BOUNDARY_EXPORT void Java_J_N_resolve_1for_1void_1LLATTARRARRAROOAOOOAOA(
    JNIEnv* env,
    jclass jcaller,
    jint switch_num, jclass class_param1, jobjectArray class_array_param1, jthrowable throwable_param1, jobjectArray throwable_array_param1, jstring string_param1, jobjectArray string_array_param1, jstring string_param2, jobjectArray string_array_param2, jstring string_param3, jobject object_param1, jobjectArray object_array_param1, jobject object_param2, jobject object_param3, jobjectArray object_array_param2, jobjectArray object_array_param3) {
        switch (switch_num) {
          
          case 0:
            return Java_J_N_MomokuWo(env, jcaller, class_param1, class_array_param1, throwable_param1, throwable_array_param1, string_param1, string_array_param1, string_param2, string_array_param2, string_param3, object_param1, object_array_param1, object_param2, object_param3, object_array_param2, object_array_param3);
          
          default:
            JNI_ZERO_ELOG("J_N_resolve_1for_1void_1LLATTARRARRAROOAOOOAOA was called with an invalid switch number: %d", switch_num);
            JNI_ZERO_DCHECK(false);
            return;
        }
}
JNI_BOUNDARY_EXPORT jintArray Java_J_N_resolve_1for_1int_1array_1IIAJJASSACCABBADDAFFAZZA(
    JNIEnv* env,
    jclass jcaller,
    jint switch_num, jint int_param1, jintArray int_array_param1, jlong long_param1, jlongArray long_array_param1, jshort short_param1, jshortArray short_array_param1, jchar char_param1, jcharArray char_array_param1, jbyte byte_param1, jbyteArray byte_array_param1, jdouble double_param1, jdoubleArray double_array_param1, jfloat float_param1, jfloatArray float_array_param1, jboolean boolean_param1, jbooleanArray boolean_array_param1) {
        switch (switch_num) {
          
          case 0:
            return Java_J_N_M3dkhKZM(env, jcaller, int_param1, int_array_param1, long_param1, long_array_param1, short_param1, short_array_param1, char_param1, char_array_param1, byte_param1, byte_array_param1, double_param1, double_array_param1, float_param1, float_array_param1, boolean_param1, boolean_array_param1);
          
          default:
            JNI_ZERO_ELOG("J_N_resolve_1for_1int_1array_1IIAJJASSACCABBADDAFFAZZA was called with an invalid switch number: %d", switch_num);
            JNI_ZERO_DCHECK(false);
            return {};
        }
}
JNI_BOUNDARY_EXPORT jclass Java_J_N_resolve_1for_1class(
    JNIEnv* env,
    jclass jcaller,
    jint switch_num) {
        switch (switch_num) {
          
          case 0:
            return Java_J_N_MHC2XaYW(env, jcaller);
          
          default:
            JNI_ZERO_ELOG("J_N_resolve_1for_1class was called with an invalid switch number: %d", switch_num);
            JNI_ZERO_DCHECK(false);
            return {};
        }
}
JNI_BOUNDARY_EXPORT jobject Java_J_N_resolve_1for_1object(
    JNIEnv* env,
    jclass jcaller,
    jint switch_num) {
        switch (switch_num) {
          
          case 0:
            return Java_J_N_MpVxNDSC(env, jcaller);
          
          case 1:
            return Java_J_N_Mq7V3oMs(env, jcaller);
          
          default:
            JNI_ZERO_ELOG("J_N_resolve_1for_1object was called with an invalid switch number: %d", switch_num);
            JNI_ZERO_DCHECK(false);
            return {};
        }
}
JNI_BOUNDARY_EXPORT jstring Java_J_N_resolve_1for_1string(
    JNIEnv* env,
    jclass jcaller,
    jint switch_num) {
        switch (switch_num) {
          
          case 0:
            return Java_J_N_MaQxW6t6(env, jcaller);
          
          case 1:
            return Java_J_N_MHY_1jLL4(env, jcaller);
          
          default:
            JNI_ZERO_ELOG("J_N_resolve_1for_1string was called with an invalid switch number: %d", switch_num);
            JNI_ZERO_DCHECK(false);
            return {};
        }
}
JNI_BOUNDARY_EXPORT jstring Java_J_N_resolve_1for_1string_1R(
    JNIEnv* env,
    jclass jcaller,
    jint switch_num, jstring string_param1) {
        switch (switch_num) {
          
          case 0:
            return Java_J_N_Mepwik1_1(env, jcaller, string_param1);
          
          default:
            JNI_ZERO_ELOG("J_N_resolve_1for_1string_1R was called with an invalid switch number: %d", switch_num);
            JNI_ZERO_DCHECK(false);
            return {};
        }
}
JNI_BOUNDARY_EXPORT jthrowable Java_J_N_resolve_1for_1throwable(
    JNIEnv* env,
    jclass jcaller,
    jint switch_num) {
        switch (switch_num) {
          
          case 0:
            return Java_J_N_M6SdcGCv(env, jcaller);
          
          default:
            JNI_ZERO_ELOG("J_N_resolve_1for_1throwable was called with an invalid switch number: %d", switch_num);
            JNI_ZERO_DCHECK(false);
            return {};
        }
}
JNI_BOUNDARY_EXPORT jobjectArray Java_J_N_resolve_1for_1class_1array(
    JNIEnv* env,
    jclass jcaller,
    jint switch_num) {
        switch (switch_num) {
          
          case 0:
            return Java_J_N_MPl4TY3m(env, jcaller);
          
          default:
            JNI_ZERO_ELOG("J_N_resolve_1for_1class_1array was called with an invalid switch number: %d", switch_num);
            JNI_ZERO_DCHECK(false);
            return {};
        }
}
JNI_BOUNDARY_EXPORT jobjectArray Java_J_N_resolve_1for_1object_1array(
    JNIEnv* env,
    jclass jcaller,
    jint switch_num) {
        switch (switch_num) {
          
          case 0:
            return Java_J_N_M7jE3q3_00024(env, jcaller);
          
          case 1:
            return Java_J_N_MRdQpdMz(env, jcaller);
          
          default:
            JNI_ZERO_ELOG("J_N_resolve_1for_1object_1array was called with an invalid switch number: %d", switch_num);
            JNI_ZERO_DCHECK(false);
            return {};
        }
}
JNI_BOUNDARY_EXPORT jobjectArray Java_J_N_resolve_1for_1object_1array_1L(
    JNIEnv* env,
    jclass jcaller,
    jint switch_num, jclass class_param1) {
        switch (switch_num) {
          
          case 0:
            return Java_J_N_MbcaLfAT(env, jcaller, class_param1);
          
          default:
            JNI_ZERO_ELOG("J_N_resolve_1for_1object_1array_1L was called with an invalid switch number: %d", switch_num);
            JNI_ZERO_DCHECK(false);
            return {};
        }
}
JNI_BOUNDARY_EXPORT jobjectArray Java_J_N_resolve_1for_1object_1array_1OA(
    JNIEnv* env,
    jclass jcaller,
    jint switch_num, jobjectArray object_array_param1) {
        switch (switch_num) {
          
          case 0:
            return Java_J_N_M5Naw4MO(env, jcaller, object_array_param1);
          
          default:
            JNI_ZERO_ELOG("J_N_resolve_1for_1object_1array_1OA was called with an invalid switch number: %d", switch_num);
            JNI_ZERO_DCHECK(false);
            return {};
        }
}
JNI_BOUNDARY_EXPORT jobjectArray Java_J_N_resolve_1for_1string_1array(
    JNIEnv* env,
    jclass jcaller,
    jint switch_num) {
        switch (switch_num) {
          
          case 0:
            return Java_J_N_M8wEusw1(env, jcaller);
          
          case 1:
            return Java_J_N_MF8oFFVb(env, jcaller);
          
          default:
            JNI_ZERO_ELOG("J_N_resolve_1for_1string_1array was called with an invalid switch number: %d", switch_num);
            JNI_ZERO_DCHECK(false);
            return {};
        }
}
JNI_BOUNDARY_EXPORT jobjectArray Java_J_N_resolve_1for_1string_1array_1RA(
    JNIEnv* env,
    jclass jcaller,
    jint switch_num, jobjectArray string_array_param1) {
        switch (switch_num) {
          
          case 0:
            return Java_J_N_M3btId9A(env, jcaller, string_array_param1);
          
          default:
            JNI_ZERO_ELOG("J_N_resolve_1for_1string_1array_1RA was called with an invalid switch number: %d", switch_num);
            JNI_ZERO_DCHECK(false);
            return {};
        }
}
JNI_BOUNDARY_EXPORT jobjectArray Java_J_N_resolve_1for_1throwable_1array(
    JNIEnv* env,
    jclass jcaller,
    jint switch_num) {
        switch (switch_num) {
          
          case 0:
            return Java_J_N_Mnt3ot24(env, jcaller);
          
          default:
            JNI_ZERO_ELOG("J_N_resolve_1for_1throwable_1array was called with an invalid switch number: %d", switch_num);
            JNI_ZERO_DCHECK(false);
            return {};
        }
}
JNI_BOUNDARY_EXPORT jboolean Java_J_N_resolve_1for_1boolean(
    JNIEnv* env,
    jclass jcaller,
    jint switch_num) {
        switch (switch_num) {
          
          case 0:
            return Java_J_N_Mts1shVs(env, jcaller);
          
          default:
            JNI_ZERO_ELOG("J_N_resolve_1for_1boolean was called with an invalid switch number: %d", switch_num);
            JNI_ZERO_DCHECK(false);
            return {};
        }
}
JNI_BOUNDARY_EXPORT void Java_J_N_resolve_1for_1void(
    JNIEnv* env,
    jclass jcaller,
    jint switch_num) {
        switch (switch_num) {
          
          case 0:
            return Java_J_N_MFxD5gzE(env, jcaller);
          
          default:
            JNI_ZERO_ELOG("J_N_resolve_1for_1void was called with an invalid switch number: %d", switch_num);
            JNI_ZERO_DCHECK(false);
            return;
        }
}
JNI_BOUNDARY_EXPORT jintArray Java_J_N_resolve_1for_1int_1array(
    JNIEnv* env,
    jclass jcaller,
    jint switch_num) {
        switch (switch_num) {
          
          case 0:
            return Java_J_N_MrxydxEH(env, jcaller);
          
          default:
            JNI_ZERO_ELOG("J_N_resolve_1for_1int_1array was called with an invalid switch number: %d", switch_num);
            JNI_ZERO_DCHECK(false);
            return {};
        }
}
JNI_BOUNDARY_EXPORT jobject Java_J_N_resolve_1for_1object_1O(
    JNIEnv* env,
    jclass jcaller,
    jint switch_num, jobject object_param1) {
        switch (switch_num) {
          
          case 0:
            return Java_J_N_M_00024zHpGqF(env, jcaller, object_param1);
          
          default:
            JNI_ZERO_ELOG("J_N_resolve_1for_1object_1O was called with an invalid switch number: %d", switch_num);
            JNI_ZERO_DCHECK(false);
            return {};
        }
}

#endif  // TEMP_DIR_HEADER_
