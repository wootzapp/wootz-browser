// Copyright 2021 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// https://fedidcg.github.io/FedCM/#dictdef-identityproviderconfig

dictionary IdentityProviderConfig {
  // URL for the Identity Provider Configuration.
  // Not marked as required to allow implementation of registered providers.
  // See crbug.com/1406698.
  USVString configURL;
  // Not marked as required to allow implementation of digital credentials.
  // See crbug.com/1416939.
  USVString clientId;
};

dictionary IdentityProviderRequestOptions : IdentityProviderConfig {
  USVString nonce;
  DOMString loginHint;
  [RuntimeEnabled=FedCmDomainHint] DOMString domainHint;
  [RuntimeEnabled=FedCmAuthz] sequence<USVString> scope;
  [RuntimeEnabled=FedCmAuthz] sequence<USVString> responseType;
  [RuntimeEnabled=FedCmAuthz] record<USVString, USVString> params;
};

// extends the IdentityProviderConfig with DigitalCredential-specific attributes
partial dictionary IdentityProviderConfig  {
  [RuntimeEnabled=WebIdentityDigitalCredentials] DigitalCredentialProvider holder;
};

dictionary DigitalCredentialProvider  {
  // A query selector that is used by wallets to filter credentials for
  // selection.
  DigitalCredentialSelector selector;

  // An opaque map of parameters sent to wallets upon selection.
  record<USVString, USVString> params;

  // Alternatively, a provider can also be specified by a protocol and a
  // request.
  DOMString protocol;
  DOMString request;
  DOMString publicKey;
};

dictionary DigitalCredentialSelector {
  // A list of desired formats for the credential.
  sequence<USVString> format;

  // The top-level type of document (e.g. a passport, driver's license, etc).
  DOMString doctype;

  // The amount of time the verifier intends to retain the credential.
  // Omitting `retention` implies that the identity information will not be stored.
  // How long the verifier intends to retent the credential.
  DigitalCredentialStorageDuration retention;

  // The requested fields.
  sequence<(DigitalCredentialFieldRequirement or DOMString)> fields;
};

dictionary DigitalCredentialFieldRequirement {
  required DOMString name;
  DOMString equals;
};

dictionary DigitalCredentialStorageDuration {
  // Exactly one of the following must be provided.
  boolean forever;
  long days;
};
