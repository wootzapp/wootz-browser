This is a testharness.js-based test.
Found 28 FAIL, 0 TIMEOUT, 0 NOTRUN.
[FAIL] Sanitizer.sanitizeFor with config: test html without close tag with removeElements list ['div']
  assert_true: Node[<p>bla</p>] == Node[<div>test</div><p>bla</p>] expected true got false
[FAIL] Sanitizer.sanitizeFor with config: allow custom elements
  assert_true: Node[testbla] == Node[bla] expected true got false
[FAIL] Sanitizer.sanitizeFor with config: allow custom elements with allow elements
  assert_true: Node[<custom-element>test</custom-element>bla] == Node[bla] expected true got false
[FAIL] Sanitizer.sanitizeFor with config: removeElements list ["test-element", "i"]}
  assert_true: Node[<div>balabala</div>] == Node[<div>balabala<i>test</i></div>] expected true got false
[FAIL] Sanitizer.sanitizeFor with config: removeElements list ["dl", "p"]}
  assert_true: Node[<div>balabala<i>i</i></div>] == Node[<div>balabala<i>i</i><p>t</p></div>] expected true got false
[FAIL] Sanitizer.sanitizeFor with config: elements list ["p"]
  assert_true: Node[testptt<p>div</p>] == Node[<div>test<div>p</div>tt<p>div</p></div>] expected true got false
[FAIL] Sanitizer.sanitizeFor with config: elements list has no influence to removeElements
  assert_true: Node[bla] == Node[<div>test</div><p>bla</p>] expected true got false
[FAIL] Sanitizer.sanitizeFor with config: removeAttributes list ["id"] with id attribute
  assert_true: Node[<p>Click.</p>] == Node[<p id="test">Click.</p>] expected true got false
[FAIL] Sanitizer.sanitizeFor with config: elements list with <p> attributes: ["title"] and div attributes: ["id"] lists
  assert_true: Node[<p title="p">P</p><div id="div">DIV</div>] == Node[<p id="p" title="p">P</p><div id="div" title="div">DIV</div>] expected true got false
[FAIL] Sanitizer.sanitizeFor with config: elements list with <p> removeAttributes: ["title"]  and div removeAttributes: ["id"] lists
  assert_true: Node[<p id="p">P</p><div title="div">DIV</div>] == Node[<p id="p" title="p">P</p><div id="div" title="div">DIV</div>] expected true got false
[FAIL] Sanitizer.sanitizeFor with config: elements list with <div> attributes: ["id"] and removeAttributes: ["id"] lists
  assert_true: Node[<div>DIV</div>] == Node[<div id="div" title="div">DIV</div>] expected true got false
[FAIL] Sanitizer.sanitizeFor with config: elements list with <div> attributes: ["id", "title"] does not override empty attributes: [] list
  assert_true: Node[<div>DIV</div>] == Node[<div id="div" title="div">DIV</div>] expected true got false
[FAIL] Sanitizer.sanitizeFor with config: elements list with <div> attributes: ["id", "title"] does not override removeAttributes: ["id", "title"] list
  assert_true: Node[<div>DIV</div>] == Node[<div id="div" title="div">DIV</div>] expected true got false
[FAIL] Sanitizer.sanitizeFor with config: elements list with <div> removeAttributes: ["id", "title"] is effective even with attributes: ["id", "title"] list
  assert_true: Node[<div>DIV</div>] == Node[<div id="div" title="div">DIV</div>] expected true got false
[FAIL] Sanitizer.sanitizeFor with config: attributes list has no influence to removeAttributes list
  assert_true: Node[<p>Click.</p>] == Node[<p style="color: black">Click.</p>] expected true got false
[FAIL] Sanitizer.sanitizeFor with config: Template element
  assert_true: Node[<template><div>hello</div></template>] == Node[] expected true got false
[FAIL] Sanitizer.sanitizeFor with config: HTML with comments; comments
  assert_true: Node[<p>Some text</p><!-- 1 --><!-- 2 --><p>Some more text</p>] == Node[<p>Some text</p><p>Some more text</p>] expected true got false
[FAIL] Sanitizer.sanitizeFor with config: HTML with comments deeper in the tree, comments
  assert_true: Node[<p>comment<!-- hello -->in<!-- </p> -->text</p>] == Node[<p>commentintext</p>] expected true got false
[FAIL] Sanitizer.sanitizeFor with config: removeElements list ["i", "dl"]}
  assert_true: Node[<div>balabala</div>] == Node[<div>balabala<dl>test</dl></div>] expected true got false
[FAIL] Sanitizer.sanitizeFor with config: removeElements list ["i", "dl"]} with uppercase HTML
  assert_true: Node[<div>balabala</div>] == Node[<div>balabala<dl>test</dl></div>] expected true got false
[FAIL] Sanitizer.sanitizeFor with config: removeAttributes list ["id"] with ID attribute
  assert_true: Node[<p>Click.</p>] == Node[<p id="test">Click.</p>] expected true got false
[FAIL] Sanitizer.sanitizeFor with config: removeElements with unknown elements and without unknownMarkup
  assert_true: Node[<div>balabala</div>] == Node[<div>balabala<i>test</i></div>] expected true got false
[FAIL] Sanitizer.sanitizeFor with config: replaceWithChildrenElements with unknown elements and without unknownMarkup
  assert_true: Node[<div>balabalatest</div>] == Node[<div>balabala<i>test</i></div>] expected true got false
[FAIL] Sanitizer.sanitizeFor with config: elements with unknown elements and without unknownMarkup
  assert_true: Node[testptt<p>div</p>] == Node[<div>test<div>p</div>tt<p>div</p></div>] expected true got false
[FAIL] Sanitizer.sanitizeFor with config: removeElements with unknown elements and with unknownMarkup
  assert_true: Node[<div>balabala</div>] == Node[<div>balabala<i>test</i></div>] expected true got false
[FAIL] Sanitizer.sanitizeFor with config: replaceWithChildrenElements with unknown elements and with unknownMarkup
  assert_true: Node[<div>balabalatest</div>t] == Node[<div>balabala<i>test</i></div>] expected true got false
[FAIL] Sanitizer.sanitizeFor with config: elements with unknown elements and with unknownMarkup
  assert_true: Node[testptt<p>div</p><test>test</test>] == Node[<div>test<div>p</div>tt<p>div</p></div>] expected true got false
[FAIL] Sanitizer.sanitizeFor with config: attributes: unknown attributes and with unknownMarkup
  assert_true: Node[<div hello="1" world="2"><b hello="3" world="4"></b></div>] == Node[<div><b></b></div>] expected true got false
Harness: the test ran to completion.

