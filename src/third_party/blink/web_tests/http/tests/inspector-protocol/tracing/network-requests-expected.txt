Tests the data of Network request lifecycle trace events
Recording started
Tracing complete
Object: {
	args: {
		data: {
			requestId: string
		}
	}
	cat: string
	name: ResourceWillSendRequest
	ph: string
	pid: number
	s: string
	tid: number
	ts: number
}
Object: {
	args: {
		data: {
			fetchPriorityHint: auto
			frame: string
			priority: string
			requestId: string
			requestMethod: string
			resourceType: Document
			url: string
		}
	}
	cat: string
	name: ResourceSendRequest
	ph: string
	pid: number
	s: string
	tid: number
	ts: number
}
Object: {
	args: {
		data: {
			connectionId: number
			connectionReused: boolean
			encodedDataLength: number
			frame: string
			fromCache: boolean
			fromServiceWorker: boolean
			headers: [
				{
					name: Date
					value: string
				}
				{
					name: Last-Modified
					value: string
				}
				{
					name: Server
					value: string
				}
				{
					name: ETag
					value: string
				}
				{
					name: Content-Type
					value: string
				}
				{
					name: Connection
					value: string
				}
				{
					name: Accept-Ranges
					value: string
				}
				{
					name: Keep-Alive
					value: string
				}
				{
					name: Content-Length
					value: string
				}
			]
			mimeType: string
			protocol: http/1.1
			requestId: string
			responseTime: number
			statusCode: number
			timing: {
				connectEnd: number
				connectStart: number
				dnsEnd: number
				dnsStart: number
				proxyEnd: number
				proxyStart: number
				pushEnd: number
				pushStart: number
				receiveHeadersEnd: number
				receiveHeadersStart: number
				requestTime: number
				sendEnd: number
				sendStart: number
				sslEnd: number
				sslStart: number
				workerReady: number
				workerStart: number
			}
		}
	}
	cat: string
	name: ResourceReceiveResponse
	ph: string
	pid: number
	s: string
	tid: number
	ts: number
}
Object: {
	args: {
		data: {
			encodedDataLength: number
			frame: string
			requestId: string
		}
	}
	cat: string
	name: ResourceReceivedData
	ph: string
	pid: number
	s: string
	tid: number
	ts: number
}
Object: {
	args: {
		data: {
			decodedBodyLength: number
			didFail: boolean
			encodedDataLength: number
			finishTime: number
			requestId: string
		}
	}
	cat: string
	name: ResourceFinish
	ph: string
	pid: number
	s: string
	tid: number
	ts: number
}
Object: {
	args: {
		data: {
			fetchPriorityHint: auto
			frame: string
			initiator: {
				columnNumber: number
				fetchType: script
				lineNumber: number
				type: string
				url: string
			}
			isLinkPreload: false
			priority: string
			renderBlocking: string
			requestId: string
			requestMethod: string
			resourceType: Script
			url: string
		}
	}
	cat: string
	name: ResourceSendRequest
	ph: string
	pid: number
	s: string
	tid: number
	ts: number
}
Object: {
	args: {
		data: {
			connectionId: number
			connectionReused: boolean
			encodedDataLength: number
			frame: string
			fromCache: boolean
			fromServiceWorker: boolean
			headers: [
				{
					name: Date
					value: string
				}
				{
					name: Server
					value: string
				}
				{
					name: Connection
					value: string
				}
				{
					name: Keep-Alive
					value: string
				}
				{
					name: Content-Length
					value: string
				}
				{
					name: Content-Type
					value: string
				}
			]
			mimeType: string
			protocol: http/1.1
			requestId: string
			responseTime: number
			statusCode: number
			timing: {
				connectEnd: number
				connectStart: number
				dnsEnd: number
				dnsStart: number
				proxyEnd: number
				proxyStart: number
				pushEnd: number
				pushStart: number
				receiveHeadersEnd: number
				receiveHeadersStart: number
				requestTime: number
				sendEnd: number
				sendStart: number
				sslEnd: number
				sslStart: number
				workerReady: number
				workerStart: number
			}
		}
	}
	cat: string
	name: ResourceReceiveResponse
	ph: string
	pid: number
	s: string
	tid: number
	ts: number
}
Object: {
	args: {
		data: {
			decodedBodyLength: number
			didFail: boolean
			encodedDataLength: number
			requestId: string
		}
	}
	cat: string
	name: ResourceFinish
	ph: string
	pid: number
	s: string
	tid: number
	ts: number
}
Object: {
	args: {
		data: {
			fetchPriorityHint: high
			frame: string
			initiator: {
				columnNumber: number
				fetchType: img
				lineNumber: number
				type: string
				url: string
			}
			isLinkPreload: false
			priority: string
			requestId: string
			requestMethod: string
			resourceType: Image
			url: string
		}
	}
	cat: string
	name: ResourceSendRequest
	ph: string
	pid: number
	s: string
	tid: number
	ts: number
}
Object: {
	args: {
		data: {
			connectionId: number
			connectionReused: boolean
			encodedDataLength: number
			frame: string
			fromCache: boolean
			fromServiceWorker: boolean
			headers: [
				{
					name: Date
					value: string
				}
				{
					name: Server
					value: string
				}
				{
					name: Connection
					value: string
				}
				{
					name: Keep-Alive
					value: string
				}
				{
					name: Content-Length
					value: string
				}
				{
					name: Content-Type
					value: string
				}
			]
			mimeType: string
			protocol: http/1.1
			requestId: string
			responseTime: number
			statusCode: number
			timing: {
				connectEnd: number
				connectStart: number
				dnsEnd: number
				dnsStart: number
				proxyEnd: number
				proxyStart: number
				pushEnd: number
				pushStart: number
				receiveHeadersEnd: number
				receiveHeadersStart: number
				requestTime: number
				sendEnd: number
				sendStart: number
				sslEnd: number
				sslStart: number
				workerReady: number
				workerStart: number
			}
		}
	}
	cat: string
	name: ResourceReceiveResponse
	ph: string
	pid: number
	s: string
	tid: number
	ts: number
}
Object: {
	args: {
		data: {
			encodedDataLength: number
			frame: string
			requestId: string
		}
	}
	cat: string
	name: ResourceReceivedData
	ph: string
	pid: number
	s: string
	tid: number
	ts: number
}
Object: {
	args: {
		data: {
			decodedBodyLength: number
			didFail: boolean
			encodedDataLength: number
			finishTime: number
			requestId: string
		}
	}
	cat: string
	name: ResourceFinish
	ph: string
	pid: number
	s: string
	tid: number
	ts: number
}
Object: {
	args: {
		data: {
			fetchPriorityHint: auto
			frame: string
			initiator: {
				columnNumber: number
				fetchType: link
				lineNumber: number
				type: string
				url: string
			}
			isLinkPreload: true
			priority: string
			renderBlocking: string
			requestId: string
			requestMethod: string
			resourceType: Stylesheet
			url: string
		}
	}
	cat: string
	name: ResourceSendRequest
	ph: string
	pid: number
	s: string
	tid: number
	ts: number
}
Object: {
	args: {
		data: {
			connectionId: number
			connectionReused: boolean
			encodedDataLength: number
			frame: string
			fromCache: boolean
			fromServiceWorker: boolean
			headers: [
				{
					name: Date
					value: string
				}
				{
					name: Server
					value: string
				}
				{
					name: Connection
					value: string
				}
				{
					name: Keep-Alive
					value: string
				}
				{
					name: Content-Length
					value: string
				}
				{
					name: Content-Type
					value: string
				}
			]
			mimeType: string
			protocol: http/1.1
			requestId: string
			responseTime: number
			statusCode: number
			timing: {
				connectEnd: number
				connectStart: number
				dnsEnd: number
				dnsStart: number
				proxyEnd: number
				proxyStart: number
				pushEnd: number
				pushStart: number
				receiveHeadersEnd: number
				receiveHeadersStart: number
				requestTime: number
				sendEnd: number
				sendStart: number
				sslEnd: number
				sslStart: number
				workerReady: number
				workerStart: number
			}
		}
	}
	cat: string
	name: ResourceReceiveResponse
	ph: string
	pid: number
	s: string
	tid: number
	ts: number
}
Object: {
	args: {
		data: {
			decodedBodyLength: number
			didFail: boolean
			encodedDataLength: number
			requestId: string
		}
	}
	cat: string
	name: ResourceFinish
	ph: string
	pid: number
	s: string
	tid: number
	ts: number
}

