# Copyright (c) 2024 The Wootz Authors. All rights reserved.
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this file,
# You can obtain one at https://mozilla.org/MPL/2.0/.

# @generated from third_party/rust/chromium_crates_io/BUILD.gn.hbs by
# tools/crates/gnrt.
# Do not edit!

import("//build/rust/cargo_crate.gni")

cargo_crate("lib") {
  crate_name = "base64ct"
  epoch = "1"
  crate_type = "rlib"
  crate_root = "//third_party/rust/chromium_crates_io/vendor/base64ct-1.6.0/src/lib.rs"
  sources = [
    "//third_party/rust/chromium_crates_io/vendor/base64ct-1.6.0/src/alphabet.rs",
    "//third_party/rust/chromium_crates_io/vendor/base64ct-1.6.0/src/alphabet/bcrypt.rs",
    "//third_party/rust/chromium_crates_io/vendor/base64ct-1.6.0/src/alphabet/crypt.rs",
    "//third_party/rust/chromium_crates_io/vendor/base64ct-1.6.0/src/alphabet/shacrypt.rs",
    "//third_party/rust/chromium_crates_io/vendor/base64ct-1.6.0/src/alphabet/standard.rs",
    "//third_party/rust/chromium_crates_io/vendor/base64ct-1.6.0/src/alphabet/url.rs",
    "//third_party/rust/chromium_crates_io/vendor/base64ct-1.6.0/src/decoder.rs",
    "//third_party/rust/chromium_crates_io/vendor/base64ct-1.6.0/src/encoder.rs",
    "//third_party/rust/chromium_crates_io/vendor/base64ct-1.6.0/src/encoding.rs",
    "//third_party/rust/chromium_crates_io/vendor/base64ct-1.6.0/src/errors.rs",
    "//third_party/rust/chromium_crates_io/vendor/base64ct-1.6.0/src/lib.rs",
    "//third_party/rust/chromium_crates_io/vendor/base64ct-1.6.0/src/line_ending.rs",
    "//third_party/rust/chromium_crates_io/vendor/base64ct-1.6.0/src/test_vectors.rs",
  ]
  inputs = [ "//third_party/rust/chromium_crates_io/vendor/base64ct-1.6.0/src/../README.md" ]

  build_native_rust_unit_tests = false
  edition = "2021"
  cargo_pkg_version = "1.6.0"
  cargo_pkg_authors = "RustCrypto Developers"
  cargo_pkg_name = "base64ct"
  cargo_pkg_description = "Pure Rust implementation of Base64 (RFC 4648) which avoids any usages of data-dependent branches/LUTs and thereby provides portable \"best effort\" constant-time operation and embedded-friendly no_std support"
  library_configs -= [ "//build/config/compiler:chromium_code" ]
  library_configs += [ "//build/config/compiler:no_chromium_code" ]
  executable_configs -= [ "//build/config/compiler:chromium_code" ]
  executable_configs += [ "//build/config/compiler:no_chromium_code" ]
  proc_macro_configs -= [ "//build/config/compiler:chromium_code" ]
  proc_macro_configs += [ "//build/config/compiler:no_chromium_code" ]
  features = [ "alloc" ]
}
