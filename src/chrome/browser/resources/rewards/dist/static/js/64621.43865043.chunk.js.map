{"version":3,"file":"static/js/64621.43865043.chunk.js","mappings":"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","sources":["../node_modules/thirdweb/src/wallets/wallet-connect/receiver/session-request.ts"],"sourcesContent":["import type { ThirdwebClient } from \"../../../client/client.js\";\nimport type { Hex } from \"../../../utils/encoding/hex.js\";\nimport type { Wallet } from \"../../interfaces/wallet.js\";\nimport type {\n  WalletConnectAddEthereumChainRequestParams,\n  WalletConnectClient,\n  WalletConnectSwitchEthereumChainRequestParams,\n} from \"./types.js\";\nimport type {\n  WalletConnectRawTransactionRequestParams,\n  WalletConnectRequestError,\n  WalletConnectRequestHandlers,\n  WalletConnectSessionRequestEvent,\n  WalletConnectSignRequestPrams,\n  WalletConnectSignTypedDataRequestParams,\n  WalletConnectTransactionRequestParams,\n} from \"./types.js\";\nimport { parseEip155ChainId } from \"./utils.js\";\n\n/**\n * @internal\n */\nexport async function fulfillRequest(options: {\n  wallet: Wallet;\n  walletConnectClient: WalletConnectClient;\n  event: WalletConnectSessionRequestEvent;\n  thirdwebClient: ThirdwebClient;\n  handlers?: WalletConnectRequestHandlers;\n}) {\n  const {\n    wallet,\n    walletConnectClient,\n    thirdwebClient,\n    event: {\n      topic,\n      id,\n      params: { chainId: rawChainId, request },\n    },\n    handlers,\n  } = options;\n\n  const account = wallet.getAccount();\n  if (!account) {\n    throw new Error(\"No account connected to provided wallet\");\n  }\n\n  let result: WalletConnectRequestError | Hex;\n  try {\n    switch (request.method) {\n      case \"personal_sign\": {\n        if (handlers?.personal_sign) {\n          result = await handlers.personal_sign({\n            account,\n            params: request.params as WalletConnectSignRequestPrams,\n          });\n        } else {\n          const { handleSignRequest } = await import(\n            \"./request-handlers/sign.js\"\n          );\n          result = await handleSignRequest({\n            account,\n            params: request.params as WalletConnectSignRequestPrams,\n          });\n        }\n        break;\n      }\n      case \"eth_sign\": {\n        if (handlers?.eth_sign) {\n          result = await handlers.eth_sign({\n            account,\n            params: request.params as WalletConnectSignRequestPrams,\n          });\n        } else {\n          const { handleSignRequest } = await import(\n            \"./request-handlers/sign.js\"\n          );\n          result = await handleSignRequest({\n            account,\n            params: request.params as WalletConnectSignRequestPrams,\n          });\n        }\n        break;\n      }\n      case \"eth_signTypedData\": {\n        if (handlers?.eth_signTypedData) {\n          result = await handlers.eth_signTypedData({\n            account,\n            params: request.params as WalletConnectSignTypedDataRequestParams,\n          });\n        } else {\n          const { handleSignTypedDataRequest } = await import(\n            \"./request-handlers/sign-typed-data.js\"\n          );\n          result = await handleSignTypedDataRequest({\n            account,\n            params: request.params as WalletConnectSignTypedDataRequestParams,\n          });\n        }\n        break;\n      }\n      case \"eth_signTypedData_v4\": {\n        if (handlers?.eth_signTypedData_v4) {\n          result = await handlers.eth_signTypedData_v4({\n            account,\n            params: request.params as WalletConnectSignTypedDataRequestParams,\n          });\n        } else {\n          const { handleSignTypedDataRequest } = await import(\n            \"./request-handlers/sign-typed-data.js\"\n          );\n          result = await handleSignTypedDataRequest({\n            account,\n            params: request.params as WalletConnectSignTypedDataRequestParams,\n          });\n        }\n        break;\n      }\n      case \"eth_signTransaction\": {\n        if (handlers?.eth_signTransaction) {\n          result = await handlers.eth_signTransaction({\n            account,\n            params: request.params as WalletConnectTransactionRequestParams,\n          });\n        } else {\n          const { handleSignTransactionRequest } = await import(\n            \"./request-handlers/sign-transaction.js\"\n          );\n          result = await handleSignTransactionRequest({\n            account,\n            params: request.params as WalletConnectTransactionRequestParams,\n          });\n        }\n        break;\n      }\n      case \"eth_sendTransaction\": {\n        const chainId = parseEip155ChainId(rawChainId);\n        if (handlers?.eth_sendTransaction) {\n          result = await handlers.eth_sendTransaction({\n            account,\n            chainId,\n            params: request.params as WalletConnectTransactionRequestParams,\n          });\n        } else {\n          const { handleSendTransactionRequest } = await import(\n            \"./request-handlers/send-transaction.js\"\n          );\n\n          result = await handleSendTransactionRequest({\n            account,\n            chainId,\n            thirdwebClient,\n            params: request.params as WalletConnectTransactionRequestParams,\n          });\n        }\n        break;\n      }\n      case \"eth_sendRawTransaction\": {\n        const chainId = parseEip155ChainId(rawChainId);\n        if (handlers?.eth_sendRawTransaction) {\n          result = await handlers.eth_sendRawTransaction({\n            account,\n            chainId,\n            params: request.params as WalletConnectRawTransactionRequestParams,\n          });\n        } else {\n          const { handleSendRawTransactionRequest } = await import(\n            \"./request-handlers/send-raw-transaction.js\"\n          );\n\n          result = await handleSendRawTransactionRequest({\n            account,\n            chainId,\n            params: request.params as WalletConnectRawTransactionRequestParams,\n          });\n        }\n        break;\n      }\n      case \"wallet_addEthereumChain\": {\n        if (handlers?.wallet_addEthereumChain) {\n          result = await handlers.wallet_addEthereumChain({\n            wallet,\n            params:\n              request.params as WalletConnectAddEthereumChainRequestParams,\n          });\n        } else {\n          throw new Error(\n            \"Unsupported request method: wallet_addEthereumChain\",\n          );\n        }\n        break;\n      }\n      case \"wallet_switchEthereumChain\": {\n        if (handlers?.wallet_switchEthereumChain) {\n          result = await handlers.wallet_switchEthereumChain({\n            wallet,\n            params:\n              request.params as WalletConnectSwitchEthereumChainRequestParams,\n          });\n        } else {\n          const { handleSwitchChain } = await import(\n            \"./request-handlers/switch-chain.js\"\n          );\n\n          result = await handleSwitchChain({\n            wallet,\n            params:\n              request.params as WalletConnectSwitchEthereumChainRequestParams,\n          });\n        }\n        break;\n      }\n      default: {\n        const potentialHandler = handlers?.[request.method];\n        if (potentialHandler) {\n          result = await potentialHandler({\n            account,\n            chainId: parseEip155ChainId(rawChainId),\n            params: request.params,\n          });\n        } else {\n          throw new Error(`Unsupported request method: ${request.method}`);\n        }\n      }\n    }\n  } catch (error: unknown) {\n    result = {\n      code:\n        typeof error === \"object\" && error !== null && \"code\" in error\n          ? (error as { code: number }).code\n          : 500,\n      message:\n        typeof error === \"object\" && error !== null && \"message\" in error\n          ? (error as { message: string }).message\n          : \"Unknown error\",\n    };\n  }\n\n  walletConnectClient.respond({\n    topic,\n    response: {\n      id,\n      jsonrpc: \"2.0\",\n      result,\n    },\n  });\n}\n"],"names":["async","fulfillRequest","options","wallet","walletConnectClient","thirdwebClient","event","topic","id","params","chainId","rawChainId","request","handlers","account","getAccount","Error","result","method","personal_sign","handleSignRequest","eth_sign","eth_signTypedData","handleSignTypedDataRequest","eth_signTypedData_v4","eth_signTransaction","handleSignTransactionRequest","parseEip155ChainId","eth_sendTransaction","handleSendTransactionRequest","eth_sendRawTransaction","handleSendRawTransactionRequest","wallet_addEthereumChain","wallet_switchEthereumChain","handleSwitchChain","potentialHandler","error","code","message","respond","response","jsonrpc"],"sourceRoot":""}