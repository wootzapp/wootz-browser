{"version":3,"file":"static/js/39674.9184d27b.chunk.js","mappings":"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","sources":["../node_modules/thirdweb/src/extensions/erc20/__generated__/IERC20/read/decimals.ts","../node_modules/thirdweb/src/extensions/erc20/read/decimals.ts","../node_modules/thirdweb/src/extensions/common/__generated__/IContractMetadata/read/name.ts","../node_modules/thirdweb/src/extensions/common/read/name.ts","../node_modules/thirdweb/src/extensions/common/__generated__/IContractMetadata/read/symbol.ts","../node_modules/thirdweb/src/extensions/common/read/symbol.ts","../node_modules/thirdweb/src/extensions/erc20/read/getCurrencyMetadata.ts","../node_modules/thirdweb/src/pay/buyWithFiat/isSwapRequiredPostOnramp.ts","../node_modules/thirdweb/src/react/core/hooks/pay/useBuyWithFiatQuote.ts","../node_modules/thirdweb/src/pay/buyWithFiat/getQuote.ts","../node_modules/thirdweb/src/react/web/ui/components/Drawer.tsx","../node_modules/thirdweb/src/react/web/ui/ConnectWallet/screens/Buy/DirectPaymentModeScreen.tsx","../node_modules/thirdweb/src/react/web/ui/ConnectWallet/screens/Buy/EstimatedTimeAndFees.tsx","../node_modules/thirdweb/src/react/web/ui/ConnectWallet/screens/Buy/PayWIthCreditCard.tsx","../node_modules/thirdweb/src/chains/chain-definitions/base-sepolia.ts","../node_modules/thirdweb/src/chains/chain-definitions/base.ts","../node_modules/thirdweb/src/chains/chain-definitions/optimism-sepolia.ts","../node_modules/thirdweb/src/chains/chain-definitions/optimism.ts","../node_modules/thirdweb/src/chains/chain-definitions/zora-sepolia.ts","../node_modules/thirdweb/src/chains/chain-definitions/zora.ts","../node_modules/thirdweb/src/chains/constants.ts","../node_modules/thirdweb/src/transaction/actions/estimate-gas-cost.ts","../node_modules/thirdweb/src/react/web/ui/ConnectWallet/screens/Buy/main/useBuyTxStates.ts","../node_modules/thirdweb/src/react/web/ui/ConnectWallet/screens/Buy/TransactionModeScreen.tsx","../node_modules/thirdweb/src/react/web/ui/ConnectWallet/screens/Buy/WalletSelectorButton.tsx","../node_modules/thirdweb/src/react/web/ui/ConnectWallet/screens/Buy/fiat/CurrencySelection.tsx","../node_modules/thirdweb/src/react/web/ui/ConnectWallet/screens/Buy/openOnRamppopup.tsx","../node_modules/thirdweb/src/react/web/ui/ConnectWallet/screens/Buy/fiat/FiatStatusScreen.tsx","../node_modules/thirdweb/src/react/web/ui/ConnectWallet/screens/Buy/fiat/FiatFlow.tsx","../node_modules/thirdweb/src/chains/chain-definitions/polygon.ts","../node_modules/thirdweb/src/react/web/ui/ConnectWallet/screens/Buy/main/useUISelectionStates.ts","../node_modules/thirdweb/src/react/web/ui/ConnectWallet/screens/Buy/swap/BuyTokenInput.tsx","../node_modules/thirdweb/src/react/web/ui/ConnectWallet/screens/Buy/utils.ts","../node_modules/thirdweb/src/react/web/ui/ConnectWallet/screens/Buy/swap/Fees.tsx","../node_modules/thirdweb/src/react/web/ui/ConnectWallet/icons/GenericWalletIcon.tsx","../node_modules/thirdweb/src/react/web/ui/ConnectWallet/screens/Buy/swap/PayWithCrypto.tsx","../node_modules/thirdweb/src/transaction/actions/send-and-confirm-transaction.ts","../node_modules/thirdweb/src/react/web/ui/ConnectWallet/screens/Buy/swap/TransferConfirmationScreen.tsx","../node_modules/thirdweb/src/pay/buyWithCrypto/getTransfer.ts","../node_modules/thirdweb/src/react/web/ui/ConnectWallet/screens/Buy/swap/TransferFlow.tsx","../node_modules/thirdweb/src/react/web/ui/ConnectWallet/screens/Buy/swap/WalletSwitcherDrawerContent.tsx","../node_modules/thirdweb/src/react/web/ui/ConnectWallet/screens/Buy/BuyScreen.tsx","../node_modules/thirdweb/src/react/web/ui/ConnectWallet/screens/Buy/usePayerSetup.tsx","../node_modules/thirdweb/src/react/web/ui/ConnectWallet/screens/Buy/main/useEnabledPaymentMethods.ts","../node_modules/thirdweb/src/react/core/hooks/pay/useBuyWithCryptoQuote.ts"],"sourcesContent":["import { readContract } from \"../../../../../transaction/read-contract.js\";\nimport type { BaseTransactionOptions } from \"../../../../../transaction/types.js\";\n\nimport { decodeAbiParameters } from \"viem\";\nimport type { Hex } from \"../../../../../utils/encoding/hex.js\";\nimport { detectMethod } from \"../../../../../utils/bytecode/detectExtension.js\";\n\nexport const FN_SELECTOR = \"0x313ce567\" as const;\nconst FN_INPUTS = [] as const;\nconst FN_OUTPUTS = [\n  {\n    type: \"uint8\",\n  },\n] as const;\n\n/**\n * Checks if the `decimals` method is supported by the given contract.\n * @param availableSelectors An array of 4byte function selectors of the contract. You can get this in various ways, such as using \"whatsabi\" or if you have the ABI of the contract available you can use it to generate the selectors.\n * @returns A boolean indicating if the `decimals` method is supported.\n * @extension ERC20\n * @example\n * ```ts\n * import { isDecimalsSupported } from \"thirdweb/extensions/erc20\";\n * const supported = isDecimalsSupported([\"0x...\"]);\n * ```\n */\nexport function isDecimalsSupported(availableSelectors: string[]) {\n  return detectMethod({\n    availableSelectors,\n    method: [FN_SELECTOR, FN_INPUTS, FN_OUTPUTS] as const,\n  });\n}\n\n/**\n * Decodes the result of the decimals function call.\n * @param result - The hexadecimal result to decode.\n * @returns The decoded result as per the FN_OUTPUTS definition.\n * @extension ERC20\n * @example\n * ```ts\n * import { decodeDecimalsResult } from \"thirdweb/extensions/erc20\";\n * const result = decodeDecimalsResultResult(\"...\");\n * ```\n */\nexport function decodeDecimalsResult(result: Hex) {\n  return decodeAbiParameters(FN_OUTPUTS, result)[0];\n}\n\n/**\n * Calls the \"decimals\" function on the contract.\n * @param options - The options for the decimals function.\n * @returns The parsed result of the function call.\n * @extension ERC20\n * @example\n * ```ts\n * import { decimals } from \"thirdweb/extensions/erc20\";\n *\n * const result = await decimals({\n *  contract,\n * });\n *\n * ```\n */\nexport async function decimals(options: BaseTransactionOptions) {\n  return readContract({\n    contract: options.contract,\n    method: [FN_SELECTOR, FN_INPUTS, FN_OUTPUTS] as const,\n    params: [],\n  });\n}\n","import type { BaseTransactionOptions } from \"../../../transaction/types.js\";\nimport { withCache } from \"../../../utils/promise/withCache.js\";\nimport { decimals as generatedDecimals } from \"../__generated__/IERC20/read/decimals.js\";\n\nexport { isDecimalsSupported } from \"../__generated__/IERC20/read/decimals.js\";\n\n/**\n * Retrieves the number of decimal places for a given ERC20 contract.\n * @param options - The options for the transaction.\n * @returns A promise that resolves to the number of decimal places.\n * @extension ERC20\n * @example\n * ```ts\n * import { decimals } from \"thirdweb/extensions/erc20\";\n *\n * const tokenDecimals = await decimals({ contract });\n * ```\n */\nexport async function decimals(\n  options: BaseTransactionOptions,\n): Promise<number> {\n  return withCache(() => generatedDecimals(options), {\n    cacheKey: `${options.contract.chain.id}:${options.contract.address}:decimals`,\n    // can never change, so cache forever\n    cacheTime: Number.POSITIVE_INFINITY,\n  });\n}\n","import { readContract } from \"../../../../../transaction/read-contract.js\";\nimport type { BaseTransactionOptions } from \"../../../../../transaction/types.js\";\n\nimport { decodeAbiParameters } from \"viem\";\nimport type { Hex } from \"../../../../../utils/encoding/hex.js\";\nimport { detectMethod } from \"../../../../../utils/bytecode/detectExtension.js\";\n\nexport const FN_SELECTOR = \"0x06fdde03\" as const;\nconst FN_INPUTS = [] as const;\nconst FN_OUTPUTS = [\n  {\n    type: \"string\",\n  },\n] as const;\n\n/**\n * Checks if the `name` method is supported by the given contract.\n * @param availableSelectors An array of 4byte function selectors of the contract. You can get this in various ways, such as using \"whatsabi\" or if you have the ABI of the contract available you can use it to generate the selectors.\n * @returns A boolean indicating if the `name` method is supported.\n * @extension COMMON\n * @example\n * ```ts\n * import { isNameSupported } from \"thirdweb/extensions/common\";\n * const supported = isNameSupported([\"0x...\"]);\n * ```\n */\nexport function isNameSupported(availableSelectors: string[]) {\n  return detectMethod({\n    availableSelectors,\n    method: [FN_SELECTOR, FN_INPUTS, FN_OUTPUTS] as const,\n  });\n}\n\n/**\n * Decodes the result of the name function call.\n * @param result - The hexadecimal result to decode.\n * @returns The decoded result as per the FN_OUTPUTS definition.\n * @extension COMMON\n * @example\n * ```ts\n * import { decodeNameResult } from \"thirdweb/extensions/common\";\n * const result = decodeNameResultResult(\"...\");\n * ```\n */\nexport function decodeNameResult(result: Hex) {\n  return decodeAbiParameters(FN_OUTPUTS, result)[0];\n}\n\n/**\n * Calls the \"name\" function on the contract.\n * @param options - The options for the name function.\n * @returns The parsed result of the function call.\n * @extension COMMON\n * @example\n * ```ts\n * import { name } from \"thirdweb/extensions/common\";\n *\n * const result = await name({\n *  contract,\n * });\n *\n * ```\n */\nexport async function name(options: BaseTransactionOptions) {\n  return readContract({\n    contract: options.contract,\n    method: [FN_SELECTOR, FN_INPUTS, FN_OUTPUTS] as const,\n    params: [],\n  });\n}\n","import type { BaseTransactionOptions } from \"../../../transaction/types.js\";\nimport { withCache } from \"../../../utils/promise/withCache.js\";\nimport { name as generatedName } from \"../__generated__/IContractMetadata/read/name.js\";\n\nexport { isNameSupported } from \"../__generated__/IContractMetadata/read/name.js\";\n\n/**\n * Retrieves the name associated with the given contract.\n * @param options - The options for the transaction.\n * @returns A promise that resolves to the name associated with the contract.\n * @extension COMMON\n * @example\n * ```ts\n * import { name } from \"thirdweb/extensions/common\";\n *\n * const contractName = await name({ contract });\n * ```\n */\nexport async function name(options: BaseTransactionOptions): Promise<string> {\n  return withCache(() => generatedName(options), {\n    cacheKey: `${options.contract.chain.id}:${options.contract.address}:name`,\n    // can never change, so cache forever\n    cacheTime: Number.POSITIVE_INFINITY,\n  });\n}\n","import { readContract } from \"../../../../../transaction/read-contract.js\";\nimport type { BaseTransactionOptions } from \"../../../../../transaction/types.js\";\n\nimport { decodeAbiParameters } from \"viem\";\nimport type { Hex } from \"../../../../../utils/encoding/hex.js\";\nimport { detectMethod } from \"../../../../../utils/bytecode/detectExtension.js\";\n\nexport const FN_SELECTOR = \"0x95d89b41\" as const;\nconst FN_INPUTS = [] as const;\nconst FN_OUTPUTS = [\n  {\n    type: \"string\",\n  },\n] as const;\n\n/**\n * Checks if the `symbol` method is supported by the given contract.\n * @param availableSelectors An array of 4byte function selectors of the contract. You can get this in various ways, such as using \"whatsabi\" or if you have the ABI of the contract available you can use it to generate the selectors.\n * @returns A boolean indicating if the `symbol` method is supported.\n * @extension COMMON\n * @example\n * ```ts\n * import { isSymbolSupported } from \"thirdweb/extensions/common\";\n * const supported = isSymbolSupported([\"0x...\"]);\n * ```\n */\nexport function isSymbolSupported(availableSelectors: string[]) {\n  return detectMethod({\n    availableSelectors,\n    method: [FN_SELECTOR, FN_INPUTS, FN_OUTPUTS] as const,\n  });\n}\n\n/**\n * Decodes the result of the symbol function call.\n * @param result - The hexadecimal result to decode.\n * @returns The decoded result as per the FN_OUTPUTS definition.\n * @extension COMMON\n * @example\n * ```ts\n * import { decodeSymbolResult } from \"thirdweb/extensions/common\";\n * const result = decodeSymbolResultResult(\"...\");\n * ```\n */\nexport function decodeSymbolResult(result: Hex) {\n  return decodeAbiParameters(FN_OUTPUTS, result)[0];\n}\n\n/**\n * Calls the \"symbol\" function on the contract.\n * @param options - The options for the symbol function.\n * @returns The parsed result of the function call.\n * @extension COMMON\n * @example\n * ```ts\n * import { symbol } from \"thirdweb/extensions/common\";\n *\n * const result = await symbol({\n *  contract,\n * });\n *\n * ```\n */\nexport async function symbol(options: BaseTransactionOptions) {\n  return readContract({\n    contract: options.contract,\n    method: [FN_SELECTOR, FN_INPUTS, FN_OUTPUTS] as const,\n    params: [],\n  });\n}\n","import type { BaseTransactionOptions } from \"../../../transaction/types.js\";\nimport { withCache } from \"../../../utils/promise/withCache.js\";\nimport { symbol as generatedSymbol } from \"../__generated__/IContractMetadata/read/symbol.js\";\n\nexport { isSymbolSupported } from \"../__generated__/IContractMetadata/read/symbol.js\";\n\n/**\n * Retrieves the name associated with the given contract.\n * @param options - The options for the transaction.\n * @returns A promise that resolves to the name associated with the contract.\n * @extension COMMON\n * @example\n * ```ts\n * import { symbol } from \"thirdweb/extensions/common\";\n *\n * const contractSymbol = await symbol({ contract });\n * ```\n */\nexport async function symbol(options: BaseTransactionOptions): Promise<string> {\n  return withCache(() => generatedSymbol(options), {\n    cacheKey: `${options.contract.chain.id}:${options.contract.address}:symbol`,\n    // can never change, so cache forever\n    cacheTime: Number.POSITIVE_INFINITY,\n  });\n}\n","import { isNativeTokenAddress } from \"../../../constants/addresses.js\";\nimport type { BaseTransactionOptions } from \"../../../transaction/types.js\";\nimport { name } from \"../../common/read/name.js\";\nimport { symbol } from \"../../common/read/symbol.js\";\nimport { decimals } from \"../__generated__/IERC20/read/decimals.js\";\n\n/**\n * @extension ERC20\n */\nexport type GetCurrencyMetadataResult = {\n  name: string;\n  symbol: string;\n  decimals: number;\n};\n\n/**\n * Retrieves the metadata of a currency.\n * @param options - The options for the transaction.\n * @returns A promise that resolves to an object containing the currency metadata.\n * @extension ERC20\n * @example\n * ```ts\n * import { getCurrencyMetadata } from \"thirdweb/extensions/erc20\";\n *\n * const currencyMetadata = await getCurrencyMetadata({ contract });\n * ```\n */\nexport async function getCurrencyMetadata(\n  options: BaseTransactionOptions,\n): Promise<GetCurrencyMetadataResult> {\n  // if the contract is the native token, return the native currency metadata\n  if (isNativeTokenAddress(options.contract.address)) {\n    return {\n      name: \"Ether\",\n      symbol: \"ETH\",\n      decimals: 18,\n      // overwrite with native currency of the chain if available\n      ...options.contract.chain.nativeCurrency,\n    };\n  }\n\n  try {\n    const [name_, symbol_, decimals_] = await Promise.all([\n      name(options).catch(() => \"\"),\n      symbol(options),\n      decimals(options),\n    ]);\n\n    return {\n      name: name_,\n      symbol: symbol_,\n      decimals: decimals_,\n    };\n  } catch {\n    throw new Error(\"Invalid currency token\");\n  }\n}\n","import { getAddress } from \"../../utils/address.js\";\nimport type { BuyWithFiatQuote } from \"./getQuote.js\";\n\n/**\n * Check if a Swap is required after on-ramp when buying a token with fiat currency.\n *\n * If `quote.toToken` and `quote.onRampToken` are the same (same token and chain),\n * it means on-ramp provider can directly send the desired token to the user's wallet and no swap is required.\n *\n * If `quote.toToken` and `quote.onRampToken` are different (different token or chain), A swap is required to swap the on-ramp token to the desired token.\n *\n * @param buyWithFiatQuote - The quote of type [`BuyWithFiatQuote`](https://portal.thirdweb.com/references/typescript/v5/BuyWithFiatQuote) returned\n * by the [`getBuyWithFiatQuote`](https://portal.thirdweb.com/references/typescript/v5/getBuyWithFiatQuote) function.\n * @buyCrypto\n */\nexport function isSwapRequiredPostOnramp(\n  buyWithFiatQuote: Pick<BuyWithFiatQuote, \"toToken\" | \"onRampToken\">,\n) {\n  const sameChain =\n    buyWithFiatQuote.toToken.chainId ===\n    buyWithFiatQuote.onRampToken.token.chainId;\n\n  const sameToken =\n    getAddress(buyWithFiatQuote.toToken.tokenAddress) ===\n    getAddress(buyWithFiatQuote.onRampToken.token.tokenAddress);\n\n  return !(sameChain && sameToken);\n}\n","import {\n  type UseQueryOptions,\n  type UseQueryResult,\n  useQuery,\n} from \"@tanstack/react-query\";\nimport {\n  type BuyWithFiatQuote,\n  type GetBuyWithFiatQuoteParams,\n  getBuyWithFiatQuote,\n} from \"../../../../pay/buyWithFiat/getQuote.js\";\n\n/**\n * @internal\n */\nexport type BuyWithFiatQuoteQueryOptions = Omit<\n  UseQueryOptions<BuyWithFiatQuote>,\n  \"queryFn\" | \"queryKey\" | \"enabled\"\n>;\n\n/**\n * @internal\n */\ntype BuyWithFiatQuoteError = {\n  status: string;\n  code: string;\n  statusCode: number;\n};\n\n/**\n * Hook to get a price quote for performing a \"Buy with Fiat\" transaction that allows users to buy a token with fiat currency.\n *\n * The price quote is an object of type [`BuyWithFiatQuote`](https://portal.thirdweb.com/references/typescript/v5/BuyWithFiatQuote).\n * This quote contains the information about the purchase such as token amounts, processing fees, estimated time etc.\n *\n * This hook is a React Query wrapper of the [`getBuyWithFiatQuote`](https://portal.thirdweb.com/references/typescript/v5/getBuyWithFiatQuote) function.\n * You can also use that function directly\n *\n * Once you have the `quote`, you can open a new window with `quote.onRampLink` to allow the user to buy the token with fiat currency.\n * and [`useBuyWithFiatStatus`](https://portal.thirdweb.com/references/typescript/v5/useBuyWithFiatStatus) function to start polling for the status of this transaction.\n *\n * @param params - object of type [`GetBuyWithFiatQuoteParams`](https://portal.thirdweb.com/references/typescript/v5/GetBuyWithFiatQuoteParams)\n * @param queryParams - options to configure the react query\n * @returns A React Query object which contains the data of type [`BuyWithFiatQuote`](https://portal.thirdweb.com/references/typescript/v5/BuyWithFiatQuote)\n * @example\n * ```ts\n * import { NATIVE_TOKEN_ADDRESS } from \"thirdweb\";\n * import { base } from \"thirdweb/chains\";\n * import { useBuyWithFiatQuote } from \"thirdweb/react\";\n *\n * // get a quote for buying 0.01 base native token with USD fiat currency\n * function Example() {\n *   const quote = useBuyWithFiatQuote({\n *     client: client, // thirdweb client\n *     fromCurrencySymbol: \"USD\", // fiat currency symbol\n *     toChainId: base.id, // base chain id\n *     toAmount: \"0.01\", // amount of token to buy\n *     toTokenAddress: NATIVE_TOKEN_ADDRESS, // native token\n *     toAddress: \"0x...\", // user's wallet address\n *   });\n *\n *   return (\n *     <div>\n *       {quote.data && (\n *         <a href={quote.data.onRampLink} target=\"_blank\">\n *           open onramp provider\n *         </a>\n *       )}\n *     </div>\n *   );\n * }\n * ```\n * @buyCrypto\n */\nexport function useBuyWithFiatQuote(\n  params?: GetBuyWithFiatQuoteParams,\n  queryOptions?: BuyWithFiatQuoteQueryOptions,\n): UseQueryResult<BuyWithFiatQuote> {\n  return useQuery({\n    ...queryOptions,\n    queryKey: [\"useBuyWithFiatQuote\", params],\n    queryFn: async () => {\n      if (!params) {\n        throw new Error(\"No params provided\");\n      }\n      return getBuyWithFiatQuote(params);\n    },\n    enabled: !!params,\n    retry(failureCount, error) {\n      if (failureCount > 3) {\n        return false;\n      }\n      try {\n        // biome-ignore lint/suspicious/noExplicitAny: <explanation>\n        const serverError = (error as any).error as BuyWithFiatQuoteError;\n\n        if (serverError.code === \"MINIMUM_PURCHASE_AMOUNT\") {\n          return false;\n        }\n\n        if (serverError.statusCode === 404 || serverError.statusCode >= 500) {\n          return false;\n        }\n      } catch {\n        return true;\n      }\n\n      return true;\n    },\n  });\n}\n","import type { ThirdwebClient } from \"../../client/client.js\";\nimport { getClientFetch } from \"../../utils/fetch.js\";\nimport type { FiatProvider } from \"../utils/commonTypes.js\";\nimport { getPayBuyWithFiatQuoteEndpoint } from \"../utils/definitions.js\";\n\n/**\n * Parameters for [`getBuyWithFiatQuote`](https://portal.thirdweb.com/references/typescript/v5/getBuyWithFiatQuote) function\n * @buyCrypto\n */\nexport type GetBuyWithFiatQuoteParams = {\n  /**\n   * A client is the entry point to the thirdweb SDK. It is required for all other actions.\n   *\n   * You can create a client using the `createThirdwebClient` function.\n   * Refer to the [Creating a Client](https://portal.thirdweb.com/typescript/v5/client) documentation for more information.\n   */\n  client: ThirdwebClient;\n\n  /**\n   * The address of the wallet where the tokens will be sent.\n   */\n  toAddress: string;\n\n  /**\n   * The address of the wallet which will be used to buy the token.\n   */\n  fromAddress: string;\n\n  /**\n   * Chain id of the token to buy.\n   */\n  toChainId: number;\n\n  /**\n   * Token address of the token to buy.\n   */\n  toTokenAddress: string;\n\n  /**\n   * Symbol of the fiat currency to buy the token with.\n   */\n  fromCurrencySymbol: \"USD\" | \"CAD\" | \"GBP\" | \"EUR\" | \"JPY\";\n\n  /**\n   * The maximum slippage in basis points (bps) allowed for the transaction.\n   * For example, if you want to allow a maximum slippage of 0.5%, you should specify `50` bps.\n   */\n  maxSlippageBPS?: number;\n\n  /**\n   * The amount of fiat currency to spend to buy the token.\n   * This is useful if you want to buy whatever amount of token you can get for a certain amount of fiat currency.\n   *\n   * If you want a certain amount of token, you can provide `toAmount` instead of `fromAmount`.\n   */\n  fromAmount?: string;\n\n  /**\n   * The amount of token to buy\n   * This is useful if you want to get a certain amount of token.\n   *\n   * If you want to buy however much token you can get for a certain amount of fiat currency, you can provide `fromAmount` instead of `toAmount`.\n   */\n  toAmount?: string;\n\n  /**\n   * Whether to use on-ramp provider in test mode for testing purpose or not.\n   *\n   * Defaults to `false`\n   */\n  isTestMode?: boolean;\n\n  /**\n   * Extra details to store with the purchase.\n   *\n   * This details will be stored with the purchase and can be retrieved later via the status API or Webhook\n   */\n  purchaseData?: object;\n\n  /**\n   * Optional parameter to onramp gas with the purchase\n   * If native token, will onramp extra native token amount\n   * If erc20, will onramp native token + erc20\n   */\n  toGasAmountWei?: string;\n\n  /**\n   * Optional parameter to specify the preferred onramp provider.\n   *\n   * By default, we choose a recommended provider based on the location of the user, KYC status, and currency.\n   */\n  preferredProvider?: FiatProvider;\n};\n\n/**\n * The response object returned by the [`getBuyWithFiatQuote`](https://portal.thirdweb.com/references/typescript/v5/getBuyWithFiatQuote) function.\n *\n * This includes various information for buying a token using a fiat currency:\n * - on-ramp provider UI link\n * - The estimated time for the transaction to complete.\n * - The on-ramp and destination token information.\n * - Processing fees\n *\n * @buyCrypto\n */\nexport type BuyWithFiatQuote = {\n  /**\n   * Estimated time for the transaction to complete in seconds.\n   */\n  estimatedDurationSeconds: number;\n  /**\n   * Minimum amount of token that is expected to be received in units.\n   */\n  estimatedToAmountMin: string;\n  /**\n   * Minimum amount of token that is expected to be received in wei.\n   */\n  estimatedToAmountMinWei: string;\n  /**\n   * Amount of token that is expected to be received in units.\n   *\n   * (estimatedToAmountMinWei - maxSlippageWei)\n   */\n  toAmountMinWei: string;\n  /**\n   * Amount of token that is expected to be received in wei.\n   *\n   * (estimatedToAmountMin - maxSlippageWei)\n   */\n  toAmountMin: string;\n  /**\n   * fiat currency used to buy the token - excluding the fees.\n   */\n  fromCurrency: {\n    amount: string;\n    amountUnits: string;\n    decimals: number;\n    currencySymbol: string;\n  };\n  /**\n   * Fiat currency used to buy the token - including the fees.\n   */\n  fromCurrencyWithFees: {\n    amount: string;\n    amountUnits: string;\n    decimals: number;\n    currencySymbol: string;\n  };\n  /**\n   * Token information for the desired token. (token the user wants to buy)\n   */\n  toToken: {\n    symbol?: string | undefined;\n    priceUSDCents?: number | undefined;\n    name?: string | undefined;\n    chainId: number;\n    tokenAddress: string;\n    decimals: number;\n  };\n  /**\n   * Address of the wallet to which the tokens will be sent.\n   */\n  toAddress: string;\n  /**\n   * Address of the wallet used for buying the token.\n   */\n  fromAddress: string;\n  /**\n   * The maximum slippage in basis points (bps) allowed for the transaction.\n   */\n  maxSlippageBPS: number;\n  /**\n   * Id of transaction\n   */\n  intentId: string;\n  /**\n   * Array of processing fees for the transaction.\n   *\n   * This includes the processing fees for on-ramp and swap (if required).\n   */\n  processingFees: {\n    amount: string;\n    amountUnits: string;\n    decimals: number;\n    currencySymbol: string;\n    feeType: \"ON_RAMP\" | \"NETWORK\";\n  }[];\n  /**\n   * Token that will be sent to the user's wallet address by the on-ramp provider.\n   *\n   * If the token is same as `toToken` - the user can directly buy the token from the on-ramp provider.\n   * If not, the user will receive this token and a swap is required to convert it `toToken`.\n   */\n  onRampToken: {\n    amount: string;\n    amountWei: string;\n    amountUSDCents: number;\n    token: {\n      chainId: number;\n      decimals: number;\n      name: string;\n      priceUSDCents: number;\n      symbol: string;\n      tokenAddress: string;\n    };\n  };\n\n  /**\n   * Gas Token that will be sent to the user's wallet address by the on-ramp provider.\n   *\n   * Only used for ERC20 + Gas on-ramp flow. This will hold the details of the gas token and amount sent for gas.\n   *\n   * In Native Currency case, extra for gas will be added to the output amount of the onramp.\n   */\n  gasToken?: {\n    amount: string;\n    amountWei: string;\n    amountUSDCents: number;\n    token: {\n      chainId: number;\n      decimals: number;\n      name: string;\n      priceUSDCents: number;\n      symbol: string;\n      tokenAddress: string;\n    };\n  };\n\n  /**\n   * Link to the on-ramp provider UI that will prompt the user to buy the token with fiat currency.\n   *\n   * This link should be opened in a new tab.\n   * @example\n   * ```ts\n   * window.open(quote.onRampLink, \"_blank\");\n   * ```\n   *\n   */\n  onRampLink: string;\n};\n\n/**\n * Get a quote of type [`BuyWithFiatQuote`](https://portal.thirdweb.com/references/typescript/v5/BuyWithFiatQuote) to buy given token with fiat currency.\n * This quote contains the information about the swap such as token amounts, processing fees, estimated time etc.\n *\n * ### Rendering the On-Ramp provider UI\n * Once you have the `quote`, you can open the `quote.onRampLink` in a new tab - This will prompt the user to buy the token with fiat currency\n *\n * ### Determining the steps required\n * If `quote.onRampToken.token` is same as `quote.toToken` ( same chain + same token address ) - This means that the token can be directly bought from the on-ramp provider.\n * But if they are different, On-ramp provider will send the `quote.onRampToken` to the user's wallet address and a swap is required to swap it to the desired token onchain.\n *\n * You can use the [`isSwapRequiredPostOnramp`](https://portal.thirdweb.com/references/typescript/v5/isSwapRequiredPostOnramp) utility function to check if a swap is required after the on-ramp is done.\n *\n * ### Polling for the status\n * Once you open the `quote.onRampLink` in a new tab, you can start polling for the status using [`getBuyWithFiatStatus`](https://portal.thirdweb.com/references/typescript/v5/getBuyWithFiatStatus) to get the status of the transaction.\n *\n * `getBuyWithFiatStatus` returns a status object of type [`BuyWithFiatStatus`](https://portal.thirdweb.com/references/typescript/v5/BuyWithFiatStatus).\n *\n * - If no swap is required - the status will become `\"ON_RAMP_TRANSFER_COMPLETED\"` once the on-ramp provider has sent the desired token to the user's wallet address. Once you receive this status, the process is complete.\n * - If a swap is required - the status will become `\"CRYPTO_SWAP_REQUIRED\"` once the on-ramp provider has sent the tokens to the user's wallet address. Once you receive this status, you need to start the swap process.\n *\n * ### Swap Process\n * On receiving the `\"CRYPTO_SWAP_REQUIRED\"` status, you can use the [`getPostOnRampQuote`](https://portal.thirdweb.com/references/typescript/v5/getPostOnRampQuote) function to get the quote for the swap of type [`BuyWithCryptoQuote`](https://portal.thirdweb.com/references/typescript/v5/BuyWithCryptoQuote).\n *\n * Once you have this quote - You can follow the same steps as mentioned in the [`getBuyWithCryptoQuote`](https://portal.thirdweb.com/references/typescript/v5/getBuyWithCryptoQuote) documentation to perform the swap.\n *\n * @param params - object of type [`GetBuyWithFiatQuoteParams`](https://portal.thirdweb.com/references/typescript/v5/GetBuyWithFiatQuoteParams)\n * @returns Object of type [`BuyWithFiatQuote`](https://portal.thirdweb.com/references/typescript/v5/BuyWithFiatQuote) which contains the information about the quote such as processing fees, estimated time, converted token amounts, etc.\n * @example\n * Get a quote for buying 10 USDC on polygon chain (chainId: 137) with USD fiat currency:\n *\n * ```ts\n * import { getBuyWithFiatQuote } from \"thirdweb/pay\";\n *\n * const quote = await getBuyWithFiatQuote({\n *  client: client, // thirdweb client\n *  fromCurrencySymbol: \"USD\", // fiat currency symbol\n *  toChainId: 137, // polygon chain id\n *  toAmount: \"10\", // amount of USDC to buy\n *  toTokenAddress: \"0x3c499c542cEF5E3811e1192ce70d8cC03d5c3359\" // USDC token address in polygon chain\n *  toAddress: \"0x...\", // user's wallet address\n *  isTestMode: false, // whether to use onramp in test mode for testing purpose (defaults to false)\n * });\n *\n * window.open(quote.onRampLink, \"_blank\");\n * ```\n * @buyCrypto\n */\nexport async function getBuyWithFiatQuote(\n  params: GetBuyWithFiatQuoteParams,\n): Promise<BuyWithFiatQuote> {\n  try {\n    const clientFetch = getClientFetch(params.client);\n\n    const response = await clientFetch(getPayBuyWithFiatQuoteEndpoint(), {\n      method: \"POST\",\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        toAddress: params.toAddress,\n        fromCurrencySymbol: params.fromCurrencySymbol,\n        toChainId: params.toChainId.toString(),\n        toTokenAddress: params.toTokenAddress,\n        fromAmount: params.fromAmount,\n        toAmount: params.toAmount,\n        maxSlippageBPS: params.maxSlippageBPS,\n        isTestMode: params.isTestMode,\n        purchaseData: params.purchaseData,\n        fromAddress: params.fromAddress,\n        toGasAmountWei: params.toGasAmountWei,\n        preferredProvider: params.preferredProvider,\n      }),\n    });\n\n    // Assuming the response directly matches the SwapResponse interface\n    if (!response.ok) {\n      const errorObj = await response.json();\n      if (errorObj && \"error\" in errorObj) {\n        throw errorObj;\n      }\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n\n    return (await response.json()).result;\n  } catch (error) {\n    console.error(\"Error getting buy with fiat quote\", error);\n    throw error;\n  }\n}\n","\"use client\";\nimport { keyframes } from \"@emotion/react\";\nimport { Cross2Icon } from \"@radix-ui/react-icons\";\nimport {\n  forwardRef,\n  useCallback,\n  useLayoutEffect,\n  useRef,\n  useState,\n} from \"react\";\nimport { useCustomTheme } from \"../../../core/design-system/CustomThemeProvider.js\";\nimport { iconSize, radius } from \"../../../core/design-system/index.js\";\nimport { fadeInAnimation } from \"../design-system/animations.js\";\nimport { StyledDiv } from \"../design-system/elements.js\";\nimport { DynamicHeight } from \"./DynamicHeight.js\";\nimport { CrossContainer } from \"./Modal.js\";\nimport { Container } from \"./basic.js\";\nimport { IconButton } from \"./buttons.js\";\n\ntype DrawerProps = {\n  children: React.ReactNode;\n  close: () => void;\n};\n/**\n *\n * @internal\n */\nexport const Drawer = /* @__PURE__ */ forwardRef<HTMLDivElement, DrawerProps>(\n  function Drawer_(props, ref) {\n    return (\n      <DrawerContainer ref={ref}>\n        <DynamicHeight>\n          <Container p=\"lg\">\n            <CrossContainer>\n              <IconButton\n                type=\"button\"\n                aria-label=\"Close\"\n                onClick={props.close}\n              >\n                <Cross2Icon\n                  width={iconSize.md}\n                  height={iconSize.md}\n                  style={{\n                    color: \"inherit\",\n                  }}\n                />\n              </IconButton>\n            </CrossContainer>\n\n            {props.children}\n          </Container>\n        </DynamicHeight>\n      </DrawerContainer>\n    );\n  },\n);\n\nconst DrawerContainer = /* @__PURE__ */ StyledDiv((_) => {\n  const theme = useCustomTheme();\n  return {\n    zIndex: 10000,\n    borderTopLeftRadius: radius.xl,\n    borderTopRightRadius: radius.xl,\n    background: theme.colors.modalBg,\n    position: \"absolute\",\n    bottom: 0,\n    left: 0,\n    right: 0,\n    animation: `${drawerOpenAnimation} 0.3s cubic-bezier(0.175, 0.885, 0.32, 1.1)`,\n    borderTop: `1px solid ${theme.colors.borderColor}`,\n  };\n});\n\nconst drawerOpenAnimation = keyframes`\n  from {\n    opacity: 0;\n    transform: translateY(100px);\n  }\n  to {\n    opacity: 1;\n    transform: translateY(0);\n  }\n`;\n\nexport const DrawerOverlay = /* @__PURE__ */ StyledDiv((_) => {\n  const theme = useCustomTheme();\n  return {\n    backgroundColor: theme.colors.modalOverlayBg,\n    zIndex: 9999,\n    position: \"absolute\",\n    inset: 0,\n    animation: `${fadeInAnimation} 400ms cubic-bezier(0.16, 1, 0.3, 1)`,\n  };\n});\n\n/**\n *\n * @internal\n */\nexport function useDrawer() {\n  const [isOpen, _setIsOpen] = useState(false);\n  const drawerRef = useRef<HTMLDivElement>(null);\n  const drawerOverlayRef = useRef<HTMLDivElement>(null);\n\n  const closeDrawerAnimation = useCallback(() => {\n    return new Promise<void>((resolve) => {\n      if (drawerRef.current) {\n        const animOptions = {\n          easing: \"cubic-bezier(0.175, 0.885, 0.32, 1.1)\",\n          fill: \"forwards\",\n          duration: 300,\n        } as const;\n\n        const closeAnimation = drawerRef.current.animate(\n          [{ transform: \"translateY(100%)\", opacity: 0 }],\n          animOptions,\n        );\n\n        drawerOverlayRef.current?.animate([{ opacity: 0 }], animOptions);\n        closeAnimation.onfinish = () => resolve();\n      } else {\n        resolve();\n      }\n    });\n  }, []);\n\n  const setIsOpen = useCallback(\n    async (value: boolean) => {\n      if (value) {\n        _setIsOpen(true);\n      } else {\n        await closeDrawerAnimation();\n        _setIsOpen(false);\n      }\n    },\n    [closeDrawerAnimation],\n  );\n\n  // close on outside click\n  useLayoutEffect(() => {\n    if (!isOpen) {\n      return;\n    }\n\n    const handleClick = (event: MouseEvent) => {\n      if (\n        drawerRef.current &&\n        event.target instanceof Node &&\n        !drawerRef.current.contains(event.target)\n      ) {\n        setIsOpen(false);\n      }\n    };\n\n    // avoid listening to the click event that opened the drawer by adding a frame delay\n    requestAnimationFrame(() => {\n      document.addEventListener(\"click\", handleClick);\n    });\n\n    return () => {\n      document.removeEventListener(\"click\", handleClick);\n    };\n  }, [isOpen, setIsOpen]);\n\n  return {\n    drawerRef,\n    drawerOverlayRef,\n    setIsOpen,\n    isOpen,\n  };\n}\n","import { useQuery } from \"@tanstack/react-query\";\nimport { trackPayEvent } from \"../../../../../../analytics/track.js\";\nimport type { Chain } from \"../../../../../../chains/types.js\";\nimport type { ThirdwebClient } from \"../../../../../../client/client.js\";\nimport { NATIVE_TOKEN_ADDRESS } from \"../../../../../../constants/addresses.js\";\nimport { getContract } from \"../../../../../../contract/contract.js\";\nimport { decimals } from \"../../../../../../extensions/erc20/read/decimals.js\";\nimport { shortenAddress } from \"../../../../../../utils/address.js\";\nimport { formatNumber } from \"../../../../../../utils/formatNumber.js\";\nimport { toTokens } from \"../../../../../../utils/units.js\";\nimport type { Account } from \"../../../../../../wallets/interfaces/wallet.js\";\nimport { useCustomTheme } from \"../../../../../core/design-system/CustomThemeProvider.js\";\nimport { iconSize, spacing } from \"../../../../../core/design-system/index.js\";\nimport type { PayUIOptions } from \"../../../../../core/hooks/connection/ConnectButtonProps.js\";\nimport { useChainMetadata } from \"../../../../../core/hooks/others/useChainQuery.js\";\nimport { useActiveWallet } from \"../../../../../core/hooks/wallets/useActiveWallet.js\";\nimport type { TokenInfo } from \"../../../../../core/utils/defaultTokens.js\";\nimport { useEnsName } from \"../../../../../core/utils/wallet.js\";\nimport { LoadingScreen } from \"../../../../wallets/shared/LoadingScreen.js\";\nimport type { PayEmbedConnectOptions } from \"../../../PayEmbed.js\";\nimport { ChainIcon } from \"../../../components/ChainIcon.js\";\nimport { Img } from \"../../../components/Img.js\";\nimport { Spacer } from \"../../../components/Spacer.js\";\nimport { TokenIcon } from \"../../../components/TokenIcon.js\";\nimport { WalletImage } from \"../../../components/WalletImage.js\";\nimport { Container, Line, ModalHeader } from \"../../../components/basic.js\";\nimport { Button } from \"../../../components/buttons.js\";\nimport { Text } from \"../../../components/text.js\";\nimport { ConnectButton } from \"../../ConnectButton.js\";\nimport { type ERC20OrNativeToken, isNativeToken } from \"../nativeToken.js\";\nimport type { SupportedChainAndTokens } from \"./swap/useSwapSupportedChains.js\";\n\nexport function DirectPaymentModeScreen(props: {\n  client: ThirdwebClient;\n  payUiOptions: Extract<PayUIOptions, { mode: \"direct_payment\" }>;\n  supportedDestinations: SupportedChainAndTokens;\n  payerAccount: Account | undefined;\n  connectOptions: PayEmbedConnectOptions | undefined;\n  onContinue: (\n    tokenAmount: string,\n    toChain: Chain,\n    toToken: ERC20OrNativeToken,\n  ) => void;\n}) {\n  const {\n    payUiOptions,\n    supportedDestinations,\n    client,\n    onContinue,\n    payerAccount,\n  } = props;\n  const theme = useCustomTheme();\n  const activeWallet = useActiveWallet();\n  const metadata = payUiOptions.metadata;\n  const paymentInfo = payUiOptions.paymentInfo;\n  const { data: chainData } = useChainMetadata(paymentInfo.chain);\n  const { data: sellerEns } = useEnsName({\n    client,\n    address: paymentInfo.sellerAddress,\n  });\n\n  const totalCostQuery = useQuery({\n    queryKey: [\"amount\", paymentInfo],\n    queryFn: async () => {\n      let tokenDecimals = 18;\n      if (paymentInfo.token && !isNativeToken(paymentInfo.token)) {\n        tokenDecimals = await decimals({\n          contract: getContract({\n            address: paymentInfo.token.address,\n            chain: paymentInfo.chain,\n            client,\n          }),\n        });\n      }\n      let cost: string;\n      if (\"amountWei\" in paymentInfo) {\n        cost = toTokens(paymentInfo.amountWei, tokenDecimals);\n      } else {\n        cost = paymentInfo.amount;\n      }\n      return cost;\n    },\n  });\n\n  const totalCost = totalCostQuery.data;\n  if (!chainData || totalCost === undefined) {\n    return <LoadingScreen />;\n  }\n\n  const token: TokenInfo = paymentInfo.token\n    ? {\n        ...paymentInfo.token,\n        icon:\n          paymentInfo.token?.icon ||\n          supportedDestinations\n            .find((c) => c.chain.id === paymentInfo.chain.id)\n            ?.tokens.find(\n              (t) =>\n                t.address.toLowerCase() ===\n                paymentInfo.token?.address.toLowerCase(),\n            )?.icon,\n      }\n    : {\n        address: NATIVE_TOKEN_ADDRESS,\n        name: chainData.nativeCurrency.name,\n        symbol: chainData.nativeCurrency.symbol,\n        icon: chainData.icon?.url,\n      };\n\n  return (\n    <Container p=\"lg\">\n      <ModalHeader title={metadata?.name || \"Payment Details\"} />\n\n      <Spacer y=\"lg\" />\n      <Container>\n        {metadata?.image ? (\n          <Img\n            client={client}\n            src={metadata?.image}\n            style={{\n              width: \"100%\",\n              borderRadius: spacing.md,\n              backgroundColor: theme.colors.tertiaryBg,\n            }}\n          />\n        ) : activeWallet ? (\n          <Container\n            flex=\"row\"\n            center=\"both\"\n            style={{\n              padding: spacing.md,\n              marginBottom: spacing.md,\n              borderRadius: spacing.md,\n              backgroundColor: theme.colors.tertiaryBg,\n            }}\n          >\n            <WalletImage\n              size={iconSize.xl}\n              id={activeWallet.id}\n              client={client}\n            />\n            <div\n              style={{\n                flexGrow: 1,\n                borderBottom: \"6px dotted\",\n                borderColor: theme.colors.secondaryIconColor,\n                marginLeft: spacing.md,\n                marginRight: spacing.md,\n              }}\n            />\n            <ChainIcon\n              client={client}\n              size={iconSize.xl}\n              chainIconUrl={chainData.icon?.url}\n            />\n          </Container>\n        ) : null}\n        <Spacer y=\"md\" />\n        <Container flex=\"row\">\n          <Container flex=\"column\" expand>\n            <Text size=\"md\" color=\"primaryText\" weight={700}>\n              Price\n            </Text>\n          </Container>\n          <Container expand>\n            <Container\n              flex=\"row\"\n              gap=\"xs\"\n              center=\"y\"\n              style={{ justifyContent: \"right\" }}\n            >\n              <TokenIcon\n                chain={paymentInfo.chain}\n                client={props.client}\n                size=\"sm\"\n                token={token}\n              />\n              <Text color=\"primaryText\" size=\"md\" weight={700}>\n                {String(formatNumber(Number(totalCost), 6))} {token.symbol}\n              </Text>\n            </Container>\n          </Container>\n        </Container>\n        <Spacer y=\"md\" />\n        <Line />\n        <Spacer y=\"md\" />\n        <Container flex=\"row\">\n          <Container flex=\"column\" expand>\n            <Text size=\"xs\" color=\"secondaryText\">\n              Network\n            </Text>\n          </Container>\n          <Container expand>\n            <Container\n              flex=\"row\"\n              gap=\"xs\"\n              center=\"y\"\n              style={{ justifyContent: \"right\" }}\n            >\n              <ChainIcon\n                chainIconUrl={chainData.icon?.url}\n                size=\"xs\"\n                client={props.client}\n              />\n              <Text\n                size=\"xs\"\n                color=\"secondaryText\"\n                style={{ textAlign: \"right\" }}\n              >\n                {chainData.name}\n              </Text>\n            </Container>\n          </Container>\n        </Container>\n        <Spacer y=\"sm\" />\n        <Container flex=\"row\">\n          <Container flex=\"column\" expand>\n            <Text size=\"xs\" color=\"secondaryText\">\n              Seller\n            </Text>\n          </Container>\n          <Container expand>\n            <Container\n              flex=\"row\"\n              gap=\"xs\"\n              center=\"y\"\n              style={{ justifyContent: \"right\" }}\n            >\n              <Text\n                size=\"xs\"\n                color=\"secondaryText\"\n                style={{ textAlign: \"right\" }}\n              >\n                {sellerEns || shortenAddress(paymentInfo.sellerAddress)}\n              </Text>\n            </Container>\n          </Container>\n        </Container>\n      </Container>\n      <Spacer y=\"xl\" />\n      {payerAccount ? (\n        <Button\n          variant=\"accent\"\n          fullWidth\n          onClick={() => {\n            trackPayEvent({\n              event: \"choose_payment_method_direct_payment_mode\",\n              client,\n              walletAddress: payerAccount.address,\n              walletType: activeWallet?.id,\n            });\n            onContinue(totalCost, paymentInfo.chain, token);\n          }}\n        >\n          Choose Payment Method\n        </Button>\n      ) : (\n        <div>\n          <ConnectButton\n            {...props.connectOptions}\n            client={client}\n            theme={theme}\n            connectButton={{\n              style: {\n                width: \"100%\",\n              },\n            }}\n          />\n        </div>\n      )}\n    </Container>\n  );\n}\n","import { ClockIcon } from \"@radix-ui/react-icons\";\nimport {\n  fontSize,\n  iconSize,\n  radius,\n} from \"../../../../../core/design-system/index.js\";\nimport { Skeleton } from \"../../../components/Skeleton.js\";\nimport { Container } from \"../../../components/basic.js\";\nimport { Button } from \"../../../components/buttons.js\";\nimport { Text } from \"../../../components/text.js\";\nimport type { IconFC } from \"../../icons/types.js\";\nimport { formatSeconds } from \"./swap/formatSeconds.js\";\n\nexport function EstimatedTimeAndFees(props: {\n  estimatedSeconds?: number | undefined;\n  quoteIsLoading: boolean;\n  onViewFees: () => void;\n}) {\n  const { estimatedSeconds, quoteIsLoading } = props;\n\n  return (\n    <Container\n      bg=\"tertiaryBg\"\n      flex=\"row\"\n      borderColor=\"borderColor\"\n      style={{\n        borderRadius: radius.md,\n        borderTopLeftRadius: 0,\n        borderTopRightRadius: 0,\n        justifyContent: \"space-between\",\n        alignItems: \"center\",\n        borderWidth: \"1px\",\n        borderStyle: \"solid\",\n      }}\n    >\n      <Container flex=\"row\" center=\"y\" gap=\"xxs\" color=\"accentText\" p=\"sm\">\n        <ClockIcon width={iconSize.sm} height={iconSize.sm} />\n        {quoteIsLoading ? (\n          <Skeleton height={fontSize.xs} width=\"50px\" color=\"borderColor\" />\n        ) : (\n          <Text size=\"xs\" color=\"secondaryText\">\n            {estimatedSeconds !== undefined\n              ? `~${formatSeconds(estimatedSeconds)}`\n              : \"--\"}\n          </Text>\n        )}\n      </Container>\n\n      <Button variant=\"ghost\" onClick={props.onViewFees} gap=\"xs\">\n        <Container color=\"accentText\" flex=\"row\" center=\"both\">\n          <ViewFeeIcon size={iconSize.sm} />\n        </Container>\n        <Text size=\"xs\" color=\"secondaryText\">\n          View Fees\n        </Text>\n      </Button>\n    </Container>\n  );\n}\n\nconst ViewFeeIcon: IconFC = (props) => {\n  return (\n    <svg\n      width={props.size}\n      height={props.size}\n      viewBox=\"0 0 12 12\"\n      fill=\"none\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      aria-hidden=\"true\"\n    >\n      <path\n        d=\"M9.5 1.5H2.5C1.94772 1.5 1.5 1.94772 1.5 2.5V9.5C1.5 10.0523 1.94772 10.5 2.5 10.5H9.5C10.0523 10.5 10.5 10.0523 10.5 9.5V2.5C10.5 1.94772 10.0523 1.5 9.5 1.5Z\"\n        stroke=\"currentColor\"\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n      />\n      <path\n        d=\"M4.5 7.5L7.5 4.5\"\n        stroke=\"currentColor\"\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n      />\n    </svg>\n  );\n};\n","import styled from \"@emotion/styled\";\nimport { ChevronDownIcon } from \"@radix-ui/react-icons\";\nimport type { ThirdwebClient } from \"../../../../../../client/client.js\";\nimport { formatNumber } from \"../../../../../../utils/formatNumber.js\";\nimport {\n  fontSize,\n  iconSize,\n  radius,\n  spacing,\n} from \"../../../../../core/design-system/index.js\";\nimport { Skeleton } from \"../../../components/Skeleton.js\";\nimport { Container } from \"../../../components/basic.js\";\nimport { Button } from \"../../../components/buttons.js\";\nimport { Text } from \"../../../components/text.js\";\nimport type { CurrencyMeta } from \"./fiat/currencies.js\";\n\n/**\n * Shows an amount \"value\" and renders the selected token and chain\n * It also renders the buttons to select the token and chain\n * It also renders the balance of active wallet for the selected token in selected chain\n * @internal\n */\nexport function PayWithCreditCard(props: {\n  value?: string;\n  isLoading: boolean;\n  client: ThirdwebClient;\n  currency: CurrencyMeta;\n  onSelectCurrency: () => void;\n}) {\n  return (\n    <Container\n      bg=\"tertiaryBg\"\n      borderColor=\"borderColor\"\n      flex=\"row\"\n      style={{\n        borderRadius: radius.md,\n        borderBottomRightRadius: 0,\n        borderBottomLeftRadius: 0,\n        borderWidth: \"1px\",\n        borderStyle: \"solid\",\n        borderBottom: \"none\",\n        flexWrap: \"nowrap\",\n        justifyContent: \"space-between\",\n        alignItems: \"center\",\n      }}\n    >\n      {/* Left */}\n      <CurrencyButton\n        variant=\"ghost\"\n        onClick={props.onSelectCurrency}\n        style={{\n          minHeight: \"64px\",\n          justifyContent: \"flex-start\",\n          minWidth: \"50%\",\n        }}\n        gap=\"sm\"\n      >\n        <props.currency.icon size={iconSize.md} />\n        <Container flex=\"row\" center=\"y\" gap=\"xxs\" color=\"secondaryText\">\n          <Text color=\"primaryText\">{props.currency.shorthand}</Text>\n          <ChevronDownIcon width={iconSize.sm} height={iconSize.sm} />\n        </Container>\n      </CurrencyButton>\n\n      {/* Right */}\n      <div\n        style={{\n          flexGrow: 1,\n          flexShrink: 1,\n          display: \"flex\",\n          flexDirection: \"column\",\n          alignItems: \"flex-end\",\n          gap: spacing.xxs,\n          overflow: \"hidden\",\n          textOverflow: \"ellipsis\",\n          whiteSpace: \"nowrap\",\n          justifyContent: \"center\",\n          paddingRight: spacing.sm,\n        }}\n      >\n        {props.isLoading ? (\n          <Skeleton width=\"100px\" height={fontSize.lg} />\n        ) : (\n          <Text size=\"lg\" color={props.value ? \"primaryText\" : \"secondaryText\"}>\n            {props.value ? `${formatNumber(Number(props.value), 6)}` : \"--\"}\n          </Text>\n        )}\n      </div>\n    </Container>\n  );\n}\n\nconst CurrencyButton = /* @__PURE__ */ styled(Button)(() => {\n  return {\n    \"&[disabled]:hover\": {\n      borderColor: \"transparent\",\n    },\n  };\n});\n","import { defineChain } from \"../utils.js\";\n\n/**\n * @chain\n */\nexport const baseSepolia = /* @__PURE__ */ defineChain({\n  id: 84532,\n  name: \"Base Sepolia\",\n  nativeCurrency: { name: \"Sepolia Ether\", symbol: \"ETH\", decimals: 18 },\n  blockExplorers: [\n    {\n      name: \"Basescan\",\n      url: \"https://sepolia.basescan.org\",\n      apiUrl: \"https://api-sepolia.basescan.org/api\",\n    },\n  ],\n  testnet: true,\n});\n","import { defineChain } from \"../utils.js\";\n\n/**\n * @chain\n */\nexport const base = /* @__PURE__ */ defineChain({\n  id: 8453,\n  name: \"Base\",\n  nativeCurrency: { name: \"Ether\", symbol: \"ETH\", decimals: 18 },\n  blockExplorers: [\n    {\n      name: \"Basescan\",\n      url: \"https://basescan.org\",\n      apiUrl: \"https://api.basescan.org/api\",\n    },\n  ],\n});\n","import { defineChain } from \"../utils.js\";\n\n/**\n * @chain\n */\nexport const optimismSepolia = /* @__PURE__ */ defineChain({\n  id: 11155420,\n  name: \"OP Sepolia\",\n  nativeCurrency: { name: \"Sepolia Ether\", symbol: \"ETH\", decimals: 18 },\n  blockExplorers: [\n    {\n      name: \"Blockscout\",\n      url: \"https://optimism-sepolia.blockscout.com\",\n      apiUrl: \"https://optimism-sepolia.blockscout.com/api\",\n    },\n  ],\n  testnet: true,\n});\n","import { defineChain } from \"../utils.js\";\n\n/**\n * @chain\n */\nexport const optimism = /* @__PURE__ */ defineChain({\n  id: 10,\n  name: \"OP Mainnet\",\n  nativeCurrency: { name: \"Ether\", symbol: \"ETH\", decimals: 18 },\n  blockExplorers: [\n    {\n      name: \"Optimism Explorer\",\n      url: \"https://optimistic.etherscan.io\",\n      apiUrl: \"https://api-optimistic.etherscan.io\",\n    },\n  ],\n});\n","import { defineChain } from \"../utils.js\";\n\n/**\n * @chain\n */\nexport const zoraSepolia = /*@__PURE__*/ defineChain({\n  id: 999999999,\n  name: \"Zora Sepolia\",\n\n  nativeCurrency: {\n    decimals: 18,\n    name: \"Zora Sepolia\",\n    symbol: \"ETH\",\n  },\n  blockExplorers: [\n    {\n      name: \"Zora Sepolia Explorer\",\n      url: \"https://sepolia.explorer.zora.energy/\",\n      apiUrl: \"https://sepolia.explorer.zora.energy/api\",\n    },\n  ],\n  testnet: true,\n});\n","import { defineChain } from \"../utils.js\";\n\n/**\n * @chain\n */\nexport const zora = /*@__PURE__*/ defineChain({\n  id: 7777777,\n  name: \"Zora\",\n  nativeCurrency: {\n    decimals: 18,\n    name: \"Ether\",\n    symbol: \"ETH\",\n  },\n  blockExplorers: [\n    {\n      name: \"Explorer\",\n      url: \"https://explorer.zora.energy\",\n      apiUrl: \"https://explorer.zora.energy/api\",\n    },\n  ],\n});\n","import { baseSepolia } from \"./chain-definitions/base-sepolia.js\";\nimport { base } from \"./chain-definitions/base.js\";\nimport { optimismSepolia } from \"./chain-definitions/optimism-sepolia.js\";\nimport { optimism } from \"./chain-definitions/optimism.js\";\nimport { zoraSepolia } from \"./chain-definitions/zora-sepolia.js\";\nimport { zora } from \"./chain-definitions/zora.js\";\nimport type { Chain } from \"./types.js\";\n\nconst opChains = [\n  base.id,\n  baseSepolia.id,\n  optimism.id,\n  optimismSepolia.id,\n  zora.id,\n  zoraSepolia.id,\n  34443, // mode\n  919, // mode testnet\n  42220, // celo\n  44787, // celo testnet\n  204, // opBNB\n  5611, // opBNB testnet\n];\n\n/**\n * TODO this should be in the chain definition itself\n * @internal\n */\nexport function isOpStackChain(chain: Chain) {\n  return opChains.includes(chain.id);\n}\n","import { isOpStackChain } from \"../../chains/constants.js\";\nimport { getGasPrice } from \"../../gas/get-gas-price.js\";\nimport { resolvePromisedValue } from \"../../utils/promise/resolve-promised-value.js\";\nimport { toEther } from \"../../utils/units.js\";\nimport { type EstimateGasOptions, estimateGas } from \"./estimate-gas.js\";\n\nexport type EstimateGasCostResult = {\n  /**\n   * The estimated gas cost in ether.\n   */\n  ether: string;\n  /**\n   * The estimated gas cost in wei.\n   */\n  wei: bigint;\n};\n\n/**\n * Estimate the gas cost of a transaction in ether and wei.\n * @example\n * ```ts\n * import { estimateGasCost } from \"thirdweb\";\n *\n * const gasCost = await estimateGasCost({ transaction });\n * ```\n * @transaction\n */\nexport async function estimateGasCost(\n  options: EstimateGasOptions,\n): Promise<EstimateGasCostResult> {\n  const { transaction } = options;\n  const from = options.from ?? options.account?.address ?? undefined;\n  const gasLimit =\n    (await resolvePromisedValue(transaction.gas)) ||\n    (await estimateGas({ transaction, from }));\n  const gasPrice = await getGasPrice({\n    client: transaction.client,\n    chain: transaction.chain,\n  });\n  let l1Fee: bigint;\n  if (isOpStackChain(transaction.chain)) {\n    const { estimateL1Fee } = await import(\"../../gas/estimate-l1-fee.js\");\n    l1Fee = await estimateL1Fee({\n      transaction,\n    });\n  } else {\n    l1Fee = 0n;\n  }\n  const wei = gasLimit * gasPrice + l1Fee;\n  return {\n    ether: toEther(wei),\n    wei,\n  };\n}\n","import { useQuery } from \"@tanstack/react-query\";\nimport { useEffect, useState } from \"react\";\nimport { getChainMetadata } from \"../../../../../../../chains/utils.js\";\nimport { NATIVE_TOKEN_ADDRESS } from \"../../../../../../../constants/addresses.js\";\nimport { getContract } from \"../../../../../../../contract/contract.js\";\nimport { getCurrencyMetadata } from \"../../../../../../../extensions/erc20/read/getCurrencyMetadata.js\";\nimport { getGasPrice } from \"../../../../../../../gas/get-gas-price.js\";\nimport { encode } from \"../../../../../../../transaction/actions/encode.js\";\nimport { estimateGasCost } from \"../../../../../../../transaction/actions/estimate-gas-cost.js\";\nimport type { PreparedTransaction } from \"../../../../../../../transaction/prepare-transaction.js\";\nimport type { Hex } from \"../../../../../../../utils/encoding/hex.js\";\nimport { resolvePromisedValue } from \"../../../../../../../utils/promise/resolve-promised-value.js\";\nimport type { Account } from \"../../../../../../../wallets/interfaces/wallet.js\";\nimport { getWalletBalance } from \"../../../../../../../wallets/utils/getWalletBalance.js\";\nimport type { SupportedChainAndTokens } from \"../swap/useSwapSupportedChains.js\";\nimport type { TransactionCostAndData } from \"./types.js\";\n\nexport function useTransactionCostAndData(args: {\n  transaction: PreparedTransaction;\n  account: Account | undefined;\n  supportedDestinations: SupportedChainAndTokens;\n}) {\n  const { transaction, account, supportedDestinations } = args;\n  // Compute query key of the transaction first\n  const [txQueryKey, setTxQueryKey] = useState<\n    | {\n        value: string | undefined;\n        erc20Value: string | undefined;\n        erc20Currency: string | undefined;\n        to: string | undefined;\n        data: Hex | undefined;\n      }\n    | undefined\n  >();\n  useEffect(() => {\n    Promise.all([\n      resolvePromisedValue(transaction.value),\n      resolvePromisedValue(transaction.erc20Value),\n      resolvePromisedValue(transaction.to),\n      encode(transaction),\n    ]).then(([value, erc20Value, to, data]) => {\n      setTxQueryKey({\n        value: value?.toString(),\n        erc20Value: erc20Value?.amountWei?.toString(),\n        erc20Currency: erc20Value?.tokenAddress,\n        to,\n        data,\n      });\n    });\n  }, [transaction]);\n\n  return useQuery({\n    queryKey: [\n      \"transaction-cost\",\n      transaction.chain.id,\n      account?.address,\n      txQueryKey,\n    ],\n    queryFn: async () => {\n      if (!account) {\n        throw new Error(\"No account\");\n      }\n\n      const erc20Value = await resolvePromisedValue(transaction.erc20Value);\n      if (erc20Value) {\n        const [tokenBalance, tokenMeta, gasCostWei] = await Promise.all([\n          getWalletBalance({\n            address: account.address,\n            chain: transaction.chain,\n            client: transaction.client,\n            tokenAddress: erc20Value.tokenAddress,\n          }),\n          getCurrencyMetadata({\n            contract: getContract({\n              address: erc20Value.tokenAddress,\n              chain: transaction.chain,\n              client: transaction.client,\n            }),\n          }),\n          getTransactionGasCost(transaction, account?.address),\n        ]);\n        const transactionValueWei = erc20Value.amountWei;\n        const walletBalance = tokenBalance;\n        const currency = {\n          address: erc20Value.tokenAddress,\n          name: tokenMeta.name,\n          symbol: tokenMeta.symbol,\n          icon: supportedDestinations\n            .find((c) => c.chain.id === transaction.chain.id)\n            ?.tokens.find(\n              (t) =>\n                t.address.toLowerCase() ===\n                erc20Value.tokenAddress.toLowerCase(),\n            )?.icon,\n        };\n        return {\n          token: currency,\n          decimals: tokenMeta.decimals,\n          walletBalance,\n          gasCostWei,\n          transactionValueWei,\n        } satisfies TransactionCostAndData;\n      }\n\n      const [nativeWalletBalance, chainMetadata, gasCostWei] =\n        await Promise.all([\n          getWalletBalance({\n            address: account.address,\n            chain: transaction.chain,\n            client: transaction.client,\n          }),\n          getChainMetadata(transaction.chain),\n          getTransactionGasCost(transaction, account?.address),\n        ]);\n\n      const walletBalance = nativeWalletBalance;\n      const transactionValueWei =\n        (await resolvePromisedValue(transaction.value)) || 0n;\n      return {\n        token: {\n          address: NATIVE_TOKEN_ADDRESS,\n          name: chainMetadata.nativeCurrency.name,\n          symbol: chainMetadata.nativeCurrency.symbol,\n          icon: chainMetadata.icon?.url,\n        },\n        decimals: 18,\n        walletBalance,\n        gasCostWei,\n        transactionValueWei,\n      } satisfies TransactionCostAndData;\n    },\n    enabled: !!transaction && !!account && !!txQueryKey,\n    refetchInterval: () => {\n      if (transaction.erc20Value) {\n        // if erc20 value is set, we don't need to poll\n        return undefined;\n      }\n      return 30_000;\n    },\n  });\n}\n\nasync function getTransactionGasCost(tx: PreparedTransaction, from?: string) {\n  try {\n    const gasCost = await estimateGasCost({\n      transaction: tx,\n      from,\n    });\n\n    const bufferCost = gasCost.wei / 10n;\n\n    // Note: get tx.value AFTER estimateGasCost\n    // add 10% extra gas cost to the estimate to ensure user buys enough to cover the tx cost\n    return gasCost.wei + bufferCost;\n  } catch {\n    if (from) {\n      // try again without passing from\n      return await getTransactionGasCost(tx);\n    }\n    // fallback if both fail, use the tx value + 2M * gas price\n    const gasPrice = await getGasPrice({\n      client: tx.client,\n      chain: tx.chain,\n    });\n\n    return 2_000_000n * gasPrice;\n  }\n}\n","import { trackPayEvent } from \"../../../../../../analytics/track.js\";\nimport type { Chain } from \"../../../../../../chains/types.js\";\nimport type { ThirdwebClient } from \"../../../../../../client/client.js\";\nimport { NATIVE_TOKEN_ADDRESS } from \"../../../../../../constants/addresses.js\";\nimport { formatNumber } from \"../../../../../../utils/formatNumber.js\";\nimport { toTokens } from \"../../../../../../utils/units.js\";\nimport type { Account } from \"../../../../../../wallets/interfaces/wallet.js\";\nimport { useCustomTheme } from \"../../../../../core/design-system/CustomThemeProvider.js\";\nimport { iconSize, spacing } from \"../../../../../core/design-system/index.js\";\nimport type { PayUIOptions } from \"../../../../../core/hooks/connection/ConnectButtonProps.js\";\nimport { useChainMetadata } from \"../../../../../core/hooks/others/useChainQuery.js\";\nimport { useActiveWallet } from \"../../../../../core/hooks/wallets/useActiveWallet.js\";\nimport { hasSponsoredTransactionsEnabled } from \"../../../../../core/utils/wallet.js\";\nimport { LoadingScreen } from \"../../../../wallets/shared/LoadingScreen.js\";\nimport type { PayEmbedConnectOptions } from \"../../../PayEmbed.js\";\nimport { ChainIcon } from \"../../../components/ChainIcon.js\";\nimport { Img } from \"../../../components/Img.js\";\nimport { Spacer } from \"../../../components/Spacer.js\";\nimport { TokenIcon } from \"../../../components/TokenIcon.js\";\nimport { WalletImage } from \"../../../components/WalletImage.js\";\nimport { Container, Line, ModalHeader } from \"../../../components/basic.js\";\nimport { Button } from \"../../../components/buttons.js\";\nimport { Text } from \"../../../components/text.js\";\nimport { ConnectButton } from \"../../ConnectButton.js\";\nimport type { ERC20OrNativeToken } from \"../nativeToken.js\";\nimport { useTransactionCostAndData } from \"./main/useBuyTxStates.js\";\nimport type { SupportedChainAndTokens } from \"./swap/useSwapSupportedChains.js\";\n\nexport function TransactionModeScreen(props: {\n  client: ThirdwebClient;\n  payUiOptions: Extract<PayUIOptions, { mode: \"transaction\" }>;\n  supportedDestinations: SupportedChainAndTokens;\n  payerAccount: Account | undefined;\n  connectOptions: PayEmbedConnectOptions | undefined;\n  onContinue: (\n    tokenAmount: string,\n    toChain: Chain,\n    toToken: ERC20OrNativeToken,\n  ) => void;\n}) {\n  const {\n    payUiOptions,\n    client,\n    payerAccount,\n    supportedDestinations,\n    onContinue,\n  } = props;\n  const { data: chainData } = useChainMetadata(payUiOptions.transaction.chain);\n  const metadata = payUiOptions.metadata;\n  const { data: transactionCostAndData } = useTransactionCostAndData({\n    transaction: payUiOptions.transaction,\n    account: payerAccount,\n    supportedDestinations,\n  });\n  const theme = useCustomTheme();\n  const activeWallet = useActiveWallet();\n  const sponsoredTransactionsEnabled =\n    hasSponsoredTransactionsEnabled(activeWallet);\n\n  if (!transactionCostAndData || !chainData) {\n    return <LoadingScreen />;\n  }\n\n  return (\n    <Container p=\"lg\">\n      <ModalHeader title={metadata?.name || \"Transaction\"} />\n\n      <Spacer y=\"lg\" />\n      <Container>\n        {metadata?.image ? (\n          <Img\n            client={client}\n            src={metadata?.image}\n            style={{\n              width: \"100%\",\n              borderRadius: spacing.md,\n              backgroundColor: theme.colors.tertiaryBg,\n            }}\n          />\n        ) : activeWallet ? (\n          <Container\n            flex=\"row\"\n            center=\"both\"\n            style={{\n              padding: spacing.md,\n              marginBottom: spacing.md,\n              borderRadius: spacing.md,\n              backgroundColor: theme.colors.tertiaryBg,\n            }}\n          >\n            <WalletImage\n              size={iconSize.xl}\n              id={activeWallet.id}\n              client={client}\n            />\n            <div\n              style={{\n                flexGrow: 1,\n                borderBottom: \"6px dotted\",\n                borderColor: theme.colors.secondaryIconColor,\n                marginLeft: spacing.md,\n                marginRight: spacing.md,\n              }}\n            />\n            <ChainIcon\n              client={client}\n              size={iconSize.xl}\n              chainIconUrl={chainData.icon?.url}\n            />\n          </Container>\n        ) : null}\n        <Spacer y=\"md\" />\n        <Container flex=\"row\">\n          <Container flex=\"column\" expand>\n            <Text size=\"md\" color=\"primaryText\" weight={700}>\n              Price\n            </Text>\n          </Container>\n          <Container expand>\n            <Container\n              flex=\"row\"\n              gap=\"xs\"\n              center=\"y\"\n              style={{ justifyContent: \"right\" }}\n            >\n              <TokenIcon\n                chain={payUiOptions.transaction.chain}\n                client={props.client}\n                size=\"sm\"\n                token={transactionCostAndData.token}\n              />\n              <Text color=\"primaryText\" size=\"md\" weight={700}>\n                {String(\n                  formatNumber(\n                    Number(\n                      toTokens(\n                        transactionCostAndData.transactionValueWei,\n                        transactionCostAndData.decimals,\n                      ),\n                    ),\n                    6,\n                  ),\n                )}\n                {transactionCostAndData.token.symbol}\n              </Text>\n            </Container>\n          </Container>\n        </Container>\n        <Spacer y=\"md\" />\n        <Line />\n        <Spacer y=\"md\" />\n        <Container flex=\"row\">\n          <Container flex=\"column\" expand>\n            <Text size=\"xs\" color=\"secondaryText\">\n              Gas Fees\n            </Text>\n          </Container>\n          <Container expand>\n            <Container\n              flex=\"row\"\n              gap=\"xs\"\n              center=\"y\"\n              style={{ justifyContent: \"right\" }}\n            >\n              <Text\n                color={sponsoredTransactionsEnabled ? \"success\" : \"primaryText\"}\n                size=\"xs\"\n              >\n                {sponsoredTransactionsEnabled\n                  ? \"Sponsored\"\n                  : `${String(\n                      formatNumber(\n                        Number(\n                          toTokens(\n                            transactionCostAndData.gasCostWei,\n                            chainData.nativeCurrency.decimals,\n                          ),\n                        ),\n                        6,\n                      ),\n                    )} ${chainData.nativeCurrency.symbol}`}\n              </Text>\n            </Container>\n          </Container>\n        </Container>\n        <Spacer y=\"sm\" />\n        <Container flex=\"row\">\n          <Container flex=\"column\" expand>\n            <Text size=\"xs\" color=\"secondaryText\">\n              Network\n            </Text>\n          </Container>\n          <Container expand>\n            <Container\n              flex=\"row\"\n              gap=\"xs\"\n              center=\"y\"\n              style={{ justifyContent: \"right\" }}\n            >\n              <ChainIcon\n                chainIconUrl={chainData.icon?.url}\n                size=\"xs\"\n                client={props.client}\n              />\n              <Text\n                size=\"xs\"\n                color=\"secondaryText\"\n                style={{ textAlign: \"right\" }}\n              >\n                {chainData.name}\n              </Text>\n            </Container>\n          </Container>\n        </Container>\n      </Container>\n      <Spacer y=\"xl\" />\n      {payerAccount ? (\n        <Button\n          variant=\"accent\"\n          fullWidth\n          onClick={() => {\n            let totalCostWei = transactionCostAndData.transactionValueWei;\n            if (\n              transactionCostAndData.token.address === NATIVE_TOKEN_ADDRESS &&\n              !sponsoredTransactionsEnabled\n            ) {\n              totalCostWei += transactionCostAndData.gasCostWei;\n            }\n            trackPayEvent({\n              event: \"choose_payment_method_transaction_mode\",\n              client,\n              walletAddress: payerAccount.address,\n              walletType: activeWallet?.id,\n            });\n            onContinue(\n              toTokens(totalCostWei, transactionCostAndData.decimals),\n              payUiOptions.transaction.chain,\n              transactionCostAndData.token,\n            );\n          }}\n        >\n          Choose Payment Method\n        </Button>\n      ) : (\n        <div>\n          <ConnectButton\n            {...props.connectOptions}\n            client={client}\n            theme={theme}\n            connectButton={{\n              style: {\n                width: \"100%\",\n              },\n            }}\n          />\n        </div>\n      )}\n    </Container>\n  );\n}\n","import { CheckIcon, ChevronDownIcon } from \"@radix-ui/react-icons\";\nimport type { ThirdwebClient } from \"../../../../../../client/client.js\";\nimport { shortenAddress } from \"../../../../../../utils/address.js\";\nimport type { WalletId } from \"../../../../../../wallets/wallet-types.js\";\nimport { useCustomTheme } from \"../../../../../core/design-system/CustomThemeProvider.js\";\nimport {\n  iconSize,\n  radius,\n  spacing,\n} from \"../../../../../core/design-system/index.js\";\nimport { useConnectedWallets } from \"../../../../../core/hooks/wallets/useConnectedWallets.js\";\nimport { useEnsAvatar, useEnsName } from \"../../../../../core/utils/wallet.js\";\nimport { Img } from \"../../../components/Img.js\";\nimport { WalletImage } from \"../../../components/WalletImage.js\";\nimport { Container } from \"../../../components/basic.js\";\nimport { Button } from \"../../../components/buttons.js\";\nimport { Text } from \"../../../components/text.js\";\n\nexport function WalletSelectorButton(props: {\n  address: string;\n  walletId: WalletId | undefined;\n  onClick: () => void;\n  client: ThirdwebClient;\n  containerStyle?: React.CSSProperties;\n  disableChevron?: boolean;\n  disabled?: boolean;\n  checked?: boolean;\n}) {\n  const theme = useCustomTheme();\n  return (\n    <Container\n      bg=\"tertiaryBg\"\n      style={{\n        borderRadius: radius.lg,\n        border: `1px solid ${theme.colors.borderColor}`,\n        ...props.containerStyle,\n      }}\n    >\n      <Button\n        fullWidth\n        disabled={props.disabled}\n        onClick={props.onClick}\n        variant=\"ghost\"\n        style={{\n          justifyContent: \"space-between\",\n          padding: spacing.sm,\n          backgroundColor: theme.colors.tertiaryBg,\n        }}\n        gap=\"sm\"\n      >\n        <WalletRow client={props.client} address={props.address} />\n        {!props.disableChevron && (\n          <ChevronDownIcon\n            width={iconSize.sm}\n            height={iconSize.sm}\n            style={{\n              color: theme.colors.secondaryText,\n            }}\n          />\n        )}\n\n        {props.checked && (\n          <CheckIcon width={iconSize.md} height={iconSize.md} />\n        )}\n      </Button>\n    </Container>\n  );\n}\n\nexport function WalletRow(props: {\n  client: ThirdwebClient;\n  address: string;\n  walletId?: WalletId;\n}) {\n  const { client, address } = props;\n  const connectedWallets = useConnectedWallets();\n  const wallet = connectedWallets.find(\n    (x) => x.getAccount()?.address === props.address,\n  );\n  const walletId = props.walletId || wallet?.id;\n  const ensNameQuery = useEnsName({\n    client,\n    address,\n  });\n  const addressOrENS = ensNameQuery.data || shortenAddress(address);\n  const ensAvatarQuery = useEnsAvatar({\n    client,\n    ensName: ensNameQuery.data,\n  });\n  return (\n    <Container flex=\"row\" center=\"y\" gap=\"sm\" color=\"secondaryText\">\n      {ensAvatarQuery.data ? (\n        <Img\n          src={ensAvatarQuery.data}\n          width={iconSize.md}\n          height={iconSize.md}\n          style={{\n            borderRadius: radius.sm,\n          }}\n          client={props.client}\n        />\n      ) : walletId ? (\n        <WalletImage id={walletId} size={iconSize.md} client={props.client} />\n      ) : null}\n\n      <Text size=\"sm\" color=\"primaryText\">\n        {addressOrENS || shortenAddress(props.address)}\n      </Text>\n    </Container>\n  );\n}\n","import styled from \"@emotion/styled\";\nimport { useCustomTheme } from \"../../../../../../core/design-system/CustomThemeProvider.js\";\nimport {\n  iconSize,\n  spacing,\n} from \"../../../../../../core/design-system/index.js\";\nimport { Spacer } from \"../../../../components/Spacer.js\";\nimport { Container, Line, ModalHeader } from \"../../../../components/basic.js\";\nimport { Button } from \"../../../../components/buttons.js\";\nimport { Text } from \"../../../../components/text.js\";\nimport { type CurrencyMeta, currencies } from \"./currencies.js\";\n\nexport function CurrencySelection(props: {\n  onSelect: (currency: CurrencyMeta) => void;\n  onBack: () => void;\n}) {\n  return (\n    <Container>\n      <Container p=\"lg\">\n        <ModalHeader title=\"Pay with\" onBack={props.onBack} />\n      </Container>\n\n      <Line />\n      <Spacer y=\"lg\" />\n\n      <Container flex=\"column\" gap=\"xs\" px=\"lg\">\n        {currencies.map((c) => {\n          return (\n            <SelectCurrencyButton\n              fullWidth\n              variant=\"secondary\"\n              key={c.shorthand}\n              onClick={() => props.onSelect(c)}\n              gap=\"sm\"\n            >\n              <c.icon size={iconSize.lg} />\n              <Container flex=\"column\" gap=\"xxs\">\n                <Text color=\"primaryText\">{c.shorthand}</Text>\n                <Text size=\"sm\">{c.name}</Text>\n              </Container>\n            </SelectCurrencyButton>\n          );\n        })}\n      </Container>\n\n      <Spacer y=\"lg\" />\n    </Container>\n  );\n}\n\nconst SelectCurrencyButton = /* @__PURE__ */ styled(Button)(() => {\n  const theme = useCustomTheme();\n  return {\n    background: theme.colors.tertiaryBg,\n    justifyContent: \"flex-start\",\n    gap: spacing.sm,\n    padding: spacing.sm,\n    \"&:hover\": {\n      background: theme.colors.secondaryButtonBg,\n      transform: \"scale(1.01)\",\n    },\n    transition: \"background 200ms ease, transform 150ms ease\",\n  };\n});\n","export function openOnrampPopup(link: string, theme: string) {\n  const height = 750;\n  const width = 500;\n  const top = (window.innerHeight - height) / 2;\n  const left = (window.innerWidth - width) / 2;\n\n  return window.open(\n    `${link}&theme=${theme}`,\n    \"thirdweb Pay\",\n    `width=${width}, height=${height}, top=${top}, left=${left}`,\n  );\n}\n","import { CheckCircledIcon } from \"@radix-ui/react-icons\";\nimport { useQueryClient } from \"@tanstack/react-query\";\nimport { useEffect, useRef } from \"react\";\nimport type { ThirdwebClient } from \"../../../../../../../client/client.js\";\nimport type { BuyWithFiatQuote } from \"../../../../../../../pay/buyWithFiat/getQuote.js\";\nimport type {\n  BuyWithFiatStatus,\n  ValidBuyWithFiatStatus,\n} from \"../../../../../../../pay/buyWithFiat/getStatus.js\";\nimport { isMobile } from \"../../../../../../../utils/web/isMobile.js\";\nimport { iconSize } from \"../../../../../../core/design-system/index.js\";\nimport { useBuyWithFiatStatus } from \"../../../../../../core/hooks/pay/useBuyWithFiatStatus.js\";\nimport { invalidateWalletBalance } from \"../../../../../../core/providers/invalidateWalletBalance.js\";\nimport { Spacer } from \"../../../../components/Spacer.js\";\nimport { Spinner } from \"../../../../components/Spinner.js\";\nimport { StepBar } from \"../../../../components/StepBar.js\";\nimport { Container, ModalHeader } from \"../../../../components/basic.js\";\nimport { Button } from \"../../../../components/buttons.js\";\nimport { Text } from \"../../../../components/text.js\";\nimport { AccentFailIcon } from \"../../../icons/AccentFailIcon.js\";\nimport { getBuyWithFiatStatusMeta } from \"../pay-transactions/statusMeta.js\";\nimport { OnRampTxDetailsTable } from \"./FiatTxDetailsTable.js\";\n\ntype UIStatus = \"loading\" | \"failed\" | \"completed\" | \"partialSuccess\";\n\n/**\n * Poll for \"Buy with Fiat\" status - when the on-ramp is in progress\n * - Show success screen if swap is not required and on-ramp is completed\n * - Show Failed screen if on-ramp failed\n * - call `onShowSwapFlow` if on-ramp is completed and swap is required\n */\nexport function OnrampStatusScreen(props: {\n  title: string;\n  client: ThirdwebClient;\n  onBack: () => void;\n  intentId: string;\n  hasTwoSteps: boolean;\n  openedWindow: Window | null;\n  quote: BuyWithFiatQuote;\n  onDone: () => void;\n  onShowSwapFlow: (status: BuyWithFiatStatus) => void;\n  transactionMode: boolean;\n  isEmbed: boolean;\n  onSuccess: ((status: BuyWithFiatStatus) => void) | undefined;\n}) {\n  const queryClient = useQueryClient();\n  const { openedWindow, onSuccess } = props;\n  const statusQuery = useBuyWithFiatStatus({\n    intentId: props.intentId,\n    client: props.client,\n  });\n\n  // determine UI status\n  let uiStatus: UIStatus = \"loading\";\n  if (\n    statusQuery.data?.status === \"ON_RAMP_TRANSFER_FAILED\" ||\n    statusQuery.data?.status === \"PAYMENT_FAILED\"\n  ) {\n    uiStatus = \"failed\";\n  } else if (statusQuery.data?.status === \"CRYPTO_SWAP_FALLBACK\") {\n    uiStatus = \"partialSuccess\";\n  } else if (statusQuery.data?.status === \"ON_RAMP_TRANSFER_COMPLETED\") {\n    uiStatus = \"completed\";\n  }\n\n  const purchaseCbCalled = useRef(false);\n  useEffect(() => {\n    if (purchaseCbCalled.current || !onSuccess) {\n      return;\n    }\n\n    if (statusQuery.data?.status === \"ON_RAMP_TRANSFER_COMPLETED\") {\n      purchaseCbCalled.current = true;\n      onSuccess(statusQuery.data);\n    }\n  }, [onSuccess, statusQuery.data]);\n\n  // close the onramp popup if onramp is completed\n  useEffect(() => {\n    if (!openedWindow || !statusQuery.data) {\n      return;\n    }\n\n    if (\n      statusQuery.data?.status === \"CRYPTO_SWAP_REQUIRED\" ||\n      statusQuery.data?.status === \"ON_RAMP_TRANSFER_COMPLETED\"\n    ) {\n      openedWindow.close();\n    }\n  }, [statusQuery.data, openedWindow]);\n\n  // invalidate wallet balance when onramp is completed\n  const invalidatedBalance = useRef(false);\n  useEffect(() => {\n    if (\n      !invalidatedBalance.current &&\n      statusQuery.data?.status === \"ON_RAMP_TRANSFER_COMPLETED\"\n    ) {\n      invalidatedBalance.current = true;\n      invalidateWalletBalance(queryClient);\n    }\n  }, [statusQuery.data, queryClient]);\n\n  // show swap flow\n  useEffect(() => {\n    if (statusQuery.data?.status === \"CRYPTO_SWAP_REQUIRED\") {\n      props.onShowSwapFlow(statusQuery.data);\n    }\n  }, [statusQuery.data, props.onShowSwapFlow]);\n\n  return (\n    <Container p=\"lg\">\n      <ModalHeader title={props.title} onBack={props.onBack} />\n\n      {props.hasTwoSteps && (\n        <>\n          <Spacer y=\"lg\" />\n          <StepBar steps={2} currentStep={1} />\n          <Spacer y=\"sm\" />\n          <Text size=\"xs\">\n            Step 1 of 2 - Buying {props.quote.onRampToken.token.symbol} with\n            {props.quote.fromCurrencyWithFees.currencySymbol}\n          </Text>\n        </>\n      )}\n\n      <OnrampStatusScreenUI\n        uiStatus={uiStatus}\n        onDone={props.onDone}\n        fiatStatus={statusQuery.data}\n        client={props.client}\n        transactionMode={props.transactionMode}\n        quote={props.quote}\n        isEmbed={props.isEmbed}\n      />\n    </Container>\n  );\n}\n\nfunction OnrampStatusScreenUI(props: {\n  uiStatus: UIStatus;\n  fiatStatus?: BuyWithFiatStatus;\n  onDone: () => void;\n  client: ThirdwebClient;\n  transactionMode: boolean;\n  isEmbed: boolean;\n  quote: BuyWithFiatQuote;\n}) {\n  const { uiStatus } = props;\n\n  const statusMeta = props.fiatStatus\n    ? getBuyWithFiatStatusMeta(props.fiatStatus)\n    : undefined;\n\n  const fiatStatus: ValidBuyWithFiatStatus | undefined =\n    props.fiatStatus && props.fiatStatus.status !== \"NOT_FOUND\"\n      ? props.fiatStatus\n      : undefined;\n\n  const onRampTokenQuote = props.quote.onRampToken;\n\n  const txDetails = (\n    <OnRampTxDetailsTable\n      client={props.client}\n      token={\n        fiatStatus?.source // source tx is onRamp token\n          ? {\n              chainId: fiatStatus.source.token.chainId,\n              address: fiatStatus.source.token.tokenAddress,\n              symbol: fiatStatus.source.token.symbol || \"\",\n              amount: fiatStatus.source.amount,\n            }\n          : {\n              chainId: onRampTokenQuote.token.chainId,\n              address: onRampTokenQuote.token.tokenAddress,\n              symbol: onRampTokenQuote.token.symbol,\n              amount: onRampTokenQuote.amount,\n            }\n      }\n      fiat={{\n        amount: props.quote.fromCurrencyWithFees.amount,\n        currencySymbol: props.quote.fromCurrencyWithFees.currencySymbol,\n      }}\n      statusMeta={\n        fiatStatus?.source && statusMeta\n          ? {\n              color: statusMeta?.color,\n              text: statusMeta?.status,\n              txHash: fiatStatus.source.transactionHash,\n            }\n          : undefined\n      }\n    />\n  );\n\n  return (\n    <Container>\n      <Spacer y=\"xl\" />\n\n      {uiStatus === \"loading\" && (\n        <>\n          <Spacer y=\"md\" />\n          <Container flex=\"row\" center=\"x\">\n            <Spinner size=\"xxl\" color=\"accentText\" />\n          </Container>\n          <Spacer y=\"md\" />\n          <Text color=\"primaryText\" size=\"lg\" center>\n            Buy Pending\n          </Text>\n          <Spacer y=\"sm\" />\n          {!isMobile() && <Text center>Complete the purchase in popup</Text>}\n          <Spacer y=\"xxl\" />\n          {txDetails}\n        </>\n      )}\n\n      {uiStatus === \"failed\" && (\n        <>\n          <Spacer y=\"md\" />\n          <Container flex=\"row\" center=\"x\">\n            <AccentFailIcon size={iconSize[\"3xl\"]} />\n          </Container>\n          <Spacer y=\"lg\" />\n          <Text color=\"primaryText\" size=\"lg\" center>\n            Transaction Failed\n          </Text>\n          <Spacer y=\"xxl\" />\n          {txDetails}\n        </>\n      )}\n\n      {uiStatus === \"completed\" && (\n        <>\n          <Spacer y=\"md\" />\n          <Container flex=\"row\" center=\"x\" color=\"success\">\n            <CheckCircledIcon\n              width={iconSize[\"3xl\"]}\n              height={iconSize[\"3xl\"]}\n            />\n          </Container>\n          <Spacer y=\"md\" />\n          <Text color=\"primaryText\" size=\"lg\" center>\n            Buy Complete\n          </Text>\n          {props.fiatStatus && props.fiatStatus.status !== \"NOT_FOUND\" && (\n            <>\n              <Spacer y=\"xxl\" />\n              {txDetails}\n              <Spacer y=\"sm\" />\n            </>\n          )}\n\n          {!props.isEmbed && (\n            <Button variant=\"accent\" fullWidth onClick={props.onDone}>\n              {props.transactionMode ? \"Continue Transaction\" : \"Done\"}\n            </Button>\n          )}\n        </>\n      )}\n    </Container>\n  );\n}\n","import { useCallback, useState } from \"react\";\nimport { trackPayEvent } from \"../../../../../../../analytics/track.js\";\nimport type { ThirdwebClient } from \"../../../../../../../client/client.js\";\nimport type { BuyWithFiatQuote } from \"../../../../../../../pay/buyWithFiat/getQuote.js\";\nimport {\n  type BuyWithFiatStatus,\n  getBuyWithFiatStatus,\n} from \"../../../../../../../pay/buyWithFiat/getStatus.js\";\nimport { isSwapRequiredPostOnramp } from \"../../../../../../../pay/buyWithFiat/isSwapRequiredPostOnramp.js\";\nimport { openOnrampPopup } from \"../openOnRamppopup.js\";\nimport { addPendingTx } from \"../swap/pendingSwapTx.js\";\nimport type { PayerInfo } from \"../types.js\";\nimport { OnrampStatusScreen } from \"./FiatStatusScreen.js\";\nimport { FiatSteps, fiatQuoteToPartialQuote } from \"./FiatSteps.js\";\nimport { PostOnRampSwapFlow } from \"./PostOnRampSwapFlow.js\";\n\n// 2 possible flows\n\n// If a Swap is required after doing onramp\n// 1. show the 2 steps ui with step 1 highlighted, on continue button click:\n// 2. open provider window, show onramp status screen, on onramp success:\n// 3. show the 2 steps ui with step 2 highlighted, on continue button click:\n// 4. show swap flow\n\n//  If a Swap is not required after doing onramp\n//  - window will already be opened before this component is mounted and `openedWindow` prop will be set, show onramp status screen\n\ntype Screen =\n  | {\n      id: \"step-1\";\n    }\n  | {\n      id: \"onramp-status\";\n    }\n  | {\n      id: \"postonramp-swap\";\n      data: BuyWithFiatStatus;\n    }\n  | {\n      id: \"step-2\";\n    };\n\nexport function FiatFlow(props: {\n  title: string;\n  quote: BuyWithFiatQuote;\n  onBack: () => void;\n  client: ThirdwebClient;\n  testMode: boolean;\n  theme: \"light\" | \"dark\";\n  openedWindow: Window | null;\n  onDone: () => void;\n  transactionMode: boolean;\n  isEmbed: boolean;\n  payer: PayerInfo;\n  onSuccess: (status: BuyWithFiatStatus) => void;\n}) {\n  const hasTwoSteps = isSwapRequiredPostOnramp(props.quote);\n  const [screen, setScreen] = useState<Screen>(\n    hasTwoSteps\n      ? {\n          id: \"step-1\",\n        }\n      : {\n          id: \"onramp-status\",\n        },\n  );\n\n  const [popupWindow, setPopupWindow] = useState<Window | null>(\n    props.openedWindow,\n  );\n\n  const onPostOnrampSuccess = useCallback(() => {\n    // report the status of fiat status instead of post onramp swap status when post onramp swap is successful\n    getBuyWithFiatStatus({\n      intentId: props.quote.intentId,\n      client: props.client,\n    }).then((status) => {\n      props.onSuccess(status);\n    });\n  }, [props.onSuccess, props.quote.intentId, props.client]);\n\n  if (screen.id === \"step-1\") {\n    return (\n      <FiatSteps\n        title={props.title}\n        client={props.client}\n        onBack={props.onBack}\n        partialQuote={fiatQuoteToPartialQuote(props.quote)}\n        step={1}\n        onContinue={() => {\n          const popup = openOnrampPopup(props.quote.onRampLink, props.theme);\n          trackPayEvent({\n            event: \"open_onramp_popup\",\n            client: props.client,\n            walletAddress: props.payer.account.address,\n            walletType: props.payer.wallet.id,\n          });\n          addPendingTx({\n            type: \"fiat\",\n            intentId: props.quote.intentId,\n          });\n          setPopupWindow(popup);\n          setScreen({ id: \"onramp-status\" });\n        }}\n      />\n    );\n  }\n\n  if (screen.id === \"onramp-status\") {\n    return (\n      <OnrampStatusScreen\n        title={props.title}\n        client={props.client}\n        intentId={props.quote.intentId}\n        onBack={props.onBack}\n        hasTwoSteps={hasTwoSteps}\n        openedWindow={popupWindow}\n        quote={props.quote}\n        onDone={props.onDone}\n        onShowSwapFlow={(_status) => {\n          setScreen({ id: \"postonramp-swap\", data: _status });\n        }}\n        transactionMode={props.transactionMode}\n        isEmbed={props.isEmbed}\n        onSuccess={props.onSuccess}\n      />\n    );\n  }\n\n  if (screen.id === \"postonramp-swap\") {\n    return (\n      <PostOnRampSwapFlow\n        title={props.title}\n        status={screen.data}\n        quote={fiatQuoteToPartialQuote(props.quote)}\n        client={props.client}\n        onBack={props.onBack}\n        onDone={props.onDone}\n        onSwapFlowStarted={() => {\n          // no op\n        }}\n        transactionMode={props.transactionMode}\n        isEmbed={props.isEmbed}\n        payer={props.payer}\n        onSuccess={onPostOnrampSuccess}\n      />\n    );\n  }\n\n  // never\n  return null;\n}\n","import { defineChain } from \"../utils.js\";\n\n/**\n * @chain\n */\nexport const polygon = /*@__PURE__*/ defineChain({\n  id: 137,\n  name: \"Polygon\",\n  nativeCurrency: { name: \"POL\", symbol: \"POL\", decimals: 18 },\n  blockExplorers: [\n    {\n      name: \"PolygonScan\",\n      url: \"https://polygonscan.com\",\n      apiUrl: \"https://api.polygonscan.com/api\",\n    },\n  ],\n});\n","import { useState } from \"react\";\nimport { polygon } from \"../../../../../../../chains/chain-definitions/polygon.js\";\nimport type { Chain } from \"../../../../../../../chains/types.js\";\nimport type {\n  FundWalletOptions,\n  PayUIOptions,\n} from \"../../../../../../core/hooks/connection/ConnectButtonProps.js\";\nimport { useActiveWalletChain } from \"../../../../../../core/hooks/wallets/useActiveWalletChain.js\";\nimport { useDebouncedValue } from \"../../../../hooks/useDebouncedValue.js\";\nimport { type ERC20OrNativeToken, NATIVE_TOKEN } from \"../../nativeToken.js\";\nimport {\n  type CurrencyMeta,\n  currencies,\n  usdCurrency,\n} from \"../fiat/currencies.js\";\nimport type { SupportedChainAndTokens } from \"../swap/useSwapSupportedChains.js\";\n\ntype SupportedSourcesInputData = {\n  chain: Chain;\n  tokens: {\n    address: string;\n    buyWithCryptoEnabled: boolean;\n    buyWithFiatEnabled: boolean;\n    name: string;\n    symbol: string;\n  }[];\n};\n\n// handle states for token and chain selection\nexport function useToTokenSelectionStates(options: {\n  payOptions: PayUIOptions;\n  supportedDestinations: SupportedChainAndTokens;\n}) {\n  const { payOptions, supportedDestinations } = options;\n  // --------------------------------------------------------------------------\n  // buy token amount ---------------------------------------------------------\n  // NOTE - for transaction / direct payment modes, the token amount is set when the user tap continue\n  const prefillBuy = (payOptions as FundWalletOptions)?.prefillBuy;\n  const activeChain = useActiveWalletChain();\n  const initialTokenAmount = prefillBuy?.amount || \"\";\n  const [tokenAmount, setTokenAmount] = useState<string>(initialTokenAmount);\n  const deferredTokenAmount = useDebouncedValue(tokenAmount, 300);\n\n  // Destination chain and token selection -----------------------------------\n  const [toChain, setToChain] = useState<Chain>(\n    // use prefill chain if available\n    prefillBuy?.chain ||\n      (payOptions.mode === \"transaction\" && payOptions.transaction?.chain) ||\n      (payOptions.mode === \"direct_payment\" && payOptions.paymentInfo?.chain) ||\n      // use active chain if its supported as destination\n      supportedDestinations.find((x) => x.chain.id === activeChain?.id)\n        ?.chain ||\n      // default to the first chain in supportedDestinations, or polygon if nothing is found at all\n      supportedDestinations[0]?.chain ||\n      polygon,\n  );\n\n  const [toToken, setToToken] = useState<ERC20OrNativeToken>(\n    prefillBuy?.token ||\n      (payOptions.mode === \"direct_payment\" && payOptions.paymentInfo.token) ||\n      NATIVE_TOKEN,\n  );\n\n  return {\n    toChain,\n    setToChain,\n    toToken,\n    setToToken,\n    tokenAmount,\n    setTokenAmount,\n    deferredTokenAmount,\n  };\n}\n\nexport function useFromTokenSelectionStates(options: {\n  payOptions: PayUIOptions;\n  supportedSources: SupportedSourcesInputData[];\n}) {\n  const { payOptions, supportedSources } = options;\n\n  // --------------------------------------------------------------------------\n  const firstSupportedSource = supportedSources?.length\n    ? supportedSources[0]\n    : undefined;\n\n  // Source token and chain selection ---------------------------------------------------\n  const [fromChain_, setFromChain] = useState<Chain>();\n\n  // use prefill chain if available\n  const fromChainDevSpecified =\n    (payOptions.buyWithCrypto !== false &&\n      payOptions.buyWithCrypto?.prefillSource?.chain) ||\n    (payOptions.mode === \"transaction\" && payOptions.transaction?.chain) ||\n    (payOptions.mode === \"direct_payment\" && payOptions.paymentInfo?.chain);\n\n  const fromChainFromApi = firstSupportedSource?.chain\n    ? firstSupportedSource.chain\n    : undefined;\n\n  const fromChain =\n    fromChain_ || fromChainDevSpecified || fromChainFromApi || polygon;\n\n  const [fromToken_, setFromToken] = useState<ERC20OrNativeToken>();\n\n  // use prefill token if available\n  const fromTokenDevSpecified =\n    (payOptions.buyWithCrypto !== false &&\n      payOptions.buyWithCrypto?.prefillSource?.token) ||\n    (payOptions.mode === \"direct_payment\" && payOptions.paymentInfo.token);\n\n  // May be updated in the future\n  const fromTokenFromApi = NATIVE_TOKEN;\n\n  // supported tokens query in here\n  const fromToken =\n    fromToken_ || fromTokenDevSpecified || fromTokenFromApi || NATIVE_TOKEN;\n\n  return {\n    fromChain,\n    setFromChain,\n    fromToken,\n    setFromToken,\n  };\n}\n\nexport function useFiatCurrencySelectionStates(options: {\n  payOptions: PayUIOptions;\n}) {\n  const { payOptions } = options;\n\n  // --------------------------------------------------------------------------\n  const devSpecifiedDefaultCurrency =\n    payOptions.buyWithFiat !== false\n      ? payOptions.buyWithFiat?.prefillSource?.currency\n      : undefined;\n\n  const defaultSelectedCurrencyShorthand =\n    devSpecifiedDefaultCurrency || getDefaultCurrencyBasedOnLocation();\n\n  const [selectedCurrency, setSelectedCurrency] = useState(\n    currencies.find((x) => x.shorthand === defaultSelectedCurrencyShorthand) ||\n      usdCurrency,\n  );\n\n  return {\n    selectedCurrency,\n    setSelectedCurrency,\n  };\n}\n\nfunction getDefaultCurrencyBasedOnLocation(): CurrencyMeta[\"shorthand\"] {\n  // if Intl is not supported - browser throws\n  try {\n    const timeZone = Intl.DateTimeFormat()\n      .resolvedOptions()\n      .timeZone.toLowerCase();\n\n    // Europe/London -> GBP\n    if (timeZone.includes(\"london\")) {\n      return \"GBP\";\n    }\n\n    // Europe/* -> EUR\n    if (timeZone.includes(\"europe\")) {\n      return \"EUR\";\n    }\n\n    // Japan\n    if (timeZone.includes(\"japan\")) {\n      return \"JPY\";\n    }\n\n    // canada\n    if (timeZone.includes(\"canada\")) {\n      return \"CAD\";\n    }\n\n    return \"USD\";\n  } catch {\n    return \"USD\";\n  }\n}\n","import styled from \"@emotion/styled\";\nimport { ChevronDownIcon } from \"@radix-ui/react-icons\";\nimport type { Chain } from \"../../../../../../../chains/types.js\";\nimport type { ThirdwebClient } from \"../../../../../../../client/client.js\";\nimport { useCustomTheme } from \"../../../../../../core/design-system/CustomThemeProvider.js\";\nimport {\n  fontSize,\n  iconSize,\n  spacing,\n} from \"../../../../../../core/design-system/index.js\";\nimport { useChainName } from \"../../../../../../core/hooks/others/useChainQuery.js\";\nimport { Skeleton } from \"../../../../components/Skeleton.js\";\nimport { Spacer } from \"../../../../components/Spacer.js\";\nimport { TokenIcon } from \"../../../../components/TokenIcon.js\";\nimport { Container } from \"../../../../components/basic.js\";\nimport { Button } from \"../../../../components/buttons.js\";\nimport { Input } from \"../../../../components/formElements.js\";\nimport { Text } from \"../../../../components/text.js\";\nimport { TokenSymbol } from \"../../../../components/token/TokenSymbol.js\";\nimport type { ERC20OrNativeToken } from \"../../nativeToken.js\";\nimport { getBuyTokenAmountFontSize } from \"../utils.js\";\n\n/**\n * @internal\n */\nexport function BuyTokenInput(props: {\n  token: ERC20OrNativeToken;\n  chain: Chain;\n  value: string;\n  onChange: (value: string) => void;\n  onSelectToken: () => void;\n  client: ThirdwebClient;\n  hideTokenSelector?: boolean;\n  freezeAmount?: boolean;\n  freezeChainAndToken?: boolean;\n}) {\n  const { name } = useChainName(props.chain);\n\n  const getWidth = () => {\n    let chars = props.value.replace(\".\", \"\").length;\n    const hasDot = props.value.includes(\".\");\n    if (hasDot) {\n      chars += 0.3;\n    }\n    return `calc(${`${Math.max(1, chars)}ch`} + 6px)`;\n  };\n\n  return (\n    <Container>\n      {/* Input */}\n\n      {/* biome-ignore lint/a11y/useKeyWithClickEvents: <explanation> */}\n      <div\n        onClick={(e) => {\n          e.currentTarget.querySelector(\"input\")?.focus();\n        }}\n      >\n        <Container\n          flex=\"row\"\n          center=\"both\"\n          gap=\"xs\"\n          style={{\n            flexWrap: \"nowrap\",\n          }}\n        >\n          <Input\n            variant=\"outline\"\n            pattern=\"^[0-9]*[.,]?[0-9]*$\"\n            inputMode=\"decimal\"\n            tabIndex={-1}\n            placeholder=\"0\"\n            type=\"text\"\n            data-placeholder={props.value === \"\"}\n            value={props.value || \"0\"}\n            disabled={props.freezeAmount}\n            onClick={(e) => {\n              // put cursor at the end of the input\n              if (props.value === \"\") {\n                e.currentTarget.setSelectionRange(\n                  e.currentTarget.value.length,\n                  e.currentTarget.value.length,\n                );\n              }\n            }}\n            onChange={(e) => {\n              let value = e.target.value;\n\n              if (value.startsWith(\".\")) {\n                value = `0${value}`;\n              }\n\n              const numValue = Number(value);\n              if (Number.isNaN(numValue)) {\n                return;\n              }\n\n              if (value.startsWith(\"0\") && !value.startsWith(\"0.\")) {\n                props.onChange(value.slice(1));\n              } else {\n                props.onChange(value);\n              }\n            }}\n            style={{\n              border: \"none\",\n              fontSize: getBuyTokenAmountFontSize(props.value),\n              boxShadow: \"none\",\n              borderRadius: \"0\",\n              padding: \"0\",\n              paddingBlock: \"2px\",\n              fontWeight: 600,\n              textAlign: \"right\",\n              width: getWidth(),\n              maxWidth: \"calc(100% - 100px)\",\n            }}\n          />\n          <TokenSymbol\n            token={props.token}\n            chain={props.chain}\n            size=\"lg\"\n            color=\"secondaryText\"\n          />\n        </Container>\n      </div>\n\n      {!props.hideTokenSelector && (\n        <>\n          <Spacer y=\"sm\" />\n\n          {/* Token / Chain selector */}\n          <Container flex=\"row\" center=\"x\">\n            <TokenButton\n              variant=\"secondary\"\n              fullWidth\n              style={{\n                fontSize: fontSize.sm,\n              }}\n              gap=\"xxs\"\n              onClick={props.onSelectToken}\n              disabled={props.freezeChainAndToken}\n            >\n              <Container flex=\"row\" center=\"y\" gap=\"sm\">\n                <TokenIcon\n                  token={props.token}\n                  chain={props.chain}\n                  size=\"md\"\n                  client={props.client}\n                />\n\n                <Container\n                  flex=\"column\"\n                  style={{\n                    gap: \"4px\",\n                  }}\n                >\n                  {/* Token Symbol */}\n                  <TokenSymbol\n                    token={props.token}\n                    chain={props.chain}\n                    size=\"sm\"\n                  />\n\n                  {/* Network Name */}\n                  {name ? (\n                    <Text size=\"xs\" color=\"secondaryText\">\n                      {name}\n                    </Text>\n                  ) : (\n                    <Skeleton width=\"90px\" height={fontSize.xs} />\n                  )}\n                </Container>\n              </Container>\n\n              <ChevronDownIcon\n                width={iconSize.sm}\n                height={iconSize.sm}\n                style={{\n                  marginLeft: \"auto\",\n                }}\n              />\n            </TokenButton>\n          </Container>\n        </>\n      )}\n    </Container>\n  );\n}\n\nconst TokenButton = /* @__PURE__ */ styled(Button)(() => {\n  const theme = useCustomTheme();\n  return {\n    background: theme.colors.tertiaryBg,\n    border: `1px solid ${theme.colors.borderColor}`,\n    justifyContent: \"flex-start\",\n    transition: \"background 0.3s\",\n    padding: spacing.sm,\n  };\n});\n","export function getBuyTokenAmountFontSize(value: string) {\n  return value.length > 10 ? \"26px\" : value.length > 6 ? \"34px\" : \"50px\";\n}\n","import type { BuyWithCryptoQuote } from \"../../../../../../../pay/buyWithCrypto/getQuote.js\";\nimport type { BuyWithFiatQuote } from \"../../../../../../../pay/buyWithFiat/getQuote.js\";\nimport { formatNumber } from \"../../../../../../../utils/formatNumber.js\";\nimport { Spacer } from \"../../../../components/Spacer.js\";\nimport { Container, Line } from \"../../../../components/basic.js\";\nimport { Text } from \"../../../../components/text.js\";\n\n/**\n * @internal\n */\nexport function SwapFees(props: {\n  quote: BuyWithCryptoQuote;\n}) {\n  return (\n    <Container\n      flex=\"column\"\n      gap=\"xs\"\n      style={{\n        alignItems: \"flex-start\",\n      }}\n    >\n      {props.quote.processingFees.map((fee) => {\n        const feeAmount = formatNumber(Number(fee.amount), 6);\n        return (\n          <Container\n            key={`${fee.token.chainId}_${fee.token.tokenAddress}_${feeAmount}`}\n            flex=\"row\"\n            gap=\"xxs\"\n          >\n            <Text color=\"primaryText\" size=\"sm\">\n              {feeAmount === 0 ? \"~\" : \"\"}\n              {feeAmount} {fee.token.symbol}\n            </Text>\n            <Text color=\"secondaryText\" size=\"sm\">\n              (${(fee.amountUSDCents / 100).toFixed(2)})\n            </Text>\n          </Container>\n        );\n      })}\n    </Container>\n  );\n}\n\n/**\n * @internal\n */\nexport function FiatFees(props: {\n  quote: BuyWithFiatQuote;\n}) {\n  return (\n    <Container flex=\"column\" gap=\"xs\">\n      {/* Amount ( without fees included ) */}\n      <div\n        style={{\n          display: \"flex\",\n          justifyContent: \"space-between\",\n        }}\n      >\n        <Text inline color=\"secondaryText\">\n          Amount\n        </Text>\n        <Text color=\"primaryText\" inline>\n          {formatNumber(Number(props.quote.fromCurrency.amount), 2)}\n          {props.quote.fromCurrency.currencySymbol}\n        </Text>\n      </div>\n\n      {/* Processing Fees */}\n      {props.quote.processingFees.map((fee, i) => {\n        const feeAmount = formatNumber(Number(fee.amount), 6);\n\n        return (\n          <div\n            // biome-ignore lint/suspicious/noArrayIndexKey: index is ok\n            key={i}\n            style={{\n              display: \"flex\",\n              justifyContent: \"space-between\",\n            }}\n          >\n            <Text inline color=\"secondaryText\">\n              {fee.feeType === \"NETWORK\" ? \"Network Fee\" : \"Processing Fee\"}\n            </Text>\n\n            <Text color=\"primaryText\" inline>\n              {feeAmount === 0 ? \"~\" : \"\"}\n              {feeAmount} {fee.currencySymbol}\n            </Text>\n          </div>\n        );\n      })}\n\n      <Spacer y=\"xxs\" />\n      <Line />\n      <Spacer y=\"xxs\" />\n\n      {/* Total Amount  */}\n      <div\n        style={{\n          display: \"flex\",\n          justifyContent: \"space-between\",\n        }}\n      >\n        <Text inline color=\"secondaryText\">\n          Total\n        </Text>\n        <Text color=\"primaryText\" inline>\n          {formatNumber(Number(props.quote.fromCurrencyWithFees.amount), 6)}\n          {props.quote.fromCurrencyWithFees.currencySymbol}\n        </Text>\n      </div>\n    </Container>\n  );\n}\n","import type { IconFC } from \"./types.js\";\n\n/**\n * @internal\n */\nexport const GenericWalletIcon: IconFC = (props) => {\n  return (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      fill=\"none\"\n      viewBox=\"0 0 18 18\"\n      width={props.size}\n      height={props.size}\n      role=\"presentation\"\n    >\n      <path\n        fill=\"currentColor\"\n        d=\"M15.6 4.6H1.85v-.55l12.1-.968v.968h1.65V2.4c0-1.21-.98-2.059-2.177-1.888L2.378 2.089C1.18 2.26.2 3.39.2 4.6v11a2.2 2.2 0 002.2 2.2h13.2a2.2 2.2 0 002.2-2.2V6.8a2.2 2.2 0 00-2.2-2.2zm-1.65 7.707a1.65 1.65 0 01-.63-3.176 1.65 1.65 0 11.63 3.176z\"\n      />\n    </svg>\n  );\n};\n","import { ChevronDownIcon } from \"@radix-ui/react-icons\";\nimport type { Chain } from \"../../../../../../../chains/types.js\";\nimport type { ThirdwebClient } from \"../../../../../../../client/client.js\";\nimport { formatNumber } from \"../../../../../../../utils/formatNumber.js\";\nimport type { Account } from \"../../../../../../../wallets/interfaces/wallet.js\";\nimport {\n  fontSize,\n  iconSize,\n  radius,\n  spacing,\n} from \"../../../../../../core/design-system/index.js\";\nimport { useChainName } from \"../../../../../../core/hooks/others/useChainQuery.js\";\nimport { useWalletBalance } from \"../../../../../../core/hooks/others/useWalletBalance.js\";\nimport type { TokenInfo } from \"../../../../../../core/utils/defaultTokens.js\";\nimport { Skeleton } from \"../../../../components/Skeleton.js\";\nimport { Container } from \"../../../../components/basic.js\";\nimport { Button } from \"../../../../components/buttons.js\";\nimport { Text } from \"../../../../components/text.js\";\nimport { TokenSymbol } from \"../../../../components/token/TokenSymbol.js\";\nimport { GenericWalletIcon } from \"../../../icons/GenericWalletIcon.js\";\nimport { formatTokenBalance } from \"../../formatTokenBalance.js\";\nimport { type NativeToken, isNativeToken } from \"../../nativeToken.js\";\nimport { PayTokenIcon } from \"../PayTokenIcon.js\";\n\n/**\n * Shows an amount \"value\" and renders the selected token and chain\n * It also renders the buttons to select the token and chain\n * It also renders the balance of active wallet for the selected token in selected chain\n * @internal\n */\nexport function PayWithCrypto(props: {\n  value: string;\n  onSelectToken: () => void;\n  chain: Chain;\n  token: TokenInfo | NativeToken;\n  isLoading: boolean;\n  client: ThirdwebClient;\n  freezeChainAndTokenSelection?: boolean;\n  payerAccount: Account;\n  swapRequired: boolean;\n}) {\n  const { name } = useChainName(props.chain);\n\n  const balanceQuery = useWalletBalance({\n    address: props.payerAccount.address,\n    chain: props.chain,\n    tokenAddress: isNativeToken(props.token) ? undefined : props.token.address,\n    client: props.client,\n  });\n\n  return (\n    <Container\n      bg=\"tertiaryBg\"\n      borderColor=\"borderColor\"\n      flex=\"row\"\n      style={{\n        borderWidth: \"1px\",\n        borderTopWidth: 0,\n        borderStyle: \"solid\",\n        flexWrap: \"nowrap\",\n        justifyContent: \"space-between\",\n        minHeight: \"64px\",\n        alignItems: \"center\",\n        ...(props.swapRequired\n          ? { borderBottom: \"none\" }\n          : {\n              borderBottomLeftRadius: radius.md,\n              borderBottomRightRadius: radius.md,\n            }),\n      }}\n    >\n      {/* Left */}\n      <Button\n        variant=\"ghost\"\n        onClick={props.onSelectToken}\n        gap=\"sm\"\n        style={{\n          paddingInline: spacing.sm,\n          paddingBlock: spacing.sm,\n          minWidth: \"50%\",\n          justifyContent: \"flex-start\",\n        }}\n        disabled={props.freezeChainAndTokenSelection}\n      >\n        <PayTokenIcon\n          token={props.token}\n          chain={props.chain}\n          size=\"md\"\n          client={props.client}\n        />\n        <Container flex=\"column\" gap=\"3xs\">\n          <Container flex=\"row\" gap=\"xs\" center=\"y\" color=\"primaryText\">\n            <TokenSymbol token={props.token} chain={props.chain} size=\"sm\" />\n            <ChevronDownIcon width={iconSize.sm} height={iconSize.sm} />\n          </Container>\n          {name ? (\n            <Text size=\"xs\">{name}</Text>\n          ) : (\n            <Skeleton width=\"90px\" height={fontSize.xs} />\n          )}\n        </Container>\n      </Button>\n\n      {/* Right */}\n      <div\n        style={{\n          flexGrow: 1,\n          flexShrink: 1,\n          display: \"flex\",\n          flexDirection: \"column\",\n          alignItems: \"flex-end\",\n          gap: spacing.xxs,\n          overflow: \"hidden\",\n          textOverflow: \"ellipsis\",\n          whiteSpace: \"nowrap\",\n          justifyContent: \"center\",\n          paddingRight: spacing.sm,\n        }}\n      >\n        {props.isLoading ? (\n          <Skeleton width=\"120px\" height={fontSize.md} color=\"borderColor\" />\n        ) : (\n          <Text\n            size=\"md\"\n            color={props.value ? \"primaryText\" : \"secondaryText\"}\n            style={{}}\n          >\n            {formatNumber(Number(props.value), 6) || \"\"}\n          </Text>\n        )}\n\n        <Container flex=\"row\" gap=\"xxs\" center=\"y\" color=\"secondaryText\">\n          <GenericWalletIcon size={fontSize.xs} />\n          {balanceQuery.data ? (\n            <Text size=\"xs\" color=\"secondaryText\" weight={500}>\n              {formatTokenBalance(balanceQuery.data, false)}\n            </Text>\n          ) : (\n            <Skeleton width=\"70px\" height={fontSize.xs} />\n          )}\n        </Container>\n      </div>\n    </Container>\n  );\n}\n","import type { TransactionReceipt } from \"../types.js\";\nimport {\n  type SendTransactionOptions,\n  sendTransaction,\n} from \"./send-transaction.js\";\nimport { waitForReceipt } from \"./wait-for-tx-receipt.js\";\n\n/**\n * Sends a transaction using the provided wallet.\n * @param options - The options for sending the transaction.\n * @returns A promise that resolves to the confirmed transaction receipt.\n * @throws An error if the wallet is not connected.\n * @transaction\n * @example\n *\n * ### Basic usage\n * ```ts\n * import { sendAndConfirmTransaction } from \"thirdweb\";\n *\n * const transactionReceipt = await sendAndConfirmTransaction({\n *  account,\n *  transaction\n * });\n * ```\n *\n * ### Gasless usage with [thirdweb Engine](https://portal.thirdweb.com/engine)\n * ```ts\n * const transactionReceipt = await sendAndConfirmTransaction({\n *  account,\n *  transaction,\n *  gasless: {\n *    provider: \"engine\",\n *    relayerUrl: \"https://thirdweb.engine-***.thirdweb.com/relayer/***\",\n *    relayerForwarderAddress: \"0x...\",\n *  }\n * });\n * ```\n *\n * ### Gasless usage with OpenZeppelin\n * ```ts\n * const transactionReceipt = await sendAndConfirmTransaction({\n *  account,\n *  transaction,\n *  gasless: {\n *    provider: \"openzeppelin\",\n *    relayerUrl: \"https://...\",\n *    relayerForwarderAddress: \"0x...\",\n *  }\n * });\n * ```\n */\nexport async function sendAndConfirmTransaction(\n  options: SendTransactionOptions,\n): Promise<TransactionReceipt> {\n  const submittedTx = await sendTransaction(options);\n  return waitForReceipt(submittedTx);\n}\n","import { CheckCircledIcon } from \"@radix-ui/react-icons\";\nimport { useState } from \"react\";\nimport type { Chain } from \"../../../../../../../chains/types.js\";\nimport type { ThirdwebClient } from \"../../../../../../../client/client.js\";\nimport { NATIVE_TOKEN_ADDRESS } from \"../../../../../../../constants/addresses.js\";\nimport { getContract } from \"../../../../../../../contract/contract.js\";\nimport { transfer } from \"../../../../../../../extensions/erc20/write/transfer.js\";\nimport { getBuyWithCryptoTransfer } from \"../../../../../../../pay/buyWithCrypto/getTransfer.js\";\nimport { sendAndConfirmTransaction } from \"../../../../../../../transaction/actions/send-and-confirm-transaction.js\";\nimport { sendTransaction } from \"../../../../../../../transaction/actions/send-transaction.js\";\nimport { prepareTransaction } from \"../../../../../../../transaction/prepare-transaction.js\";\nimport { toWei } from \"../../../../../../../utils/units.js\";\nimport { iconSize } from \"../../../../../../core/design-system/index.js\";\nimport { useChainSymbol } from \"../../../../../../core/hooks/others/useChainQuery.js\";\nimport { Spacer } from \"../../../../components/Spacer.js\";\nimport { Spinner } from \"../../../../components/Spinner.js\";\nimport { StepBar } from \"../../../../components/StepBar.js\";\nimport { SwitchNetworkButton } from \"../../../../components/SwitchNetwork.js\";\nimport { Container, Line, ModalHeader } from \"../../../../components/basic.js\";\nimport { Button } from \"../../../../components/buttons.js\";\nimport { Text } from \"../../../../components/text.js\";\nimport { type ERC20OrNativeToken, isNativeToken } from \"../../nativeToken.js\";\nimport { Step } from \"../Stepper.js\";\nimport { WalletRow } from \"../WalletSelectorButton.js\";\nimport { TokenInfoRow } from \"../pay-transactions/TokenInfoRow.js\";\nimport type { PayerInfo } from \"../types.js\";\nimport { ConnectorLine } from \"./ConfirmationScreen.js\";\n\ntype TrasnferConfirmationScreenProps = {\n  title: string;\n  onBack?: () => void;\n  setTransactionHash: (txHash: string) => void;\n  payer: PayerInfo;\n  receiverAddress: string;\n  client: ThirdwebClient;\n  onDone: () => void;\n  chain: Chain;\n  token: ERC20OrNativeToken;\n  tokenAmount: string;\n  transactionMode?: boolean;\n};\n\nexport function TransferConfirmationScreen(\n  props: TrasnferConfirmationScreenProps,\n) {\n  const {\n    title,\n    onBack,\n    receiverAddress,\n    client,\n    payer,\n    onDone,\n    chain,\n    token,\n    tokenAmount,\n    transactionMode,\n    setTransactionHash,\n  } = props;\n  const [step, setStep] = useState<\"approve\" | \"transfer\" | \"execute\">(\n    \"transfer\",\n  );\n  const [status, setStatus] = useState<\n    | { id: \"idle\" }\n    | { id: \"pending\" }\n    | { id: \"error\"; error: string }\n    | { id: \"done\" }\n  >({ id: \"idle\" });\n  const { symbol } = useChainSymbol(chain);\n\n  return (\n    <Container p=\"lg\">\n      <ModalHeader title={title} onBack={onBack} />\n      <Spacer y=\"xl\" />\n\n      {transactionMode && (\n        <>\n          <StepBar steps={2} currentStep={step === \"transfer\" ? 1 : 2} />\n          <Spacer y=\"sm\" />\n          <Text size=\"sm\">\n            {step === \"transfer\"\n              ? \"Step 1 of 2 - Transfer funds\"\n              : \"Step 2 of 2 - Finalize transaction\"}\n          </Text>\n          <Spacer y=\"xl\" />\n        </>\n      )}\n\n      {/* Sender Address */}\n      <Container\n        flex=\"row\"\n        center=\"y\"\n        style={{\n          justifyContent: \"space-between\",\n        }}\n      >\n        <Text size=\"sm\">From</Text>\n        <WalletRow address={payer.account.address} client={client} />\n      </Container>\n\n      <Spacer y=\"md\" />\n      <Line />\n      <Spacer y=\"md\" />\n\n      {/* Receiver Address */}\n      <Container\n        flex=\"row\"\n        center=\"y\"\n        style={{\n          justifyContent: \"space-between\",\n        }}\n      >\n        <Text size=\"sm\">To</Text>\n        <WalletRow address={receiverAddress} client={client} />\n      </Container>\n\n      <Spacer y=\"md\" />\n      <Line />\n      <Spacer y=\"md\" />\n\n      {/* Token Info */}\n      <TokenInfoRow\n        chainId={chain.id}\n        client={client}\n        label=\"Amount\"\n        tokenAmount={tokenAmount}\n        tokenSymbol={isNativeToken(token) ? symbol || \"\" : token.symbol}\n        tokenAddress={\n          isNativeToken(token) ? NATIVE_TOKEN_ADDRESS : token.address\n        }\n      />\n\n      <Spacer y=\"lg\" />\n\n      {transactionMode && (\n        <>\n          <Spacer y=\"sm\" />\n          <Container\n            gap=\"sm\"\n            flex=\"row\"\n            style={{\n              justifyContent: \"space-between\",\n            }}\n            center=\"y\"\n            color=\"accentText\"\n          >\n            <Step\n              isDone={step === \"execute\"}\n              isActive={step === \"transfer\"}\n              label={step === \"transfer\" ? \"Transfer\" : \"Done\"}\n            />\n            <ConnectorLine />\n            <Step\n              isDone={false}\n              label=\"Finalize\"\n              isActive={step === \"execute\"}\n            />\n          </Container>\n          <Spacer y=\"lg\" />\n        </>\n      )}\n\n      {status.id === \"error\" && (\n        <>\n          <Container flex=\"row\" gap=\"xs\" center=\"both\" color=\"danger\">\n            <Text color=\"danger\" size=\"sm\" style={{ textAlign: \"center\" }}>\n              {step === \"transfer\"\n                ? `${status.error || \"Failed to Transfer\"}`\n                : \"Failed to Execute\"}\n            </Text>\n          </Container>\n          <Spacer y=\"md\" />\n        </>\n      )}\n\n      {!transactionMode && step === \"execute\" && status.id === \"done\" && (\n        <>\n          <Container flex=\"row\" gap=\"xs\" center=\"both\" color=\"success\">\n            <CheckCircledIcon width={iconSize.sm} height={iconSize.sm} />\n            <Text color=\"success\" size=\"sm\">\n              Payment completed\n            </Text>\n          </Container>\n          <Spacer y=\"md\" />\n        </>\n      )}\n\n      {/* Execute */}\n      {payer.chain.id !== chain.id ? (\n        <SwitchNetworkButton\n          fullWidth\n          variant=\"accent\"\n          switchChain={async () => {\n            await props.payer.wallet.switchChain(chain);\n          }}\n        />\n      ) : (\n        <Button\n          variant=\"accent\"\n          fullWidth\n          disabled={status.id === \"pending\"}\n          onClick={async () => {\n            if (step === \"execute\") {\n              onDone();\n              return;\n            }\n\n            try {\n              setStatus({ id: \"pending\" });\n\n              // TRANSACTION MODE = transfer funds to another one of your wallets before executing the tx\n              if (transactionMode) {\n                const transaction = isNativeToken(token)\n                  ? prepareTransaction({\n                      client,\n                      chain,\n                      to: receiverAddress,\n                      value: toWei(tokenAmount),\n                    })\n                  : transfer({\n                      contract: getContract({\n                        address: token.address,\n                        chain: chain,\n                        client: client,\n                      }),\n                      to: receiverAddress,\n                      amount: tokenAmount,\n                    });\n                await sendAndConfirmTransaction({\n                  account: props.payer.account,\n                  transaction,\n                });\n                // switch to execute step\n                setStep(\"execute\");\n                setStatus({ id: \"idle\" });\n              } else {\n                const transferResponse = await getBuyWithCryptoTransfer({\n                  client,\n                  fromAddress: payer.account.address,\n                  toAddress: receiverAddress,\n                  chainId: chain.id,\n                  tokenAddress: isNativeToken(token)\n                    ? NATIVE_TOKEN_ADDRESS\n                    : token.address,\n                  amount: tokenAmount,\n                  purchaseData: undefined, // TODO (pay): add purchase data\n                });\n\n                if (transferResponse.approval) {\n                  setStep(\"approve\");\n                  // approve the transfer\n                  await sendAndConfirmTransaction({\n                    account: props.payer.account,\n                    transaction: transferResponse.approval,\n                  });\n                }\n\n                setStep(\"transfer\");\n                // execute the transfer\n                const transaction = transferResponse.transactionRequest;\n                const tx = await sendTransaction({\n                  account: props.payer.account,\n                  transaction,\n                });\n                // switches to the status polling screen\n                setTransactionHash(tx.transactionHash);\n                setStatus({ id: \"idle\" });\n              }\n              // biome-ignore lint/suspicious/noExplicitAny: catch multiple errors\n            } catch (e: any) {\n              console.error(e);\n              setStatus({\n                id: \"error\",\n                error: \"error\" in e ? e.error?.message : e?.message,\n              });\n            }\n          }}\n          gap=\"xs\"\n        >\n          {step === \"execute\" && (status.id === \"done\" ? \"Done\" : \"Continue\")}\n          {step === \"transfer\" &&\n            (status.id === \"pending\" ? \"Confirming\" : \"Confirm\")}\n          {step === \"approve\" &&\n            (status.id === \"pending\" ? \"Approving\" : \"Approve\")}\n          {status.id === \"pending\" && (\n            <Spinner size=\"sm\" color=\"accentButtonText\" />\n          )}\n        </Button>\n      )}\n    </Container>\n  );\n}\n","import type { Hash } from \"viem\";\nimport { getCachedChain } from \"../../chains/utils.js\";\nimport type { ThirdwebClient } from \"../../client/client.js\";\nimport { getContract } from \"../../contract/contract.js\";\nimport { approve } from \"../../extensions/erc20/write/approve.js\";\nimport type { PrepareTransactionOptions } from \"../../transaction/prepare-transaction.js\";\nimport type { Address } from \"../../utils/address.js\";\nimport { getClientFetch } from \"../../utils/fetch.js\";\nimport { getPayBuyWithCryptoTransferEndpoint } from \"../utils/definitions.js\";\nimport type {\n  QuoteApprovalInfo,\n  QuotePaymentToken,\n  QuoteTokenInfo,\n  QuoteTransactionRequest,\n} from \"./commonTypes.js\";\n\n/**\n * The parameters for [`getBuyWithCryptoTransfer`](https://portal.thirdweb.com/references/typescript/v5/getBuyWithCryptoTransfer) function\n * It facilitates a token transfer.\n * @buyCrypto\n */\nexport type GetBuyWithCryptoTransferParams = {\n  /**\n   * A client is the entry point to the thirdweb SDK. It is required for all other actions.\n   *\n   * You can create a client using the `createThirdwebClient` function.\n   * Refer to the [Creating a Client](https://portal.thirdweb.com/typescript/v5/client) documentation for more information.\n   *\n   */\n  client: ThirdwebClient;\n\n  /**\n   * The address of wallet that pays for the tokens.\n   */\n  fromAddress: string;\n\n  /**\n   * The address of the wallet where the tokens are sent\n   */\n  toAddress: string;\n\n  /**\n   * The chain id of the transfer token.\n   */\n  chainId: number;\n\n  /**\n   * The token address of the transfer token.\n   */\n  tokenAddress: string;\n\n  /**\n   * The amount of token to be transferred.\n   */\n  amount: string;\n\n  /**\n   * Extra details to store with the purchase.\n   *\n   * This details will be stored with the purchase and can be retrieved later via the status API or Webhook\n   */\n  purchaseData?: object;\n};\n\n/**\n * @buyCrypto\n */\ntype BuyWithCryptoTransferResponse = {\n  quoteId: string;\n  transactionRequest: QuoteTransactionRequest;\n  approval?: QuoteApprovalInfo;\n  fromAddress: string;\n  toAddress: string;\n  token: QuoteTokenInfo;\n  paymentToken: QuotePaymentToken;\n  processingFee: QuotePaymentToken;\n  estimatedGasCostUSDCents: number;\n};\n\n/**\n * @buyCrypto\n */\nexport type BuyWithCryptoTransfer = {\n  transactionRequest: PrepareTransactionOptions;\n  approval?: PrepareTransactionOptions;\n  fromAddress: string;\n  toAddress: string;\n  paymentToken: QuotePaymentToken;\n  processingFee: QuotePaymentToken;\n  estimatedGasCostUSDCents: number;\n  client: ThirdwebClient;\n};\n\n/**\n * Get a quote of type [`BuyWithCryptoTransfer`](https://portal.thirdweb.com/references/typescript/v5/BuyWithCryptoTransfer) to facilitate a token transfer transaction.\n * Using this instead of a native transfer allows you to receive status and webhooks about successful or failed payments.\n *\n * Once you have the quote, you can use `prepareTransaction` and prepare the transaction for submission.\n * @param params - object of type [`GetBuyWithCryptoTransferParams`](https://portal.thirdweb.com/references/typescript/v5/GetBuyWithCryptoTransferParams)\n * @returns Object of type [`BuyWithCryptoTransfer`](https://portal.thirdweb.com/references/typescript/v5/BuyWithCryptoTransfer) which contains the information about the transfer\n * @example\n *\n * ```ts\n * import { getBuyWithCryptoTransfer } from \"thirdweb/pay\";\n *\n * const transfer = await getBuyWithCryptoTransfer({\n *  client,\n *  fromAddress: \"0x...\", // wallet address\n *  toAddress: \"0x...\", // recipient address - likely to be your wallet\n *  chainId: 10, // chain id of the token\n *  tokenAddress: \"0x...\", // address of the token\n *  amount: \"10\", // amount of token to transfer\n *  purchaseData: {  // any metadata for you to attribute this purchase\n *    \"customerId\": \"yourId\"\n *  }\n * });\n * ```\n * @buyCrypto\n */\nexport async function getBuyWithCryptoTransfer(\n  params: GetBuyWithCryptoTransferParams,\n): Promise<BuyWithCryptoTransfer> {\n  try {\n    const clientFetch = getClientFetch(params.client);\n\n    const response = await clientFetch(getPayBuyWithCryptoTransferEndpoint(), {\n      method: \"POST\",\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        fromAddress: params.fromAddress,\n        toAddress: params.toAddress,\n        chainId: params.chainId,\n        tokenAddress: params.tokenAddress,\n        amount: params.amount,\n        purchaseData: params.purchaseData,\n      }),\n    });\n\n    if (!response.ok) {\n      const errorObj = await response.json();\n      if (errorObj && \"error\" in errorObj) {\n        throw errorObj;\n      }\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n\n    const data: BuyWithCryptoTransferResponse = (await response.json()).result;\n\n    const transfer: BuyWithCryptoTransfer = {\n      transactionRequest: {\n        chain: getCachedChain(data.transactionRequest.chainId),\n        client: params.client,\n        data: data.transactionRequest.data as Hash,\n        to: data.transactionRequest.to as Address,\n        value: BigInt(data.transactionRequest.value),\n        gas: BigInt(data.transactionRequest.gasLimit),\n      },\n      approval: data.approval\n        ? approve({\n            contract: getContract({\n              client: params.client,\n              address: data.approval.tokenAddress,\n              chain: getCachedChain(data.approval.chainId),\n            }),\n            spender: data.approval.spenderAddress as Address,\n            amountWei: BigInt(data.approval.amountWei),\n          })\n        : undefined,\n      fromAddress: data.fromAddress,\n      toAddress: data.toAddress,\n      paymentToken: data.paymentToken,\n      processingFee: data.processingFee,\n      estimatedGasCostUSDCents: data.estimatedGasCostUSDCents,\n      client: params.client,\n    };\n\n    return transfer;\n  } catch (error) {\n    console.error(\"Error getting buy with crypto transfer\", error);\n    throw error;\n  }\n}\n","import { useState } from \"react\";\nimport type { Chain } from \"../../../../../../../chains/types.js\";\nimport type { ThirdwebClient } from \"../../../../../../../client/client.js\";\nimport type { BuyWithCryptoStatus } from \"../../../../../../../pay/buyWithCrypto/getStatus.js\";\nimport type { ERC20OrNativeToken } from \"../../nativeToken.js\";\nimport type { PayerInfo } from \"../types.js\";\nimport { SwapStatusScreen } from \"./SwapStatusScreen.js\";\nimport { TransferConfirmationScreen } from \"./TransferConfirmationScreen.js\";\n\ntype TrasnferFlowProps = {\n  title: string;\n  onBack?: () => void;\n  payer: PayerInfo;\n  receiverAddress: string;\n  client: ThirdwebClient;\n  onDone: () => void;\n  onTryAgain: () => void;\n  isEmbed: boolean;\n  onSuccess: ((status: BuyWithCryptoStatus) => void) | undefined;\n  chain: Chain;\n  token: ERC20OrNativeToken;\n  tokenAmount: string;\n  transactionMode?: boolean;\n};\n\nexport function TransferFlow(props: TrasnferFlowProps) {\n  const [transferTxHash, setTransferTxHash] = useState<string | undefined>();\n\n  if (transferTxHash) {\n    return (\n      <SwapStatusScreen\n        title={props.title}\n        onBack={props.onBack}\n        onTryAgain={props.onTryAgain}\n        swapTxHash={transferTxHash}\n        client={props.client}\n        onDone={props.onDone}\n        transactionMode={false}\n        isEmbed={props.isEmbed}\n        quote={undefined}\n        onSuccess={props.onSuccess}\n      />\n    );\n  }\n\n  return (\n    <TransferConfirmationScreen\n      {...props}\n      setTransactionHash={setTransferTxHash}\n    />\n  );\n}\n","import { PlusIcon } from \"@radix-ui/react-icons\";\nimport type { ThirdwebClient } from \"../../../../../../../client/client.js\";\nimport type { Wallet } from \"../../../../../../../wallets/interfaces/wallet.js\";\nimport type { WalletId } from \"../../../../../../../wallets/wallet-types.js\";\nimport { useCustomTheme } from \"../../../../../../core/design-system/CustomThemeProvider.js\";\nimport {\n  iconSize,\n  radius,\n  spacing,\n} from \"../../../../../../core/design-system/index.js\";\nimport { useConnectedWallets } from \"../../../../../../core/hooks/wallets/useConnectedWallets.js\";\nimport { Spacer } from \"../../../../components/Spacer.js\";\nimport { Container } from \"../../../../components/basic.js\";\nimport { Button } from \"../../../../components/buttons.js\";\nimport { Text } from \"../../../../components/text.js\";\nimport { WalletSelectorButton } from \"../WalletSelectorButton.js\";\n\nexport function WalletSwitcherDrawerContent(props: {\n  client: ThirdwebClient;\n  showAllWallets: boolean;\n  wallets: Wallet[] | undefined;\n  onSelect: (wallet: Wallet) => void;\n  onBack: () => void;\n  onConnect: () => void;\n  selectedAddress: string;\n  hiddenWallets?: WalletId[];\n}) {\n  const theme = useCustomTheme();\n  const connectedWallets = useConnectedWallets();\n\n  // if all wallets are connected and showAll wallets is disabled, hide the connect button\n  const hideConnectButton =\n    !props.showAllWallets &&\n    props.wallets?.every((w) => connectedWallets.includes(w));\n\n  return (\n    <Container>\n      <Container flex=\"column\" gap=\"xs\">\n        {connectedWallets\n          .filter((w) => !props.hiddenWallets?.includes(w.id))\n          .map((w) => {\n            const address = w.getAccount()?.address;\n            return (\n              <WalletSelectorButton\n                key={w.id}\n                walletId={w.id}\n                client={props.client}\n                address={address || \"\"}\n                onClick={() => {\n                  props.onSelect(w);\n                  props.onBack();\n                }}\n                disableChevron\n                checked={false}\n              />\n            );\n          })}\n        {!hideConnectButton && (\n          <Button\n            variant=\"secondary\"\n            fullWidth\n            onClick={props.onConnect}\n            gap=\"xs\"\n            bg=\"tertiaryBg\"\n            style={{\n              borderRadius: radius.lg,\n              border: `1px solid ${theme.colors.borderColor}`,\n              padding: spacing.sm,\n            }}\n          >\n            <Container flex=\"row\" gap=\"sm\" center=\"y\" expand>\n              <PlusIcon width={iconSize.md} height={iconSize.md} />\n              <Text size=\"sm\" color=\"primaryText\">\n                Add Another Wallet\n              </Text>\n            </Container>\n          </Button>\n        )}\n      </Container>\n      <Spacer y=\"sm\" />\n    </Container>\n  );\n}\n","import { IdCardIcon } from \"@radix-ui/react-icons\";\nimport { useQueryClient } from \"@tanstack/react-query\";\nimport { useCallback, useMemo, useState } from \"react\";\nimport { trackPayEvent } from \"../../../../../../analytics/track.js\";\nimport type { Chain } from \"../../../../../../chains/types.js\";\nimport type { ThirdwebClient } from \"../../../../../../client/client.js\";\nimport { NATIVE_TOKEN_ADDRESS } from \"../../../../../../constants/addresses.js\";\nimport type { GetBuyWithCryptoQuoteParams } from \"../../../../../../pay/buyWithCrypto/getQuote.js\";\nimport type { BuyWithCryptoStatus } from \"../../../../../../pay/buyWithCrypto/getStatus.js\";\nimport type { BuyWithFiatStatus } from \"../../../../../../pay/buyWithFiat/getStatus.js\";\nimport { isSwapRequiredPostOnramp } from \"../../../../../../pay/buyWithFiat/isSwapRequiredPostOnramp.js\";\nimport { formatNumber } from \"../../../../../../utils/formatNumber.js\";\nimport type { Account } from \"../../../../../../wallets/interfaces/wallet.js\";\nimport type { WalletId } from \"../../../../../../wallets/wallet-types.js\";\nimport {\n  type Theme,\n  iconSize,\n  spacing,\n} from \"../../../../../core/design-system/index.js\";\nimport type {\n  FundWalletOptions,\n  PayUIOptions,\n} from \"../../../../../core/hooks/connection/ConnectButtonProps.js\";\nimport { useWalletBalance } from \"../../../../../core/hooks/others/useWalletBalance.js\";\nimport { useBuyWithCryptoQuote } from \"../../../../../core/hooks/pay/useBuyWithCryptoQuote.js\";\nimport { useBuyWithFiatQuote } from \"../../../../../core/hooks/pay/useBuyWithFiatQuote.js\";\nimport { useActiveAccount } from \"../../../../../core/hooks/wallets/useActiveAccount.js\";\nimport { invalidateWalletBalance } from \"../../../../../core/providers/invalidateWalletBalance.js\";\nimport type { SupportedTokens } from \"../../../../../core/utils/defaultTokens.js\";\nimport { LoadingScreen } from \"../../../../wallets/shared/LoadingScreen.js\";\nimport type { PayEmbedConnectOptions } from \"../../../PayEmbed.js\";\nimport { ChainName } from \"../../../components/ChainName.js\";\nimport {\n  Drawer,\n  DrawerOverlay,\n  useDrawer,\n} from \"../../../components/Drawer.js\";\nimport { Spacer } from \"../../../components/Spacer.js\";\nimport { Spinner } from \"../../../components/Spinner.js\";\nimport { SwitchNetworkButton } from \"../../../components/SwitchNetwork.js\";\nimport { Container, Line, ModalHeader } from \"../../../components/basic.js\";\nimport { Button } from \"../../../components/buttons.js\";\nimport { Text } from \"../../../components/text.js\";\nimport { TokenSymbol } from \"../../../components/token/TokenSymbol.js\";\nimport { ConnectButton } from \"../../ConnectButton.js\";\nimport { ChainButton, NetworkSelectorContent } from \"../../NetworkSelector.js\";\nimport { CoinsIcon } from \"../../icons/CoinsIcon.js\";\nimport type { ConnectLocale } from \"../../locale/types.js\";\nimport { TokenSelector } from \"../TokenSelector.js\";\nimport { WalletSwitcherConnectionScreen } from \"../WalletSwitcherConnectionScreen.js\";\nimport { type ERC20OrNativeToken, isNativeToken } from \"../nativeToken.js\";\nimport { DirectPaymentModeScreen } from \"./DirectPaymentModeScreen.js\";\nimport { EstimatedTimeAndFees } from \"./EstimatedTimeAndFees.js\";\nimport { PayTokenIcon } from \"./PayTokenIcon.js\";\nimport { PayWithCreditCard } from \"./PayWIthCreditCard.js\";\nimport { TransactionModeScreen } from \"./TransactionModeScreen.js\";\nimport { WalletSelectorButton } from \"./WalletSelectorButton.js\";\nimport { CurrencySelection } from \"./fiat/CurrencySelection.js\";\nimport { FiatFlow } from \"./fiat/FiatFlow.js\";\nimport type { CurrencyMeta } from \"./fiat/currencies.js\";\nimport type { SelectedScreen } from \"./main/types.js\";\nimport {\n  type PaymentMethods,\n  useEnabledPaymentMethods,\n} from \"./main/useEnabledPaymentMethods.js\";\nimport {\n  useFiatCurrencySelectionStates,\n  useFromTokenSelectionStates,\n  useToTokenSelectionStates,\n} from \"./main/useUISelectionStates.js\";\nimport { openOnrampPopup } from \"./openOnRamppopup.js\";\nimport { BuyTokenInput } from \"./swap/BuyTokenInput.js\";\nimport { FiatFees, SwapFees } from \"./swap/Fees.js\";\nimport { PayWithCrypto } from \"./swap/PayWithCrypto.js\";\nimport { SwapFlow } from \"./swap/SwapFlow.js\";\nimport { TransferFlow } from \"./swap/TransferFlow.js\";\nimport { WalletSwitcherDrawerContent } from \"./swap/WalletSwitcherDrawerContent.js\";\nimport { addPendingTx } from \"./swap/pendingSwapTx.js\";\nimport {\n  type SupportedChainAndTokens,\n  useBuySupportedDestinations,\n  useBuySupportedSources,\n} from \"./swap/useSwapSupportedChains.js\";\nimport type { PayerInfo } from \"./types.js\";\nimport { usePayerSetup } from \"./usePayerSetup.js\";\n\nexport type BuyScreenProps = {\n  title: string;\n  onBack: (() => void) | undefined;\n  supportedTokens: SupportedTokens | undefined;\n  client: ThirdwebClient;\n  connectLocale: ConnectLocale;\n  payOptions: PayUIOptions;\n  theme: \"light\" | \"dark\" | Theme;\n  onDone: () => void;\n  connectOptions: PayEmbedConnectOptions | undefined;\n  hiddenWallets?: WalletId[];\n  isEmbed: boolean;\n};\n\n/**\n * @internal\n */\nexport default function BuyScreen(props: BuyScreenProps) {\n  const isTestMode = props.payOptions.buyWithCrypto\n    ? props.payOptions.buyWithCrypto.testMode\n    : undefined;\n  const supportedDestinationsQuery = useBuySupportedDestinations(\n    props.client,\n    isTestMode,\n  );\n\n  if (!supportedDestinationsQuery.data) {\n    return <LoadingScreen />;\n  }\n\n  return (\n    <BuyScreenContent\n      {...props}\n      supportedDestinations={supportedDestinationsQuery.data}\n    />\n  );\n}\n\ntype BuyScreenContentProps = {\n  title: string;\n  client: ThirdwebClient;\n  onBack?: () => void;\n  supportedTokens?: SupportedTokens;\n  supportedDestinations: SupportedChainAndTokens;\n  connectLocale: ConnectLocale;\n  theme: \"light\" | \"dark\" | Theme;\n  payOptions: PayUIOptions;\n  onDone: () => void;\n  hiddenWallets?: WalletId[];\n  connectOptions: PayEmbedConnectOptions | undefined;\n  isEmbed: boolean;\n};\n\n/**\n * @internal\n */\nfunction BuyScreenContent(props: BuyScreenContentProps) {\n  const { client, supportedDestinations, connectLocale, payOptions } = props;\n\n  const activeAccount = useActiveAccount();\n  const { payer, setPayer } = usePayerSetup();\n\n  const [screen, setScreen] = useState<SelectedScreen>({\n    id: \"main\",\n  });\n\n  const {\n    tokenAmount,\n    setTokenAmount,\n    toChain,\n    setToChain,\n    deferredTokenAmount,\n    toToken,\n    setToToken,\n  } = useToTokenSelectionStates({\n    payOptions,\n    supportedDestinations,\n  });\n\n  const [hasEditedAmount, setHasEditedAmount] = useState(false);\n\n  const onDone = useCallback(() => {\n    setScreen({ id: \"main\" });\n    props.onDone();\n  }, [props.onDone]);\n\n  // check if the screen is expanded or not\n\n  // update supportedSources whenever toToken or toChain is updated\n  const supportedSourcesQuery = useBuySupportedSources({\n    client: props.client,\n    destinationChainId: toChain.id,\n    destinationTokenAddress: isNativeToken(toToken)\n      ? NATIVE_TOKEN_ADDRESS\n      : toToken.address,\n  });\n\n  const destinationSupportedTokens: SupportedTokens = useMemo(() => {\n    return createSupportedTokens(\n      supportedDestinations,\n      payOptions,\n      props.supportedTokens,\n    );\n  }, [props.supportedTokens, supportedDestinations, payOptions]);\n\n  const sourceSupportedTokens: SupportedTokens | undefined = useMemo(() => {\n    if (!supportedSourcesQuery.data) {\n      return undefined;\n    }\n\n    const supportedSources = supportedSourcesQuery.data;\n\n    return createSupportedTokens(\n      supportedSources,\n      payOptions,\n      props.supportedTokens,\n    );\n  }, [props.supportedTokens, supportedSourcesQuery.data, payOptions]);\n\n  const { fromChain, setFromChain, fromToken, setFromToken } =\n    useFromTokenSelectionStates({\n      payOptions,\n      supportedSources: supportedSourcesQuery.data || [],\n    });\n\n  const { selectedCurrency, setSelectedCurrency } =\n    useFiatCurrencySelectionStates({\n      payOptions,\n    });\n\n  const enabledPaymentMethods = useEnabledPaymentMethods({\n    payOptions: props.payOptions,\n    supportedDestinations: props.supportedDestinations,\n    toChain: toChain,\n    toToken: toToken,\n  });\n\n  const payDisabled =\n    enabledPaymentMethods.showPaymentSelection === false &&\n    enabledPaymentMethods.buyWithCryptoEnabled === false &&\n    enabledPaymentMethods.buyWithFiatEnabled === false;\n\n  // screens ----------------------------\n\n  const queryClient = useQueryClient();\n\n  const onSwapSuccess = useCallback(\n    (_status: BuyWithCryptoStatus) => {\n      props.payOptions.onPurchaseSuccess?.({\n        type: \"crypto\",\n        status: _status,\n      });\n      invalidateWalletBalance(queryClient);\n    },\n    [props.payOptions.onPurchaseSuccess, queryClient],\n  );\n\n  const onFiatSuccess = useCallback(\n    (_status: BuyWithFiatStatus) => {\n      props.payOptions.onPurchaseSuccess?.({\n        type: \"fiat\",\n        status: _status,\n      });\n      invalidateWalletBalance(queryClient);\n    },\n    [props.payOptions.onPurchaseSuccess, queryClient],\n  );\n\n  if (screen.id === \"connect-payer-wallet\") {\n    return (\n      <WalletSwitcherConnectionScreen\n        accountAbstraction={props.connectOptions?.accountAbstraction}\n        appMetadata={props.connectOptions?.appMetadata}\n        chain={props.connectOptions?.chain}\n        chains={props.connectOptions?.chains}\n        client={props.client}\n        connectLocale={props.connectLocale}\n        isEmbed={props.isEmbed}\n        onBack={() => setScreen(screen.backScreen)}\n        onSelect={(w) => {\n          const account = w.getAccount();\n          const chain = w.getChain();\n          if (w && account && chain) {\n            setPayer({\n              account,\n              chain,\n              wallet: w,\n            });\n          }\n        }}\n        hiddenWallets={props.hiddenWallets}\n        recommendedWallets={props.connectOptions?.recommendedWallets}\n        showAllWallets={\n          props.connectOptions?.showAllWallets === undefined\n            ? true\n            : props.connectOptions?.showAllWallets\n        }\n        walletConnect={props.connectOptions?.walletConnect}\n        wallets={props.connectOptions?.wallets?.filter((w) => w.id !== \"inApp\")}\n      />\n    );\n  }\n\n  if (screen.id === \"swap-flow\" && payer) {\n    return (\n      <SwapFlow\n        title={props.title}\n        transactionMode={payOptions.mode === \"transaction\"}\n        isEmbed={props.isEmbed}\n        client={client}\n        onBack={() => {\n          setScreen({\n            id: \"buy-with-crypto\",\n          });\n        }}\n        buyWithCryptoQuote={screen.quote}\n        payer={payer}\n        isFiatFlow={false}\n        onDone={onDone}\n        onTryAgain={() => {\n          setScreen({\n            id: \"buy-with-crypto\",\n          });\n        }}\n        onSuccess={onSwapSuccess}\n      />\n    );\n  }\n\n  if (screen.id === \"fiat-flow\" && payer) {\n    return (\n      <FiatFlow\n        title={props.title}\n        transactionMode={payOptions.mode === \"transaction\"}\n        quote={screen.quote}\n        onBack={() => {\n          setScreen({\n            id: \"buy-with-fiat\",\n          });\n        }}\n        client={client}\n        testMode={\n          props.payOptions.buyWithFiat !== false &&\n          props.payOptions.buyWithFiat?.testMode === true\n        }\n        theme={typeof props.theme === \"string\" ? props.theme : props.theme.type}\n        openedWindow={screen.openedWindow}\n        onDone={onDone}\n        isEmbed={props.isEmbed}\n        payer={payer}\n        onSuccess={onFiatSuccess}\n      />\n    );\n  }\n\n  if (screen.id === \"transfer-flow\" && payer && activeAccount) {\n    const goBack = () => setScreen({ id: \"buy-with-crypto\" });\n    // TODO (pay) pass it via screen props\n    const defaultRecipientAddress = (\n      props.payOptions as Extract<PayUIOptions, { mode: \"direct_payment\" }>\n    )?.paymentInfo?.sellerAddress;\n    const receiverAddress = defaultRecipientAddress || activeAccount.address;\n    return (\n      <TransferFlow\n        title={props.title}\n        onBack={goBack}\n        payer={payer}\n        client={props.client}\n        chain={toChain}\n        token={toToken}\n        tokenAmount={tokenAmount}\n        receiverAddress={receiverAddress}\n        transactionMode={props.payOptions.mode === \"transaction\"}\n        isEmbed={props.isEmbed}\n        onDone={onDone}\n        onTryAgain={() => {\n          setScreen({\n            id: \"buy-with-crypto\",\n          });\n        }}\n        onSuccess={onSwapSuccess}\n      />\n    );\n  }\n\n  if (screen.id === \"select-currency\") {\n    const goBack = () => setScreen(screen.backScreen);\n    return (\n      <CurrencySelection\n        onSelect={(currency) => {\n          goBack();\n          setSelectedCurrency(currency);\n        }}\n        onBack={goBack}\n      />\n    );\n  }\n\n  if (screen.id === \"select-to-token\") {\n    const chains = supportedDestinations.map((x) => x.chain);\n    const goBack = () => setScreen(screen.backScreen);\n    const allowEdits = (payOptions as FundWalletOptions)?.prefillBuy\n      ?.allowEdits;\n    // if token selection is disabled - only show network selector screen\n    if (allowEdits?.token === false) {\n      return (\n        <ChainSelectionScreen\n          chains={chains}\n          client={props.client}\n          connectLocale={props.connectLocale}\n          setChain={setToChain}\n          goBack={goBack}\n        />\n      );\n    }\n\n    return (\n      <TokenSelector\n        onBack={goBack}\n        tokenList={(\n          (toChain?.id ? destinationSupportedTokens[toChain.id] : undefined) ||\n          []\n        ).filter((x) => x.address !== NATIVE_TOKEN_ADDRESS)}\n        onTokenSelect={(tokenInfo) => {\n          setToToken(tokenInfo);\n          goBack();\n        }}\n        chain={toChain}\n        chainSelection={\n          // hide chain selection if it's disabled\n          allowEdits?.chain !== false\n            ? {\n                chains: chains,\n                select: (c) => {\n                  setToChain(c);\n                },\n              }\n            : undefined\n        }\n        connectLocale={connectLocale}\n        client={client}\n        modalTitle={props.title}\n      />\n    );\n  }\n\n  if (\n    screen.id === \"select-from-token\" &&\n    supportedSourcesQuery.data &&\n    sourceSupportedTokens\n  ) {\n    const chains = supportedSourcesQuery.data.map((x) => x.chain);\n    const goBack = () => setScreen(screen.backScreen);\n    // if token selection is disabled - only show network selector screen\n    if (\n      payOptions.buyWithCrypto !== false &&\n      payOptions.buyWithCrypto?.prefillSource?.allowEdits?.token === false\n    ) {\n      return (\n        <ChainSelectionScreen\n          chains={chains}\n          client={props.client}\n          connectLocale={props.connectLocale}\n          setChain={setFromChain}\n          goBack={goBack}\n        />\n      );\n    }\n\n    return (\n      <TokenSelector\n        onBack={goBack}\n        tokenList={(\n          (fromChain?.id ? sourceSupportedTokens[fromChain.id] : undefined) ||\n          []\n        ).filter((x) => x.address !== NATIVE_TOKEN_ADDRESS)}\n        onTokenSelect={(tokenInfo) => {\n          setFromToken(tokenInfo);\n          goBack();\n        }}\n        chain={fromChain}\n        chainSelection={\n          // hide chain selection if it's disabled\n          payOptions.buyWithCrypto !== false &&\n          payOptions.buyWithCrypto?.prefillSource?.allowEdits?.chain !== false\n            ? {\n                chains: supportedSourcesQuery.data.map((x) => x.chain),\n                select: (c) => setFromChain(c),\n              }\n            : undefined\n        }\n        connectLocale={connectLocale}\n        client={client}\n        modalTitle=\"Pay with\"\n      />\n    );\n  }\n\n  return (\n    <Container animate=\"fadein\">\n      <div>\n        {screen.id === \"main\" && (\n          <MainScreen\n            title={props.title}\n            payerAccount={payer?.account}\n            client={client}\n            onSelectBuyToken={() =>\n              setScreen({ id: \"select-to-token\", backScreen: screen })\n            }\n            payOptions={payOptions}\n            setTokenAmount={setTokenAmount}\n            setToChain={setToChain}\n            setToToken={setToToken}\n            setFromChain={setFromChain}\n            setFromToken={setFromToken}\n            toChain={toChain}\n            toToken={toToken}\n            tokenAmount={tokenAmount}\n            connectOptions={props.connectOptions}\n            setScreen={setScreen}\n            supportedDestinations={supportedDestinations}\n            onBack={props.onBack}\n            theme={props.theme}\n            hasEditedAmount={hasEditedAmount}\n            setHasEditedAmount={setHasEditedAmount}\n            enabledPaymentMethods={enabledPaymentMethods}\n          />\n        )}\n\n        {(screen.id === \"select-payment-method\" ||\n          screen.id === \"select-wallet\" ||\n          screen.id === \"buy-with-crypto\" ||\n          screen.id === \"buy-with-fiat\") &&\n          payer && (\n            <TokenSelectedLayout\n              title={props.title}\n              selectedChain={toChain}\n              selectedToken={toToken}\n              tokenAmount={tokenAmount}\n              client={client}\n              onBack={() => {\n                if (\n                  enabledPaymentMethods.showPaymentSelection &&\n                  (screen.id === \"select-wallet\" ||\n                    screen.id === \"buy-with-fiat\")\n                ) {\n                  setScreen({ id: \"select-payment-method\" });\n                } else if (screen.id === \"buy-with-crypto\") {\n                  setScreen({ id: \"select-wallet\" });\n                } else {\n                  setScreen({ id: \"main\" });\n                }\n              }}\n            >\n              {screen.id === \"select-payment-method\" && (\n                <PaymentMethodSelection\n                  mode={payOptions.mode}\n                  client={client}\n                  walletAddress={payer.account.address}\n                  walletType={payer.wallet.id}\n                  setScreen={(id) => setScreen({ id })}\n                />\n              )}\n\n              {screen.id === \"select-wallet\" && (\n                <WalletSwitcherDrawerContent\n                  client={client}\n                  hiddenWallets={props.hiddenWallets}\n                  onSelect={(w) => {\n                    const chain = w.getChain();\n                    const account = w.getAccount();\n                    if (chain && account) {\n                      setPayer({\n                        account,\n                        chain,\n                        wallet: w,\n                      });\n                      setScreen({ id: \"buy-with-crypto\" });\n                    }\n                  }}\n                  showAllWallets={!!props.connectOptions?.showAllWallets}\n                  wallets={props.connectOptions?.wallets}\n                  onBack={() => {\n                    // no-op\n                  }}\n                  onConnect={() => {\n                    setScreen({\n                      id: \"connect-payer-wallet\",\n                      backScreen: {\n                        id: \"select-wallet\",\n                      },\n                    });\n                  }}\n                  selectedAddress={payer.account.address}\n                />\n              )}\n\n              {screen.id === \"buy-with-crypto\" && activeAccount && (\n                <SwapScreenContent\n                  setScreen={setScreen}\n                  tokenAmount={deferredTokenAmount}\n                  toChain={toChain}\n                  toToken={toToken}\n                  fromChain={fromChain}\n                  fromToken={fromToken}\n                  showFromTokenSelector={() => {\n                    setScreen({\n                      id: \"select-from-token\",\n                      backScreen: screen,\n                    });\n                  }}\n                  payer={payer}\n                  client={client}\n                  isEmbed={props.isEmbed}\n                  onDone={onDone}\n                  payOptions={payOptions}\n                  connectLocale={connectLocale}\n                  connectOptions={props.connectOptions}\n                  setPayer={setPayer}\n                  // pass it even though we are passing payer, because payer might be different\n                  activeAccount={activeAccount}\n                  setTokenAmount={setTokenAmount}\n                  setHasEditedAmount={setHasEditedAmount}\n                  disableTokenSelection={\n                    payDisabled === true ||\n                    (payOptions.buyWithCrypto !== false &&\n                      payOptions.buyWithCrypto?.prefillSource?.allowEdits\n                        ?.chain === false &&\n                      payOptions.buyWithCrypto?.prefillSource?.allowEdits\n                        ?.token === false)\n                  }\n                />\n              )}\n\n              {screen.id === \"buy-with-fiat\" && (\n                <FiatScreenContent\n                  setScreen={setScreen}\n                  tokenAmount={deferredTokenAmount}\n                  toChain={toChain}\n                  toToken={toToken}\n                  selectedCurrency={selectedCurrency}\n                  client={client}\n                  isEmbed={props.isEmbed}\n                  onDone={onDone}\n                  payOptions={payOptions}\n                  theme={props.theme}\n                  showCurrencySelector={() => {\n                    setScreen({\n                      id: \"select-currency\",\n                      backScreen: screen,\n                    });\n                  }}\n                  payer={payer}\n                  setTokenAmount={setTokenAmount}\n                  setHasEditedAmount={setHasEditedAmount}\n                />\n              )}\n            </TokenSelectedLayout>\n          )}\n      </div>\n    </Container>\n  );\n}\n\nfunction SelectedTokenInfo(props: {\n  selectedToken: ERC20OrNativeToken;\n  selectedChain: Chain;\n  tokenAmount: string;\n  client: ThirdwebClient;\n}) {\n  return (\n    <div>\n      <Container\n        flex=\"row\"\n        gap=\"sm\"\n        center=\"y\"\n        style={{\n          justifyContent: \"space-between\",\n        }}\n      >\n        <Container flex=\"row\" gap=\"xs\" center=\"y\">\n          <Text color=\"primaryText\" data-testid=\"tokenAmount\" size=\"xl\">\n            {formatNumber(Number(props.tokenAmount), 6)}\n          </Text>\n\n          <Container flex=\"row\" gap=\"xxs\" center=\"y\">\n            <TokenSymbol\n              token={props.selectedToken}\n              chain={props.selectedChain}\n              size=\"md\"\n              color=\"secondaryText\"\n            />\n            <PayTokenIcon\n              chain={props.selectedChain}\n              client={props.client}\n              size=\"sm\"\n              token={props.selectedToken}\n            />\n          </Container>\n        </Container>\n\n        <ChainName\n          chain={props.selectedChain}\n          client={props.client}\n          size=\"sm\"\n          short\n        />\n      </Container>\n    </div>\n  );\n}\n\nfunction MainScreen(props: {\n  title: string;\n  client: ThirdwebClient;\n  setTokenAmount: (amount: string) => void;\n  setFromChain: (chain: Chain) => void;\n  setFromToken: (token: ERC20OrNativeToken) => void;\n  setToChain: (chain: Chain) => void;\n  setToToken: (token: ERC20OrNativeToken) => void;\n  payerAccount: Account | undefined;\n  tokenAmount: string;\n  payOptions: PayUIOptions;\n  toToken: ERC20OrNativeToken;\n  toChain: Chain;\n  onSelectBuyToken: () => void;\n  connectOptions: PayEmbedConnectOptions | undefined;\n  setScreen: (screen: SelectedScreen) => void;\n  supportedDestinations: SupportedChainAndTokens;\n  onBack: (() => void) | undefined;\n  theme: \"light\" | \"dark\" | Theme;\n  hasEditedAmount: boolean;\n  setHasEditedAmount: (hasEdited: boolean) => void;\n  enabledPaymentMethods: PaymentMethods;\n}) {\n  const {\n    setTokenAmount,\n    setToChain,\n    setToToken,\n    setFromChain,\n    setFromToken,\n    payerAccount,\n    client,\n    tokenAmount,\n    payOptions,\n    toToken,\n    toChain,\n    supportedDestinations,\n    enabledPaymentMethods,\n  } = props;\n\n  const { showPaymentSelection, buyWithCryptoEnabled, buyWithFiatEnabled } =\n    enabledPaymentMethods;\n  const disableContinue = !tokenAmount;\n\n  switch (payOptions.mode) {\n    case \"transaction\": {\n      return (\n        <TransactionModeScreen\n          supportedDestinations={supportedDestinations}\n          payUiOptions={payOptions}\n          payerAccount={payerAccount}\n          connectOptions={props.connectOptions}\n          client={client}\n          onContinue={(tokenAmount, toChain, toToken) => {\n            setTokenAmount(tokenAmount);\n            setToChain(toChain);\n            setFromChain(toChain);\n            setFromToken(toToken);\n            setToToken(toToken);\n            if (showPaymentSelection) {\n              props.setScreen({ id: \"select-payment-method\" });\n            } else if (buyWithCryptoEnabled) {\n              props.setScreen({ id: \"select-wallet\" });\n            } else if (buyWithFiatEnabled) {\n              props.setScreen({ id: \"buy-with-fiat\" });\n            } else {\n              // default to buy with crypto with connected wallet if chain not supported by pay\n              props.setScreen({ id: \"select-wallet\" });\n            }\n          }}\n        />\n      );\n    }\n    case \"direct_payment\": {\n      return (\n        <DirectPaymentModeScreen\n          client={client}\n          payUiOptions={payOptions}\n          payerAccount={payerAccount}\n          connectOptions={props.connectOptions}\n          supportedDestinations={supportedDestinations}\n          onContinue={(tokenAmount, toChain, toToken) => {\n            setTokenAmount(tokenAmount);\n            setToChain(toChain);\n            setFromChain(toChain);\n            setFromToken(toToken);\n            setToToken(toToken);\n            if (showPaymentSelection) {\n              props.setScreen({ id: \"select-payment-method\" });\n            } else if (buyWithCryptoEnabled) {\n              props.setScreen({ id: \"buy-with-crypto\" });\n            } else if (buyWithFiatEnabled) {\n              props.setScreen({ id: \"buy-with-fiat\" });\n            } else {\n              // default to buy with crypto with connected wallet if chain not supported by pay\n              props.setScreen({ id: \"select-wallet\" });\n            }\n          }}\n        />\n      );\n    }\n    default: {\n      return (\n        <Container p=\"lg\">\n          <ModalHeader title={props.title} onBack={props.onBack} />\n\n          <Spacer y=\"xl\" />\n\n          {/* To */}\n          <BuyTokenInput\n            value={tokenAmount}\n            onChange={async (value) => {\n              props.setHasEditedAmount(true);\n              setTokenAmount(value);\n            }}\n            freezeAmount={payOptions.prefillBuy?.allowEdits?.amount === false}\n            freezeChainAndToken={\n              payOptions.prefillBuy?.allowEdits?.chain === false &&\n              payOptions.prefillBuy?.allowEdits?.token === false\n            }\n            token={toToken}\n            chain={toChain}\n            onSelectToken={props.onSelectBuyToken}\n            client={props.client}\n          />\n\n          <Spacer y=\"xl\" />\n\n          {/* Continue */}\n          <Container flex=\"column\" gap=\"sm\">\n            {!payerAccount ? (\n              <div>\n                <ConnectButton\n                  {...props.connectOptions}\n                  client={props.client}\n                  theme={props.theme}\n                  connectButton={{\n                    style: {\n                      width: \"100%\",\n                    },\n                  }}\n                />\n              </div>\n            ) : (\n              <Button\n                variant=\"accent\"\n                fullWidth\n                disabled={disableContinue}\n                data-disabled={disableContinue}\n                onClick={() => {\n                  if (showPaymentSelection) {\n                    props.setScreen({ id: \"select-payment-method\" });\n                  } else if (buyWithCryptoEnabled) {\n                    props.setScreen({ id: \"buy-with-crypto\" });\n                  } else if (buyWithFiatEnabled) {\n                    props.setScreen({ id: \"buy-with-fiat\" });\n                  } else {\n                    console.error(\"No payment method enabled\");\n                  }\n                }}\n              >\n                Continue\n              </Button>\n            )}\n          </Container>\n        </Container>\n      );\n    }\n  }\n}\n\nfunction TokenSelectedLayout(props: {\n  title: string;\n  children: React.ReactNode;\n  tokenAmount: string;\n  selectedToken: ERC20OrNativeToken;\n  selectedChain: Chain;\n  client: ThirdwebClient;\n  onBack: () => void;\n}) {\n  return (\n    <Container>\n      <Container p=\"lg\">\n        <ModalHeader title={props.title} onBack={props.onBack} />\n      </Container>\n\n      <Container\n        px=\"lg\"\n        style={{\n          paddingBottom: spacing.lg,\n        }}\n      >\n        <Spacer y=\"xs\" />\n        <SelectedTokenInfo\n          selectedToken={props.selectedToken}\n          selectedChain={props.selectedChain}\n          tokenAmount={props.tokenAmount}\n          client={props.client}\n        />\n\n        <Spacer y=\"md\" />\n        <Line />\n        <Spacer y=\"lg\" />\n\n        <Text size=\"sm\"> Pay with </Text>\n        <Spacer y=\"sm\" />\n\n        {props.children}\n      </Container>\n    </Container>\n  );\n}\n\nfunction PaymentMethodSelection(props: {\n  client: ThirdwebClient;\n  walletAddress: string;\n  walletType: string;\n  setScreen: (screenId: \"select-wallet\" | \"buy-with-fiat\") => void;\n  mode?: \"transaction\" | \"direct_payment\" | \"fund_wallet\";\n}) {\n  return (\n    <Container animate=\"fadein\">\n      {/* Credit Card */}\n      <Container flex=\"column\" gap=\"sm\">\n        <Button\n          variant=\"outline\"\n          bg=\"tertiaryBg\"\n          onClick={() => {\n            trackPayEvent({\n              event: `pay_with_credit_card_${props.mode || \"unknown\"}_mode`,\n              client: props.client,\n              walletAddress: props.walletAddress,\n              walletType: props.walletType,\n            });\n            props.setScreen(\"buy-with-fiat\");\n          }}\n          gap=\"sm\"\n          style={{\n            justifyContent: \"flex-start\",\n            textAlign: \"left\",\n          }}\n        >\n          <Container color=\"secondaryText\" flex=\"row\" center=\"both\">\n            <IdCardIcon\n              style={{\n                width: iconSize.md,\n                height: iconSize.md,\n              }}\n            />\n          </Container>\n\n          <Container flex=\"column\" gap=\"xxs\">\n            <Text size=\"md\" color=\"primaryText\">\n              Credit Card\n            </Text>\n            <Text size=\"xs\">Securely pay with credit card</Text>\n          </Container>\n        </Button>\n\n        {/* Crypto */}\n        <Button\n          variant=\"outline\"\n          bg=\"tertiaryBg\"\n          onClick={() => {\n            trackPayEvent({\n              event: `pay_with_crypto_${props.mode || \"unknown\"}_mode`,\n              client: props.client,\n              walletAddress: props.walletAddress,\n              walletType: props.walletType,\n            });\n\n            props.setScreen(\"select-wallet\");\n          }}\n          style={{\n            justifyContent: \"flex-start\",\n          }}\n          gap=\"sm\"\n        >\n          <Container color=\"secondaryText\" flex=\"row\" center=\"both\">\n            <CoinsIcon size={iconSize.md} />\n          </Container>\n\n          <Container flex=\"column\" gap=\"xxs\">\n            <Text size=\"md\" color=\"primaryText\">\n              Crypto\n            </Text>\n            <Text size=\"xs\">Pay with your connected wallet</Text>\n          </Container>\n        </Button>\n      </Container>\n    </Container>\n  );\n}\n\nfunction SwapScreenContent(props: {\n  setScreen: (screen: SelectedScreen) => void;\n  tokenAmount: string;\n  toToken: ERC20OrNativeToken;\n  toChain: Chain;\n  fromChain: Chain;\n  fromToken: ERC20OrNativeToken;\n  showFromTokenSelector: () => void;\n  payer: PayerInfo;\n  client: ThirdwebClient;\n  payOptions: PayUIOptions;\n  isEmbed: boolean;\n  onDone: () => void;\n  connectOptions: PayEmbedConnectOptions | undefined;\n  connectLocale: ConnectLocale;\n  setPayer: (payer: PayerInfo) => void;\n  activeAccount: Account;\n  setTokenAmount: (amount: string) => void;\n  setHasEditedAmount: (hasEdited: boolean) => void;\n  disableTokenSelection: boolean;\n}) {\n  const {\n    setScreen,\n    payer,\n    client,\n    toChain,\n    tokenAmount,\n    toToken,\n    fromChain,\n    fromToken,\n    showFromTokenSelector,\n    payOptions,\n    disableTokenSelection,\n  } = props;\n\n  const defaultRecipientAddress = (\n    props.payOptions as Extract<PayUIOptions, { mode: \"direct_payment\" }>\n  )?.paymentInfo?.sellerAddress;\n  const receiverAddress =\n    defaultRecipientAddress || props.activeAccount.address;\n  const { drawerRef, drawerOverlayRef, isOpen, setIsOpen } = useDrawer();\n  const [drawerScreen, setDrawerScreen] = useState<\n    \"fees\" | \"receiver\" | \"payer\"\n  >(\"fees\");\n\n  const fromTokenBalanceQuery = useWalletBalance({\n    address: payer.account.address,\n    chain: fromChain,\n    tokenAddress: isNativeToken(fromToken) ? undefined : fromToken.address,\n    client,\n  });\n\n  const fromTokenId = isNativeToken(fromToken)\n    ? NATIVE_TOKEN_ADDRESS\n    : fromToken.address.toLowerCase();\n  const toTokenId = isNativeToken(toToken)\n    ? NATIVE_TOKEN_ADDRESS\n    : toToken.address.toLowerCase();\n  const swapRequired =\n    !!tokenAmount &&\n    !(fromChain.id === toChain.id && fromTokenId === toTokenId);\n  const quoteParams: GetBuyWithCryptoQuoteParams | undefined = swapRequired\n    ? {\n        // wallets\n        fromAddress: payer.account.address,\n        toAddress: receiverAddress,\n        // from\n        fromChainId: fromChain.id,\n        fromTokenAddress: isNativeToken(fromToken)\n          ? NATIVE_TOKEN_ADDRESS\n          : fromToken.address,\n        // to\n        toChainId: toChain.id,\n        toTokenAddress: isNativeToken(toToken)\n          ? NATIVE_TOKEN_ADDRESS\n          : toToken.address,\n        toAmount: tokenAmount,\n        client,\n        purchaseData: payOptions.purchaseData,\n      }\n    : undefined;\n\n  const quoteQuery = useBuyWithCryptoQuote(quoteParams, {\n    // refetch every 30 seconds\n    staleTime: 30 * 1000,\n    refetchInterval: 30 * 1000,\n    gcTime: 30 * 1000,\n  });\n\n  const sourceTokenAmount = swapRequired\n    ? quoteQuery.data?.swapDetails.fromAmount\n    : tokenAmount;\n\n  const isNotEnoughBalance =\n    !!sourceTokenAmount &&\n    !!fromTokenBalanceQuery.data &&\n    Number(fromTokenBalanceQuery.data.displayValue) < Number(sourceTokenAmount);\n\n  const disableContinue =\n    (swapRequired && !quoteQuery.data) || isNotEnoughBalance;\n  const switchChainRequired = props.payer.chain.id !== fromChain.id;\n\n  // biome-ignore lint/suspicious/noExplicitAny: <explanation>\n  function getErrorMessage(err: any) {\n    type AmountTooLowError = {\n      code: \"MINIMUM_PURCHASE_AMOUNT\";\n      data: {\n        minimumAmountUSDCents: number;\n        requestedAmountUSDCents: number;\n        minimumAmountWei: string;\n        minimumAmountEth: string;\n      };\n    };\n\n    const defaultMessage = \"Unable to get price quote\";\n    try {\n      if (err.error.code === \"MINIMUM_PURCHASE_AMOUNT\") {\n        const obj = err.error as AmountTooLowError;\n        const minAmountToken = obj.data.minimumAmountEth;\n        return {\n          minAmount: formatNumber(Number(minAmountToken), 6),\n        };\n      }\n    } catch {}\n\n    return {\n      msg: [defaultMessage],\n    };\n  }\n\n  const errorMsg =\n    !quoteQuery.isLoading && quoteQuery.error\n      ? getErrorMessage(quoteQuery.error)\n      : undefined;\n\n  function showSwapFlow() {\n    if (\n      (props.payOptions.mode === \"direct_payment\" ||\n        props.payOptions.mode === \"fund_wallet\") &&\n      !isNotEnoughBalance &&\n      !swapRequired\n    ) {\n      // same currency, just direct transfer\n      setScreen({\n        id: \"transfer-flow\",\n      });\n    } else if (\n      props.payOptions.mode === \"transaction\" &&\n      !isNotEnoughBalance &&\n      !swapRequired\n    ) {\n      if (payer.account.address !== receiverAddress) {\n        // needs transfer from another wallet before executing the transaction\n        setScreen({\n          id: \"transfer-flow\",\n        });\n      } else {\n        // has enough balance to just do the transaction directly\n        props.onDone();\n      }\n\n      return;\n    }\n\n    if (!quoteQuery.data) {\n      return;\n    }\n\n    setScreen({\n      id: \"swap-flow\",\n      quote: quoteQuery.data,\n    });\n  }\n\n  function showFees() {\n    if (!quoteQuery.data) {\n      return;\n    }\n\n    setIsOpen(true);\n    setDrawerScreen(\"fees\");\n  }\n\n  return (\n    <Container flex=\"column\" gap=\"md\" animate=\"fadein\">\n      {isOpen && (\n        <>\n          <DrawerOverlay ref={drawerOverlayRef} />\n          <Drawer ref={drawerRef} close={() => setIsOpen(false)}>\n            {drawerScreen === \"fees\" && quoteQuery.data && (\n              <div>\n                <Text size=\"lg\" color=\"primaryText\">\n                  Fees\n                </Text>\n                <Spacer y=\"lg\" />\n                <SwapFees quote={quoteQuery.data} />\n              </div>\n            )}\n          </Drawer>\n        </>\n      )}\n\n      {/* Quote info */}\n      <div>\n        <WalletSelectorButton\n          client={props.client}\n          onClick={() => {\n            setScreen({ id: \"select-wallet\" });\n          }}\n          address={props.payer.account.address}\n          walletId={props.payer.wallet.id}\n          containerStyle={{\n            borderBottomRightRadius: 0,\n            borderBottomLeftRadius: 0,\n          }}\n        />\n\n        <PayWithCrypto\n          value={sourceTokenAmount || \"\"}\n          onSelectToken={showFromTokenSelector}\n          chain={fromChain}\n          token={fromToken}\n          isLoading={quoteQuery.isLoading && !sourceTokenAmount}\n          client={client}\n          freezeChainAndTokenSelection={disableTokenSelection}\n          payerAccount={props.payer.account}\n          swapRequired={swapRequired}\n        />\n        {swapRequired && (\n          <EstimatedTimeAndFees\n            quoteIsLoading={quoteQuery.isLoading}\n            estimatedSeconds={\n              quoteQuery.data?.swapDetails.estimated.durationSeconds\n            }\n            onViewFees={showFees}\n          />\n        )}\n        <Spacer y=\"md\" />\n      </div>\n\n      {/* Error message */}\n      {errorMsg && (\n        <div>\n          {errorMsg.minAmount && (\n            <Text color=\"danger\" size=\"sm\" center multiline>\n              Minimum amount is {errorMsg.minAmount}\n              <TokenSymbol\n                token={toToken}\n                chain={toChain}\n                size=\"sm\"\n                inline\n                color=\"danger\"\n              />\n            </Text>\n          )}\n\n          {errorMsg.msg?.map((msg) => (\n            <Text color=\"danger\" size=\"sm\" center multiline key={msg}>\n              {msg}\n            </Text>\n          ))}\n        </div>\n      )}\n\n      {!errorMsg && isNotEnoughBalance && (\n        <div>\n          <Text color=\"danger\" size=\"sm\" center multiline>\n            Not enough funds.\n          </Text>\n          <Text color=\"danger\" size=\"sm\" center multiline>\n            Try a different wallet or token.\n          </Text>\n        </div>\n      )}\n\n      {/* Button */}\n      {errorMsg?.minAmount ? (\n        <Button\n          variant=\"accent\"\n          fullWidth\n          onClick={() => {\n            props.setTokenAmount(String(errorMsg.minAmount));\n            props.setHasEditedAmount(true);\n          }}\n        >\n          Set Minimum\n        </Button>\n      ) : switchChainRequired &&\n        !quoteQuery.isLoading &&\n        !isNotEnoughBalance &&\n        !quoteQuery.error ? (\n        <SwitchNetworkButton\n          variant=\"accent\"\n          fullWidth\n          switchChain={async () => {\n            await props.payer.wallet.switchChain(fromChain);\n          }}\n        />\n      ) : (\n        <Button\n          variant={disableContinue ? \"outline\" : \"accent\"}\n          fullWidth\n          data-disabled={disableContinue}\n          disabled={disableContinue}\n          onClick={async () => {\n            if (!disableContinue) {\n              showSwapFlow();\n            }\n          }}\n          gap=\"xs\"\n        >\n          {quoteQuery.isLoading ? (\n            <>\n              Getting price quote\n              <Spinner size=\"sm\" color=\"accentText\" />\n            </>\n          ) : (\n            \"Continue\"\n          )}\n        </Button>\n      )}\n    </Container>\n  );\n}\n\nfunction FiatScreenContent(props: {\n  setScreen: (screen: SelectedScreen) => void;\n  tokenAmount: string;\n  toToken: ERC20OrNativeToken;\n  toChain: Chain;\n  selectedCurrency: CurrencyMeta;\n  showCurrencySelector: () => void;\n  payOptions: PayUIOptions;\n  theme: \"light\" | \"dark\" | Theme;\n  client: ThirdwebClient;\n  onDone: () => void;\n  isEmbed: boolean;\n  payer: PayerInfo;\n  setTokenAmount: (amount: string) => void;\n  setHasEditedAmount: (hasEdited: boolean) => void;\n}) {\n  const {\n    toToken,\n    tokenAmount,\n    payer,\n    client,\n    setScreen,\n    toChain,\n    showCurrencySelector,\n    selectedCurrency,\n  } = props;\n  const defaultRecipientAddress = (\n    props.payOptions as Extract<PayUIOptions, { mode: \"direct_payment\" }>\n  )?.paymentInfo?.sellerAddress;\n  const receiverAddress =\n    defaultRecipientAddress || props.payer.account.address;\n  const { drawerRef, drawerOverlayRef, isOpen, setIsOpen } = useDrawer();\n  const [drawerScreen, setDrawerScreen] = useState<\"fees\">(\"fees\");\n\n  const buyWithFiatOptions = props.payOptions.buyWithFiat;\n\n  const fiatQuoteQuery = useBuyWithFiatQuote(\n    buyWithFiatOptions !== false && tokenAmount\n      ? {\n          fromCurrencySymbol: selectedCurrency.shorthand,\n          toChainId: toChain.id,\n          toAddress: receiverAddress,\n          toTokenAddress: isNativeToken(toToken)\n            ? NATIVE_TOKEN_ADDRESS\n            : toToken.address,\n          toAmount: tokenAmount,\n          client,\n          isTestMode: buyWithFiatOptions?.testMode,\n          purchaseData: props.payOptions.purchaseData,\n          fromAddress: payer.account.address,\n          preferredProvider: buyWithFiatOptions?.preferredProvider,\n        }\n      : undefined,\n  );\n\n  function handleSubmit() {\n    if (!fiatQuoteQuery.data) {\n      return;\n    }\n\n    const hasTwoSteps = isSwapRequiredPostOnramp(fiatQuoteQuery.data);\n    let openedWindow: Window | null = null;\n\n    if (!hasTwoSteps) {\n      openedWindow = openOnrampPopup(\n        fiatQuoteQuery.data.onRampLink,\n        typeof props.theme === \"string\" ? props.theme : props.theme.type,\n      );\n\n      addPendingTx({\n        type: \"fiat\",\n        intentId: fiatQuoteQuery.data.intentId,\n      });\n    }\n\n    setScreen({\n      id: \"fiat-flow\",\n      quote: fiatQuoteQuery.data,\n      openedWindow,\n    });\n  }\n\n  function showFees() {\n    if (!fiatQuoteQuery.data) {\n      return;\n    }\n\n    setDrawerScreen(\"fees\");\n    setIsOpen(true);\n  }\n\n  // biome-ignore lint/suspicious/noExplicitAny: <explanation>\n  function getErrorMessage(err: any) {\n    type AmountTooLowError = {\n      code: \"MINIMUM_PURCHASE_AMOUNT\";\n      data: {\n        minimumAmountUSDCents: number;\n        requestedAmountUSDCents: number;\n        minimumAmountWei: string;\n        minimumAmountEth: string;\n      };\n    };\n\n    const defaultMessage = \"Unable to get price quote\";\n    try {\n      if (err.error.code === \"MINIMUM_PURCHASE_AMOUNT\") {\n        const obj = err.error as AmountTooLowError;\n        const minAmountToken = obj.data.minimumAmountEth;\n        return {\n          minAmount: formatNumber(Number(minAmountToken), 6),\n        };\n      }\n    } catch {}\n\n    return {\n      msg: [defaultMessage],\n    };\n  }\n\n  const disableSubmit = !fiatQuoteQuery.data;\n\n  const errorMsg =\n    !fiatQuoteQuery.isLoading && fiatQuoteQuery.error\n      ? getErrorMessage(fiatQuoteQuery.error)\n      : undefined;\n\n  return (\n    <Container flex=\"column\" gap=\"md\" animate=\"fadein\">\n      {isOpen && (\n        <>\n          <DrawerOverlay ref={drawerOverlayRef} />\n          <Drawer ref={drawerRef} close={() => setIsOpen(false)}>\n            {drawerScreen === \"fees\" && fiatQuoteQuery.data && (\n              <div>\n                <Text size=\"lg\" color=\"primaryText\">\n                  Fees\n                </Text>\n\n                <Spacer y=\"lg\" />\n                <FiatFees quote={fiatQuoteQuery.data} />\n              </div>\n            )}\n          </Drawer>\n        </>\n      )}\n\n      <div>\n        <PayWithCreditCard\n          isLoading={fiatQuoteQuery.isLoading}\n          value={fiatQuoteQuery.data?.fromCurrencyWithFees.amount}\n          client={client}\n          currency={selectedCurrency}\n          onSelectCurrency={showCurrencySelector}\n        />\n        {/* Estimated time + View fees button */}\n        <EstimatedTimeAndFees\n          quoteIsLoading={fiatQuoteQuery.isLoading}\n          estimatedSeconds={fiatQuoteQuery.data?.estimatedDurationSeconds}\n          onViewFees={showFees}\n        />\n        <Spacer y=\"md\" />\n      </div>\n\n      {/* Error message */}\n      {errorMsg && (\n        <div>\n          {errorMsg.minAmount && (\n            <Text color=\"danger\" size=\"sm\" center multiline>\n              Minimum amount is {errorMsg.minAmount}\n              <TokenSymbol\n                token={toToken}\n                chain={toChain}\n                size=\"sm\"\n                inline\n                color=\"danger\"\n              />\n            </Text>\n          )}\n\n          {errorMsg.msg?.map((msg) => (\n            <Text color=\"danger\" size=\"sm\" center multiline key={msg}>\n              {msg}\n            </Text>\n          ))}\n        </div>\n      )}\n\n      {errorMsg?.minAmount ? (\n        <Button\n          variant=\"accent\"\n          fullWidth\n          onClick={() => {\n            props.setTokenAmount(String(errorMsg.minAmount));\n            props.setHasEditedAmount(true);\n          }}\n        >\n          Set Minimum\n        </Button>\n      ) : (\n        <Button\n          variant={disableSubmit ? \"outline\" : \"accent\"}\n          data-disabled={disableSubmit}\n          disabled={disableSubmit}\n          fullWidth\n          onClick={handleSubmit}\n          gap=\"xs\"\n        >\n          {fiatQuoteQuery.isLoading ? (\n            <>\n              Getting price quote\n              <Spinner size=\"sm\" color=\"accentText\" />\n            </>\n          ) : (\n            \"Continue\"\n          )}\n        </Button>\n      )}\n    </Container>\n  );\n}\n\nfunction createSupportedTokens(\n  data: SupportedChainAndTokens,\n  payOptions: PayUIOptions,\n  supportedTokensOverrides?: SupportedTokens,\n): SupportedTokens {\n  const tokens: SupportedTokens = {};\n\n  const isBuyWithFiatDisabled = payOptions.buyWithFiat === false;\n  const isBuyWithCryptoDisabled = payOptions.buyWithCrypto === false;\n\n  // FIXME (pay) when buywithFiat is disabled, missing a bunch of tokens on base??\n\n  for (const x of data) {\n    tokens[x.chain.id] = x.tokens.filter((t) => {\n      // it token supports both - include it\n      if (t.buyWithCryptoEnabled && t.buyWithFiatEnabled) {\n        return true;\n      }\n\n      // if buyWithFiat is disabled, and buyWithCrypto is not supported by token - exclude the token\n      if (!t.buyWithCryptoEnabled && isBuyWithFiatDisabled) {\n        return false;\n      }\n\n      // if buyWithCrypto is disabled, and buyWithFiat is not supported by token - exclude the token\n      if (!t.buyWithFiatEnabled && isBuyWithCryptoDisabled) {\n        return false;\n      }\n\n      return true; // include the token\n    });\n  }\n\n  // override with props.supportedTokens\n  if (supportedTokensOverrides) {\n    for (const k in supportedTokensOverrides) {\n      const key = Number(k);\n      const tokenList = supportedTokensOverrides[key];\n\n      if (tokenList) {\n        tokens[key] = tokenList;\n      }\n    }\n  }\n\n  return tokens;\n}\n\nfunction ChainSelectionScreen(props: {\n  goBack: () => void;\n  chains: Chain[];\n  client: ThirdwebClient;\n  connectLocale: ConnectLocale;\n  setChain: (chain: Chain) => void;\n}) {\n  return (\n    <NetworkSelectorContent\n      client={props.client}\n      connectLocale={props.connectLocale}\n      showTabs={false}\n      onBack={props.goBack}\n      chains={props.chains}\n      closeModal={props.goBack}\n      networkSelector={{\n        renderChain(renderChainProps) {\n          return (\n            <ChainButton\n              chain={renderChainProps.chain}\n              confirming={false}\n              switchingFailed={false}\n              onClick={() => {\n                props.setChain(renderChainProps.chain);\n                props.goBack();\n              }}\n              client={props.client}\n              connectLocale={props.connectLocale}\n            />\n          );\n        },\n      }}\n    />\n  );\n}\n","import { useEffect, useState } from \"react\";\nimport { useActiveAccount } from \"../../../../../core/hooks/wallets/useActiveAccount.js\";\nimport { useActiveWallet } from \"../../../../../core/hooks/wallets/useActiveWallet.js\";\nimport { useActiveWalletChain } from \"../../../../../core/hooks/wallets/useActiveWalletChain.js\";\nimport type { PayerInfo } from \"./types.js\";\n\nexport function usePayerSetup() {\n  const wallet = useActiveWallet();\n  const account = useActiveAccount();\n  const activeChain = useActiveWalletChain();\n\n  const [_payer, setPayer] = useState<PayerInfo | undefined>();\n\n  useEffect(() => {\n    const wallet = _payer?.wallet;\n\n    function update() {\n      if (!wallet) {\n        setPayer(undefined);\n        return;\n      }\n\n      const account = wallet.getAccount();\n      const chain = wallet.getChain();\n      if (account && chain) {\n        setPayer({\n          account,\n          chain,\n          wallet,\n        });\n      } else {\n        setPayer(undefined);\n      }\n    }\n\n    if (wallet) {\n      const unsubChainChanged = wallet.subscribe(\"chainChanged\", update);\n      const unsubAccountChanged = wallet.subscribe(\"accountChanged\", update);\n      return () => {\n        unsubChainChanged();\n        unsubAccountChanged();\n      };\n    }\n\n    return undefined;\n  }, [_payer]);\n\n  const initialPayer =\n    account && activeChain && wallet\n      ? { account, chain: activeChain, wallet }\n      : undefined;\n\n  // return the payer state if its set\n  // otherwise return the active wallet as payer\n  const payer: PayerInfo | undefined = _payer || initialPayer;\n\n  return {\n    payer,\n    setPayer,\n  };\n}\n","import type { Chain } from \"../../../../../../../chains/types.js\";\nimport { NATIVE_TOKEN_ADDRESS } from \"../../../../../../../constants/addresses.js\";\nimport type { PayUIOptions } from \"../../../../../../core/hooks/connection/ConnectButtonProps.js\";\nimport { type ERC20OrNativeToken, isNativeToken } from \"../../nativeToken.js\";\nimport type { SupportedChainAndTokens } from \"../swap/useSwapSupportedChains.js\";\n\n// Based on what toToken, toChain, and supportedDestinations are, determine which payment methods should be enabled\n// change the current method if it should be disabled\n// return whether the payment selection should be shown or not ( if only one payment method is enabled, don't show the selection )\nexport type PaymentMethods = {\n  showPaymentSelection: boolean;\n  buyWithFiatEnabled: boolean;\n  buyWithCryptoEnabled: boolean;\n};\n\nexport function useEnabledPaymentMethods(options: {\n  payOptions: PayUIOptions;\n  supportedDestinations: SupportedChainAndTokens;\n  toChain: Chain;\n  toToken: ERC20OrNativeToken;\n}): PaymentMethods {\n  const { payOptions, supportedDestinations, toChain, toToken } = options;\n\n  function getEnabledPayMethodsForSelectedToken(): {\n    fiat: boolean;\n    swap: boolean;\n  } {\n    const chain = supportedDestinations.find((c) => c.chain.id === toChain.id);\n    if (!chain) {\n      return {\n        fiat: false,\n        swap: false,\n      };\n    }\n\n    const toTokenAddress = isNativeToken(toToken)\n      ? NATIVE_TOKEN_ADDRESS\n      : toToken.address;\n\n    const tokenInfo = chain.tokens.find(\n      (t) => t.address.toLowerCase() === toTokenAddress.toLowerCase(),\n    );\n\n    if (!tokenInfo) {\n      return {\n        fiat: true,\n        swap: true,\n      };\n    }\n\n    return {\n      fiat: tokenInfo.buyWithFiatEnabled,\n      swap: tokenInfo.buyWithCryptoEnabled,\n    };\n  }\n\n  const { fiat, swap } = getEnabledPayMethodsForSelectedToken();\n\n  const buyWithFiatEnabled = payOptions.buyWithFiat !== false && fiat;\n  const buyWithCryptoEnabled = payOptions.buyWithCrypto !== false && swap;\n\n  const showPaymentSelection = buyWithFiatEnabled && buyWithCryptoEnabled;\n\n  return {\n    buyWithFiatEnabled,\n    buyWithCryptoEnabled,\n    showPaymentSelection,\n  };\n}\n","import {\n  type UseQueryOptions,\n  type UseQueryResult,\n  useQuery,\n} from \"@tanstack/react-query\";\nimport {\n  type BuyWithCryptoQuote,\n  type GetBuyWithCryptoQuoteParams,\n  getBuyWithCryptoQuote,\n} from \"../../../../pay/buyWithCrypto/getQuote.js\";\n\n/**\n * @internal\n */\nexport type BuyWithCryptoQuoteQueryOptions = Omit<\n  UseQueryOptions<BuyWithCryptoQuote>,\n  \"queryFn\" | \"queryKey\" | \"enabled\"\n>;\n\n/**\n * @internal\n */\ntype BuyWithCryptoQuoteError = {\n  status: string;\n  code: string;\n  statusCode: number;\n};\n\n/**\n * Hook to get a price quote for performing a \"Buy with crypto\" transaction that allows users to buy a token with another token - aka a swap.\n *\n * The price quote is an object of type [`BuyWithCryptoQuote`](https://portal.thirdweb.com/references/typescript/v5/BuyWithCryptoQuote).\n * This quote contains the information about the purchase such as token amounts, processing fees, estimated time etc.\n *\n * This hook is a React Query wrapper of the [`getBuyWithCryptoQuote`](https://portal.thirdweb.com/references/typescript/v5/getBuyWithCryptoQuote) function.\n * You can also use that function directly\n *\n * Once you have the quote, you can use the [`useSendTransaction`](https://portal.thirdweb.com/references/typescript/v5/useSendTransaction) function to send the purchase\n * and [`useBuyWithCryptoStatus`](https://portal.thirdweb.com/references/typescript/v5/useBuyWithCryptoStatus) function to get the status of the swap transaction.\n * @param params - object of type [`BuyWithCryptoQuoteQueryParams`](https://portal.thirdweb.com/references/typescript/v5/BuyWithCryptoQuoteQueryParams)\n * @param queryParams - options to configure the react query\n * @returns A React Query object which contains the data of type [`BuyWithCryptoQuote`](https://portal.thirdweb.com/references/typescript/v5/BuyWithCryptoQuote)\n * @example\n * ```tsx\n * import { useBuyWithCryptoQuote, useBuyWithCryptoStatus, type BuyWithCryptoStatusQueryParams, useActiveAccount } from \"thirdweb/react\";\n * import { sendTransaction } from 'thirdweb';\n *\n * function Component() {\n *  const buyWithCryptoQuoteQuery = useBuyWithCryptoQuote(swapParams);\n *  const [buyTxHash, setBuyTxHash] = useState<BuyWithCryptoStatusQueryParams | undefined>();\n *  const buyWithCryptoStatusQuery = useBuyWithCryptoStatus(buyTxHash ? {\n *    client,\n *    transactionHash: buyTxHash,\n *  }: undefined);\n *\n *  async function handleBuyWithCrypto() {\n *    const account = useActiveAccount();\n *\n *    // if approval is required\n *    if (buyWithCryptoQuoteQuery.data.approval) {\n *      const approveTx = await sendTransaction({\n *        transaction: swapQuote.data.approval,\n *        account: account,\n *      });\n *      await waitForApproval(approveTx);\n *    }\n *\n *    // send the transaction to buy crypto\n *    // this promise is resolved when user confirms the transaction in the wallet and the transaction is sent to the blockchain\n *    const buyTx = await sendTransaction({\n *      transaction: swapQuote.data.transactionRequest,\n *      account: account,\n *    });\n *    await waitForApproval(buyTx);\n *\n *    // set buyTx.transactionHash to poll the status of the swap transaction\n *    setBuyWithCryptoTx(buyTx.transactionHash);\n *  }\n *\n *  return <button onClick={handleBuyWithCrypto}>Swap</button>\n * }\n * ```\n * @buyCrypto\n */\nexport function useBuyWithCryptoQuote(\n  params?: GetBuyWithCryptoQuoteParams,\n  queryParams?: BuyWithCryptoQuoteQueryOptions,\n): UseQueryResult<BuyWithCryptoQuote> {\n  return useQuery({\n    ...queryParams,\n    queryKey: [\"buyWithCryptoQuote\", params],\n    queryFn: () => {\n      if (!params) {\n        throw new Error(\"Swap params are required\");\n      }\n\n      return getBuyWithCryptoQuote(params);\n    },\n    enabled: !!params,\n    retry(failureCount, error) {\n      if (failureCount > 3) {\n        return false;\n      }\n      try {\n        // biome-ignore lint/suspicious/noExplicitAny: <explanation>\n        const serverError = (error as any).error as BuyWithCryptoQuoteError;\n\n        if (serverError.code === \"MINIMUM_PURCHASE_AMOUNT\") {\n          return false;\n        }\n\n        if (serverError.statusCode === 404 || serverError.statusCode >= 500) {\n          return false;\n        }\n      } catch {\n        return true;\n      }\n\n      return true;\n    },\n  });\n}\n"],"names":["FN_SELECTOR","FN_INPUTS","FN_OUTPUTS","type","async","decimals","options","readContract","contract","method","params","withCache","generatedDecimals","cacheKey","chain","id","address","cacheTime","Number","POSITIVE_INFINITY","name","generatedName","symbol","generatedSymbol","getCurrencyMetadata","isNativeTokenAddress","nativeCurrency","name_","symbol_","decimals_","Promise","all","catch","Error","isSwapRequiredPostOnramp","buyWithFiatQuote","sameChain","toToken","chainId","onRampToken","token","sameToken","getAddress","tokenAddress","useBuyWithFiatQuote","queryOptions","useQuery","queryKey","queryFn","clientFetch","getClientFetch","client","response","getPayBuyWithFiatQuoteEndpoint","headers","Accept","body","JSON","stringify","toAddress","fromCurrencySymbol","toChainId","toString","toTokenAddress","fromAmount","toAmount","maxSlippageBPS","isTestMode","purchaseData","fromAddress","toGasAmountWei","preferredProvider","ok","errorObj","json","status","result","error","console","getBuyWithFiatQuote","enabled","retry","failureCount","serverError","code","statusCode","Drawer","forwardRef","props","ref","_jsx","DrawerContainer","children","DynamicHeight","_jsxs","Container","p","CrossContainer","IconButton","onClick","close","Cross2Icon","width","iconSize","md","height","style","color","StyledDiv","_","theme","useCustomTheme","zIndex","borderTopLeftRadius","radius","xl","borderTopRightRadius","background","colors","modalBg","position","bottom","left","right","animation","drawerOpenAnimation","borderTop","borderColor","keyframes","DrawerOverlay","backgroundColor","modalOverlayBg","inset","fadeInAnimation","useDrawer","isOpen","_setIsOpen","useState","drawerRef","useRef","drawerOverlayRef","closeDrawerAnimation","useCallback","resolve","current","animOptions","easing","fill","duration","closeAnimation","animate","transform","opacity","onfinish","setIsOpen","value","useLayoutEffect","handleClick","event","target","Node","contains","requestAnimationFrame","document","addEventListener","removeEventListener","DirectPaymentModeScreen","payUiOptions","supportedDestinations","onContinue","payerAccount","activeWallet","useActiveWallet","metadata","paymentInfo","data","chainData","useChainMetadata","sellerEns","useEnsName","sellerAddress","totalCost","cost","tokenDecimals","isNativeToken","getContract","toTokens","amountWei","amount","undefined","LoadingScreen","icon","find","c","tokens","t","toLowerCase","NATIVE_TOKEN_ADDRESS","url","ModalHeader","title","Spacer","y","image","Img","src","borderRadius","spacing","tertiaryBg","flex","center","padding","marginBottom","WalletImage","size","flexGrow","borderBottom","secondaryIconColor","marginLeft","marginRight","ChainIcon","chainIconUrl","expand","Text","weight","gap","justifyContent","TokenIcon","String","formatNumber","Line","textAlign","shortenAddress","Button","variant","fullWidth","trackPayEvent","walletAddress","walletType","ConnectButton","connectOptions","connectButton","EstimatedTimeAndFees","estimatedSeconds","quoteIsLoading","bg","alignItems","borderWidth","borderStyle","ClockIcon","sm","Skeleton","fontSize","xs","formatSeconds","onViewFees","ViewFeeIcon","viewBox","xmlns","d","stroke","strokeLinecap","strokeLinejoin","PayWithCreditCard","borderBottomRightRadius","borderBottomLeftRadius","flexWrap","CurrencyButton","onSelectCurrency","minHeight","minWidth","currency","shorthand","ChevronDownIcon","flexShrink","display","flexDirection","xxs","overflow","textOverflow","whiteSpace","paddingRight","isLoading","lg","styled","baseSepolia","defineChain","blockExplorers","apiUrl","testnet","base","optimismSepolia","optimism","zoraSepolia","zora","opChains","estimateGasCost","transaction","from","account","gasLimit","resolvePromisedValue","gas","estimateGas","gasPrice","getGasPrice","l1Fee","includes","estimateL1Fee","wei","ether","toEther","getTransactionGasCost","tx","gasCost","bufferCost","TransactionModeScreen","transactionCostAndData","args","txQueryKey","setTxQueryKey","useEffect","erc20Value","to","encode","then","_ref","erc20Currency","tokenBalance","tokenMeta","gasCostWei","getWalletBalance","transactionValueWei","walletBalance","nativeWalletBalance","chainMetadata","getChainMetadata","refetchInterval","useTransactionCostAndData","sponsoredTransactionsEnabled","hasSponsoredTransactionsEnabled","totalCostWei","WalletSelectorButton","border","containerStyle","disabled","WalletRow","disableChevron","secondaryText","checked","CheckIcon","wallet","useConnectedWallets","x","getAccount","walletId","ensNameQuery","addressOrENS","ensAvatarQuery","useEnsAvatar","ensName","CurrencySelection","onBack","px","currencies","map","SelectCurrencyButton","onSelect","secondaryButtonBg","transition","openOnrampPopup","link","top","window","innerHeight","innerWidth","open","OnrampStatusScreen","queryClient","useQueryClient","openedWindow","onSuccess","statusQuery","useBuyWithFiatStatus","intentId","uiStatus","purchaseCbCalled","invalidatedBalance","invalidateWalletBalance","onShowSwapFlow","hasTwoSteps","_Fragment","StepBar","steps","currentStep","quote","fromCurrencyWithFees","currencySymbol","OnrampStatusScreenUI","onDone","fiatStatus","transactionMode","isEmbed","statusMeta","getBuyWithFiatStatusMeta","onRampTokenQuote","txDetails","OnRampTxDetailsTable","source","fiat","text","txHash","transactionHash","Spinner","isMobile","AccentFailIcon","CheckCircledIcon","FiatFlow","screen","setScreen","popupWindow","setPopupWindow","onPostOnrampSuccess","getBuyWithFiatStatus","FiatSteps","partialQuote","fiatQuoteToPartialQuote","step","popup","onRampLink","payer","addPendingTx","_status","PostOnRampSwapFlow","onSwapFlowStarted","polygon","useFiatCurrencySelectionStates","payOptions","defaultSelectedCurrencyShorthand","buyWithFiat","prefillSource","timeZone","Intl","DateTimeFormat","resolvedOptions","getDefaultCurrencyBasedOnLocation","selectedCurrency","setSelectedCurrency","usdCurrency","BuyTokenInput","useChainName","e","currentTarget","querySelector","focus","Input","pattern","inputMode","tabIndex","placeholder","freezeAmount","setSelectionRange","length","onChange","startsWith","numValue","isNaN","slice","boxShadow","paddingBlock","fontWeight","getWidth","chars","replace","Math","max","maxWidth","TokenSymbol","hideTokenSelector","TokenButton","onSelectToken","freezeChainAndToken","SwapFees","processingFees","fee","feeAmount","amountUSDCents","toFixed","FiatFees","inline","fromCurrency","i","feeType","GenericWalletIcon","role","PayWithCrypto","balanceQuery","useWalletBalance","borderTopWidth","swapRequired","paddingInline","freezeChainAndTokenSelection","PayTokenIcon","formatTokenBalance","sendAndConfirmTransaction","submittedTx","sendTransaction","waitForReceipt","TransferConfirmationScreen","receiverAddress","tokenAmount","setTransactionHash","setStep","setStatus","useChainSymbol","TokenInfoRow","label","tokenSymbol","Step","isDone","isActive","ConnectorLine","SwitchNetworkButton","switchChain","prepareTransaction","toWei","transfer","transferResponse","getPayBuyWithCryptoTransferEndpoint","transactionRequest","getCachedChain","BigInt","approval","approve","spender","spenderAddress","paymentToken","processingFee","estimatedGasCostUSDCents","getBuyWithCryptoTransfer","message","TransferFlow","transferTxHash","setTransferTxHash","SwapStatusScreen","onTryAgain","swapTxHash","WalletSwitcherDrawerContent","connectedWallets","hideConnectButton","showAllWallets","wallets","every","w","filter","hiddenWallets","onConnect","PlusIcon","BuyScreen","buyWithCrypto","testMode","supportedDestinationsQuery","useBuySupportedDestinations","BuyScreenContent","connectLocale","activeAccount","useActiveAccount","setPayer","activeChain","useActiveWalletChain","_payer","update","getChain","unsubChainChanged","subscribe","unsubAccountChanged","usePayerSetup","setTokenAmount","toChain","setToChain","deferredTokenAmount","setToToken","prefillBuy","initialTokenAmount","useDebouncedValue","mode","NATIVE_TOKEN","useToTokenSelectionStates","hasEditedAmount","setHasEditedAmount","supportedSourcesQuery","useBuySupportedSources","destinationChainId","destinationTokenAddress","destinationSupportedTokens","useMemo","createSupportedTokens","supportedTokens","sourceSupportedTokens","fromChain","setFromChain","fromToken","setFromToken","supportedSources","firstSupportedSource","fromChain_","fromChainDevSpecified","fromChainFromApi","fromToken_","fromTokenDevSpecified","fromTokenFromApi","useFromTokenSelectionStates","enabledPaymentMethods","swap","tokenInfo","buyWithFiatEnabled","buyWithCryptoEnabled","getEnabledPayMethodsForSelectedToken","showPaymentSelection","useEnabledPaymentMethods","payDisabled","onSwapSuccess","onPurchaseSuccess","onFiatSuccess","WalletSwitcherConnectionScreen","accountAbstraction","appMetadata","chains","backScreen","recommendedWallets","walletConnect","SwapFlow","buyWithCryptoQuote","isFiatFlow","goBack","defaultRecipientAddress","allowEdits","ChainSelectionScreen","setChain","TokenSelector","tokenList","onTokenSelect","chainSelection","select","modalTitle","MainScreen","onSelectBuyToken","TokenSelectedLayout","selectedChain","selectedToken","PaymentMethodSelection","selectedAddress","SwapScreenContent","showFromTokenSelector","disableTokenSelection","FiatScreenContent","showCurrencySelector","SelectedTokenInfo","ChainName","short","disableContinue","paddingBottom","IdCardIcon","CoinsIcon","drawerScreen","setDrawerScreen","fromTokenBalanceQuery","fromTokenId","toTokenId","quoteParams","fromChainId","fromTokenAddress","quoteQuery","queryParams","staleTime","gcTime","getBuyWithCryptoQuote","sourceTokenAmount","swapDetails","isNotEnoughBalance","displayValue","switchChainRequired","errorMsg","err","minAmountToken","minimumAmountEth","minAmount","msg","getErrorMessage","estimated","durationSeconds","multiline","showSwapFlow","buyWithFiatOptions","fiatQuoteQuery","disableSubmit","estimatedDurationSeconds","supportedTokensOverrides","isBuyWithFiatDisabled","isBuyWithCryptoDisabled","k","key","NetworkSelectorContent","showTabs","closeModal","networkSelector","renderChain","renderChainProps","ChainButton","confirming","switchingFailed"],"sourceRoot":""}