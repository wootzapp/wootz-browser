{"version":3,"file":"static/js/94052.9493a1c1.chunk.js","mappings":"+JAaOA,eAAeC,EAAkBC,GAOtC,MAAM,OAAEC,EAAM,oBAAEC,EAAmB,MAAEC,EAAK,OAAEC,EAAM,UAAEC,GAAcL,EAE5DM,EAAUL,EAAOM,aACvB,IAAKD,EACH,MAAM,IAAIE,MAAM,2CAGlB,MAAMC,EAASN,EAAMO,eAAeC,UAAUF,OAC1CA,SAsBCX,eAAyCc,GAGe,IAHd,oBAC/CV,EAAmB,OACnBO,GAC6DG,EAC7D,MAAMC,QAAiBC,EAAAA,EAAAA,MACvB,IAAK,MAAMC,KAAWF,EAChBE,EAAQN,SAAWA,SACfO,EAAAA,EAAAA,IAA+B,CAAED,UAASb,uBAGtD,CA/BUe,CAA2B,CAAER,SAAQP,wBAE7C,MAAMa,QAkCDjB,eAAoCoB,GAU1C,IAV2C,QAC1CZ,EAAO,oBACPJ,EAAmB,gBACnBiB,EAAe,OACff,GAMDc,EACC,IACGC,EAAgBC,OAAOC,oBAAoBC,SAC3CH,EAAgBC,OAAOG,oBAAoBD,OAE5C,MAAM,IAAId,MACR,gEAIJ,MAAMgB,EAAa,CACjBpB,OAAQ,IACHqB,MAAMC,KACP,IAAIC,IAAI,IACFR,EAAgBC,OAAOC,oBAAoBC,QAAQlB,QAAQwB,KAC5DC,GAAkB,GAAGA,KAASvB,EAAQwB,aACpC,MACDX,EAAgBC,OAAOG,oBAAoBD,QAAQlB,QAAQwB,KAC5DC,GAAkB,GAAGA,KAASvB,EAAQwB,aACpC,MACD1B,GAAQwB,KAAKC,GAAU,UAAUA,EAAME,MAAMzB,EAAQwB,aACvD,OAIRE,QAAS,IACHb,EAAgBC,OAAOC,oBAAoBC,QAAQU,SAAW,MAC9Db,EAAgBC,OAAOG,oBAAoBD,QAAQU,SAAW,IAEpEC,OAAQ,IACFd,EAAgBC,OAAOC,oBAAoBC,QAAQW,QAAU,MAC7Dd,EAAgBC,OAAOG,oBAAoBD,QAAQW,QAAU,KAG/DC,QAAiBhC,EAAoBiC,QAAQ,CACjDJ,GAAIZ,EAAgBY,GACpBP,WAAY,CACVF,OAAQ,CACNc,SAAUZ,EAAWpB,OACrB4B,QAASR,EAAWQ,QACpBC,OAAQT,EAAWS,WAKnBlB,QAAgBmB,EAASG,eAC/B,MAAO,CACLC,MAAOvB,EAAQuB,MACf7B,OAAQU,EAAgBT,eAAeC,UAAUF,QAAU,iBAE/D,CA9FwB8B,CAAsB,CAC1CjC,UACAJ,sBACAiB,gBAAiBhB,EACjBC,iBAGIoC,EAAAA,EAAAA,IAAYzB,GAElBd,EAAOwC,UAAU,cAAc,MAC7BzB,EAAAA,EAAAA,IAA+B,CAAED,UAASb,uBAAsB,IAGlEG,IAAYU,EACd,C","sources":["../node_modules/thirdweb/src/wallets/wallet-connect/receiver/session-proposal.ts"],"sourcesContent":["import type { Chain } from \"../../../chains/types.js\";\nimport type { Account, Wallet } from \"../../interfaces/wallet.js\";\nimport { disconnectWalletConnectSession } from \"./index.js\";\nimport { getSessions, saveSession } from \"./session-store.js\";\nimport type { WalletConnectClient } from \"./types.js\";\nimport type {\n  WalletConnectSession,\n  WalletConnectSessionProposalEvent,\n} from \"./types.js\";\n\n/**\n * @internal\n */\nexport async function onSessionProposal(options: {\n  wallet: Wallet;\n  walletConnectClient: WalletConnectClient;\n  event: WalletConnectSessionProposalEvent;\n  chains?: Chain[];\n  onConnect?: (session: WalletConnectSession) => void;\n}) {\n  const { wallet, walletConnectClient, event, chains, onConnect } = options;\n\n  const account = wallet.getAccount();\n  if (!account) {\n    throw new Error(\"No account connected to provided wallet\");\n  }\n\n  const origin = event.verifyContext?.verified?.origin;\n  if (origin) {\n    await disconnectExistingSessions({ origin, walletConnectClient });\n  }\n  const session = await acceptSessionProposal({\n    account,\n    walletConnectClient,\n    sessionProposal: event,\n    chains,\n  });\n\n  await saveSession(session);\n\n  wallet.subscribe(\"disconnect\", () => {\n    disconnectWalletConnectSession({ session, walletConnectClient });\n  });\n\n  onConnect?.(session);\n}\n\n/**\n * @internal\n */\nexport async function disconnectExistingSessions({\n  walletConnectClient,\n  origin,\n}: { walletConnectClient: WalletConnectClient; origin: string }) {\n  const sessions = await getSessions();\n  for (const session of sessions) {\n    if (session.origin === origin) {\n      await disconnectWalletConnectSession({ session, walletConnectClient });\n    }\n  }\n}\n\n/**\n * @internal\n */\nexport async function acceptSessionProposal({\n  account,\n  walletConnectClient,\n  sessionProposal,\n  chains,\n}: {\n  account: Account;\n  walletConnectClient: WalletConnectClient;\n  sessionProposal: WalletConnectSessionProposalEvent;\n  chains?: Chain[];\n}): Promise<WalletConnectSession> {\n  if (\n    !sessionProposal.params.requiredNamespaces?.eip155 &&\n    !sessionProposal.params.optionalNamespaces?.eip155\n  ) {\n    throw new Error(\n      \"No EIP155 namespace found in Wallet Connect session proposal\",\n    );\n  }\n\n  const namespaces = {\n    chains: [\n      ...Array.from(\n        new Set([\n          ...(sessionProposal.params.requiredNamespaces?.eip155?.chains?.map(\n            (chain: string) => `${chain}:${account.address}`,\n          ) ?? []),\n          ...(sessionProposal.params.optionalNamespaces?.eip155?.chains?.map(\n            (chain: string) => `${chain}:${account.address}`,\n          ) ?? []),\n          ...(chains?.map((chain) => `eip155:${chain.id}:${account.address}`) ??\n            []),\n        ]),\n      ),\n    ],\n    methods: [\n      ...(sessionProposal.params.requiredNamespaces?.eip155?.methods ?? []),\n      ...(sessionProposal.params.optionalNamespaces?.eip155?.methods ?? []),\n    ],\n    events: [\n      ...(sessionProposal.params.requiredNamespaces?.eip155?.events ?? []),\n      ...(sessionProposal.params.optionalNamespaces?.eip155?.events ?? []),\n    ],\n  };\n  const approval = await walletConnectClient.approve({\n    id: sessionProposal.id,\n    namespaces: {\n      eip155: {\n        accounts: namespaces.chains,\n        methods: namespaces.methods,\n        events: namespaces.events,\n      },\n    },\n  });\n\n  const session = await approval.acknowledged();\n  return {\n    topic: session.topic,\n    origin: sessionProposal.verifyContext?.verified?.origin || \"Unknown origin\",\n  };\n}\n"],"names":["async","onSessionProposal","options","wallet","walletConnectClient","event","chains","onConnect","account","getAccount","Error","origin","verifyContext","verified","_ref","sessions","getSessions","session","disconnectWalletConnectSession","disconnectExistingSessions","_ref2","sessionProposal","params","requiredNamespaces","eip155","optionalNamespaces","namespaces","Array","from","Set","map","chain","address","id","methods","events","approval","approve","accounts","acknowledged","topic","acceptSessionProposal","saveSession","subscribe"],"sourceRoot":""}