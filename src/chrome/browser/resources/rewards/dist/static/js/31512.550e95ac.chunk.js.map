{"version":3,"file":"static/js/31512.550e95ac.chunk.js","mappings":"4LAkBAA,eAAeC,EACbC,EACAC,GAEA,OAAOC,EAAAA,EAAAA,iCACLF,GACAF,UACE,MAAM,kBAAEK,SAA4B,iCACpC,OAAO,IAAIA,EAAkB,CAC3BH,OAAQA,EACRC,UAAWA,GACX,GAEJA,EAEJ,CAiBOH,eAAeM,EACpBC,GAEA,MAAM,OAAEL,GAAWK,EACbC,QAAkBP,EAAwBC,GAC1CO,QAAaD,EAAUE,UAC7B,GAAQD,EAAKE,SACNC,EAAAA,GAAiBC,6BACpB,OAAOJ,CAIb,CAeOT,eAAec,EAAaP,GACjC,MAAME,QAAaH,EAAqBC,GACxC,GAAIE,GAAQ,UAAWA,EAAKM,YAC1B,OAAON,EAAKM,YAAYC,KAG5B,CAeOhB,eAAeiB,EAAmBV,GACvC,MAAME,QAAaH,EAAqBC,GACxC,GAAIE,GAAQ,gBAAiBA,EAAKM,YAChC,OAAON,EAAKM,YAAYG,WAG5B,CAoBOlB,eAAemB,EAAgBC,GAEpC,aADwBnB,EAAwBmB,EAAKlB,OAAQkB,EAAKjB,YACjDgB,gBAAgBC,EACnC,C","sources":["../node_modules/thirdweb/src/wallets/in-app/web/lib/auth/index.ts"],"sourcesContent":["import type { ThirdwebClient } from \"../../../../../client/client.js\";\nimport type { OneOf } from \"../../../../../utils/type-utils.js\";\nimport type { SocialAuthOption } from \"../../../../../wallets/types.js\";\nimport {\n  type AuthArgsType,\n  type GetAuthenticatedUserParams,\n  type PreAuthArgsType,\n  UserWalletStatus,\n} from \"../../../core/authentication/types.js\";\nimport { getOrCreateInAppWalletConnector } from \"../../../core/wallet/in-app-core.js\";\nimport type { Ecosystem } from \"../../types.js\";\n\n// ---- KEEP IN SYNC WITH /wallets/in-app/native/auth/index.ts ---- //\n// duplication needed for separate exports between web and native\n\n/**\n * @internal\n */\nasync function getInAppWalletConnector(\n  client: ThirdwebClient,\n  ecosystem?: Ecosystem,\n) {\n  return getOrCreateInAppWalletConnector(\n    client,\n    async (client) => {\n      const { InAppWebConnector } = await import(\"../web-connector.js\");\n      return new InAppWebConnector({\n        client: client,\n        ecosystem: ecosystem,\n      });\n    },\n    ecosystem,\n  );\n}\n\n/**\n * Retrieves the authenticated user for the active in-app wallet.\n * @param options - The arguments for retrieving the authenticated user.\n * @returns The authenticated user if logged in and wallet initialized, otherwise undefined.\n * @example\n * ```ts\n * import { getAuthenticatedUser } from \"thirdweb/wallets/in-app\";\n *\n * const user = await getAuthenticatedUser({ client });\n * if (user) {\n *  console.log(user.walletAddress);\n * }\n * ```\n * @wallet\n */\nexport async function getAuthenticatedUser(\n  options: GetAuthenticatedUserParams,\n) {\n  const { client } = options;\n  const connector = await getInAppWalletConnector(client);\n  const user = await connector.getUser();\n  switch (user.status) {\n    case UserWalletStatus.LOGGED_IN_WALLET_INITIALIZED: {\n      return user;\n    }\n  }\n  return undefined;\n}\n\n/**\n * Retrieves the authenticated user email for the active in-app wallet.\n * @param options - The arguments for retrieving the authenticated user.\n * @returns The authenticated user email if logged in and wallet initialized, otherwise undefined.\n * @example\n * ```ts\n * import { getUserEmail } from \"thirdweb/wallets/in-app\";\n *\n * const email = await getUserEmail({ client });\n * console.log(email);\n * ```\n * @wallet\n */\nexport async function getUserEmail(options: GetAuthenticatedUserParams) {\n  const user = await getAuthenticatedUser(options);\n  if (user && \"email\" in user.authDetails) {\n    return user.authDetails.email;\n  }\n  return undefined;\n}\n\n/**\n * Retrieves the authenticated user phone number for the active embedded wallet.\n * @param options - The arguments for retrieving the authenticated user.\n * @returns The authenticated user phone number if authenticated with phone number, otherwise undefined.\n * @example\n * ```ts\n * import { getUserPhoneNumber } from \"thirdweb/wallets/embedded\";\n *\n * const phoneNumber = await getUserPhoneNumber({ client });\n * console.log(phoneNumber);\n * ```\n * @wallet\n */\nexport async function getUserPhoneNumber(options: GetAuthenticatedUserParams) {\n  const user = await getAuthenticatedUser(options);\n  if (user && \"phoneNumber\" in user.authDetails) {\n    return user.authDetails.phoneNumber;\n  }\n  return undefined;\n}\n\n/**\n * Pre-authenticates the user based on the provided authentication strategy.\n * Use this function to send a verification code to the user's email or phone number.\n * @param args - The arguments required for pre-authentication.\n * @returns A promise that resolves to the pre-authentication result.\n * @throws An error if the provided authentication strategy doesn't require pre-authentication.\n * @example\n * ```ts\n * import { preAuthenticate } from \"thirdweb/wallets/in-app\";\n *\n * const result = await preAuthenticate({\n *  client,\n *  strategy: \"email\",\n *  email: \"example@example.org\",\n * });\n * ```\n * @wallet\n */\nexport async function preAuthenticate(args: PreAuthArgsType) {\n  const connector = await getInAppWalletConnector(args.client, args.ecosystem);\n  return connector.preAuthenticate(args);\n}\n\n/**\n * Authenticates the user based on the provided authentication arguments.\n * @param args - The authentication arguments.\n * @returns A promise that resolves to the authentication result.\n * @example\n * ```ts\n * import { authenticate } from \"thirdweb/wallets/in-app\";\n *\n * const result = await authenticate({\n *  client,\n *  strategy: \"email\",\n *  email: \"example@example.org\",\n *  verificationCode: \"123456\",\n * });\n * ```\n * @wallet\n */\nexport async function authenticate(\n  args: OneOf<\n    | AuthArgsType\n    | {\n        strategy: SocialAuthOption;\n        client: ThirdwebClient;\n        ecosystem?: Ecosystem;\n        redirect: boolean;\n      }\n  >,\n) {\n  const connector = await getInAppWalletConnector(args.client, args.ecosystem);\n  const isRedirect = args.redirect || args.mode !== \"popup\";\n  if (isRedirect && connector.authenticateWithRedirect && args.strategy)\n    return connector.authenticateWithRedirect(\n      args.strategy as SocialAuthOption,\n      args.mode,\n      args.redirectUrl,\n    );\n  return connector.connect(args);\n}\n"],"names":["async","getInAppWalletConnector","client","ecosystem","getOrCreateInAppWalletConnector","InAppWebConnector","getAuthenticatedUser","options","connector","user","getUser","status","UserWalletStatus","LOGGED_IN_WALLET_INITIALIZED","getUserEmail","authDetails","email","getUserPhoneNumber","phoneNumber","preAuthenticate","args"],"sourceRoot":""}