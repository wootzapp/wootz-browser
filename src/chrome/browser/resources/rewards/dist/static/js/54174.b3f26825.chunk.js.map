{"version":3,"file":"static/js/54174.b3f26825.chunk.js","mappings":"8NA4EA,QA3DA,SAAgCA,GAa9B,MAAM,OAAEC,IAAWC,EAAAA,EAAAA,MACbC,GAAUC,EAAAA,EAAAA,MACVC,GAASC,EAAAA,EAAAA,GAAqBN,EAAMO,cAAcC,IAKxD,MACiB,SAAfR,EAAMS,MACLR,IAAWS,EAAAA,GAAgBC,MAAuB,YAAfX,EAAMS,MAGxCG,EAAAA,EAAAA,KAACC,EAAAA,EAAiB,CAChBC,SAAUd,EAAMe,OAAOP,GACvBQ,aAAcA,KACZb,EAAQ,CAAC,GACTH,EAAMiB,QAAQ,EAEhBC,OAAQlB,EAAMkB,OACdX,cAAeP,EAAMO,cACrBY,mBAAoBnB,EAAMmB,mBAC1BC,SAAUnB,IAAWD,EAAMe,OAC3BM,WAAOC,IAKRjB,GAKHO,EAAAA,EAAAA,KAACW,EAAAA,EAA0B,CACzBC,SAAUxB,EAAMwB,SAChBnB,OAAQA,EACRU,OAAQf,EAAMe,OACdU,KAAMzB,EAAMyB,KACZR,OAAQjB,EAAMiB,OACdS,OAAQ1B,EAAM0B,OACdC,MAAO3B,EAAM2B,MACbT,OAAQlB,EAAMkB,OACdT,KAAMT,EAAMS,QAbPG,EAAAA,EAAAA,KAACgB,EAAAA,EAAa,CAACC,OAAO,SAgBjC,C","sources":["../node_modules/thirdweb/src/react/web/wallets/in-app/InAppWalletSelectionUI.tsx"],"sourcesContent":["\"use client\";\nimport type { Chain } from \"../../../../chains/types.js\";\nimport type { ThirdwebClient } from \"../../../../client/client.js\";\nimport type { Wallet } from \"../../../../wallets/interfaces/wallet.js\";\nimport { useSetSelectionData } from \"../../providers/wallet-ui-states-provider.js\";\nimport { useScreenContext } from \"../../ui/ConnectWallet/Modal/screen.js\";\nimport { WalletEntryButton } from \"../../ui/ConnectWallet/WalletEntryButton.js\";\nimport { reservedScreens } from \"../../ui/ConnectWallet/constants.js\";\nimport type { ConnectLocale } from \"../../ui/ConnectWallet/locale/types.js\";\nimport { ConnectWalletSocialOptions } from \"../shared/ConnectWalletSocialOptions.js\";\nimport { LoadingScreen } from \"../shared/LoadingScreen.js\";\nimport { useInAppWalletLocale } from \"./useInAppWalletLocale.js\";\n\n/**\n *\n * @internal\n */\nfunction InAppWalletSelectionUI(props: {\n  select: () => void;\n  wallet: Wallet<\"inApp\">;\n  done: () => void;\n  goBack?: () => void;\n  connectLocale: ConnectLocale;\n  client: ThirdwebClient;\n  recommendedWallets: Wallet[] | undefined;\n  chain: Chain | undefined;\n  size: \"compact\" | \"wide\";\n  // If true, all options will be disabled. Used for things like requiring TOS approval.\n  disabled?: boolean;\n}) {\n  const { screen } = useScreenContext();\n  const setData = useSetSelectionData();\n  const locale = useInAppWalletLocale(props.connectLocale.id);\n\n  // do not show the \"selectUI\" if\n  // modal is compact or\n  // it is being rendered in Safe wallet\n  if (\n    props.size === \"wide\" ||\n    (screen !== reservedScreens.main && props.size === \"compact\")\n  ) {\n    return (\n      <WalletEntryButton\n        walletId={props.wallet.id}\n        selectWallet={() => {\n          setData({});\n          props.select();\n        }}\n        client={props.client}\n        connectLocale={props.connectLocale}\n        recommendedWallets={props.recommendedWallets}\n        isActive={screen === props.wallet}\n        badge={undefined}\n      />\n    );\n  }\n\n  if (!locale) {\n    return <LoadingScreen height=\"195px\" />;\n  }\n\n  return (\n    <ConnectWalletSocialOptions\n      disabled={props.disabled}\n      locale={locale}\n      wallet={props.wallet}\n      done={props.done}\n      select={props.select}\n      goBack={props.goBack}\n      chain={props.chain}\n      client={props.client}\n      size={props.size}\n    />\n  );\n}\n\nexport default InAppWalletSelectionUI;\n"],"names":["props","screen","useScreenContext","setData","useSetSelectionData","locale","useInAppWalletLocale","connectLocale","id","size","reservedScreens","main","_jsx","WalletEntryButton","walletId","wallet","selectWallet","select","client","recommendedWallets","isActive","badge","undefined","ConnectWalletSocialOptions","disabled","done","goBack","chain","LoadingScreen","height"],"sourceRoot":""}