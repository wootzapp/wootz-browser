{"version":3,"file":"static/js/93246.05756175.chunk.js","mappings":"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","sources":["../node_modules/uqr/dist/index.mjs","../node_modules/thirdweb/src/react/web/ui/components/QRCode/QRCodeRenderer.tsx"],"sourcesContent":["var QrCodeDataType = /* @__PURE__ */ ((QrCodeDataType2) => {\n  QrCodeDataType2[QrCodeDataType2[\"Border\"] = -1] = \"Border\";\n  QrCodeDataType2[QrCodeDataType2[\"Data\"] = 0] = \"Data\";\n  QrCodeDataType2[QrCodeDataType2[\"Function\"] = 1] = \"Function\";\n  QrCodeDataType2[QrCodeDataType2[\"Position\"] = 2] = \"Position\";\n  QrCodeDataType2[QrCodeDataType2[\"Timing\"] = 3] = \"Timing\";\n  QrCodeDataType2[QrCodeDataType2[\"Alignment\"] = 4] = \"Alignment\";\n  return QrCodeDataType2;\n})(QrCodeDataType || {});\n\nvar __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\nconst LOW = [0, 1];\nconst MEDIUM = [1, 0];\nconst QUARTILE = [2, 3];\nconst HIGH = [3, 2];\nconst EccMap = {\n  L: LOW,\n  M: MEDIUM,\n  Q: QUARTILE,\n  H: HIGH\n};\nconst NUMERIC_REGEX = /^[0-9]*$/;\nconst ALPHANUMERIC_REGEX = /^[A-Z0-9 $%*+.\\/:-]*$/;\nconst ALPHANUMERIC_CHARSET = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ $%*+-./:\";\nconst MIN_VERSION = 1;\nconst MAX_VERSION = 40;\nconst PENALTY_N1 = 3;\nconst PENALTY_N2 = 3;\nconst PENALTY_N3 = 40;\nconst PENALTY_N4 = 10;\nconst ECC_CODEWORDS_PER_BLOCK = [\n  // Version: (note that index 0 is for padding, and is set to an illegal value)\n  // 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40    Error correction level\n  [-1, 7, 10, 15, 20, 26, 18, 20, 24, 30, 18, 20, 24, 26, 30, 22, 24, 28, 30, 28, 28, 28, 28, 30, 30, 26, 28, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30],\n  // Low\n  [-1, 10, 16, 26, 18, 24, 16, 18, 22, 22, 26, 30, 22, 22, 24, 24, 28, 28, 26, 26, 26, 26, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28],\n  // Medium\n  [-1, 13, 22, 18, 26, 18, 24, 18, 22, 20, 24, 28, 26, 24, 20, 30, 24, 28, 28, 26, 30, 28, 30, 30, 30, 30, 28, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30],\n  // Quartile\n  [-1, 17, 28, 22, 16, 22, 28, 26, 26, 24, 28, 24, 28, 22, 24, 24, 30, 28, 28, 26, 28, 30, 24, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30]\n  // High\n];\nconst NUM_ERROR_CORRECTION_BLOCKS = [\n  // Version: (note that index 0 is for padding, and is set to an illegal value)\n  // 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40    Error correction level\n  [-1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 4, 4, 4, 4, 4, 6, 6, 6, 6, 7, 8, 8, 9, 9, 10, 12, 12, 12, 13, 14, 15, 16, 17, 18, 19, 19, 20, 21, 22, 24, 25],\n  // Low\n  [-1, 1, 1, 1, 2, 2, 4, 4, 4, 5, 5, 5, 8, 9, 9, 10, 10, 11, 13, 14, 16, 17, 17, 18, 20, 21, 23, 25, 26, 28, 29, 31, 33, 35, 37, 38, 40, 43, 45, 47, 49],\n  // Medium\n  [-1, 1, 1, 2, 2, 4, 4, 6, 6, 8, 8, 8, 10, 12, 16, 12, 17, 16, 18, 21, 20, 23, 23, 25, 27, 29, 34, 34, 35, 38, 40, 43, 45, 48, 51, 53, 56, 59, 62, 65, 68],\n  // Quartile\n  [-1, 1, 1, 2, 4, 4, 4, 5, 6, 8, 8, 11, 11, 16, 16, 18, 16, 19, 21, 25, 25, 25, 34, 30, 32, 35, 37, 40, 42, 45, 48, 51, 54, 57, 60, 63, 66, 70, 74, 77, 81]\n  // High\n];\nclass QrCode {\n  /* -- Constructor (low level) and fields -- */\n  // Creates a new QR Code with the given version number,\n  // error correction level, data codeword bytes, and mask number.\n  // This is a low-level API that most users should not use directly.\n  // A mid-level API is the encodeSegments() function.\n  constructor(version, ecc, dataCodewords, msk) {\n    this.version = version;\n    this.ecc = ecc;\n    /* -- Fields -- */\n    // The width and height of this QR Code, measured in modules, between\n    // 21 and 177 (inclusive). This is equal to version * 4 + 17.\n    __publicField(this, \"size\");\n    // The index of the mask pattern used in this QR Code, which is between 0 and 7 (inclusive).\n    // Even if a QR Code is created with automatic masking requested (mask = -1),\n    // the resulting object still has a mask value between 0 and 7.\n    __publicField(this, \"mask\");\n    // The modules of this QR Code (false = light, true = dark).\n    // Immutable after constructor finishes. Accessed through getModule().\n    __publicField(this, \"modules\", []);\n    __publicField(this, \"types\", []);\n    if (version < MIN_VERSION || version > MAX_VERSION)\n      throw new RangeError(\"Version value out of range\");\n    if (msk < -1 || msk > 7)\n      throw new RangeError(\"Mask value out of range\");\n    this.size = version * 4 + 17;\n    const row = Array.from({ length: this.size }, () => false);\n    for (let i = 0; i < this.size; i++) {\n      this.modules.push(row.slice());\n      this.types.push(row.map(() => 0));\n    }\n    this.drawFunctionPatterns();\n    const allCodewords = this.addEccAndInterleave(dataCodewords);\n    this.drawCodewords(allCodewords);\n    if (msk === -1) {\n      let minPenalty = 1e9;\n      for (let i = 0; i < 8; i++) {\n        this.applyMask(i);\n        this.drawFormatBits(i);\n        const penalty = this.getPenaltyScore();\n        if (penalty < minPenalty) {\n          msk = i;\n          minPenalty = penalty;\n        }\n        this.applyMask(i);\n      }\n    }\n    this.mask = msk;\n    this.applyMask(msk);\n    this.drawFormatBits(msk);\n  }\n  /* -- Accessor methods -- */\n  // Returns the color of the module (pixel) at the given coordinates, which is false\n  // for light or true for dark. The top left corner has the coordinates (x=0, y=0).\n  // If the given coordinates are out of bounds, then false (light) is returned.\n  getModule(x, y) {\n    return x >= 0 && x < this.size && y >= 0 && y < this.size && this.modules[y][x];\n  }\n  /* -- Private helper methods for constructor: Drawing function modules -- */\n  // Reads this object's version field, and draws and marks all function modules.\n  drawFunctionPatterns() {\n    for (let i = 0; i < this.size; i++) {\n      this.setFunctionModule(6, i, i % 2 === 0, QrCodeDataType.Timing);\n      this.setFunctionModule(i, 6, i % 2 === 0, QrCodeDataType.Timing);\n    }\n    this.drawFinderPattern(3, 3);\n    this.drawFinderPattern(this.size - 4, 3);\n    this.drawFinderPattern(3, this.size - 4);\n    const alignPatPos = this.getAlignmentPatternPositions();\n    const numAlign = alignPatPos.length;\n    for (let i = 0; i < numAlign; i++) {\n      for (let j = 0; j < numAlign; j++) {\n        if (!(i === 0 && j === 0 || i === 0 && j === numAlign - 1 || i === numAlign - 1 && j === 0))\n          this.drawAlignmentPattern(alignPatPos[i], alignPatPos[j]);\n      }\n    }\n    this.drawFormatBits(0);\n    this.drawVersion();\n  }\n  // Draws two copies of the format bits (with its own error correction code)\n  // based on the given mask and this object's error correction level field.\n  drawFormatBits(mask) {\n    const data = this.ecc[1] << 3 | mask;\n    let rem = data;\n    for (let i = 0; i < 10; i++)\n      rem = rem << 1 ^ (rem >>> 9) * 1335;\n    const bits = (data << 10 | rem) ^ 21522;\n    for (let i = 0; i <= 5; i++)\n      this.setFunctionModule(8, i, getBit(bits, i));\n    this.setFunctionModule(8, 7, getBit(bits, 6));\n    this.setFunctionModule(8, 8, getBit(bits, 7));\n    this.setFunctionModule(7, 8, getBit(bits, 8));\n    for (let i = 9; i < 15; i++)\n      this.setFunctionModule(14 - i, 8, getBit(bits, i));\n    for (let i = 0; i < 8; i++)\n      this.setFunctionModule(this.size - 1 - i, 8, getBit(bits, i));\n    for (let i = 8; i < 15; i++)\n      this.setFunctionModule(8, this.size - 15 + i, getBit(bits, i));\n    this.setFunctionModule(8, this.size - 8, true);\n  }\n  // Draws two copies of the version bits (with its own error correction code),\n  // based on this object's version field, iff 7 <= version <= 40.\n  drawVersion() {\n    if (this.version < 7)\n      return;\n    let rem = this.version;\n    for (let i = 0; i < 12; i++)\n      rem = rem << 1 ^ (rem >>> 11) * 7973;\n    const bits = this.version << 12 | rem;\n    for (let i = 0; i < 18; i++) {\n      const color = getBit(bits, i);\n      const a = this.size - 11 + i % 3;\n      const b = Math.floor(i / 3);\n      this.setFunctionModule(a, b, color);\n      this.setFunctionModule(b, a, color);\n    }\n  }\n  // Draws a 9*9 finder pattern including the border separator,\n  // with the center module at (x, y). Modules can be out of bounds.\n  drawFinderPattern(x, y) {\n    for (let dy = -4; dy <= 4; dy++) {\n      for (let dx = -4; dx <= 4; dx++) {\n        const dist = Math.max(Math.abs(dx), Math.abs(dy));\n        const xx = x + dx;\n        const yy = y + dy;\n        if (xx >= 0 && xx < this.size && yy >= 0 && yy < this.size)\n          this.setFunctionModule(xx, yy, dist !== 2 && dist !== 4, QrCodeDataType.Position);\n      }\n    }\n  }\n  // Draws a 5*5 alignment pattern, with the center module\n  // at (x, y). All modules must be in bounds.\n  drawAlignmentPattern(x, y) {\n    for (let dy = -2; dy <= 2; dy++) {\n      for (let dx = -2; dx <= 2; dx++) {\n        this.setFunctionModule(\n          x + dx,\n          y + dy,\n          Math.max(Math.abs(dx), Math.abs(dy)) !== 1,\n          QrCodeDataType.Alignment\n        );\n      }\n    }\n  }\n  // Sets the color of a module and marks it as a function module.\n  // Only used by the constructor. Coordinates must be in bounds.\n  setFunctionModule(x, y, isDark, type = QrCodeDataType.Function) {\n    this.modules[y][x] = isDark;\n    this.types[y][x] = type;\n  }\n  /* -- Private helper methods for constructor: Codewords and masking -- */\n  // Returns a new byte string representing the given data with the appropriate error correction\n  // codewords appended to it, based on this object's version and error correction level.\n  addEccAndInterleave(data) {\n    const ver = this.version;\n    const ecl = this.ecc;\n    if (data.length !== getNumDataCodewords(ver, ecl))\n      throw new RangeError(\"Invalid argument\");\n    const numBlocks = NUM_ERROR_CORRECTION_BLOCKS[ecl[0]][ver];\n    const blockEccLen = ECC_CODEWORDS_PER_BLOCK[ecl[0]][ver];\n    const rawCodewords = Math.floor(getNumRawDataModules(ver) / 8);\n    const numShortBlocks = numBlocks - rawCodewords % numBlocks;\n    const shortBlockLen = Math.floor(rawCodewords / numBlocks);\n    const blocks = [];\n    const rsDiv = reedSolomonComputeDivisor(blockEccLen);\n    for (let i = 0, k = 0; i < numBlocks; i++) {\n      const dat = data.slice(k, k + shortBlockLen - blockEccLen + (i < numShortBlocks ? 0 : 1));\n      k += dat.length;\n      const ecc = reedSolomonComputeRemainder(dat, rsDiv);\n      if (i < numShortBlocks)\n        dat.push(0);\n      blocks.push(dat.concat(ecc));\n    }\n    const result = [];\n    for (let i = 0; i < blocks[0].length; i++) {\n      blocks.forEach((block, j) => {\n        if (i !== shortBlockLen - blockEccLen || j >= numShortBlocks)\n          result.push(block[i]);\n      });\n    }\n    return result;\n  }\n  // Draws the given sequence of 8-bit codewords (data and error correction) onto the entire\n  // data area of this QR Code. Function modules need to be marked off before this is called.\n  drawCodewords(data) {\n    if (data.length !== Math.floor(getNumRawDataModules(this.version) / 8))\n      throw new RangeError(\"Invalid argument\");\n    let i = 0;\n    for (let right = this.size - 1; right >= 1; right -= 2) {\n      if (right === 6)\n        right = 5;\n      for (let vert = 0; vert < this.size; vert++) {\n        for (let j = 0; j < 2; j++) {\n          const x = right - j;\n          const upward = (right + 1 & 2) === 0;\n          const y = upward ? this.size - 1 - vert : vert;\n          if (!this.types[y][x] && i < data.length * 8) {\n            this.modules[y][x] = getBit(data[i >>> 3], 7 - (i & 7));\n            i++;\n          }\n        }\n      }\n    }\n  }\n  // XORs the codeword modules in this QR Code with the given mask pattern.\n  // The function modules must be marked and the codeword bits must be drawn\n  // before masking. Due to the arithmetic of XOR, calling applyMask() with\n  // the same mask value a second time will undo the mask. A final well-formed\n  // QR Code needs exactly one (not zero, two, etc.) mask applied.\n  applyMask(mask) {\n    if (mask < 0 || mask > 7)\n      throw new RangeError(\"Mask value out of range\");\n    for (let y = 0; y < this.size; y++) {\n      for (let x = 0; x < this.size; x++) {\n        let invert;\n        switch (mask) {\n          case 0:\n            invert = (x + y) % 2 === 0;\n            break;\n          case 1:\n            invert = y % 2 === 0;\n            break;\n          case 2:\n            invert = x % 3 === 0;\n            break;\n          case 3:\n            invert = (x + y) % 3 === 0;\n            break;\n          case 4:\n            invert = (Math.floor(x / 3) + Math.floor(y / 2)) % 2 === 0;\n            break;\n          case 5:\n            invert = x * y % 2 + x * y % 3 === 0;\n            break;\n          case 6:\n            invert = (x * y % 2 + x * y % 3) % 2 === 0;\n            break;\n          case 7:\n            invert = ((x + y) % 2 + x * y % 3) % 2 === 0;\n            break;\n          default:\n            throw new Error(\"Unreachable\");\n        }\n        if (!this.types[y][x] && invert)\n          this.modules[y][x] = !this.modules[y][x];\n      }\n    }\n  }\n  // Calculates and returns the penalty score based on state of this QR Code's current modules.\n  // This is used by the automatic mask choice algorithm to find the mask pattern that yields the lowest score.\n  getPenaltyScore() {\n    let result = 0;\n    for (let y = 0; y < this.size; y++) {\n      let runColor = false;\n      let runX = 0;\n      const runHistory = [0, 0, 0, 0, 0, 0, 0];\n      for (let x = 0; x < this.size; x++) {\n        if (this.modules[y][x] === runColor) {\n          runX++;\n          if (runX === 5)\n            result += PENALTY_N1;\n          else if (runX > 5)\n            result++;\n        } else {\n          this.finderPenaltyAddHistory(runX, runHistory);\n          if (!runColor)\n            result += this.finderPenaltyCountPatterns(runHistory) * PENALTY_N3;\n          runColor = this.modules[y][x];\n          runX = 1;\n        }\n      }\n      result += this.finderPenaltyTerminateAndCount(runColor, runX, runHistory) * PENALTY_N3;\n    }\n    for (let x = 0; x < this.size; x++) {\n      let runColor = false;\n      let runY = 0;\n      const runHistory = [0, 0, 0, 0, 0, 0, 0];\n      for (let y = 0; y < this.size; y++) {\n        if (this.modules[y][x] === runColor) {\n          runY++;\n          if (runY === 5)\n            result += PENALTY_N1;\n          else if (runY > 5)\n            result++;\n        } else {\n          this.finderPenaltyAddHistory(runY, runHistory);\n          if (!runColor)\n            result += this.finderPenaltyCountPatterns(runHistory) * PENALTY_N3;\n          runColor = this.modules[y][x];\n          runY = 1;\n        }\n      }\n      result += this.finderPenaltyTerminateAndCount(runColor, runY, runHistory) * PENALTY_N3;\n    }\n    for (let y = 0; y < this.size - 1; y++) {\n      for (let x = 0; x < this.size - 1; x++) {\n        const color = this.modules[y][x];\n        if (color === this.modules[y][x + 1] && color === this.modules[y + 1][x] && color === this.modules[y + 1][x + 1])\n          result += PENALTY_N2;\n      }\n    }\n    let dark = 0;\n    for (const row of this.modules)\n      dark = row.reduce((sum, color) => sum + (color ? 1 : 0), dark);\n    const total = this.size * this.size;\n    const k = Math.ceil(Math.abs(dark * 20 - total * 10) / total) - 1;\n    result += k * PENALTY_N4;\n    return result;\n  }\n  /* -- Private helper functions -- */\n  // Returns an ascending list of positions of alignment patterns for this version number.\n  // Each position is in the range [0,177), and are used on both the x and y axes.\n  // This could be implemented as lookup table of 40 variable-length lists of integers.\n  getAlignmentPatternPositions() {\n    if (this.version === 1) {\n      return [];\n    } else {\n      const numAlign = Math.floor(this.version / 7) + 2;\n      const step = this.version === 32 ? 26 : Math.ceil((this.version * 4 + 4) / (numAlign * 2 - 2)) * 2;\n      const result = [6];\n      for (let pos = this.size - 7; result.length < numAlign; pos -= step)\n        result.splice(1, 0, pos);\n      return result;\n    }\n  }\n  // Can only be called immediately after a light run is added, and\n  // returns either 0, 1, or 2. A helper function for getPenaltyScore().\n  finderPenaltyCountPatterns(runHistory) {\n    const n = runHistory[1];\n    const core = n > 0 && runHistory[2] === n && runHistory[3] === n * 3 && runHistory[4] === n && runHistory[5] === n;\n    return (core && runHistory[0] >= n * 4 && runHistory[6] >= n ? 1 : 0) + (core && runHistory[6] >= n * 4 && runHistory[0] >= n ? 1 : 0);\n  }\n  // Must be called at the end of a line (row or column) of modules. A helper function for getPenaltyScore().\n  finderPenaltyTerminateAndCount(currentRunColor, currentRunLength, runHistory) {\n    if (currentRunColor) {\n      this.finderPenaltyAddHistory(currentRunLength, runHistory);\n      currentRunLength = 0;\n    }\n    currentRunLength += this.size;\n    this.finderPenaltyAddHistory(currentRunLength, runHistory);\n    return this.finderPenaltyCountPatterns(runHistory);\n  }\n  // Pushes the given value to the front and drops the last value. A helper function for getPenaltyScore().\n  finderPenaltyAddHistory(currentRunLength, runHistory) {\n    if (runHistory[0] === 0)\n      currentRunLength += this.size;\n    runHistory.pop();\n    runHistory.unshift(currentRunLength);\n  }\n}\nfunction appendBits(val, len, bb) {\n  if (len < 0 || len > 31 || val >>> len !== 0)\n    throw new RangeError(\"Value out of range\");\n  for (let i = len - 1; i >= 0; i--)\n    bb.push(val >>> i & 1);\n}\nfunction getBit(x, i) {\n  return (x >>> i & 1) !== 0;\n}\nclass QrSegment {\n  // Creates a new QR Code segment with the given attributes and data.\n  // The character count (numChars) must agree with the mode and the bit buffer length,\n  // but the constraint isn't checked. The given bit buffer is cloned and stored.\n  constructor(mode, numChars, bitData) {\n    this.mode = mode;\n    this.numChars = numChars;\n    this.bitData = bitData;\n    if (numChars < 0)\n      throw new RangeError(\"Invalid argument\");\n    this.bitData = bitData.slice();\n  }\n  /* -- Methods -- */\n  // Returns a new copy of the data bits of this segment.\n  getData() {\n    return this.bitData.slice();\n  }\n}\nconst MODE_NUMERIC = [1, 10, 12, 14];\nconst MODE_ALPHANUMERIC = [2, 9, 11, 13];\nconst MODE_BYTE = [4, 8, 16, 16];\nfunction numCharCountBits(mode, ver) {\n  return mode[Math.floor((ver + 7) / 17) + 1];\n}\nfunction makeBytes(data) {\n  const bb = [];\n  for (const b of data)\n    appendBits(b, 8, bb);\n  return new QrSegment(MODE_BYTE, data.length, bb);\n}\nfunction makeNumeric(digits) {\n  if (!isNumeric(digits))\n    throw new RangeError(\"String contains non-numeric characters\");\n  const bb = [];\n  for (let i = 0; i < digits.length; ) {\n    const n = Math.min(digits.length - i, 3);\n    appendBits(Number.parseInt(digits.substring(i, i + n), 10), n * 3 + 1, bb);\n    i += n;\n  }\n  return new QrSegment(MODE_NUMERIC, digits.length, bb);\n}\nfunction makeAlphanumeric(text) {\n  if (!isAlphanumeric(text))\n    throw new RangeError(\"String contains unencodable characters in alphanumeric mode\");\n  const bb = [];\n  let i;\n  for (i = 0; i + 2 <= text.length; i += 2) {\n    let temp = ALPHANUMERIC_CHARSET.indexOf(text.charAt(i)) * 45;\n    temp += ALPHANUMERIC_CHARSET.indexOf(text.charAt(i + 1));\n    appendBits(temp, 11, bb);\n  }\n  if (i < text.length)\n    appendBits(ALPHANUMERIC_CHARSET.indexOf(text.charAt(i)), 6, bb);\n  return new QrSegment(MODE_ALPHANUMERIC, text.length, bb);\n}\nfunction makeSegments(text) {\n  if (text === \"\")\n    return [];\n  else if (isNumeric(text))\n    return [makeNumeric(text)];\n  else if (isAlphanumeric(text))\n    return [makeAlphanumeric(text)];\n  else\n    return [makeBytes(toUtf8ByteArray(text))];\n}\nfunction isNumeric(text) {\n  return NUMERIC_REGEX.test(text);\n}\nfunction isAlphanumeric(text) {\n  return ALPHANUMERIC_REGEX.test(text);\n}\nfunction getTotalBits(segs, version) {\n  let result = 0;\n  for (const seg of segs) {\n    const ccbits = numCharCountBits(seg.mode, version);\n    if (seg.numChars >= 1 << ccbits)\n      return Number.POSITIVE_INFINITY;\n    result += 4 + ccbits + seg.bitData.length;\n  }\n  return result;\n}\nfunction toUtf8ByteArray(str) {\n  str = encodeURI(str);\n  const result = [];\n  for (let i = 0; i < str.length; i++) {\n    if (str.charAt(i) !== \"%\") {\n      result.push(str.charCodeAt(i));\n    } else {\n      result.push(Number.parseInt(str.substring(i + 1, i + 3), 16));\n      i += 2;\n    }\n  }\n  return result;\n}\nfunction getNumRawDataModules(ver) {\n  if (ver < MIN_VERSION || ver > MAX_VERSION)\n    throw new RangeError(\"Version number out of range\");\n  let result = (16 * ver + 128) * ver + 64;\n  if (ver >= 2) {\n    const numAlign = Math.floor(ver / 7) + 2;\n    result -= (25 * numAlign - 10) * numAlign - 55;\n    if (ver >= 7)\n      result -= 36;\n  }\n  return result;\n}\nfunction getNumDataCodewords(ver, ecl) {\n  return Math.floor(getNumRawDataModules(ver) / 8) - ECC_CODEWORDS_PER_BLOCK[ecl[0]][ver] * NUM_ERROR_CORRECTION_BLOCKS[ecl[0]][ver];\n}\nfunction reedSolomonComputeDivisor(degree) {\n  if (degree < 1 || degree > 255)\n    throw new RangeError(\"Degree out of range\");\n  const result = [];\n  for (let i = 0; i < degree - 1; i++)\n    result.push(0);\n  result.push(1);\n  let root = 1;\n  for (let i = 0; i < degree; i++) {\n    for (let j = 0; j < result.length; j++) {\n      result[j] = reedSolomonMultiply(result[j], root);\n      if (j + 1 < result.length)\n        result[j] ^= result[j + 1];\n    }\n    root = reedSolomonMultiply(root, 2);\n  }\n  return result;\n}\nfunction reedSolomonComputeRemainder(data, divisor) {\n  const result = divisor.map((_) => 0);\n  for (const b of data) {\n    const factor = b ^ result.shift();\n    result.push(0);\n    divisor.forEach((coef, i) => result[i] ^= reedSolomonMultiply(coef, factor));\n  }\n  return result;\n}\nfunction reedSolomonMultiply(x, y) {\n  if (x >>> 8 !== 0 || y >>> 8 !== 0)\n    throw new RangeError(\"Byte out of range\");\n  let z = 0;\n  for (let i = 7; i >= 0; i--) {\n    z = z << 1 ^ (z >>> 7) * 285;\n    z ^= (y >>> i & 1) * x;\n  }\n  return z;\n}\nfunction encodeSegments(segs, ecl, minVersion = 1, maxVersion = 40, mask = -1, boostEcl = true) {\n  if (!(MIN_VERSION <= minVersion && minVersion <= maxVersion && maxVersion <= MAX_VERSION) || mask < -1 || mask > 7)\n    throw new RangeError(\"Invalid value\");\n  let version;\n  let dataUsedBits;\n  for (version = minVersion; ; version++) {\n    const dataCapacityBits2 = getNumDataCodewords(version, ecl) * 8;\n    const usedBits = getTotalBits(segs, version);\n    if (usedBits <= dataCapacityBits2) {\n      dataUsedBits = usedBits;\n      break;\n    }\n    if (version >= maxVersion)\n      throw new RangeError(\"Data too long\");\n  }\n  for (const newEcl of [MEDIUM, QUARTILE, HIGH]) {\n    if (boostEcl && dataUsedBits <= getNumDataCodewords(version, newEcl) * 8)\n      ecl = newEcl;\n  }\n  const bb = [];\n  for (const seg of segs) {\n    appendBits(seg.mode[0], 4, bb);\n    appendBits(seg.numChars, numCharCountBits(seg.mode, version), bb);\n    for (const b of seg.getData())\n      bb.push(b);\n  }\n  const dataCapacityBits = getNumDataCodewords(version, ecl) * 8;\n  appendBits(0, Math.min(4, dataCapacityBits - bb.length), bb);\n  appendBits(0, (8 - bb.length % 8) % 8, bb);\n  for (let padByte = 236; bb.length < dataCapacityBits; padByte ^= 236 ^ 17)\n    appendBits(padByte, 8, bb);\n  const dataCodewords = Array.from({ length: Math.ceil(bb.length / 8) }, () => 0);\n  bb.forEach((b, i) => dataCodewords[i >>> 3] |= b << 7 - (i & 7));\n  return new QrCode(version, ecl, dataCodewords, mask);\n}\n\nfunction encode(data, options) {\n  const {\n    ecc = \"L\",\n    boostEcc = false,\n    minVersion = 1,\n    maxVersion = 40,\n    maskPattern = -1,\n    border = 1\n  } = options || {};\n  const segment = typeof data === \"string\" ? makeSegments(data) : Array.isArray(data) ? [makeBytes(data)] : void 0;\n  if (!segment)\n    throw new Error(`uqr only supports encoding string and binary data, but got: ${typeof data}`);\n  const qr = encodeSegments(\n    segment,\n    EccMap[ecc],\n    minVersion,\n    maxVersion,\n    maskPattern,\n    boostEcc\n  );\n  const result = addBorder({\n    version: qr.version,\n    maskPattern: qr.mask,\n    size: qr.size,\n    data: qr.modules,\n    types: qr.types\n  }, border);\n  if (options?.invert)\n    result.data = result.data.map((row) => row.map((mod) => !mod));\n  options?.onEncoded?.(result);\n  return result;\n}\nfunction addBorder(input, border = 1) {\n  if (!border)\n    return input;\n  const { size } = input;\n  const newSize = size + border * 2;\n  input.size = newSize;\n  input.data.forEach((row) => {\n    for (let i = 0; i < border; i++) {\n      row.unshift(false);\n      row.push(false);\n    }\n  });\n  for (let i = 0; i < border; i++) {\n    input.data.unshift(Array.from({ length: newSize }, (_) => false));\n    input.data.push(Array.from({ length: newSize }, (_) => false));\n  }\n  const b = QrCodeDataType.Border;\n  input.types.forEach((row) => {\n    for (let i = 0; i < border; i++) {\n      row.unshift(b);\n      row.push(b);\n    }\n  });\n  for (let i = 0; i < border; i++) {\n    input.types.unshift(Array.from({ length: newSize }, (_) => b));\n    input.types.push(Array.from({ length: newSize }, (_) => b));\n  }\n  return input;\n}\nfunction getDataAt(data, x, y, defaults = false) {\n  if (x < 0 || y < 0 || x >= data.length || y >= data.length)\n    return defaults;\n  return data[y][x];\n}\n\nfunction renderUnicode(data, options = {}) {\n  const {\n    whiteChar = \"\\u2588\",\n    blackChar = \"\\u2591\"\n  } = options;\n  const result = encode(data, options);\n  return result.data.map((row) => {\n    return row.map((mod) => mod ? blackChar : whiteChar).join(\"\");\n  }).join(\"\\n\");\n}\nfunction renderANSI(data, options = {}) {\n  return renderUnicode(data, {\n    ...options,\n    blackChar: \"\\x1B[40m\\u3000\\x1B[0m\",\n    whiteChar: \"\\x1B[47m\\u3000\\x1B[0m\"\n  });\n}\nfunction renderUnicodeCompact(data, options = {}) {\n  const platte = {\n    WHITE_ALL: \"\\u2588\",\n    WHITE_BLACK: \"\\u2580\",\n    BLACK_WHITE: \"\\u2584\",\n    BLACK_ALL: \" \"\n  };\n  const result = encode(data, options);\n  const WHITE = false;\n  const BLACK = true;\n  const at = (x, y) => getDataAt(result.data, x, y, true);\n  const lines = [];\n  let line = \"\";\n  for (let row = 0; row < result.size; row += 2) {\n    for (let col = 0; col < result.size; col++) {\n      if (at(col, row) === WHITE && at(col, row + 1) === WHITE)\n        line += platte.WHITE_ALL;\n      else if (at(col, row) === WHITE && at(col, row + 1) === BLACK)\n        line += platte.WHITE_BLACK;\n      else if (at(col, row) === BLACK && at(col, row + 1) === WHITE)\n        line += platte.BLACK_WHITE;\n      else\n        line += platte.BLACK_ALL;\n    }\n    lines.push(line);\n    line = \"\";\n  }\n  return lines.join(\"\\n\");\n}\n\nfunction renderSVG(data, options = {}) {\n  const result = encode(data, options);\n  const {\n    pixelSize = 10,\n    whiteColor = \"white\",\n    blackColor = \"black\"\n  } = options;\n  const height = result.size * pixelSize;\n  const width = result.size * pixelSize;\n  let svg = `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 ${width} ${height}\">`;\n  const pathes = [];\n  for (let row = 0; row < result.size; row++) {\n    for (let col = 0; col < result.size; col++) {\n      const x = col * pixelSize;\n      const y = row * pixelSize;\n      if (result.data[row][col])\n        pathes.push(`M${x},${y}h${pixelSize}v${pixelSize}h-${pixelSize}z`);\n    }\n  }\n  svg += `<rect fill=\"${whiteColor}\" width=\"${width}\" height=\"${height}\"/>`;\n  svg += `<path fill=\"${blackColor}\" d=\"${pathes.join(\"\")}\"/>`;\n  svg += \"</svg>\";\n  return svg;\n}\n\nexport { QrCodeDataType, encode, renderANSI, renderSVG, renderUnicode, renderUnicodeCompact };\n","\"use client\";\nimport type React from \"react\";\nimport { type ReactElement, useMemo } from \"react\";\nimport { encode } from \"uqr\";\n\ntype QRCodeRendererProps = {\n  ecl?: \"L\" | \"M\" | \"Q\" | \"H\";\n  size?: number;\n  uri: string;\n  clearSize?: number;\n  image?: React.ReactNode;\n  imageBackground?: string;\n};\n\n/**\n * @internal\n */\nfunction QRCodeRenderer({\n  ecl = \"M\",\n  size: sizeProp = 200,\n  uri,\n  clearSize = 0,\n  image,\n  imageBackground = \"transparent\",\n}: QRCodeRendererProps) {\n  const logoSize = clearSize;\n  const size = sizeProp - 10 * 2;\n\n  const dots = useMemo(() => {\n    const dotsArray: ReactElement[] = [];\n    const matrix = encode(uri, { ecc: ecl, border: 0 }).data;\n    const cellSize = size / matrix.length;\n    const qrList = [\n      { x: 0, y: 0 },\n      { x: 1, y: 0 },\n      { x: 0, y: 1 },\n    ];\n\n    for (const { x, y } of qrList) {\n      const x1 = (matrix.length - 7) * cellSize * x;\n      const y1 = (matrix.length - 7) * cellSize * y;\n      for (let i = 0; i < 3; i++) {\n        dotsArray.push(\n          <rect\n            key={`${i}-${x}-${y}`}\n            fill={\n              i % 2 !== 0\n                ? \"var(--ck-qr-background, var(--ck-body-background))\"\n                : \"var(--ck-qr-dot-color)\"\n            }\n            rx={(i - 2) * -5 + (i === 0 ? 2 : 3)}\n            ry={(i - 2) * -5 + (i === 0 ? 2 : 3)}\n            width={cellSize * (7 - i * 2)}\n            height={cellSize * (7 - i * 2)}\n            x={x1 + cellSize * i}\n            y={y1 + cellSize * i}\n          />,\n        );\n      }\n    }\n\n    if (image) {\n      const x1 = (matrix.length - 7) * cellSize * 1;\n      const y1 = (matrix.length - 7) * cellSize * 1;\n      dotsArray.push(\n        <>\n          <rect\n            fill={imageBackground}\n            rx={(0 - 2) * -5 + 2}\n            ry={(0 - 2) * -5 + 2}\n            width={cellSize * (7 - 0 * 2)}\n            height={cellSize * (7 - 0 * 2)}\n            x={x1 + cellSize * 0}\n            y={y1 + cellSize * 0}\n          />\n          <foreignObject\n            width={cellSize * (7 - 0 * 2)}\n            height={cellSize * (7 - 0 * 2)}\n            x={x1 + cellSize * 0}\n            y={y1 + cellSize * 0}\n          >\n            <div style={{ borderRadius: (0 - 2) * -5 + 2, overflow: \"hidden\" }}>\n              {image}\n            </div>\n          </foreignObject>\n        </>,\n      );\n    }\n\n    const clearArenaSize = Math.floor((logoSize + 25) / cellSize);\n    const matrixMiddleStart = matrix.length / 2 - clearArenaSize / 2;\n    const matrixMiddleEnd = matrix.length / 2 + clearArenaSize / 2 - 1;\n\n    matrix.forEach((row, i: number) => {\n      row.forEach((_: boolean, j: number) => {\n        if (matrix[i]?.[j]) {\n          // Do not render dots under position squares\n          if (\n            !(\n              (i < 7 && j < 7) ||\n              (i > matrix.length - 8 && j < 7) ||\n              (i < 7 && j > matrix.length - 8)\n            )\n          ) {\n            //if (image && i > matrix.length - 9 && j > matrix.length - 9) return;\n            if (\n              image ||\n              !(\n                i > matrixMiddleStart &&\n                i < matrixMiddleEnd &&\n                j > matrixMiddleStart &&\n                j < matrixMiddleEnd\n              )\n            ) {\n              dotsArray.push(\n                <circle\n                  key={`circle-${i}-${\n                    // biome-ignore lint/suspicious/noArrayIndexKey: its the only thing available for the key here\n                    j\n                  }`}\n                  cx={i * cellSize + cellSize / 2}\n                  cy={j * cellSize + cellSize / 2}\n                  fill=\"var(--ck-qr-dot-color)\"\n                  r={cellSize / 3}\n                />,\n              );\n            }\n          }\n        }\n      });\n    });\n\n    return dotsArray;\n  }, [ecl, image, imageBackground, logoSize, size, uri]);\n\n  return (\n    <svg\n      height={size}\n      width={size}\n      viewBox={`0 0 ${size} ${size}`}\n      style={{\n        width: size,\n        height: size,\n      }}\n      role=\"presentation\"\n    >\n      <rect fill=\"transparent\" height={size} width={size} />\n      {dots}\n    </svg>\n  );\n}\n\nexport default QRCodeRenderer;\n"],"names":["QrCodeDataType","QrCodeDataType2","__defProp","Object","defineProperty","__publicField","obj","key","value","__defNormalProp","enumerable","configurable","writable","MEDIUM","QUARTILE","HIGH","EccMap","L","M","Q","H","NUMERIC_REGEX","ALPHANUMERIC_REGEX","ALPHANUMERIC_CHARSET","MIN_VERSION","MAX_VERSION","ECC_CODEWORDS_PER_BLOCK","NUM_ERROR_CORRECTION_BLOCKS","QrCode","constructor","version","ecc","dataCodewords","msk","this","RangeError","size","row","Array","from","length","i","modules","push","slice","types","map","drawFunctionPatterns","allCodewords","addEccAndInterleave","drawCodewords","minPenalty","applyMask","drawFormatBits","penalty","getPenaltyScore","mask","getModule","x","y","setFunctionModule","Timing","drawFinderPattern","alignPatPos","getAlignmentPatternPositions","numAlign","j","drawAlignmentPattern","drawVersion","data","rem","bits","getBit","color","a","b","Math","floor","dy","dx","dist","max","abs","xx","yy","Position","Alignment","isDark","type","arguments","undefined","Function","ver","ecl","getNumDataCodewords","numBlocks","blockEccLen","rawCodewords","getNumRawDataModules","numShortBlocks","shortBlockLen","blocks","rsDiv","degree","result","root","reedSolomonMultiply","reedSolomonComputeDivisor","k","dat","reedSolomonComputeRemainder","concat","forEach","block","right","vert","invert","Error","runColor","runX","runHistory","finderPenaltyAddHistory","finderPenaltyCountPatterns","finderPenaltyTerminateAndCount","runY","dark","reduce","sum","total","ceil","step","pos","splice","n","core","currentRunColor","currentRunLength","pop","unshift","appendBits","val","len","bb","QrSegment","mode","numChars","bitData","getData","MODE_NUMERIC","MODE_ALPHANUMERIC","MODE_BYTE","numCharCountBits","makeBytes","makeNumeric","digits","isNumeric","min","Number","parseInt","substring","makeAlphanumeric","text","isAlphanumeric","temp","indexOf","charAt","test","getTotalBits","segs","seg","ccbits","POSITIVE_INFINITY","toUtf8ByteArray","str","encodeURI","charCodeAt","divisor","_","factor","shift","coef","z","encode","options","boostEcc","minVersion","maxVersion","maskPattern","border","segment","isArray","qr","dataUsedBits","boostEcl","dataCapacityBits2","usedBits","newEcl","dataCapacityBits","padByte","encodeSegments","input","newSize","Border","addBorder","mod","onEncoded","_ref","sizeProp","uri","clearSize","image","imageBackground","logoSize","dots","useMemo","dotsArray","matrix","cellSize","qrList","x1","y1","_jsx","fill","rx","ry","width","height","_jsxs","_Fragment","children","style","borderRadius","overflow","clearArenaSize","matrixMiddleStart","matrixMiddleEnd","cx","cy","r","viewBox","role"],"sourceRoot":""}