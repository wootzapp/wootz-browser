"use strict";(self.webpackChunkrewards=self.webpackChunkrewards||[]).push([[98434],{98434:(e,t,r)=>{r.d(t,{upload:()=>d});var n=r(966),i=r(77717),a=r(16406),s=r(86475);function o(e){return globalThis.File&&e instanceof File}function f(e){return!!e&&(!!(0,a.C)(e,["data","name"])&&!("string"!==typeof e.name||"string"!==typeof e.data&&!(0,s.mg)(e.data)))}function l(e,t){if(o(e)&&o(t)){if(e.name===t.name&&e.lastModified===t.lastModified&&e.size===t.size)return!0}else{if((0,s.mg)(e)&&(0,s.mg)(t))return(0,s.tv)(e,t);if(f(e)&&f(t)&&e.name===t.name){if("string"===typeof e.data&&"string"===typeof t.data)return e.data===t.data;if((0,s.mg)(e.data)&&(0,s.mg)(t.data))return(0,s.tv)(e.data,t.data)}}return!1}function u(e){return o(e)||(0,s.mg)(e)||f(e)}function m(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:[];if(u(e))return t.push(e),t;if("object"===typeof e){if(!e)return t;if(Array.isArray(e))for(const r of e)m(r,t);else Object.keys(e).map((r=>m(e[r],t)))}return t}function p(e,t){if(u(e)){if(t.length)return t.shift();console.warn("Not enough URIs to replace all files in object.")}return"object"===typeof e&&e?Array.isArray(e)?e.map((e=>p(e,t))):Object.fromEntries(Object.entries(e).map((e=>{let[r,n]=e;return[r,p(n,t)]}))):e}function c(e){return"string"===typeof e?function(e){if(e.includes("/ipfs/"))return`ipfs://${e.split("/ipfs/")[1]}`;return e}(e):"object"===typeof e&&e?u(e)?e:Array.isArray(e)?e.map((e=>c(e))):Object.fromEntries(Object.entries(e).map((e=>{let[t,r]=e;return[t,c(r)]}))):e}async function d(e){if(0===e.files.length)return null;let t;if(e.files.map((e=>u(e)||"string"===typeof e)).every((e=>!!e)))t=e.files;else{let r=e.files;r=c(r);const n=m(r);if(n.length){const t=await d({...e,files:n});r=p(r,Array.isArray(t)?t:[t])}t=r.map((e=>"string"===typeof e?e:(0,i.A)(e)))}const a=new FormData,{fileNames:s,form:y}=function(e,t,r){const n=new Map,i=[];for(let s=0;s<t.length;s++){const a=t[s];let u="",m=a;if(o(a))if(r?.rewriteFileNames){let e="";if(a.name){const t=a.name.lastIndexOf(".");t>-1&&(e=a.name.substring(t))}u=`${s+r.rewriteFileNames.fileStartNumber}${e}`}else u=`${a.name}`;else f(a)?(m=a.data,u=r?.rewriteFileNames?`${s+r.rewriteFileNames.fileStartNumber}`:`${a.name}`):u=r?.rewriteFileNames?`${s+r.rewriteFileNames.fileStartNumber}`:`${s}`;const p=r?.uploadWithoutDirectory?"files":`files/${u}`;if(n.has(u)){if(l(n.get(u),a)){i.push(u);continue}throw new Error(`[DUPLICATE_FILE_NAME_ERROR] File name ${u} was passed for more than one different file.`)}n.set(u,a),i.push(u),e.append("file",new Blob([m]),p)}const a={name:"Storage SDK",keyvalues:{...r?.metadata}};return e.append("pinataMetadata",JSON.stringify(a)),r?.uploadWithoutDirectory&&e.append("pinataOptions",JSON.stringify({wrapWithDirectory:!1})),{form:e,fileNames:i.map((e=>encodeURIComponent(e)))}}(a,t,e),g=(0,n.l)();if("browser"===g||"node"===g){const{uploadBatch:t}=await r.e(20176).then(r.bind(r,20176)),n=await t(e.client,y,s,e);return 1===e.files.length?n[0]:n}throw new Error("Please, use the uploadMobile function in mobile environments.")}}}]);
//# sourceMappingURL=98434.7aba11ba.chunk.js.map