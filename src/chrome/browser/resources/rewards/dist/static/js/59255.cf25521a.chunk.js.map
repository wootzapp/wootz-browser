{"version":3,"file":"static/js/59255.cf25521a.chunk.js","mappings":"yJAgBOA,eAAeC,EAAsBC,GAKZ,IAc1BC,GAnBuC,QAC3CC,EAAO,YACPC,EAAW,wBACXC,EAAuB,QACvBC,GAC8BL,EAQ9B,GAAII,EAAwBE,OAASF,EAAwBE,MAAQ,GACnE,MAAM,IAAIC,MAAM,4CAQlB,GAAyB,aAArBF,EAAQG,SAAyB,CACnC,MAAM,yBAAEC,SAAmC,iCAG3CR,QAAeQ,EAAyB,CACtCP,UACAC,cACAC,0BACAC,WAEJ,CAGA,GAAyB,iBAArBA,EAAQG,SAA6B,CACvC,MAAM,6BAAEE,SAAuC,iCAG/CT,QAAeS,EAA6B,CAC1CR,UACAC,cACAC,0BACAC,WAEJ,CAEA,GAAyB,WAArBA,EAAQG,SAAuB,CACjC,MAAM,uBAAEG,SAAiC,iCACzCV,QAAeU,EAAuB,CACpCT,UACAC,cACAC,0BACAC,WAEJ,CAEA,IAAKJ,EACH,MAAM,IAAIM,MAAM,gCAOlB,OALAK,EAAAA,EAAAA,GAAsB,CACpBC,QAASX,EAAQW,QACjBC,gBAAiBb,EAAOa,gBACxBC,QAASZ,EAAYa,MAAMC,KAEtBhB,CACT,C","sources":["../node_modules/thirdweb/src/transaction/actions/gasless/send-gasless-transaction.ts"],"sourcesContent":["import type { TransactionSerializable } from \"viem\";\nimport type { Account } from \"../../../wallets/interfaces/wallet.js\";\nimport type { PreparedTransaction } from \"../../prepare-transaction.js\";\nimport { addTransactionToStore } from \"../../transaction-store.js\";\nimport type { WaitForReceiptOptions } from \"../wait-for-tx-receipt.js\";\nimport type { GaslessOptions } from \"./types.js\";\n\nexport type SendGaslessTransactionOptions = {\n  account: Account;\n  // TODO: update this to `Transaction<\"prepared\">` once the type is available to ensure only prepared transactions are accepted\n  // biome-ignore lint/suspicious/noExplicitAny: library function that accepts any prepared transaction type\n  transaction: PreparedTransaction<any>;\n  serializableTransaction: TransactionSerializable;\n  gasless: GaslessOptions;\n};\n\nexport async function sendGaslessTransaction({\n  account,\n  transaction,\n  serializableTransaction,\n  gasless,\n}: SendGaslessTransactionOptions): Promise<WaitForReceiptOptions> {\n  // TODO: handle special case for mutlicall transactions!\n  // Steps:\n  // 1. check if the method is `multicall` by comparing the 4bytes data with the `multicall` selector\n  // 2. split the rest of the data into its \"parts\"\n  // 3. solidityPack the parts with the part data + the `account.address`\n  // see v4: `core/classes/transactions.ts>Transaction>prepareGasless:L551`\n\n  if (serializableTransaction.value && serializableTransaction.value > 0n) {\n    throw new Error(\"Gasless transactions cannot have a value\");\n  }\n\n  // TODO: multiply gas by 2 for some reason(?) - we do in v4, *should* we?\n\n  let result: WaitForReceiptOptions | undefined;\n\n  // biconomy\n  if (gasless.provider === \"biconomy\") {\n    const { relayBiconomyTransaction } = await import(\n      \"./providers/biconomy.js\"\n    );\n    result = await relayBiconomyTransaction({\n      account,\n      transaction,\n      serializableTransaction,\n      gasless,\n    });\n  }\n\n  // openzeppelin\n  if (gasless.provider === \"openzeppelin\") {\n    const { relayOpenZeppelinTransaction } = await import(\n      \"./providers/openzeppelin.js\"\n    );\n    result = await relayOpenZeppelinTransaction({\n      account,\n      transaction,\n      serializableTransaction,\n      gasless,\n    });\n  }\n\n  if (gasless.provider === \"engine\") {\n    const { relayEngineTransaction } = await import(\"./providers/engine.js\");\n    result = await relayEngineTransaction({\n      account,\n      transaction,\n      serializableTransaction,\n      gasless,\n    });\n  }\n\n  if (!result) {\n    throw new Error(\"Unsupported gasless provider\");\n  }\n  addTransactionToStore({\n    address: account.address,\n    transactionHash: result.transactionHash,\n    chainId: transaction.chain.id,\n  });\n  return result;\n}\n"],"names":["async","sendGaslessTransaction","_ref","result","account","transaction","serializableTransaction","gasless","value","Error","provider","relayBiconomyTransaction","relayOpenZeppelinTransaction","relayEngineTransaction","addTransactionToStore","address","transactionHash","chainId","chain","id"],"sourceRoot":""}