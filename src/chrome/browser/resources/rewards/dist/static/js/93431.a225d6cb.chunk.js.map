{"version":3,"file":"static/js/93431.a225d6cb.chunk.js","mappings":"oGAQM,SAAUA,EAAmBC,GAGjC,IAAIC,EAAS,CADE,GAAGD,EAAQE,0DACJF,EAAQG,SAASC,KAAK,MAC5CH,EAAS,CAACA,EAAQD,EAAQK,WAAWD,KAAK,QACtCJ,EAAQK,YACVJ,GAAU,MAGZ,MAAMK,EAAc,GACpB,GAAIN,EAAQO,IAAK,CACf,MAAMC,EAAW,QAAQR,EAAQO,MACjCD,EAAYG,KAAKD,EACnB,CAEA,MAAME,EAAe,YAAYV,EAAQW,UAGzC,GAFAL,EAAYG,KAAKC,GAEbV,EAAQY,SAAU,CACpB,MAAMC,EAAa,aAAab,EAAQY,YAAc,IACtDN,EAAYG,KAAKI,EACnB,CAEA,MAAMC,EAAa,UAAUd,EAAQe,QACrCT,EAAYG,KAAKK,GAEjB,MAAME,EAAgB,cAAchB,EAAQiB,YAC5CX,EAAYG,KAAKO,GAEjB,MAAME,EAAc,oBAAoBlB,EAAQmB,kBAGhD,GAFAb,EAAYG,KAAKS,GAEblB,EAAQoB,eAAgB,CAC1B,MAAMC,EAAqB,eAAerB,EAAQoB,iBAClDd,EAAYG,KAAKY,EACnB,CAEIrB,EAAQsB,WACVhB,EAAYG,KACV,CAAC,gBAAiBT,EAAQsB,UAAUC,KAAKC,GAAM,KAAKA,OAAMpB,KAAK,OAKnE,MAAO,CAACH,EADOK,EAAYF,KAAK,OACRA,KAAK,KAC/B,CC1BOqB,eAAeC,EAAiBC,GACrC,MAAM,QAAE3B,EAAO,QAAE4B,GAAYD,EAI7B,MAAO,CACLE,gBAJsBD,EAAQE,YAAY,CAC1CC,QAAShC,EAAmBC,KAI5BA,UAEJ,C","sources":["../node_modules/thirdweb/src/auth/core/create-login-message.ts","../node_modules/thirdweb/src/auth/core/sign-login-payload.ts"],"sourcesContent":["import type { LoginPayload } from \"./types.js\";\n\n/**\n * Create an EIP-4361 & CAIP-122 compliant message to sign based on the login payload\n * @param payload - The login payload containing the necessary information.\n * @returns The generated login message.\n * @internal\n */\nexport function createLoginMessage(payload: LoginPayload): string {\n  const typeField = \"Ethereum\";\n  const header = `${payload.domain} wants you to sign in with your ${typeField} account:`;\n  let prefix = [header, payload.address].join(\"\\n\");\n  prefix = [prefix, payload.statement].join(\"\\n\\n\");\n  if (payload.statement) {\n    prefix += \"\\n\";\n  }\n\n  const suffixArray = [];\n  if (payload.uri) {\n    const uriField = `URI: ${payload.uri}`;\n    suffixArray.push(uriField);\n  }\n\n  const versionField = `Version: ${payload.version}`;\n  suffixArray.push(versionField);\n\n  if (payload.chain_id) {\n    const chainField = `Chain ID: ${payload.chain_id}` || \"1\";\n    suffixArray.push(chainField);\n  }\n\n  const nonceField = `Nonce: ${payload.nonce}`;\n  suffixArray.push(nonceField);\n\n  const issuedAtField = `Issued At: ${payload.issued_at}`;\n  suffixArray.push(issuedAtField);\n\n  const expiryField = `Expiration Time: ${payload.expiration_time}`;\n  suffixArray.push(expiryField);\n\n  if (payload.invalid_before) {\n    const invalidBeforeField = `Not Before: ${payload.invalid_before}`;\n    suffixArray.push(invalidBeforeField);\n  }\n\n  if (payload.resources) {\n    suffixArray.push(\n      [\"Resources:\", ...payload.resources.map((x) => `- ${x}`)].join(\"\\n\"),\n    );\n  }\n\n  const suffix = suffixArray.join(\"\\n\");\n  return [prefix, suffix].join(\"\\n\");\n}\n","import type { Account } from \"../../wallets/interfaces/wallet.js\";\nimport { createLoginMessage } from \"./create-login-message.js\";\nimport type { LoginPayload } from \"./types.js\";\n\n/**\n * @auth\n */\nexport type SignLoginPayloadParams = {\n  payload: LoginPayload;\n  account: Account;\n};\n\n/**\n * Signs the login payload using the provided account.\n * @param options - The options for signing the login payload.\n * @returns An object containing the signature and the payload.\n * @example\n * ```ts\n * import { signLoginPayload } from 'thirdweb/auth';\n *\n * const { signature, payload } = await signLoginPayload({\n *  payload: loginPayload,\n *  account: account,\n * });\n * ```\n * @auth\n */\nexport async function signLoginPayload(options: SignLoginPayloadParams) {\n  const { payload, account } = options;\n  const signature = await account.signMessage({\n    message: createLoginMessage(payload),\n  });\n  return {\n    signature,\n    payload,\n  };\n}\n"],"names":["createLoginMessage","payload","prefix","domain","address","join","statement","suffixArray","uri","uriField","push","versionField","version","chain_id","chainField","nonceField","nonce","issuedAtField","issued_at","expiryField","expiration_time","invalid_before","invalidBeforeField","resources","map","x","async","signLoginPayload","options","account","signature","signMessage","message"],"sourceRoot":""}