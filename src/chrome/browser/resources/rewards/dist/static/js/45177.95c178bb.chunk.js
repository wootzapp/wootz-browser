"use strict";(self.webpackChunkrewards=self.webpackChunkrewards||[]).push([[45177],{45177:(a,e,t)=>{t.d(e,{relayOpenZeppelinTransaction:()=>c});var n=t(38736),r=t(97779),s=t(77717),i=t(86511);const o=[{name:"from",type:"address"},{name:"to",type:"address"},{name:"value",type:"uint256"},{name:"gas",type:"uint256"},{name:"nonce",type:"uint256"},{name:"data",type:"bytes"}],d=[{name:"from",type:"address"},{name:"to",type:"address"},{name:"value",type:"uint256"},{name:"gas",type:"uint256"},{name:"nonce",type:"uint256"},{name:"data",type:"bytes"},{name:"chainid",type:"uint256"}];async function c(a){const{message:e,messageType:t,signature:c}=await async function(a){let{account:e,serializableTransaction:t,transaction:r,gasless:s}=a;const c=(0,n.P)({address:s.relayerForwarderAddress,chain:r.chain,client:r.client}),p=await(0,i.readContract)({contract:c,method:"function getNonce(address) view returns (uint256)",params:[e.address]}),[u,m]=await(async()=>{if(!t.to)throw new Error("OpenZeppelin transactions must have a 'to' address");if(!t.gas)throw new Error("OpenZeppelin transactions must have a 'gas' value");if(!t.data)throw new Error("OpenZeppelin transactions must have a 'data' value");if(s.experimentalChainlessSupport){const a={from:e.address,to:t.to,value:0n,gas:t.gas,nonce:p,data:t.data,chainid:BigInt(r.chain.id)};return[await e.signTypedData({domain:{name:"GSNv2 Forwarder",version:"0.0.1",verifyingContract:c.address},message:a,primaryType:"ForwardRequest",types:{ForwardRequest:d}}),a]}const a={from:e.address,to:t.to,value:0n,gas:t.gas,nonce:p,data:t.data};return[await e.signTypedData({domain:{name:s.domainName??"GSNv2 Forwarder",version:s.domainVersion??"0.0.1",chainId:r.chain.id,verifyingContract:c.address},message:a,primaryType:"ForwardRequest",types:{ForwardRequest:o}}),a]})();return{message:m,signature:u,messageType:"forward"}}(a),p=await fetch(a.gasless.relayerUrl,{method:"POST",body:(0,s.A)({request:e,type:t,signature:c,forwarderAddress:a.gasless.relayerForwarderAddress})});if(!p.ok)throw p.body?.cancel(),new Error(`Failed to send transaction: ${await p.text()}`);const u=await p.json();if(!u.result)throw new Error(`Relay transaction failed: ${u.message}`);const m=JSON.parse(u.result).txHash;if((0,r.q)(m))return{transactionHash:m,chain:a.transaction.chain,client:a.transaction.client};throw new Error(`Failed to send transaction: ${(0,s.A)(u)}`)}}}]);
//# sourceMappingURL=45177.95c178bb.chunk.js.map