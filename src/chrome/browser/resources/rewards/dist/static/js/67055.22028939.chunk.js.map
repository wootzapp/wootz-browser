{"version":3,"file":"static/js/67055.22028939.chunk.js","mappings":"+JAwBOA,eAAeC,EACpBC,EACAC,GAEA,aAAaD,EAAQ,CACnBE,OAAQ,mBACRD,OAAQ,CAACA,EAAOE,QAASF,EAAOG,SAAUH,EAAOI,UAAY,WAEjE,C,qCCtBA,MAAMC,EAAc,6CACdC,EACJ,qEAaKT,eAAeU,EAEpBC,GAEA,MAAOC,EAAkBC,SAAgBC,QAAQC,IAAI,EACnDC,EAAAA,EAAAA,GAAYL,GACZM,EAAyBN,KAGrBO,ECtBF,SACJC,GAOA,GALKA,EAASC,WAAW,QAEvBD,EAAW,KAAKA,KAGdA,EAASC,WAAW,0BAEtB,MAAO,KADuBD,EAASE,MAAM,GAAI,MAKnD,GAAIF,EAASC,WAAW,sBAGtB,MAAO,KADuBD,EAASE,MAAM,IAAK,OAKpD,GAAIF,EAASC,WAAW,4BAGtB,MAAO,KADuBD,EAASE,MAAM,GAAI,MAKnD,GAAIF,EAASC,WAAW,oCAEtB,MAAO,KADuBD,EAASE,MAAM,GAAI,MAInD,GAAIF,EAASC,WAAW,gCAEtB,MAAO,KADuBD,EAASE,MAAM,GAAI,MAKnD,GAAIF,EAASC,WAAW,wBAEtB,MAAO,KADuBD,EAASE,MAAM,GAAI,KAKrD,CDtBIC,CAAyCV,GAC3C,GAAIM,EACF,MAAO,CACLb,QAASa,EACTC,eAAgBH,EAAAA,EAAAA,GAAY,IACvBL,EACHN,QAASa,KAMf,IAAIK,EAYJ,GAXIV,GAAUA,IAAWL,GAIvBG,EAAW,IAAKA,EAAUN,QAASQ,GAEnCU,QAiHJvB,eAEEW,GAEA,IACE,aAAaa,EAAAA,EAAAA,cAAa,CAAEb,WAAUP,OAAQqB,GAChD,CAAE,MACA,MACF,CACF,CA1HkCC,CAAkCf,IAEhEY,QAwDJvB,eAEEW,GAEA,MAAMgB,GAAaC,EAAAA,EAAAA,cAAa,CAC9BC,OAAQlB,EAASkB,OACjBC,MAAOnB,EAASmB,QAGlB,IACE,MAAMC,EAAuB,CAC3B9B,EAAiB0B,EAAY,CAC3BtB,QAASM,EAASN,QAClBC,SACE,uEAEJL,EAAiB0B,EAAY,CAC3BtB,QAASM,EAASN,QAClBC,SAEE,uEAEJL,EAAiB0B,EAAY,CAC3BtB,QAASM,EAASN,QAClBC,SAEE,wEAKA0B,SADsBlB,QAAQC,IAAIgB,IACLE,MAChCC,GAAYA,IAAYzB,IAG3B,OAAOuB,EAAe,KAAKA,EAAaX,OAAO,MAAQb,CACzD,CAAE,MACA,MACF,CACF,CA/FkC2B,CAAiCxB,GAI/DY,IACAa,EAAAA,EAAAA,IAAUb,IACVA,IAA0Bf,EAC1B,CACA,MAAM6B,QAA+BrB,EAAAA,EAAAA,GAAY,IAC5CL,EACHN,QAASkB,IAGX,MAA+B,OAA3Bc,EACK,CACLhC,QAASM,EAASN,QAClBc,SAAUP,GAIP,CACLP,QAASkB,EACTJ,SAAUkB,EAEd,CAEA,MAAO,CAAEhC,QAASM,EAASN,QAASc,SAAUP,EAChD,CAEAZ,eAAeiB,EAEbN,GAQA,MAAMgB,GAAaC,EAAAA,EAAAA,cAAa,CAC9BC,OAAQlB,EAASkB,OACjBC,MAAOnB,EAASmB,QAGlB,IAME,MAAO,YALoB7B,EAAiB0B,EAAY,CACtDtB,QAASM,EAASN,QAClBC,SACE,wEAEqBe,OAAO,KAClC,CAAE,MACA,MACF,CACF,CA2CA,MAAMI,EAAwB,CAC5Ba,KAAM,WACNC,KAAM,iBACNC,OAAQ,GACRC,QAAS,CACP,CACEH,KAAM,UACNC,KAAM,GACNG,aAAc,YAGlBC,gBAAiB,O","sources":["../node_modules/thirdweb/src/rpc/actions/eth_getStorageAt.ts","../node_modules/thirdweb/src/utils/bytecode/resolveImplementation.ts","../node_modules/thirdweb/src/utils/bytecode/extractMnimalProxyImplementationAddress.ts"],"sourcesContent":["import type { BlockTag, EIP1193RequestFn, EIP1474Methods, Hex } from \"viem\";\n\ntype GetStorageAtParams = {\n  address: string;\n  position: Hex;\n  blockTag?: BlockTag;\n};\n\n/**\n * Retrieves the value stored at a specific position in the storage of a contract.\n * @param request - The EIP1193 request function.\n * @param params - The parameters for the eth_getStorageAt method.\n * @returns A promise that resolves to the value stored at the specified position.\n * @rpc\n * @example\n * ```ts\n * import { getRpcClient, eth_getStorageAt } from \"thirdweb/rpc\";\n * const rpcRequest = getRpcClient({ client, chain });\n * const storageValue = await eth_getStorageAt(rpcRequest, {\n * address: \"0x...\",\n *  position: 0n,\n * });\n * ```\n */\nexport async function eth_getStorageAt(\n  request: EIP1193RequestFn<EIP1474Methods>,\n  params: GetStorageAtParams,\n): Promise<Hex> {\n  return await request({\n    method: \"eth_getStorageAt\",\n    params: [params.address, params.position, params.blockTag ?? \"latest\"],\n  });\n}\n","import { getBytecode } from \"../../contract/actions/get-bytecode.js\";\nimport type { ThirdwebContract } from \"../../contract/contract.js\";\nimport { eth_getStorageAt } from \"../../rpc/actions/eth_getStorageAt.js\";\nimport { getRpcClient } from \"../../rpc/rpc.js\";\nimport { readContract } from \"../../transaction/read-contract.js\";\nimport { isAddress } from \"../address.js\";\nimport type { Hex } from \"../encoding/hex.js\";\nimport { extractMinimalProxyImplementationAddress } from \"./extractMnimalProxyImplementationAddress.js\";\n\n// TODO: move to const exports\nconst AddressZero = \"0x0000000000000000000000000000000000000000\";\nconst ZERO_BYTES32 =\n  \"0x0000000000000000000000000000000000000000000000000000000000000000\";\n\n/**\n * Resolves the implementation address and bytecode for a given proxy contract.\n * @param contract The contract to resolve the implementation for.\n * @returns A promise that resolves to an object containing the implementation address and bytecode.\n * @example\n * ```ts\n * import { resolveImplementation } from \"thirdweb\";\n * const implementation = await resolveImplementation(contract);\n * ```\n * @contract\n */\nexport async function resolveImplementation(\n  // biome-ignore lint/suspicious/noExplicitAny: TODO: fix any\n  contract: ThirdwebContract<any>,\n): Promise<{ address: string; bytecode: Hex }> {\n  const [originalBytecode, beacon] = await Promise.all([\n    getBytecode(contract),\n    getBeaconFromStorageSlot(contract),\n  ]);\n  // check minimal proxy first synchronously\n  const minimalProxyImplementationAddress =\n    extractMinimalProxyImplementationAddress(originalBytecode);\n  if (minimalProxyImplementationAddress) {\n    return {\n      address: minimalProxyImplementationAddress,\n      bytecode: await getBytecode({\n        ...contract,\n        address: minimalProxyImplementationAddress,\n      }),\n    };\n  }\n\n  // check other proxy types\n  let implementationAddress: string | undefined;\n  if (beacon && beacon !== AddressZero) {\n    // In case of a BeaconProxy, it is setup as BeaconProxy --> Beacon --> Implementation\n    // Hence we replace the proxy address with Beacon address, and continue further resolving below\n    // biome-ignore lint/style/noParameterAssign: we purposefully mutate the contract object here\n    contract = { ...contract, address: beacon };\n\n    implementationAddress = await getImplementationFromContractCall(contract);\n  } else {\n    implementationAddress = await getImplementationFromStorageSlot(contract);\n  }\n\n  if (\n    implementationAddress &&\n    isAddress(implementationAddress) &&\n    implementationAddress !== AddressZero\n  ) {\n    const implementationBytecode = await getBytecode({\n      ...contract,\n      address: implementationAddress,\n    });\n    // return the original contract bytecode if the implementation bytecode is empty\n    if (implementationBytecode === \"0x\") {\n      return {\n        address: contract.address,\n        bytecode: originalBytecode,\n      };\n    }\n\n    return {\n      address: implementationAddress,\n      bytecode: implementationBytecode,\n    };\n  }\n\n  return { address: contract.address, bytecode: originalBytecode };\n}\n\nasync function getBeaconFromStorageSlot(\n  // biome-ignore lint/suspicious/noExplicitAny: TODO: fix any\n  contract: ThirdwebContract<any>,\n): Promise<string | undefined> {\n  /**\n   * The storage slot of the Beacon as defined in EIP-1967\n   * See https://eips.ethereum.org/EIPS/eip-1967#beacon-contract-address\n   *\n   * bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1))\n   */\n  const rpcRequest = getRpcClient({\n    client: contract.client,\n    chain: contract.chain,\n  });\n\n  try {\n    const proxyStorage = await eth_getStorageAt(rpcRequest, {\n      address: contract.address,\n      position:\n        \"0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50\",\n    });\n    return `0x${proxyStorage.slice(-40)}`;\n  } catch {\n    return undefined;\n  }\n}\n\nasync function getImplementationFromStorageSlot(\n  // biome-ignore lint/suspicious/noExplicitAny: TODO: fix any\n  contract: ThirdwebContract<any>,\n): Promise<string | undefined> {\n  const rpcRequest = getRpcClient({\n    client: contract.client,\n    chain: contract.chain,\n  });\n\n  try {\n    const proxyStoragePromises = [\n      eth_getStorageAt(rpcRequest, {\n        address: contract.address,\n        position:\n          \"0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc\",\n      }),\n      eth_getStorageAt(rpcRequest, {\n        address: contract.address,\n        position:\n          // keccak256(\"matic.network.proxy.implementation\") - used in polygon USDT proxy: https://polygonscan.com/address/0xc2132d05d31c914a87c6611c10748aeb04b58e8f#code\n          \"0xbaab7dbf64751104133af04abc7d9979f0fda3b059a322a8333f533d3f32bf7f\",\n      }),\n      eth_getStorageAt(rpcRequest, {\n        address: contract.address,\n        position:\n          // keccak256(\"org.zeppelinos.proxy.implementation\") - e.g. base USDC proxy: https://basescan.org/address/0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913#code\n          \"0x7050c9e0f4ca769c69bd3a8ef740bc37934f8e2c036e5a723fd8ee048ed3f8c3\",\n      }),\n    ];\n\n    const proxyStorages = await Promise.all(proxyStoragePromises);\n    const proxyStorage = proxyStorages.find(\n      (storage) => storage !== ZERO_BYTES32,\n    );\n\n    return proxyStorage ? `0x${proxyStorage.slice(-40)}` : AddressZero;\n  } catch {\n    return undefined;\n  }\n}\n\nconst UPGRADEABLE_PROXY_ABI = {\n  type: \"function\",\n  name: \"implementation\",\n  inputs: [],\n  outputs: [\n    {\n      type: \"address\",\n      name: \"\",\n      internalType: \"address\",\n    },\n  ],\n  stateMutability: \"view\",\n} as const;\n\nasync function getImplementationFromContractCall(\n  // biome-ignore lint/suspicious/noExplicitAny: TODO: fix any\n  contract: ThirdwebContract<any>,\n): Promise<string | undefined> {\n  try {\n    return await readContract({ contract, method: UPGRADEABLE_PROXY_ABI });\n  } catch {\n    return undefined;\n  }\n}\n","/**\n * Extracts the implementation address from a given bytecode string if it matches any of the known minimal proxy patterns.\n * @param bytecode The bytecode string to extract the implementation address from.\n * @returns The implementation address as a string if a match is found, otherwise undefined.\n * @example\n * ```ts\n * import { extractMinimalProxyImplementationAddress } from \"thirdweb/utils\";\n * const bytecode = \"0x363d3d373d3d3d363d73...\";\n * const implementationAddress = extractMinimalProxyImplementationAddress(bytecode);\n * ```\n * @utils\n */\nexport function extractMinimalProxyImplementationAddress(\n  bytecode: string,\n): string | undefined {\n  if (!bytecode.startsWith(\"0x\")) {\n    // biome-ignore lint/style/noParameterAssign: perf\n    bytecode = `0x${bytecode}`;\n  }\n  // EIP-1167 clone minimal proxy - https://eips.ethereum.org/EIPS/eip-1167\n  if (bytecode.startsWith(\"0x363d3d373d3d3d363d73\")) {\n    const implementationAddress = bytecode.slice(22, 62);\n    return `0x${implementationAddress}`;\n  }\n\n  // Minimal Proxy with receive() from 0xSplits - https://github.com/0xSplits/splits-contracts/blob/c7b741926ec9746182d0d1e2c4c2046102e5d337/contracts/libraries/Clones.sol\n  if (bytecode.startsWith(\"0x36603057343d5230\")) {\n    // +40 = size of addr\n    const implementationAddress = bytecode.slice(122, 122 + 40);\n    return `0x${implementationAddress}`;\n  }\n\n  // 0age's minimal proxy - https://medium.com/coinmonks/the-more-minimal-proxy-5756ae08ee48\n  if (bytecode.startsWith(\"0x3d3d3d3d363d3d37363d73\")) {\n    // +40 = size of addr\n    const implementationAddress = bytecode.slice(24, 24 + 40);\n    return `0x${implementationAddress}`;\n  }\n\n  // vyper's minimal proxy (uniswap v1) - https://etherscan.io/address/0x09cabec1ead1c0ba254b09efb3ee13841712be14#code\n  if (bytecode.startsWith(\"0x366000600037611000600036600073\")) {\n    const implementationAddress = bytecode.slice(32, 32 + 40);\n    return `0x${implementationAddress}`;\n  }\n\n  if (bytecode.startsWith(\"0x36600080376020600036600073\")) {\n    const implementationAddress = bytecode.slice(28, 28 + 40);\n    return `0x${implementationAddress}`;\n  }\n\n  // EIP-7511 minimal proxy with PUSH0 opcode - https://eips.ethereum.org/EIPS/eip-7511\n  if (bytecode.startsWith(\"0x365f5f375f5f365f73\")) {\n    const implementationAddress = bytecode.slice(20, 60);\n    return `0x${implementationAddress}`;\n  }\n\n  return undefined;\n}\n"],"names":["async","eth_getStorageAt","request","params","method","address","position","blockTag","AddressZero","ZERO_BYTES32","resolveImplementation","contract","originalBytecode","beacon","Promise","all","getBytecode","getBeaconFromStorageSlot","minimalProxyImplementationAddress","bytecode","startsWith","slice","extractMinimalProxyImplementationAddress","implementationAddress","readContract","UPGRADEABLE_PROXY_ABI","getImplementationFromContractCall","rpcRequest","getRpcClient","client","chain","proxyStoragePromises","proxyStorage","find","storage","getImplementationFromStorageSlot","isAddress","implementationBytecode","type","name","inputs","outputs","internalType","stateMutability"],"sourceRoot":""}