{"version":3,"sources":["../../src/prefetch.ts"],"sourcesContent":["import { useQueryClient } from './QueryClientProvider'\nimport type {\n  DefaultError,\n  FetchInfiniteQueryOptions,\n  FetchQueryOptions,\n  QueryKey,\n} from '@tanstack/query-core'\n\nexport function usePrefetchQuery<\n  TQueryFnData = unknown,\n  TError = DefaultError,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(options: FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>) {\n  const queryClient = useQueryClient()\n\n  if (!queryClient.getQueryState(options.queryKey)) {\n    queryClient.prefetchQuery(options)\n  }\n}\n\nexport function usePrefetchInfiniteQuery<\n  TQueryFnData = unknown,\n  TError = DefaultError,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n  TPageParam = unknown,\n>(\n  options: FetchInfiniteQueryOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryKey,\n    TPageParam\n  >,\n) {\n  const queryClient = useQueryClient()\n\n  if (!queryClient.getQueryState(options.queryKey)) {\n    queryClient.prefetchInfiniteQuery(options)\n  }\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iCAA+B;AAQxB,SAAS,iBAKd,SAAoE;AACpE,QAAM,kBAAc,2CAAe;AAEnC,MAAI,CAAC,YAAY,cAAc,QAAQ,QAAQ,GAAG;AAChD,gBAAY,cAAc,OAAO;AAAA,EACnC;AACF;AAEO,SAAS,yBAOd,SAOA;AACA,QAAM,kBAAc,2CAAe;AAEnC,MAAI,CAAC,YAAY,cAAc,QAAQ,QAAQ,GAAG;AAChD,gBAAY,sBAAsB,OAAO;AAAA,EAC3C;AACF;","names":[]}