{"version":3,"file":"index.cjs.js","sources":["../src/constants/client.ts","../src/constants/history.ts","../src/constants/proposal.ts","../src/constants/session.ts","../src/constants/engine.ts","../src/constants/pendingRequest.ts","../src/constants/verify.ts","../src/constants/auth.ts","../src/controllers/engine.ts","../src/controllers/proposal.ts","../src/controllers/session.ts","../src/controllers/pendingRequest.ts","../src/controllers/authKey.ts","../src/controllers/authPairingTopic.ts","../src/controllers/authRequest.ts","../src/controllers/authStore.ts","../src/client.ts","../src/index.ts"],"sourcesContent":["import { SignClientTypes } from \"@walletconnect/types\";\n\nexport const SIGN_CLIENT_PROTOCOL = \"wc\";\nexport const SIGN_CLIENT_VERSION = 2;\nexport const SIGN_CLIENT_CONTEXT = \"client\";\n\nexport const SIGN_CLIENT_STORAGE_PREFIX = `${SIGN_CLIENT_PROTOCOL}@${SIGN_CLIENT_VERSION}:${SIGN_CLIENT_CONTEXT}:`;\n\nexport const SIGN_CLIENT_DEFAULT = {\n  name: SIGN_CLIENT_CONTEXT,\n  logger: \"error\",\n  controller: false,\n  relayUrl: \"wss://relay.walletconnect.com\",\n};\n\nexport const SIGN_CLIENT_EVENTS: Record<SignClientTypes.Event, SignClientTypes.Event> = {\n  session_proposal: \"session_proposal\",\n  session_update: \"session_update\",\n  session_extend: \"session_extend\",\n  session_ping: \"session_ping\",\n  session_delete: \"session_delete\",\n  session_expire: \"session_expire\",\n  session_request: \"session_request\",\n  session_request_sent: \"session_request_sent\",\n  session_event: \"session_event\",\n  proposal_expire: \"proposal_expire\",\n  session_authenticate: \"session_authenticate\",\n  session_request_expire: \"session_request_expire\",\n};\n\nexport const SIGN_CLIENT_STORAGE_OPTIONS = {\n  database: \":memory:\",\n};\n\nexport const WALLETCONNECT_DEEPLINK_CHOICE = \"WALLETCONNECT_DEEPLINK_CHOICE\";\n","export const HISTORY_EVENTS = {\n  created: \"history_created\",\n  updated: \"history_updated\",\n  deleted: \"history_deleted\",\n  sync: \"history_sync\",\n};\n\nexport const HISTORY_CONTEXT = \"history\";\n\nexport const HISTORY_STORAGE_VERSION = \"0.3\";\n","import { THIRTY_DAYS } from \"@walletconnect/time\";\n\nexport const PROPOSAL_CONTEXT = \"proposal\";\n\nexport const PROPOSAL_EXPIRY = THIRTY_DAYS;\n\nexport const PROPOSAL_EXPIRY_MESSAGE = \"Proposal expired\";\n","import { SEVEN_DAYS } from \"@walletconnect/time\";\n\nexport const SESSION_CONTEXT = \"session\";\n\nexport const SESSION_EXPIRY = SEVEN_DAYS;\n","import { FIVE_MINUTES, ONE_DAY, ONE_HOUR, SEVEN_DAYS } from \"@walletconnect/time\";\nimport { EngineTypes } from \"@walletconnect/types\";\n\nexport const ENGINE_CONTEXT = \"engine\";\n\nexport const ENGINE_RPC_OPTS: EngineTypes.RpcOptsMap = {\n  wc_sessionPropose: {\n    req: {\n      ttl: FIVE_MINUTES,\n      prompt: true,\n      tag: 1100,\n    },\n    res: {\n      ttl: FIVE_MINUTES,\n      prompt: false,\n      tag: 1101,\n    },\n    reject: {\n      ttl: FIVE_MINUTES,\n      prompt: false,\n      tag: 1120,\n    },\n    autoReject: {\n      ttl: FIVE_MINUTES,\n      prompt: false,\n      tag: 1121,\n    },\n  },\n  wc_sessionSettle: {\n    req: {\n      ttl: FIVE_MINUTES,\n      prompt: false,\n      tag: 1102,\n    },\n    res: {\n      ttl: FIVE_MINUTES,\n      prompt: false,\n      tag: 1103,\n    },\n  },\n  wc_sessionUpdate: {\n    req: {\n      ttl: ONE_DAY,\n      prompt: false,\n      tag: 1104,\n    },\n    res: {\n      ttl: ONE_DAY,\n      prompt: false,\n      tag: 1105,\n    },\n  },\n  wc_sessionExtend: {\n    req: {\n      ttl: ONE_DAY,\n      prompt: false,\n      tag: 1106,\n    },\n    res: {\n      ttl: ONE_DAY,\n      prompt: false,\n      tag: 1107,\n    },\n  },\n  wc_sessionRequest: {\n    req: {\n      ttl: FIVE_MINUTES,\n      prompt: true,\n      tag: 1108,\n    },\n    res: {\n      ttl: FIVE_MINUTES,\n      prompt: false,\n      tag: 1109,\n    },\n  },\n  wc_sessionEvent: {\n    req: {\n      ttl: FIVE_MINUTES,\n      prompt: true,\n      tag: 1110,\n    },\n    res: {\n      ttl: FIVE_MINUTES,\n      prompt: false,\n      tag: 1111,\n    },\n  },\n\n  wc_sessionDelete: {\n    req: {\n      ttl: ONE_DAY,\n      prompt: false,\n      tag: 1112,\n    },\n    res: {\n      ttl: ONE_DAY,\n      prompt: false,\n      tag: 1113,\n    },\n  },\n  wc_sessionPing: {\n    req: {\n      ttl: ONE_DAY,\n      prompt: false,\n      tag: 1114,\n    },\n    res: {\n      ttl: ONE_DAY,\n      prompt: false,\n      tag: 1115,\n    },\n  },\n  wc_sessionAuthenticate: {\n    req: {\n      ttl: ONE_HOUR,\n      prompt: true,\n      tag: 1116,\n    },\n    res: {\n      ttl: ONE_HOUR,\n      prompt: false,\n      tag: 1117,\n    },\n    reject: {\n      ttl: FIVE_MINUTES,\n      prompt: false,\n      tag: 1118,\n    },\n    autoReject: {\n      ttl: FIVE_MINUTES,\n      prompt: false,\n      tag: 1119,\n    },\n  },\n};\n\nexport const SESSION_REQUEST_EXPIRY_BOUNDARIES = {\n  min: FIVE_MINUTES,\n  max: SEVEN_DAYS,\n};\n\nexport const ENGINE_QUEUE_STATES: { idle: \"IDLE\"; active: \"ACTIVE\" } = {\n  idle: \"IDLE\",\n  active: \"ACTIVE\",\n};\n","export const REQUEST_CONTEXT = \"request\";\n","export const METHODS_TO_VERIFY = [\n  \"wc_sessionPropose\",\n  \"wc_sessionRequest\",\n  \"wc_authRequest\",\n  \"wc_sessionAuthenticate\",\n];\n","export const AUTH_PROTOCOL = \"wc\";\nexport const AUTH_VERSION = 1.5;\nexport const AUTH_CONTEXT = \"auth\";\nexport const AUTH_KEYS_CONTEXT = \"authKeys\";\nexport const AUTH_PAIRING_TOPIC_CONTEXT = \"pairingTopics\";\nexport const AUTH_REQUEST_CONTEXT = \"requests\";\n\nexport const AUTH_STORAGE_PREFIX = `${AUTH_PROTOCOL}@${AUTH_VERSION}:${AUTH_CONTEXT}:`;\nexport const AUTH_PUBLIC_KEY_NAME = `${AUTH_STORAGE_PREFIX}:PUB_KEY`;\n","/* eslint-disable no-console */\nimport {\n  EVENT_CLIENT_AUTHENTICATE_ERRORS,\n  EVENT_CLIENT_AUTHENTICATE_TRACES,\n  EVENT_CLIENT_PAIRING_ERRORS,\n  EVENT_CLIENT_PAIRING_TRACES,\n  EVENT_CLIENT_SESSION_ERRORS,\n  EVENT_CLIENT_SESSION_TRACES,\n  EXPIRER_EVENTS,\n  PAIRING_EVENTS,\n  RELAYER_DEFAULT_PROTOCOL,\n  RELAYER_EVENTS,\n  TRANSPORT_TYPES,\n  VERIFY_SERVER,\n} from \"@walletconnect/core\";\n\nimport {\n  formatJsonRpcError,\n  formatJsonRpcRequest,\n  formatJsonRpcResult,\n  payloadId,\n  isJsonRpcError,\n  isJsonRpcRequest,\n  isJsonRpcResponse,\n  isJsonRpcResult,\n  JsonRpcRequest,\n  ErrorResponse,\n  getBigIntRpcId,\n} from \"@walletconnect/jsonrpc-utils\";\nimport { FIVE_MINUTES, ONE_SECOND, toMiliseconds } from \"@walletconnect/time\";\nimport {\n  EnginePrivate,\n  EngineTypes,\n  ExpirerTypes,\n  IEngine,\n  IEngineEvents,\n  JsonRpcTypes,\n  PendingRequestTypes,\n  Verify,\n  CoreTypes,\n  ProposalTypes,\n  RelayerTypes,\n  SessionTypes,\n  PairingTypes,\n  AuthTypes,\n  EventClientTypes,\n} from \"@walletconnect/types\";\nimport {\n  calcExpiry,\n  createDelayedPromise,\n  engineEvent,\n  getInternalError,\n  getSdkError,\n  isConformingNamespaces,\n  isExpired,\n  isSessionCompatible,\n  isUndefined,\n  isValidController,\n  isValidErrorReason,\n  isValidEvent,\n  isValidId,\n  isValidNamespaces,\n  isValidNamespacesChainId,\n  isValidNamespacesEvent,\n  isValidNamespacesRequest,\n  isValidObject,\n  isValidParams,\n  isValidRelay,\n  isValidRelays,\n  isValidRequest,\n  isValidRequestExpiry,\n  hashMessage,\n  isValidRequiredNamespaces,\n  isValidResponse,\n  isValidString,\n  parseExpirerTarget,\n  TYPE_1,\n  TYPE_2,\n  handleDeeplinkRedirect,\n  MemoryStore,\n  getDeepLink,\n  hashKey,\n  getDidAddress,\n  formatMessage,\n  getMethodsFromRecap,\n  buildNamespacesFromAuth,\n  createEncodedRecap,\n  getChainsFromRecap,\n  mergeEncodedRecaps,\n  getRecapFromResources,\n  validateSignedCacao,\n  getNamespacedDidChainId,\n  parseChainId,\n  getLinkModeURL,\n  BASE64,\n  BASE64URL,\n  getSearchParamFromURL,\n  isReactNative,\n} from \"@walletconnect/utils\";\nimport EventEmmiter from \"events\";\nimport {\n  ENGINE_CONTEXT,\n  ENGINE_RPC_OPTS,\n  PROPOSAL_EXPIRY_MESSAGE,\n  SESSION_EXPIRY,\n  SESSION_REQUEST_EXPIRY_BOUNDARIES,\n  METHODS_TO_VERIFY,\n  WALLETCONNECT_DEEPLINK_CHOICE,\n  ENGINE_QUEUE_STATES,\n  AUTH_PUBLIC_KEY_NAME,\n} from \"../constants\";\n\nexport class Engine extends IEngine {\n  public name = ENGINE_CONTEXT;\n\n  private events: IEngineEvents = new EventEmmiter();\n  private initialized = false;\n\n  /**\n   * Queue responsible for processing incoming requests such as session_update, session_event, session_ping etc\n   * It's needed when the client receives multiple requests at once from the mailbox immediately after initialization and to avoid attempting to process them all at the same time\n   */\n  private requestQueue: EngineTypes.EngineQueue<EngineTypes.EventCallback<JsonRpcRequest>> = {\n    state: ENGINE_QUEUE_STATES.idle,\n    queue: [],\n  };\n\n  /**\n   * Queue responsible for processing incoming session_request\n   * The queue emits the next request only after the previous one has been responded to\n   */\n  private sessionRequestQueue: EngineTypes.EngineQueue<PendingRequestTypes.Struct> = {\n    state: ENGINE_QUEUE_STATES.idle,\n    queue: [],\n  };\n\n  private requestQueueDelay = ONE_SECOND;\n\n  private expectedPairingMethodMap: Map<string, string[]> = new Map();\n\n  // Ephemeral (in-memory) map to store recently deleted items\n  private recentlyDeletedMap = new Map<\n    string | number,\n    \"pairing\" | \"session\" | \"proposal\" | \"request\"\n  >();\n\n  private recentlyDeletedLimit = 200;\n  private relayMessageCache: RelayerTypes.MessageEvent[] = [];\n\n  constructor(client: IEngine[\"client\"]) {\n    super(client);\n  }\n\n  public init: IEngine[\"init\"] = async () => {\n    if (!this.initialized) {\n      await this.cleanup();\n      this.registerRelayerEvents();\n      this.registerExpirerEvents();\n      this.registerPairingEvents();\n      await this.registerLinkModeListeners();\n      this.client.core.pairing.register({ methods: Object.keys(ENGINE_RPC_OPTS) });\n      this.initialized = true;\n      setTimeout(() => {\n        this.sessionRequestQueue.queue = this.getPendingSessionRequests();\n        this.processSessionRequestQueue();\n      }, toMiliseconds(this.requestQueueDelay));\n    }\n  };\n\n  // ---------- Public ------------------------------------------------ //\n\n  public connect: IEngine[\"connect\"] = async (params) => {\n    this.isInitialized();\n    await this.confirmOnlineStateOrThrow();\n    const connectParams = {\n      ...params,\n      requiredNamespaces: params.requiredNamespaces || {},\n      optionalNamespaces: params.optionalNamespaces || {},\n    };\n    await this.isValidConnect(connectParams);\n    const { pairingTopic, requiredNamespaces, optionalNamespaces, sessionProperties, relays } =\n      connectParams;\n    let topic = pairingTopic;\n    let uri: string | undefined;\n    let active = false;\n\n    try {\n      if (topic) {\n        const pairing = this.client.core.pairing.pairings.get(topic);\n        active = pairing.active;\n      }\n    } catch (error) {\n      this.client.logger.error(`connect() -> pairing.get(${topic}) failed`);\n      throw error;\n    }\n    if (!topic || !active) {\n      const { topic: newTopic, uri: newUri } = await this.client.core.pairing.create();\n      topic = newTopic;\n      uri = newUri;\n    }\n    // safety check to ensure pairing topic is available\n    if (!topic) {\n      const { message } = getInternalError(\"NO_MATCHING_KEY\", `connect() pairing topic: ${topic}`);\n      throw new Error(message);\n    }\n\n    const publicKey = await this.client.core.crypto.generateKeyPair();\n\n    const expiry = ENGINE_RPC_OPTS.wc_sessionPropose.req.ttl || FIVE_MINUTES;\n    const expiryTimestamp = calcExpiry(expiry);\n    const proposal = {\n      requiredNamespaces,\n      optionalNamespaces,\n      relays: relays ?? [{ protocol: RELAYER_DEFAULT_PROTOCOL }],\n      proposer: {\n        publicKey,\n        metadata: this.client.metadata,\n      },\n      expiryTimestamp,\n      pairingTopic: topic,\n      ...(sessionProperties && { sessionProperties }),\n    };\n    const {\n      reject,\n      resolve,\n      done: approval,\n    } = createDelayedPromise<SessionTypes.Struct>(expiry, PROPOSAL_EXPIRY_MESSAGE);\n    this.events.once<\"session_connect\">(\n      engineEvent(\"session_connect\"),\n      async ({ error, session }) => {\n        if (error) reject(error);\n        else if (session) {\n          session.self.publicKey = publicKey;\n          const completeSession = {\n            ...session,\n            pairingTopic: proposal.pairingTopic,\n            requiredNamespaces: proposal.requiredNamespaces,\n            optionalNamespaces: proposal.optionalNamespaces,\n            transportType: TRANSPORT_TYPES.relay,\n          };\n          await this.client.session.set(session.topic, completeSession);\n          await this.setExpiry(session.topic, session.expiry);\n          if (topic) {\n            await this.client.core.pairing.updateMetadata({\n              topic,\n              metadata: session.peer.metadata,\n            });\n          }\n          this.cleanupDuplicatePairings(completeSession);\n          resolve(completeSession);\n        }\n      },\n    );\n    const id = await this.sendRequest({\n      topic,\n      method: \"wc_sessionPropose\",\n      params: proposal,\n      throwOnFailedPublish: true,\n    });\n    await this.setProposal(id, { id, ...proposal });\n    return { uri, approval };\n  };\n\n  public pair: IEngine[\"pair\"] = async (params) => {\n    this.isInitialized();\n    await this.confirmOnlineStateOrThrow();\n    try {\n      return await this.client.core.pairing.pair(params);\n    } catch (error) {\n      this.client.logger.error(\"pair() failed\");\n      throw error;\n    }\n  };\n\n  public approve: IEngine[\"approve\"] = async (params) => {\n    const configEvent = this.client.core.eventClient.createEvent({\n      properties: {\n        topic: params?.id?.toString(),\n        trace: [EVENT_CLIENT_SESSION_TRACES.session_approve_started],\n      },\n    });\n    try {\n      this.isInitialized();\n      await this.confirmOnlineStateOrThrow();\n    } catch (error) {\n      configEvent.setError(EVENT_CLIENT_SESSION_ERRORS.no_internet_connection);\n      throw error;\n    }\n    try {\n      await this.isValidProposalId(params?.id);\n    } catch (error) {\n      this.client.logger.error(`approve() -> proposal.get(${params?.id}) failed`);\n      configEvent.setError(EVENT_CLIENT_SESSION_ERRORS.proposal_not_found);\n      throw error;\n    }\n\n    try {\n      await this.isValidApprove(params);\n    } catch (error) {\n      this.client.logger.error(\"approve() -> isValidApprove() failed\");\n      configEvent.setError(\n        EVENT_CLIENT_SESSION_ERRORS.session_approve_namespace_validation_failure,\n      );\n      throw error;\n    }\n\n    const { id, relayProtocol, namespaces, sessionProperties, sessionConfig } = params;\n\n    const proposal = this.client.proposal.get(id);\n\n    this.client.core.eventClient.deleteEvent({ eventId: configEvent.eventId });\n\n    const { pairingTopic, proposer, requiredNamespaces, optionalNamespaces } = proposal;\n\n    let event = this.client.core.eventClient?.getEvent({\n      topic: pairingTopic,\n    }) as EventClientTypes.Event;\n    if (!event) {\n      event = this.client.core.eventClient?.createEvent({\n        type: EVENT_CLIENT_SESSION_TRACES.session_approve_started,\n        properties: {\n          topic: pairingTopic,\n          trace: [\n            EVENT_CLIENT_SESSION_TRACES.session_approve_started,\n            EVENT_CLIENT_SESSION_TRACES.session_namespaces_validation_success,\n          ],\n        },\n      });\n    }\n\n    const selfPublicKey = await this.client.core.crypto.generateKeyPair();\n    const peerPublicKey = proposer.publicKey;\n    const sessionTopic = await this.client.core.crypto.generateSharedKey(\n      selfPublicKey,\n      peerPublicKey,\n    );\n    const sessionSettle = {\n      relay: { protocol: relayProtocol ?? \"irn\" },\n      namespaces,\n      controller: { publicKey: selfPublicKey, metadata: this.client.metadata },\n      expiry: calcExpiry(SESSION_EXPIRY),\n      ...(sessionProperties && { sessionProperties }),\n      ...(sessionConfig && { sessionConfig }),\n    };\n    const transportType = TRANSPORT_TYPES.relay;\n    event.addTrace(EVENT_CLIENT_SESSION_TRACES.subscribing_session_topic);\n    try {\n      await this.client.core.relayer.subscribe(sessionTopic, { transportType });\n    } catch (error) {\n      event.setError(EVENT_CLIENT_SESSION_ERRORS.subscribe_session_topic_failure);\n      throw error;\n    }\n\n    event.addTrace(EVENT_CLIENT_SESSION_TRACES.subscribe_session_topic_success);\n\n    const session = {\n      ...sessionSettle,\n      topic: sessionTopic,\n      requiredNamespaces,\n      optionalNamespaces,\n      pairingTopic,\n      acknowledged: false,\n      self: sessionSettle.controller,\n      peer: {\n        publicKey: proposer.publicKey,\n        metadata: proposer.metadata,\n      },\n      controller: selfPublicKey,\n      transportType: TRANSPORT_TYPES.relay,\n    };\n    await this.client.session.set(sessionTopic, session);\n\n    event.addTrace(EVENT_CLIENT_SESSION_TRACES.store_session);\n\n    try {\n      event.addTrace(EVENT_CLIENT_SESSION_TRACES.publishing_session_settle);\n      await this.sendRequest({\n        topic: sessionTopic,\n        method: \"wc_sessionSettle\",\n        params: sessionSettle,\n        throwOnFailedPublish: true,\n      }).catch((error) => {\n        event?.setError(EVENT_CLIENT_SESSION_ERRORS.session_settle_publish_failure);\n        throw error;\n      });\n\n      event.addTrace(EVENT_CLIENT_SESSION_TRACES.session_settle_publish_success);\n\n      event.addTrace(EVENT_CLIENT_SESSION_TRACES.publishing_session_approve);\n      await this.sendResult<\"wc_sessionPropose\">({\n        id,\n        topic: pairingTopic,\n        result: {\n          relay: {\n            protocol: relayProtocol ?? \"irn\",\n          },\n          responderPublicKey: selfPublicKey,\n        },\n        throwOnFailedPublish: true,\n      }).catch((error) => {\n        event?.setError(EVENT_CLIENT_SESSION_ERRORS.session_approve_publish_failure);\n        throw error;\n      });\n\n      event.addTrace(EVENT_CLIENT_SESSION_TRACES.session_approve_publish_success);\n    } catch (error) {\n      this.client.logger.error(error);\n      // if the publish fails, delete the session and throw an error\n      this.client.session.delete(sessionTopic, getSdkError(\"USER_DISCONNECTED\"));\n      await this.client.core.relayer.unsubscribe(sessionTopic);\n      throw error;\n    }\n\n    this.client.core.eventClient.deleteEvent({ eventId: event.eventId });\n\n    await this.client.core.pairing.updateMetadata({\n      topic: pairingTopic,\n      metadata: proposer.metadata,\n    });\n    await this.client.proposal.delete(id, getSdkError(\"USER_DISCONNECTED\"));\n    await this.client.core.pairing.activate({ topic: pairingTopic });\n    await this.setExpiry(sessionTopic, calcExpiry(SESSION_EXPIRY));\n    return {\n      topic: sessionTopic,\n      acknowledged: () => Promise.resolve(this.client.session.get(sessionTopic)),\n    };\n  };\n\n  public reject: IEngine[\"reject\"] = async (params) => {\n    this.isInitialized();\n    await this.confirmOnlineStateOrThrow();\n    try {\n      await this.isValidReject(params);\n    } catch (error) {\n      this.client.logger.error(\"reject() -> isValidReject() failed\");\n      throw error;\n    }\n    const { id, reason } = params;\n    let pairingTopic;\n    try {\n      const proposal = this.client.proposal.get(id);\n      pairingTopic = proposal.pairingTopic;\n    } catch (error) {\n      this.client.logger.error(`reject() -> proposal.get(${id}) failed`);\n      throw error;\n    }\n\n    if (pairingTopic) {\n      await this.sendError({\n        id,\n        topic: pairingTopic,\n        error: reason,\n        rpcOpts: ENGINE_RPC_OPTS.wc_sessionPropose.reject,\n      });\n      await this.client.proposal.delete(id, getSdkError(\"USER_DISCONNECTED\"));\n    }\n  };\n\n  public update: IEngine[\"update\"] = async (params) => {\n    this.isInitialized();\n    await this.confirmOnlineStateOrThrow();\n    try {\n      await this.isValidUpdate(params);\n    } catch (error) {\n      this.client.logger.error(\"update() -> isValidUpdate() failed\");\n      throw error;\n    }\n    const { topic, namespaces } = params;\n\n    const { done: acknowledged, resolve, reject } = createDelayedPromise<void>();\n    const clientRpcId = payloadId();\n    const relayRpcId = getBigIntRpcId().toString() as any;\n\n    const oldNamespaces = this.client.session.get(topic).namespaces;\n    this.events.once(engineEvent(\"session_update\", clientRpcId), ({ error }: any) => {\n      if (error) reject(error);\n      else {\n        resolve();\n      }\n    });\n    // Update the session with the new namespaces, if the publish fails, revert to the old.\n    // This allows the client to use the updated session like emitting events\n    // without waiting for the peer to acknowledge\n    await this.client.session.update(topic, { namespaces });\n    await this.sendRequest({\n      topic,\n      method: \"wc_sessionUpdate\",\n      params: { namespaces },\n      throwOnFailedPublish: true,\n      clientRpcId,\n      relayRpcId,\n    }).catch((error) => {\n      this.client.logger.error(error);\n      this.client.session.update(topic, { namespaces: oldNamespaces });\n      reject(error);\n    });\n    return { acknowledged };\n  };\n\n  public extend: IEngine[\"extend\"] = async (params) => {\n    this.isInitialized();\n    await this.confirmOnlineStateOrThrow();\n    try {\n      await this.isValidExtend(params);\n    } catch (error) {\n      this.client.logger.error(\"extend() -> isValidExtend() failed\");\n      throw error;\n    }\n\n    const { topic } = params;\n    const clientRpcId = payloadId();\n    const { done: acknowledged, resolve, reject } = createDelayedPromise<void>();\n    this.events.once(engineEvent(\"session_extend\", clientRpcId), ({ error }: any) => {\n      if (error) reject(error);\n      else resolve();\n    });\n\n    await this.setExpiry(topic, calcExpiry(SESSION_EXPIRY));\n    this.sendRequest({\n      topic,\n      method: \"wc_sessionExtend\",\n      params: {},\n      clientRpcId,\n      throwOnFailedPublish: true,\n    }).catch((e) => {\n      reject(e);\n    });\n\n    return { acknowledged };\n  };\n\n  public request: IEngine[\"request\"] = async <T>(params: EngineTypes.RequestParams) => {\n    this.isInitialized();\n    try {\n      await this.isValidRequest(params);\n    } catch (error) {\n      this.client.logger.error(\"request() -> isValidRequest() failed\");\n      throw error;\n    }\n    const { chainId, request, topic, expiry = ENGINE_RPC_OPTS.wc_sessionRequest.req.ttl } = params;\n    const session = this.client.session.get(topic);\n\n    if (session?.transportType === TRANSPORT_TYPES.relay) {\n      await this.confirmOnlineStateOrThrow();\n    }\n    const clientRpcId = payloadId();\n    const relayRpcId = getBigIntRpcId().toString() as any;\n    const { done, resolve, reject } = createDelayedPromise<T>(\n      expiry,\n      \"Request expired. Please try again.\",\n    );\n    this.events.once<\"session_request\">(\n      engineEvent(\"session_request\", clientRpcId),\n      ({ error, result }) => {\n        if (error) reject(error);\n        else resolve(result);\n      },\n    );\n\n    const appLink = this.getAppLinkIfEnabled(session.peer.metadata, session.transportType);\n    if (appLink) {\n      await this.sendRequest({\n        clientRpcId,\n        relayRpcId,\n        topic,\n        method: \"wc_sessionRequest\",\n        params: {\n          request: {\n            ...request,\n            expiryTimestamp: calcExpiry(expiry),\n          },\n          chainId,\n        },\n        expiry,\n        throwOnFailedPublish: true,\n        appLink,\n      }).catch((error) => reject(error));\n\n      this.client.events.emit(\"session_request_sent\", {\n        topic,\n        request,\n        chainId,\n        id: clientRpcId,\n      });\n      const result = await done();\n      return result;\n    }\n\n    return await Promise.all([\n      new Promise<void>(async (resolve) => {\n        await this.sendRequest({\n          clientRpcId,\n          relayRpcId,\n          topic,\n          method: \"wc_sessionRequest\",\n          params: {\n            request: {\n              ...request,\n              expiryTimestamp: calcExpiry(expiry),\n            },\n            chainId,\n          },\n          expiry,\n          throwOnFailedPublish: true,\n        }).catch((error) => reject(error));\n        this.client.events.emit(\"session_request_sent\", {\n          topic,\n          request,\n          chainId,\n          id: clientRpcId,\n        });\n        resolve();\n      }),\n      new Promise<void>(async (resolve) => {\n        // only attempt to handle deeplinks if they are not explicitly disabled in the session config\n        if (!session.sessionConfig?.disableDeepLink) {\n          const wcDeepLink = await getDeepLink(\n            this.client.core.storage,\n            WALLETCONNECT_DEEPLINK_CHOICE,\n          );\n          handleDeeplinkRedirect({ id: clientRpcId, topic, wcDeepLink });\n        }\n        resolve();\n      }),\n      done(),\n    ]).then((result) => result[2]); // order is important here, we want to return the result of the `done` promise\n  };\n\n  public respond: IEngine[\"respond\"] = async (params) => {\n    this.isInitialized();\n    await this.isValidRespond(params);\n    const { topic, response } = params;\n    const { id } = response;\n    const session = this.client.session.get(topic);\n\n    if (session.transportType === TRANSPORT_TYPES.relay) {\n      await this.confirmOnlineStateOrThrow();\n    }\n\n    const appLink = this.getAppLinkIfEnabled(session.peer.metadata, session.transportType);\n    if (isJsonRpcResult(response)) {\n      await this.sendResult({\n        id,\n        topic,\n        result: response.result,\n        throwOnFailedPublish: true,\n        appLink,\n      });\n    } else if (isJsonRpcError(response)) {\n      await this.sendError({ id, topic, error: response.error, appLink });\n    }\n    this.cleanupAfterResponse(params);\n  };\n\n  public ping: IEngine[\"ping\"] = async (params) => {\n    this.isInitialized();\n    await this.confirmOnlineStateOrThrow();\n    try {\n      await this.isValidPing(params);\n    } catch (error) {\n      this.client.logger.error(\"ping() -> isValidPing() failed\");\n      throw error;\n    }\n    const { topic } = params;\n    if (this.client.session.keys.includes(topic)) {\n      const clientRpcId = payloadId();\n      const relayRpcId = getBigIntRpcId().toString() as any;\n      const { done, resolve, reject } = createDelayedPromise<void>();\n      this.events.once(engineEvent(\"session_ping\", clientRpcId), ({ error }: any) => {\n        if (error) reject(error);\n        else resolve();\n      });\n      await Promise.all([\n        this.sendRequest({\n          topic,\n          method: \"wc_sessionPing\",\n          params: {},\n          throwOnFailedPublish: true,\n          clientRpcId,\n          relayRpcId,\n        }),\n        done(),\n      ]);\n    } else if (this.client.core.pairing.pairings.keys.includes(topic)) {\n      await this.client.core.pairing.ping({ topic });\n    }\n  };\n\n  public emit: IEngine[\"emit\"] = async (params) => {\n    this.isInitialized();\n    await this.confirmOnlineStateOrThrow();\n    await this.isValidEmit(params);\n    const { topic, event, chainId } = params;\n    const relayRpcId = getBigIntRpcId().toString() as any;\n    await this.sendRequest({\n      topic,\n      method: \"wc_sessionEvent\",\n      params: { event, chainId },\n      throwOnFailedPublish: true,\n      relayRpcId,\n    });\n  };\n\n  public disconnect: IEngine[\"disconnect\"] = async (params) => {\n    this.isInitialized();\n    await this.confirmOnlineStateOrThrow();\n    await this.isValidDisconnect(params);\n    const { topic } = params;\n    if (this.client.session.keys.includes(topic)) {\n      // await an ack to ensure the relay has received the disconnect request\n      await this.sendRequest({\n        topic,\n        method: \"wc_sessionDelete\",\n        params: getSdkError(\"USER_DISCONNECTED\"),\n        throwOnFailedPublish: true,\n      });\n      await this.deleteSession({ topic, emitEvent: false });\n    } else if (this.client.core.pairing.pairings.keys.includes(topic)) {\n      await this.client.core.pairing.disconnect({ topic });\n    } else {\n      const { message } = getInternalError(\n        \"MISMATCHED_TOPIC\",\n        `Session or pairing topic not found: ${topic}`,\n      );\n      throw new Error(message);\n    }\n  };\n\n  public find: IEngine[\"find\"] = (params) => {\n    this.isInitialized();\n    return this.client.session.getAll().filter((session) => isSessionCompatible(session, params));\n  };\n\n  public getPendingSessionRequests: IEngine[\"getPendingSessionRequests\"] = () => {\n    return this.client.pendingRequest.getAll();\n  };\n\n  // ---------- Auth ------------------------------------------------ //\n\n  public authenticate: IEngine[\"authenticate\"] = async (params, walletUniversalLink) => {\n    this.isInitialized();\n    this.isValidAuthenticate(params);\n\n    const isLinkMode =\n      walletUniversalLink &&\n      this.client.core.linkModeSupportedApps.includes(walletUniversalLink) &&\n      this.client.metadata.redirect?.linkMode;\n\n    const transportType: RelayerTypes.TransportType = isLinkMode\n      ? TRANSPORT_TYPES.link_mode\n      : TRANSPORT_TYPES.relay;\n\n    if (transportType === TRANSPORT_TYPES.relay) {\n      await this.confirmOnlineStateOrThrow();\n    }\n\n    const {\n      chains,\n      statement = \"\",\n      uri,\n      domain,\n      nonce,\n      type,\n      exp,\n      nbf,\n      methods = [],\n      expiry,\n    } = params;\n    // reassign resources to remove reference as the array is modified and might cause side effects\n    const resources = [...(params.resources || [])];\n\n    const { topic: pairingTopic, uri: connectionUri } = await this.client.core.pairing.create({\n      methods: [\"wc_sessionAuthenticate\"],\n      transportType,\n    });\n\n    this.client.logger.info({\n      message: \"Generated new pairing\",\n      pairing: { topic: pairingTopic, uri: connectionUri },\n    });\n\n    const publicKey = await this.client.core.crypto.generateKeyPair();\n    const responseTopic = hashKey(publicKey);\n\n    await Promise.all([\n      this.client.auth.authKeys.set(AUTH_PUBLIC_KEY_NAME, { responseTopic, publicKey }),\n      this.client.auth.pairingTopics.set(responseTopic, { topic: responseTopic, pairingTopic }),\n    ]);\n\n    // Subscribe to response topic\n    await this.client.core.relayer.subscribe(responseTopic, { transportType });\n\n    this.client.logger.info(`sending request to new pairing topic: ${pairingTopic}`);\n\n    if (methods.length > 0) {\n      const { namespace } = parseChainId(chains[0]);\n      let recap = createEncodedRecap(namespace, \"request\", methods);\n      const existingRecap = getRecapFromResources(resources);\n      if (existingRecap) {\n        // per Recaps spec, recap must occupy the last position in the resources array\n        // using .pop to remove the element given we already checked it's a recap and will replace it\n        const mergedRecap = mergeEncodedRecaps(recap, resources.pop() as string);\n        recap = mergedRecap;\n      }\n      resources.push(recap);\n    }\n\n    // Ensure the expiry is greater than the minimum required for the request - currently 1h\n    const authRequestExpiry =\n      expiry && expiry > ENGINE_RPC_OPTS.wc_sessionAuthenticate.req.ttl\n        ? expiry\n        : ENGINE_RPC_OPTS.wc_sessionAuthenticate.req.ttl;\n\n    const request: AuthTypes.SessionAuthenticateRequestParams = {\n      authPayload: {\n        type: type ?? \"caip122\",\n        chains,\n        statement,\n        aud: uri,\n        domain,\n        version: \"1\",\n        nonce,\n        iat: new Date().toISOString(),\n        exp,\n        nbf,\n        resources,\n      },\n      requester: { publicKey, metadata: this.client.metadata },\n      expiryTimestamp: calcExpiry(authRequestExpiry),\n    };\n\n    // ----- build namespaces for fallback session proposal ----- //\n    const namespaces = {\n      eip155: {\n        chains,\n        // request `personal_sign` method by default to allow for fallback siwe\n        methods: [...new Set([\"personal_sign\", ...methods])],\n        events: [\"chainChanged\", \"accountsChanged\"],\n      },\n    };\n\n    const proposal = {\n      requiredNamespaces: {},\n      optionalNamespaces: namespaces,\n      relays: [{ protocol: \"irn\" }],\n      pairingTopic,\n      proposer: {\n        publicKey,\n        metadata: this.client.metadata,\n      },\n      expiryTimestamp: calcExpiry(ENGINE_RPC_OPTS.wc_sessionPropose.req.ttl),\n    };\n\n    const { done, resolve, reject } = createDelayedPromise(authRequestExpiry, \"Request expired\");\n\n    // handle fallback session proposal response\n    const onSessionConnect = async ({ error, session }: any) => {\n      // cleanup listener for authenticate response\n      this.events.off(engineEvent(\"session_request\", id), onAuthenticate);\n      if (error) reject(error);\n      else if (session) {\n        session.self.publicKey = publicKey;\n        await this.client.session.set(session.topic, session);\n        await this.setExpiry(session.topic, session.expiry);\n        if (pairingTopic) {\n          await this.client.core.pairing.updateMetadata({\n            topic: pairingTopic,\n            metadata: session.peer.metadata,\n          });\n        }\n        const sessionObject = this.client.session.get(session.topic);\n        await this.deleteProposal(fallbackId);\n        resolve({\n          session: sessionObject,\n        });\n      }\n    };\n    // handle session authenticate response\n    const onAuthenticate = async (payload: any) => {\n      // delete this auth request on response\n      // we're using payload from the wallet to establish the session so we don't need to keep this around\n      await this.deletePendingAuthRequest(id, { message: \"fulfilled\", code: 0 });\n      if (payload.error) {\n        // wallets that do not support wc_sessionAuthenticate will return an error\n        // we should not reject the promise in this case as the fallback session proposal will be used\n        const error = getSdkError(\"WC_METHOD_UNSUPPORTED\", \"wc_sessionAuthenticate\");\n        if (payload.error.code === error.code) return;\n\n        // cleanup listener for fallback response\n        this.events.off(engineEvent(\"session_connect\"), onSessionConnect);\n        return reject(payload.error.message);\n      }\n      // delete fallback proposal on successful authenticate as the proposal will not be responded to\n      await this.deleteProposal(fallbackId);\n      // cleanup listener for fallback response\n      this.events.off(engineEvent(\"session_connect\"), onSessionConnect);\n\n      const {\n        cacaos,\n        responder,\n      }: {\n        cacaos: AuthTypes.SessionAuthenticateResponseParams[\"cacaos\"];\n        responder: AuthTypes.SessionAuthenticateResponseParams[\"responder\"];\n      } = payload.result;\n\n      const approvedMethods: string[] = [];\n      const approvedAccounts: string[] = [];\n      for (const cacao of cacaos) {\n        const isValid = await validateSignedCacao({ cacao, projectId: this.client.core.projectId });\n        if (!isValid) {\n          this.client.logger.error(cacao, \"Signature verification failed\");\n          reject(getSdkError(\"SESSION_SETTLEMENT_FAILED\", \"Signature verification failed\"));\n        }\n\n        const { p: payload } = cacao;\n        const recap = getRecapFromResources(payload.resources);\n\n        const approvedChains: string[] = [getNamespacedDidChainId(payload.iss) as string];\n        const parsedAddress = getDidAddress(payload.iss) as string;\n\n        if (recap) {\n          const methodsfromRecap = getMethodsFromRecap(recap);\n          const chainsFromRecap = getChainsFromRecap(recap);\n          approvedMethods.push(...methodsfromRecap);\n          approvedChains.push(...chainsFromRecap);\n        }\n\n        for (const chain of approvedChains) {\n          approvedAccounts.push(`${chain}:${parsedAddress}`);\n        }\n      }\n      const sessionTopic = await this.client.core.crypto.generateSharedKey(\n        publicKey,\n        responder.publicKey,\n      );\n\n      //create session object\n      let session: SessionTypes.Struct | undefined;\n\n      if (approvedMethods.length > 0) {\n        session = {\n          topic: sessionTopic,\n          acknowledged: true,\n          self: {\n            publicKey,\n            metadata: this.client.metadata,\n          },\n          peer: responder,\n          controller: responder.publicKey,\n          expiry: calcExpiry(SESSION_EXPIRY),\n          requiredNamespaces: {},\n          optionalNamespaces: {},\n          relay: { protocol: \"irn\" },\n          pairingTopic,\n          namespaces: buildNamespacesFromAuth(\n            [...new Set(approvedMethods)],\n            [...new Set(approvedAccounts)],\n          ),\n          transportType,\n        };\n\n        await this.client.core.relayer.subscribe(sessionTopic, { transportType });\n        await this.client.session.set(sessionTopic, session);\n        if (pairingTopic) {\n          await this.client.core.pairing.updateMetadata({\n            topic: pairingTopic,\n            metadata: responder.metadata,\n          });\n        }\n\n        session = this.client.session.get(sessionTopic);\n      }\n\n      if (\n        this.client.metadata.redirect?.linkMode &&\n        responder.metadata.redirect?.linkMode &&\n        responder.metadata.redirect?.universal &&\n        walletUniversalLink\n      ) {\n        // save wallet link in array of apps that support linkMode\n        this.client.core.addLinkModeSupportedApp(responder.metadata.redirect.universal);\n\n        this.client.session.update(sessionTopic, {\n          transportType: TRANSPORT_TYPES.link_mode,\n        });\n      }\n\n      resolve({\n        auths: cacaos,\n        session,\n      });\n    };\n\n    // set the ids for both requests\n    const id = payloadId();\n    const fallbackId = payloadId();\n    // subscribe to response events\n    this.events.once<\"session_connect\">(engineEvent(\"session_connect\"), onSessionConnect);\n    this.events.once(engineEvent(\"session_request\", id), onAuthenticate);\n\n    let linkModeURL;\n    try {\n      if (isLinkMode) {\n        const payload = formatJsonRpcRequest(\"wc_sessionAuthenticate\", request, id);\n        this.client.core.history.set(pairingTopic, payload);\n        const message = await this.client.core.crypto.encode(\"\", payload, {\n          type: TYPE_2,\n          encoding: BASE64URL,\n        });\n        linkModeURL = getLinkModeURL(walletUniversalLink, pairingTopic, message);\n      } else {\n        // send both (main & fallback) requests\n        await Promise.all([\n          this.sendRequest({\n            topic: pairingTopic,\n            method: \"wc_sessionAuthenticate\",\n            params: request,\n            expiry: params.expiry,\n            throwOnFailedPublish: true,\n            clientRpcId: id,\n          }),\n          this.sendRequest({\n            topic: pairingTopic,\n            method: \"wc_sessionPropose\",\n            params: proposal,\n            expiry: ENGINE_RPC_OPTS.wc_sessionPropose.req.ttl,\n            throwOnFailedPublish: true,\n            clientRpcId: fallbackId,\n          }),\n        ]);\n      }\n    } catch (error) {\n      // cleanup listeners on failed publish\n      this.events.off(engineEvent(\"session_connect\"), onSessionConnect);\n      this.events.off(engineEvent(\"session_request\", id), onAuthenticate);\n      throw error;\n    }\n\n    await this.setProposal(fallbackId, { id: fallbackId, ...proposal });\n    await this.setAuthRequest(id, {\n      request: {\n        ...request,\n        verifyContext: {} as any,\n      },\n      pairingTopic,\n      transportType,\n    });\n\n    return {\n      uri: linkModeURL ?? connectionUri,\n      response: done,\n    } as EngineTypes.SessionAuthenticateResponsePromise;\n  };\n\n  public approveSessionAuthenticate: IEngine[\"approveSessionAuthenticate\"] = async (\n    sessionAuthenticateResponseParams,\n  ) => {\n    const { id, auths } = sessionAuthenticateResponseParams;\n\n    const event = this.client.core.eventClient.createEvent({\n      properties: {\n        topic: id.toString(),\n        trace: [EVENT_CLIENT_AUTHENTICATE_TRACES.authenticated_session_approve_started],\n      },\n    });\n\n    try {\n      this.isInitialized();\n    } catch (error) {\n      event.setError(EVENT_CLIENT_AUTHENTICATE_ERRORS.no_internet_connection);\n      throw error;\n    }\n\n    const pendingRequest = this.getPendingAuthRequest(id);\n\n    if (!pendingRequest) {\n      event.setError(\n        EVENT_CLIENT_AUTHENTICATE_ERRORS.authenticated_session_pending_request_not_found,\n      );\n      throw new Error(`Could not find pending auth request with id ${id}`);\n    }\n\n    const transportType = pendingRequest.transportType || TRANSPORT_TYPES.relay;\n    if (transportType === TRANSPORT_TYPES.relay) {\n      await this.confirmOnlineStateOrThrow();\n    }\n\n    const receiverPublicKey = pendingRequest.requester.publicKey;\n    const senderPublicKey = await this.client.core.crypto.generateKeyPair();\n    const responseTopic = hashKey(receiverPublicKey);\n\n    const encodeOpts = {\n      type: TYPE_1,\n      receiverPublicKey,\n      senderPublicKey,\n    };\n\n    const approvedMethods: string[] = [];\n    const approvedAccounts: string[] = [];\n    for (const cacao of auths) {\n      const isValid = await validateSignedCacao({ cacao, projectId: this.client.core.projectId });\n      if (!isValid) {\n        event.setError(EVENT_CLIENT_AUTHENTICATE_ERRORS.invalid_cacao);\n\n        const invalidErr = getSdkError(\n          \"SESSION_SETTLEMENT_FAILED\",\n          \"Signature verification failed\",\n        );\n\n        await this.sendError({\n          id,\n          topic: responseTopic,\n          error: invalidErr,\n          encodeOpts,\n        });\n\n        throw new Error(invalidErr.message);\n      }\n\n      event.addTrace(EVENT_CLIENT_AUTHENTICATE_TRACES.cacaos_verified);\n\n      const { p: payload } = cacao;\n      const recap = getRecapFromResources(payload.resources);\n\n      const approvedChains: string[] = [getNamespacedDidChainId(payload.iss) as string];\n\n      const parsedAddress = getDidAddress(payload.iss) as string;\n\n      if (recap) {\n        const methodsfromRecap = getMethodsFromRecap(recap);\n        const chainsFromRecap = getChainsFromRecap(recap);\n        approvedMethods.push(...methodsfromRecap);\n        approvedChains.push(...chainsFromRecap);\n      }\n      for (const chain of approvedChains) {\n        approvedAccounts.push(`${chain}:${parsedAddress}`);\n      }\n    }\n\n    const sessionTopic = await this.client.core.crypto.generateSharedKey(\n      senderPublicKey,\n      receiverPublicKey,\n    );\n\n    event.addTrace(EVENT_CLIENT_AUTHENTICATE_TRACES.create_authenticated_session_topic);\n\n    let session: SessionTypes.Struct | undefined;\n    if (approvedMethods?.length > 0) {\n      session = {\n        topic: sessionTopic,\n        acknowledged: true,\n        self: {\n          publicKey: senderPublicKey,\n          metadata: this.client.metadata,\n        },\n        peer: {\n          publicKey: receiverPublicKey,\n          metadata: pendingRequest.requester.metadata,\n        },\n        controller: receiverPublicKey,\n        expiry: calcExpiry(SESSION_EXPIRY),\n        authentication: auths,\n        requiredNamespaces: {},\n        optionalNamespaces: {},\n        relay: { protocol: \"irn\" },\n        pairingTopic: pendingRequest.pairingTopic,\n        namespaces: buildNamespacesFromAuth(\n          [...new Set(approvedMethods)],\n          [...new Set(approvedAccounts)],\n        ),\n        transportType,\n      };\n\n      event.addTrace(EVENT_CLIENT_AUTHENTICATE_TRACES.subscribing_authenticated_session_topic);\n\n      try {\n        await this.client.core.relayer.subscribe(sessionTopic, { transportType });\n      } catch (error) {\n        event.setError(\n          EVENT_CLIENT_AUTHENTICATE_ERRORS.subscribe_authenticated_session_topic_failure,\n        );\n        throw error;\n      }\n\n      event.addTrace(\n        EVENT_CLIENT_AUTHENTICATE_TRACES.subscribe_authenticated_session_topic_success,\n      );\n\n      await this.client.session.set(sessionTopic, session);\n\n      event.addTrace(EVENT_CLIENT_AUTHENTICATE_TRACES.store_authenticated_session);\n\n      await this.client.core.pairing.updateMetadata({\n        topic: pendingRequest.pairingTopic,\n        metadata: pendingRequest.requester.metadata,\n      });\n    }\n\n    event.addTrace(EVENT_CLIENT_AUTHENTICATE_TRACES.publishing_authenticated_session_approve);\n\n    try {\n      await this.sendResult<\"wc_sessionAuthenticate\">({\n        topic: responseTopic,\n        id,\n        result: {\n          cacaos: auths,\n          responder: {\n            publicKey: senderPublicKey,\n            metadata: this.client.metadata,\n          },\n        },\n        encodeOpts,\n        throwOnFailedPublish: true,\n        appLink: this.getAppLinkIfEnabled(pendingRequest.requester.metadata, transportType),\n      });\n    } catch (error) {\n      event.setError(\n        EVENT_CLIENT_AUTHENTICATE_ERRORS.authenticated_session_approve_publish_failure,\n      );\n      throw error;\n    }\n\n    await this.client.auth.requests.delete(id, { message: \"fulfilled\", code: 0 });\n    await this.client.core.pairing.activate({ topic: pendingRequest.pairingTopic });\n    this.client.core.eventClient.deleteEvent({ eventId: event.eventId });\n\n    return { session };\n  };\n\n  public rejectSessionAuthenticate: IEngine[\"rejectSessionAuthenticate\"] = async (params) => {\n    this.isInitialized();\n\n    const { id, reason } = params;\n\n    const pendingRequest = this.getPendingAuthRequest(id);\n\n    if (!pendingRequest) {\n      throw new Error(`Could not find pending auth request with id ${id}`);\n    }\n\n    if (pendingRequest.transportType === TRANSPORT_TYPES.relay) {\n      await this.confirmOnlineStateOrThrow();\n    }\n\n    const receiverPublicKey = pendingRequest.requester.publicKey;\n    const senderPublicKey = await this.client.core.crypto.generateKeyPair();\n    const responseTopic = hashKey(receiverPublicKey);\n\n    const encodeOpts = {\n      type: TYPE_1,\n      receiverPublicKey,\n      senderPublicKey,\n    };\n\n    await this.sendError({\n      id,\n      topic: responseTopic,\n      error: reason,\n      encodeOpts,\n      rpcOpts: ENGINE_RPC_OPTS.wc_sessionAuthenticate.reject,\n      appLink: this.getAppLinkIfEnabled(\n        pendingRequest.requester.metadata,\n        pendingRequest.transportType,\n      ),\n    });\n    await this.client.auth.requests.delete(id, { message: \"rejected\", code: 0 });\n    await this.client.proposal.delete(id, getSdkError(\"USER_DISCONNECTED\"));\n  };\n\n  public formatAuthMessage: IEngine[\"formatAuthMessage\"] = (params) => {\n    this.isInitialized();\n    const { request, iss } = params;\n    return formatMessage(request, iss);\n  };\n\n  public processRelayMessageCache: IEngine[\"processRelayMessageCache\"] = () => {\n    // process the relay messages cache in the next tick to allow event listeners to be registered by the implementing app\n    setTimeout(async () => {\n      if (this.relayMessageCache.length === 0) return;\n      while (this.relayMessageCache.length > 0) {\n        try {\n          const message = this.relayMessageCache.shift();\n          if (message) {\n            await this.onRelayMessage(message);\n          }\n        } catch (error) {\n          this.client.logger.error(error);\n        }\n      }\n    }, 50);\n  };\n\n  // ---------- Private Helpers --------------------------------------- //\n\n  private cleanupDuplicatePairings: EnginePrivate[\"cleanupDuplicatePairings\"] = async (\n    session: SessionTypes.Struct,\n  ) => {\n    // older SDK versions are missing the `pairingTopic` prop thus we need to check for it\n    if (!session.pairingTopic) return;\n\n    try {\n      const pairing = this.client.core.pairing.pairings.get(session.pairingTopic);\n      const allPairings = this.client.core.pairing.pairings.getAll();\n      const duplicates = allPairings.filter(\n        (p) =>\n          p.peerMetadata?.url &&\n          p.peerMetadata?.url === session.peer.metadata.url &&\n          p.topic &&\n          p.topic !== pairing.topic,\n      );\n      if (duplicates.length === 0) return;\n      this.client.logger.info(`Cleaning up ${duplicates.length} duplicate pairing(s)`);\n      await Promise.all(\n        duplicates.map((p) => this.client.core.pairing.disconnect({ topic: p.topic })),\n      );\n      this.client.logger.info(`Duplicate pairings clean up finished`);\n    } catch (error) {\n      this.client.logger.error(error);\n    }\n  };\n\n  private deleteSession: EnginePrivate[\"deleteSession\"] = async (params) => {\n    const { topic, expirerHasDeleted = false, emitEvent = true, id = 0 } = params;\n    const { self } = this.client.session.get(topic);\n    // Await the unsubscribe first to avoid deleting the symKey too early below.\n    await this.client.core.relayer.unsubscribe(topic);\n    await this.client.session.delete(topic, getSdkError(\"USER_DISCONNECTED\"));\n    this.addToRecentlyDeleted(topic, \"session\");\n    if (this.client.core.crypto.keychain.has(self.publicKey)) {\n      await this.client.core.crypto.deleteKeyPair(self.publicKey);\n    }\n    if (this.client.core.crypto.keychain.has(topic)) {\n      await this.client.core.crypto.deleteSymKey(topic);\n    }\n    if (!expirerHasDeleted) this.client.core.expirer.del(topic);\n    // remove any deeplinks from storage after the session is deleted\n    // to avoid navigating to incorrect deeplink later on\n    this.client.core.storage\n      .removeItem(WALLETCONNECT_DEEPLINK_CHOICE)\n      .catch((e) => this.client.logger.warn(e));\n    this.getPendingSessionRequests().forEach((r) => {\n      if (r.topic === topic) {\n        this.deletePendingSessionRequest(r.id, getSdkError(\"USER_DISCONNECTED\"));\n      }\n    });\n    // reset the queue state back to idle if a request for the deleted session is still in the queue\n    if (topic === this.sessionRequestQueue.queue[0]?.topic) {\n      this.sessionRequestQueue.state = ENGINE_QUEUE_STATES.idle;\n    }\n    if (emitEvent) this.client.events.emit(\"session_delete\", { id, topic });\n  };\n\n  private deleteProposal: EnginePrivate[\"deleteProposal\"] = async (id, expirerHasDeleted) => {\n    if (expirerHasDeleted) {\n      try {\n        const proposal = this.client.proposal.get(id);\n        const event = this.client.core.eventClient.getEvent({ topic: proposal.pairingTopic });\n        event?.setError(EVENT_CLIENT_SESSION_ERRORS.proposal_expired);\n      } catch (error) {}\n    }\n    await Promise.all([\n      this.client.proposal.delete(id, getSdkError(\"USER_DISCONNECTED\")),\n      expirerHasDeleted ? Promise.resolve() : this.client.core.expirer.del(id),\n    ]);\n    this.addToRecentlyDeleted(id, \"proposal\");\n  };\n\n  private deletePendingSessionRequest: EnginePrivate[\"deletePendingSessionRequest\"] = async (\n    id,\n    reason,\n    expirerHasDeleted = false,\n  ) => {\n    await Promise.all([\n      this.client.pendingRequest.delete(id, reason),\n      expirerHasDeleted ? Promise.resolve() : this.client.core.expirer.del(id),\n    ]);\n    this.addToRecentlyDeleted(id, \"request\");\n    this.sessionRequestQueue.queue = this.sessionRequestQueue.queue.filter((r) => r.id !== id);\n    if (expirerHasDeleted) {\n      this.sessionRequestQueue.state = ENGINE_QUEUE_STATES.idle;\n      this.client.events.emit(\"session_request_expire\", { id });\n    }\n  };\n\n  private deletePendingAuthRequest: EnginePrivate[\"deletePendingAuthRequest\"] = async (\n    id,\n    reason,\n    expirerHasDeleted = false,\n  ) => {\n    await Promise.all([\n      this.client.auth.requests.delete(id, reason),\n      expirerHasDeleted ? Promise.resolve() : this.client.core.expirer.del(id),\n    ]);\n  };\n\n  private setExpiry: EnginePrivate[\"setExpiry\"] = async (topic, expiry) => {\n    if (!this.client.session.keys.includes(topic)) return;\n    this.client.core.expirer.set(topic, expiry);\n    await this.client.session.update(topic, { expiry });\n  };\n\n  private setProposal: EnginePrivate[\"setProposal\"] = async (id, proposal) => {\n    this.client.core.expirer.set(id, calcExpiry(ENGINE_RPC_OPTS.wc_sessionPropose.req.ttl));\n    await this.client.proposal.set(id, proposal);\n  };\n\n  private setAuthRequest: EnginePrivate[\"setAuthRequest\"] = async (id, params) => {\n    const { request, pairingTopic, transportType = TRANSPORT_TYPES.relay } = params;\n    this.client.core.expirer.set(id, request.expiryTimestamp);\n    await this.client.auth.requests.set(id, {\n      authPayload: request.authPayload,\n      requester: request.requester,\n      expiryTimestamp: request.expiryTimestamp,\n      id,\n      pairingTopic,\n      verifyContext: request.verifyContext,\n      transportType,\n    });\n  };\n\n  private setPendingSessionRequest: EnginePrivate[\"setPendingSessionRequest\"] = async (\n    pendingRequest: PendingRequestTypes.Struct,\n  ) => {\n    const { id, topic, params, verifyContext } = pendingRequest;\n    const expiry =\n      params.request.expiryTimestamp || calcExpiry(ENGINE_RPC_OPTS.wc_sessionRequest.req.ttl);\n    this.client.core.expirer.set(id, expiry);\n    await this.client.pendingRequest.set(id, {\n      id,\n      topic,\n      params,\n      verifyContext,\n    });\n  };\n\n  private sendRequest: EnginePrivate[\"sendRequest\"] = async (args) => {\n    const {\n      topic,\n      method,\n      params,\n      expiry,\n      relayRpcId,\n      clientRpcId,\n      throwOnFailedPublish,\n      appLink,\n    } = args;\n    const payload = formatJsonRpcRequest(method, params, clientRpcId);\n\n    let message: string;\n    const isLinkMode = !!appLink;\n\n    try {\n      const encoding = isLinkMode ? BASE64URL : BASE64;\n      message = await this.client.core.crypto.encode(topic, payload, { encoding });\n    } catch (error) {\n      await this.cleanup();\n      this.client.logger.error(`sendRequest() -> core.crypto.encode() for topic ${topic} failed`);\n      throw error;\n    }\n\n    let attestation: string | undefined;\n    if (METHODS_TO_VERIFY.includes(method)) {\n      const decryptedId = hashMessage(JSON.stringify(payload));\n      const id = hashMessage(message);\n      attestation = await this.client.core.verify.register({ id, decryptedId });\n    }\n    const opts = ENGINE_RPC_OPTS[method].req;\n    opts.attestation = attestation;\n    if (expiry) opts.ttl = expiry;\n    if (relayRpcId) opts.id = relayRpcId;\n    this.client.core.history.set(topic, payload);\n\n    if (isLinkMode) {\n      const redirectURL = getLinkModeURL(appLink, topic, message);\n      await (global as any).Linking.openURL(redirectURL, this.client.name);\n    } else {\n      const opts = ENGINE_RPC_OPTS[method].req;\n      if (expiry) opts.ttl = expiry;\n      if (relayRpcId) opts.id = relayRpcId;\n      if (throwOnFailedPublish) {\n        opts.internal = {\n          ...opts.internal,\n          throwOnFailedPublish: true,\n        };\n        await this.client.core.relayer.publish(topic, message, opts);\n      } else {\n        this.client.core.relayer\n          .publish(topic, message, opts)\n          .catch((error) => this.client.logger.error(error));\n      }\n    }\n\n    return payload.id;\n  };\n\n  private sendResult: EnginePrivate[\"sendResult\"] = async (args) => {\n    const { id, topic, result, throwOnFailedPublish, encodeOpts, appLink } = args;\n    const payload = formatJsonRpcResult(id, result);\n    let message;\n    const isLinkMode = appLink && typeof (global as any)?.Linking !== \"undefined\";\n\n    try {\n      const encoding = isLinkMode ? BASE64URL : BASE64;\n      message = await this.client.core.crypto.encode(topic, payload, {\n        ...(encodeOpts || {}),\n        encoding,\n      });\n    } catch (error) {\n      // if encoding fails e.g. due to missing keychain, we want to cleanup all related data as its unusable\n      await this.cleanup();\n      this.client.logger.error(`sendResult() -> core.crypto.encode() for topic ${topic} failed`);\n      throw error;\n    }\n    let record;\n    try {\n      record = await this.client.core.history.get(topic, id);\n    } catch (error) {\n      this.client.logger.error(`sendResult() -> history.get(${topic}, ${id}) failed`);\n      throw error;\n    }\n\n    if (isLinkMode) {\n      const redirectURL = getLinkModeURL(appLink, topic, message);\n      await (global as any).Linking.openURL(redirectURL, this.client.name);\n    } else {\n      const opts = ENGINE_RPC_OPTS[record.request.method].res;\n      if (throwOnFailedPublish) {\n        opts.internal = {\n          ...opts.internal,\n          throwOnFailedPublish: true,\n        };\n        await this.client.core.relayer.publish(topic, message, opts);\n      } else {\n        this.client.core.relayer\n          .publish(topic, message, opts)\n          .catch((error) => this.client.logger.error(error));\n      }\n    }\n\n    await this.client.core.history.resolve(payload);\n  };\n\n  private sendError: EnginePrivate[\"sendError\"] = async (params) => {\n    const { id, topic, error, encodeOpts, rpcOpts, appLink } = params;\n    const payload = formatJsonRpcError(id, error);\n    let message;\n    const isLinkMode = appLink && typeof (global as any)?.Linking !== \"undefined\";\n    try {\n      const encoding = isLinkMode ? BASE64URL : BASE64;\n      message = await this.client.core.crypto.encode(topic, payload, {\n        ...(encodeOpts || {}),\n        encoding,\n      });\n    } catch (error) {\n      await this.cleanup();\n      this.client.logger.error(`sendError() -> core.crypto.encode() for topic ${topic} failed`);\n      throw error;\n    }\n    let record;\n    try {\n      record = await this.client.core.history.get(topic, id);\n    } catch (error) {\n      this.client.logger.error(`sendError() -> history.get(${topic}, ${id}) failed`);\n      throw error;\n    }\n\n    if (isLinkMode) {\n      const redirectURL = getLinkModeURL(appLink, topic, message);\n      await (global as any).Linking.openURL(redirectURL, this.client.name);\n    } else {\n      const opts = rpcOpts || ENGINE_RPC_OPTS[record.request.method].res;\n      // await is intentionally omitted to speed up performance\n      this.client.core.relayer.publish(topic, message, opts);\n    }\n\n    await this.client.core.history.resolve(payload);\n  };\n\n  private cleanup: EnginePrivate[\"cleanup\"] = async () => {\n    const sessionTopics: string[] = [];\n    const proposalIds: number[] = [];\n    this.client.session.getAll().forEach((session) => {\n      let toCleanup = false;\n      if (isExpired(session.expiry)) toCleanup = true;\n      if (!this.client.core.crypto.keychain.has(session.topic)) toCleanup = true;\n      if (toCleanup) sessionTopics.push(session.topic);\n    });\n    this.client.proposal.getAll().forEach((proposal) => {\n      if (isExpired(proposal.expiryTimestamp)) proposalIds.push(proposal.id);\n    });\n    await Promise.all([\n      ...sessionTopics.map((topic) => this.deleteSession({ topic })),\n      ...proposalIds.map((id) => this.deleteProposal(id)),\n    ]);\n  };\n\n  private isInitialized() {\n    if (!this.initialized) {\n      const { message } = getInternalError(\"NOT_INITIALIZED\", this.name);\n      throw new Error(message);\n    }\n  }\n\n  private async confirmOnlineStateOrThrow() {\n    await this.client.core.relayer.confirmOnlineStateOrThrow();\n  }\n\n  // ---------- Relay Events Router ----------------------------------- //\n\n  private registerRelayerEvents() {\n    this.client.core.relayer.on(RELAYER_EVENTS.message, (event: RelayerTypes.MessageEvent) => {\n      // capture any messages that arrive before the client is initialized so we can process them after initialization is complete\n      if (!this.initialized || this.relayMessageCache.length > 0) {\n        this.relayMessageCache.push(event);\n      } else {\n        this.onRelayMessage(event);\n      }\n    });\n  }\n\n  private async onRelayMessage(event: RelayerTypes.MessageEvent) {\n    const { topic, message, attestation, transportType } = event;\n\n    // Retrieve the public key (if defined) to decrypt possible `auth_request` response\n    const { publicKey } = this.client.auth.authKeys.keys.includes(AUTH_PUBLIC_KEY_NAME)\n      ? this.client.auth.authKeys.get(AUTH_PUBLIC_KEY_NAME)\n      : ({ responseTopic: undefined, publicKey: undefined } as any);\n\n    const payload = await this.client.core.crypto.decode(topic, message, {\n      receiverPublicKey: publicKey,\n      encoding: transportType === TRANSPORT_TYPES.link_mode ? BASE64URL : BASE64,\n    });\n    try {\n      if (isJsonRpcRequest(payload)) {\n        this.client.core.history.set(topic, payload);\n        this.onRelayEventRequest({\n          topic,\n          payload,\n          attestation,\n          transportType,\n          encryptedId: hashMessage(message),\n        });\n      } else if (isJsonRpcResponse(payload)) {\n        await this.client.core.history.resolve(payload);\n        await this.onRelayEventResponse({ topic, payload, transportType });\n        this.client.core.history.delete(topic, payload.id);\n      } else {\n        this.onRelayEventUnknownPayload({ topic, payload, transportType });\n      }\n    } catch (error) {\n      this.client.logger.error(error);\n    }\n  }\n\n  private onRelayEventRequest: EnginePrivate[\"onRelayEventRequest\"] = async (event) => {\n    this.requestQueue.queue.push(event);\n    await this.processRequestsQueue();\n  };\n\n  private processRequestsQueue = async () => {\n    if (this.requestQueue.state === ENGINE_QUEUE_STATES.active) {\n      this.client.logger.info(`Request queue already active, skipping...`);\n      return;\n    }\n\n    this.client.logger.info(\n      `Request queue starting with ${this.requestQueue.queue.length} requests`,\n    );\n\n    while (this.requestQueue.queue.length > 0) {\n      this.requestQueue.state = ENGINE_QUEUE_STATES.active;\n      const request = this.requestQueue.queue.shift();\n      if (!request) continue;\n\n      try {\n        await this.processRequest(request);\n      } catch (error) {\n        this.client.logger.warn(error);\n      }\n    }\n    this.requestQueue.state = ENGINE_QUEUE_STATES.idle;\n  };\n\n  private processRequest: EnginePrivate[\"onRelayEventRequest\"] = async (event) => {\n    const { topic, payload, attestation, transportType, encryptedId } = event;\n\n    const reqMethod = payload.method as JsonRpcTypes.WcMethod;\n\n    if (this.shouldIgnorePairingRequest({ topic, requestMethod: reqMethod })) {\n      return;\n    }\n\n    switch (reqMethod) {\n      case \"wc_sessionPropose\":\n        return await this.onSessionProposeRequest({ topic, payload, attestation, encryptedId });\n      case \"wc_sessionSettle\":\n        return await this.onSessionSettleRequest(topic, payload);\n      case \"wc_sessionUpdate\":\n        return await this.onSessionUpdateRequest(topic, payload);\n      case \"wc_sessionExtend\":\n        return await this.onSessionExtendRequest(topic, payload);\n      case \"wc_sessionPing\":\n        return await this.onSessionPingRequest(topic, payload);\n      case \"wc_sessionDelete\":\n        return await this.onSessionDeleteRequest(topic, payload);\n      case \"wc_sessionRequest\":\n        return await this.onSessionRequest({\n          topic,\n          payload,\n          attestation,\n          encryptedId,\n          transportType,\n        });\n      case \"wc_sessionEvent\":\n        return await this.onSessionEventRequest(topic, payload);\n      case \"wc_sessionAuthenticate\":\n        return await this.onSessionAuthenticateRequest({\n          topic,\n          payload,\n          attestation,\n          encryptedId,\n          transportType,\n        });\n      default:\n        return this.client.logger.info(`Unsupported request method ${reqMethod}`);\n    }\n  };\n\n  private onRelayEventResponse: EnginePrivate[\"onRelayEventResponse\"] = async (event) => {\n    const { topic, payload, transportType } = event;\n    const record = await this.client.core.history.get(topic, payload.id);\n    const resMethod = record.request.method as JsonRpcTypes.WcMethod;\n    switch (resMethod) {\n      case \"wc_sessionPropose\":\n        return this.onSessionProposeResponse(topic, payload, transportType);\n      case \"wc_sessionSettle\":\n        return this.onSessionSettleResponse(topic, payload);\n      case \"wc_sessionUpdate\":\n        return this.onSessionUpdateResponse(topic, payload);\n      case \"wc_sessionExtend\":\n        return this.onSessionExtendResponse(topic, payload);\n      case \"wc_sessionPing\":\n        return this.onSessionPingResponse(topic, payload);\n      case \"wc_sessionRequest\":\n        return this.onSessionRequestResponse(topic, payload);\n      case \"wc_sessionAuthenticate\":\n        return this.onSessionAuthenticateResponse(topic, payload);\n      default:\n        return this.client.logger.info(`Unsupported response method ${resMethod}`);\n    }\n  };\n\n  private onRelayEventUnknownPayload: EnginePrivate[\"onRelayEventUnknownPayload\"] = (event) => {\n    const { topic } = event;\n    const { message } = getInternalError(\n      \"MISSING_OR_INVALID\",\n      `Decoded payload on topic ${topic} is not identifiable as a JSON-RPC request or a response.`,\n    );\n    throw new Error(message);\n  };\n\n  private shouldIgnorePairingRequest: EnginePrivate[\"shouldIgnorePairingRequest\"] = (params) => {\n    const { topic, requestMethod } = params;\n    const expectedMethods = this.expectedPairingMethodMap.get(topic);\n    // check if the request method matches the expected method\n    if (!expectedMethods) return false;\n    if (expectedMethods.includes(requestMethod)) return false;\n\n    /**\n     * we want to make sure fallback session proposal is ignored only if there are subscribers\n     * for the `session_authenticate` event, otherwise this would result in no-op for the user\n     */\n    if (expectedMethods.includes(\"wc_sessionAuthenticate\")) {\n      if (this.client.events.listenerCount(\"session_authenticate\") > 0) {\n        return true;\n      }\n    }\n    return false;\n  };\n\n  // ---------- Relay Events Handlers --------------------------------- //\n\n  private onSessionProposeRequest: EnginePrivate[\"onSessionProposeRequest\"] = async (args) => {\n    const { topic, payload, attestation, encryptedId } = args;\n    const { params, id } = payload;\n    try {\n      const event = this.client.core.eventClient.getEvent({ topic });\n      this.isValidConnect({ ...payload.params });\n      const expiryTimestamp =\n        params.expiryTimestamp || calcExpiry(ENGINE_RPC_OPTS.wc_sessionPropose.req.ttl);\n      const proposal = { id, pairingTopic: topic, expiryTimestamp, ...params };\n      await this.setProposal(id, proposal);\n\n      const verifyContext = await this.getVerifyContext({\n        attestationId: attestation,\n        hash: hashMessage(JSON.stringify(payload)),\n        encryptedId,\n        metadata: proposal.proposer.metadata,\n      });\n\n      if (this.client.events.listenerCount(\"session_proposal\") === 0) {\n        console.warn(\"No listener for session_proposal event\");\n        event?.setError(EVENT_CLIENT_PAIRING_ERRORS.proposal_listener_not_found);\n      }\n      event?.addTrace(EVENT_CLIENT_PAIRING_TRACES.emit_session_proposal);\n\n      this.client.events.emit(\"session_proposal\", { id, params: proposal, verifyContext });\n    } catch (err: any) {\n      await this.sendError({\n        id,\n        topic,\n        error: err,\n        rpcOpts: ENGINE_RPC_OPTS.wc_sessionPropose.autoReject,\n      });\n      this.client.logger.error(err);\n    }\n  };\n\n  private onSessionProposeResponse: EnginePrivate[\"onSessionProposeResponse\"] = async (\n    topic,\n    payload,\n    transportType,\n  ) => {\n    const { id } = payload;\n    if (isJsonRpcResult(payload)) {\n      const { result } = payload;\n      this.client.logger.trace({ type: \"method\", method: \"onSessionProposeResponse\", result });\n      const proposal = this.client.proposal.get(id);\n      this.client.logger.trace({ type: \"method\", method: \"onSessionProposeResponse\", proposal });\n      const selfPublicKey = proposal.proposer.publicKey;\n      this.client.logger.trace({\n        type: \"method\",\n        method: \"onSessionProposeResponse\",\n        selfPublicKey,\n      });\n      const peerPublicKey = result.responderPublicKey;\n      this.client.logger.trace({\n        type: \"method\",\n        method: \"onSessionProposeResponse\",\n        peerPublicKey,\n      });\n      const sessionTopic = await this.client.core.crypto.generateSharedKey(\n        selfPublicKey,\n        peerPublicKey,\n      );\n      this.client.logger.trace({\n        type: \"method\",\n        method: \"onSessionProposeResponse\",\n        sessionTopic,\n      });\n      const subscriptionId = await this.client.core.relayer.subscribe(sessionTopic, {\n        transportType,\n      });\n      this.client.logger.trace({\n        type: \"method\",\n        method: \"onSessionProposeResponse\",\n        subscriptionId,\n      });\n      await this.client.core.pairing.activate({ topic });\n    } else if (isJsonRpcError(payload)) {\n      await this.client.proposal.delete(id, getSdkError(\"USER_DISCONNECTED\"));\n      const target = engineEvent(\"session_connect\");\n      const listeners = this.events.listenerCount(target);\n      if (listeners === 0) {\n        throw new Error(`emitting ${target} without any listeners, 954`);\n      }\n      this.events.emit(engineEvent(\"session_connect\"), { error: payload.error });\n    }\n  };\n\n  private onSessionSettleRequest: EnginePrivate[\"onSessionSettleRequest\"] = async (\n    topic,\n    payload,\n  ) => {\n    const { id, params } = payload;\n    try {\n      this.isValidSessionSettleRequest(params);\n      const { relay, controller, expiry, namespaces, sessionProperties, sessionConfig } =\n        payload.params;\n      const session = {\n        topic,\n        relay,\n        expiry,\n        namespaces,\n        acknowledged: true,\n        pairingTopic: \"\", // pairingTopic will be set in the `session_connect` handler\n        requiredNamespaces: {},\n        optionalNamespaces: {},\n        controller: controller.publicKey,\n        self: {\n          publicKey: \"\",\n          metadata: this.client.metadata,\n        },\n        peer: {\n          publicKey: controller.publicKey,\n          metadata: controller.metadata,\n        },\n        ...(sessionProperties && { sessionProperties }),\n        ...(sessionConfig && { sessionConfig }),\n        transportType: TRANSPORT_TYPES.relay,\n      };\n      const target = engineEvent(\"session_connect\");\n      const listeners = this.events.listenerCount(target);\n      if (listeners === 0) {\n        throw new Error(`emitting ${target} without any listeners 997`);\n      }\n      this.events.emit(engineEvent(\"session_connect\"), { session });\n      await this.sendResult<\"wc_sessionSettle\">({\n        id: payload.id,\n        topic,\n        result: true,\n        throwOnFailedPublish: true,\n      });\n    } catch (err: any) {\n      await this.sendError({\n        id,\n        topic,\n        error: err,\n      });\n      this.client.logger.error(err);\n    }\n  };\n\n  private onSessionSettleResponse: EnginePrivate[\"onSessionSettleResponse\"] = async (\n    topic,\n    payload,\n  ) => {\n    const { id } = payload;\n    if (isJsonRpcResult(payload)) {\n      await this.client.session.update(topic, { acknowledged: true });\n      this.events.emit(engineEvent(\"session_approve\", id), {});\n    } else if (isJsonRpcError(payload)) {\n      await this.client.session.delete(topic, getSdkError(\"USER_DISCONNECTED\"));\n      this.events.emit(engineEvent(\"session_approve\", id), { error: payload.error });\n    }\n  };\n\n  private onSessionUpdateRequest: EnginePrivate[\"onSessionUpdateRequest\"] = async (\n    topic,\n    payload,\n  ) => {\n    const { params, id } = payload;\n    try {\n      const memoryKey = `${topic}_session_update`;\n      // compare the current request id with the last processed session update\n      // we want to update only if the request is newer than the last processed one\n      const lastSessionUpdateId = MemoryStore.get<number>(memoryKey);\n\n      if (lastSessionUpdateId && this.isRequestOutOfSync(lastSessionUpdateId, id)) {\n        this.client.logger.info(`Discarding out of sync request - ${id}`);\n        this.sendError({ id, topic, error: getSdkError(\"INVALID_UPDATE_REQUEST\") });\n        return;\n      }\n      this.isValidUpdate({ topic, ...params });\n      try {\n        MemoryStore.set(memoryKey, id);\n        await this.client.session.update(topic, { namespaces: params.namespaces });\n        await this.sendResult<\"wc_sessionUpdate\">({\n          id,\n          topic,\n          result: true,\n          throwOnFailedPublish: true,\n        });\n      } catch (e) {\n        MemoryStore.delete(memoryKey);\n        throw e;\n      }\n\n      this.client.events.emit(\"session_update\", { id, topic, params });\n    } catch (err: any) {\n      await this.sendError({\n        id,\n        topic,\n        error: err,\n      });\n      this.client.logger.error(err);\n    }\n  };\n\n  // compares the timestamp of the last processed request with the current request\n  // client <-> client rpc ID is timestamp + 3 random digits\n  private isRequestOutOfSync = (lastId: number, currentId: number) => {\n    return parseInt(currentId.toString().slice(0, -3)) <= parseInt(lastId.toString().slice(0, -3));\n  };\n\n  private onSessionUpdateResponse: EnginePrivate[\"onSessionUpdateResponse\"] = (_topic, payload) => {\n    const { id } = payload;\n    const target = engineEvent(\"session_update\", id);\n    const listeners = this.events.listenerCount(target);\n    if (listeners === 0) {\n      throw new Error(`emitting ${target} without any listeners`);\n    }\n    if (isJsonRpcResult(payload)) {\n      this.events.emit(engineEvent(\"session_update\", id), {});\n    } else if (isJsonRpcError(payload)) {\n      this.events.emit(engineEvent(\"session_update\", id), { error: payload.error });\n    }\n  };\n\n  private onSessionExtendRequest: EnginePrivate[\"onSessionExtendRequest\"] = async (\n    topic,\n    payload,\n  ) => {\n    const { id } = payload;\n    try {\n      this.isValidExtend({ topic });\n      await this.setExpiry(topic, calcExpiry(SESSION_EXPIRY));\n      await this.sendResult<\"wc_sessionExtend\">({\n        id,\n        topic,\n        result: true,\n        throwOnFailedPublish: true,\n      });\n      this.client.events.emit(\"session_extend\", { id, topic });\n    } catch (err: any) {\n      await this.sendError({\n        id,\n        topic,\n        error: err,\n      });\n      this.client.logger.error(err);\n    }\n  };\n\n  private onSessionExtendResponse: EnginePrivate[\"onSessionExtendResponse\"] = (_topic, payload) => {\n    const { id } = payload;\n    const target = engineEvent(\"session_extend\", id);\n    const listeners = this.events.listenerCount(target);\n    if (listeners === 0) {\n      throw new Error(`emitting ${target} without any listeners`);\n    }\n    if (isJsonRpcResult(payload)) {\n      this.events.emit(engineEvent(\"session_extend\", id), {});\n    } else if (isJsonRpcError(payload)) {\n      this.events.emit(engineEvent(\"session_extend\", id), { error: payload.error });\n    }\n  };\n\n  private onSessionPingRequest: EnginePrivate[\"onSessionPingRequest\"] = async (topic, payload) => {\n    const { id } = payload;\n    try {\n      this.isValidPing({ topic });\n      await this.sendResult<\"wc_sessionPing\">({\n        id,\n        topic,\n        result: true,\n        throwOnFailedPublish: true,\n      });\n      this.client.events.emit(\"session_ping\", { id, topic });\n    } catch (err: any) {\n      await this.sendError({\n        id,\n        topic,\n        error: err,\n      });\n      this.client.logger.error(err);\n    }\n  };\n\n  private onSessionPingResponse: EnginePrivate[\"onSessionPingResponse\"] = (_topic, payload) => {\n    const { id } = payload;\n    const target = engineEvent(\"session_ping\", id);\n    const listeners = this.events.listenerCount(target);\n    if (listeners === 0) {\n      throw new Error(`emitting ${target} without any listeners`);\n    }\n    // put at the end of the stack to avoid a race condition\n    // where session_ping listener is not yet initialized\n    setTimeout(() => {\n      if (isJsonRpcResult(payload)) {\n        this.events.emit(engineEvent(\"session_ping\", id), {});\n      } else if (isJsonRpcError(payload)) {\n        this.events.emit(engineEvent(\"session_ping\", id), { error: payload.error });\n      }\n    }, 500);\n  };\n\n  private onSessionDeleteRequest: EnginePrivate[\"onSessionDeleteRequest\"] = async (\n    topic,\n    payload,\n  ) => {\n    const { id } = payload;\n    try {\n      this.isValidDisconnect({ topic, reason: payload.params });\n      Promise.all([\n        new Promise((resolve) => {\n          // RPC request needs to happen before deletion as it utalises session encryption\n          this.client.core.relayer.once(RELAYER_EVENTS.publish, async () => {\n            resolve(await this.deleteSession({ topic, id }));\n          });\n        }),\n        this.sendResult<\"wc_sessionDelete\">({\n          id,\n          topic,\n          result: true,\n          throwOnFailedPublish: true,\n        }),\n        this.cleanupPendingSentRequestsForTopic({ topic, error: getSdkError(\"USER_DISCONNECTED\") }),\n      ]).catch((err) => this.client.logger.error(err));\n    } catch (err: any) {\n      this.client.logger.error(err);\n    }\n  };\n\n  private onSessionRequest: EnginePrivate[\"onSessionRequest\"] = async (args) => {\n    const { topic, payload, attestation, encryptedId, transportType } = args;\n    const { id, params } = payload;\n    try {\n      await this.isValidRequest({ topic, ...params });\n      const session = this.client.session.get(topic);\n      const verifyContext = await this.getVerifyContext({\n        attestationId: attestation,\n        hash: hashMessage(JSON.stringify(formatJsonRpcRequest(\"wc_sessionRequest\", params, id))),\n        encryptedId,\n        metadata: session.peer.metadata,\n        transportType,\n      });\n      const request = {\n        id,\n        topic,\n        params,\n        verifyContext,\n      };\n      await this.setPendingSessionRequest(request);\n\n      if (\n        transportType === TRANSPORT_TYPES.link_mode &&\n        session.peer.metadata.redirect?.universal\n      ) {\n        // save app as supported for link mode\n        this.client.core.addLinkModeSupportedApp(session.peer.metadata.redirect?.universal);\n      }\n\n      if (this.client.signConfig?.disableRequestQueue) {\n        this.emitSessionRequest(request);\n      } else {\n        this.addSessionRequestToSessionRequestQueue(request);\n        this.processSessionRequestQueue();\n      }\n    } catch (err: any) {\n      await this.sendError({\n        id,\n        topic,\n        error: err,\n      });\n      this.client.logger.error(err);\n    }\n  };\n\n  private onSessionRequestResponse: EnginePrivate[\"onSessionRequestResponse\"] = (\n    _topic,\n    payload,\n  ) => {\n    const { id } = payload;\n    const target = engineEvent(\"session_request\", id);\n    const listeners = this.events.listenerCount(target);\n    if (listeners === 0) {\n      throw new Error(`emitting ${target} without any listeners`);\n    }\n    if (isJsonRpcResult(payload)) {\n      this.events.emit(engineEvent(\"session_request\", id), { result: payload.result });\n    } else if (isJsonRpcError(payload)) {\n      this.events.emit(engineEvent(\"session_request\", id), { error: payload.error });\n    }\n  };\n\n  private onSessionEventRequest: EnginePrivate[\"onSessionEventRequest\"] = async (\n    topic,\n    payload,\n  ) => {\n    const { id, params } = payload;\n    try {\n      // similar to session update, we want to discard out of sync requests\n      // additionally we have to check the event type as well e.g. chainChanged/accountsChanged\n      const memoryKey = `${topic}_session_event_${params.event.name}`;\n      // compare the current request id with the last processed session update\n      // we want to update only if the request is newer than the last processed one\n      const lastSessionUpdateId = MemoryStore.get<number>(memoryKey);\n      if (lastSessionUpdateId && this.isRequestOutOfSync(lastSessionUpdateId, id)) {\n        this.client.logger.info(`Discarding out of sync request - ${id}`);\n        return;\n      }\n\n      this.isValidEmit({ topic, ...params });\n      this.client.events.emit(\"session_event\", { id, topic, params });\n      MemoryStore.set(memoryKey, id);\n    } catch (err: any) {\n      await this.sendError({\n        id,\n        topic,\n        error: err,\n      });\n      this.client.logger.error(err);\n    }\n  };\n\n  private onSessionAuthenticateResponse: EnginePrivate[\"onSessionAuthenticateResponse\"] = (\n    topic,\n    payload,\n  ) => {\n    const { id } = payload;\n    this.client.logger.trace({\n      type: \"method\",\n      method: \"onSessionAuthenticateResponse\",\n      topic,\n      payload,\n    });\n    if (isJsonRpcResult(payload)) {\n      this.events.emit(engineEvent(\"session_request\", id), { result: payload.result });\n    } else if (isJsonRpcError(payload)) {\n      this.events.emit(engineEvent(\"session_request\", id), { error: payload.error });\n    }\n  };\n\n  private onSessionAuthenticateRequest: EnginePrivate[\"onSessionAuthenticateRequest\"] = async (\n    args,\n  ) => {\n    const { topic, payload, attestation, encryptedId, transportType } = args;\n    try {\n      const { requester, authPayload, expiryTimestamp } = payload.params;\n      const verifyContext = await this.getVerifyContext({\n        attestationId: attestation,\n        hash: hashMessage(JSON.stringify(payload)),\n        encryptedId,\n        metadata: requester.metadata,\n        transportType,\n      });\n      const pendingRequest = {\n        requester,\n        pairingTopic: topic,\n        id: payload.id,\n        authPayload,\n        verifyContext,\n        expiryTimestamp,\n      };\n      await this.setAuthRequest(payload.id, {\n        request: pendingRequest,\n        pairingTopic: topic,\n        transportType,\n      });\n\n      if (transportType === TRANSPORT_TYPES.link_mode && requester.metadata.redirect?.universal) {\n        // save app as supported for link mode\n        this.client.core.addLinkModeSupportedApp(requester.metadata.redirect.universal);\n      }\n\n      this.client.events.emit(\"session_authenticate\", {\n        topic,\n        params: payload.params,\n        id: payload.id,\n        verifyContext,\n      });\n    } catch (err: any) {\n      this.client.logger.error(err);\n\n      const receiverPublicKey = payload.params.requester.publicKey;\n      const senderPublicKey = await this.client.core.crypto.generateKeyPair();\n      const appLink = this.getAppLinkIfEnabled(payload.params.requester.metadata, transportType);\n\n      const encodeOpts = {\n        type: TYPE_1,\n        receiverPublicKey,\n        senderPublicKey,\n      };\n      await this.sendError({\n        id: payload.id,\n        topic,\n        error: err,\n        encodeOpts,\n        rpcOpts: ENGINE_RPC_OPTS.wc_sessionAuthenticate.autoReject,\n        appLink,\n      });\n    }\n  };\n\n  private addSessionRequestToSessionRequestQueue = (request: PendingRequestTypes.Struct) => {\n    this.sessionRequestQueue.queue.push(request);\n  };\n\n  private cleanupAfterResponse = (params: EngineTypes.RespondParams) => {\n    this.deletePendingSessionRequest(params.response.id, { message: \"fulfilled\", code: 0 });\n    // intentionally delay the emitting of the next pending request a bit\n    setTimeout(() => {\n      this.sessionRequestQueue.state = ENGINE_QUEUE_STATES.idle;\n      this.processSessionRequestQueue();\n    }, toMiliseconds(this.requestQueueDelay));\n  };\n\n  // Allows for cleanup on any sent pending requests if the peer disconnects the session before responding\n  private cleanupPendingSentRequestsForTopic = ({\n    topic,\n    error,\n  }: {\n    topic: string;\n    error: ErrorResponse;\n  }) => {\n    const pendingRequests = this.client.core.history.pending;\n    if (pendingRequests.length > 0) {\n      const forSession = pendingRequests.filter(\n        (r) => r.topic === topic && r.request.method === \"wc_sessionRequest\",\n      );\n      forSession.forEach((r) => {\n        const id = r.request.id;\n        const target = engineEvent(\"session_request\", id);\n        const listeners = this.events.listenerCount(target);\n        if (listeners === 0) {\n          throw new Error(`emitting ${target} without any listeners`);\n        }\n        // notify .request() handler of the rejection\n        this.events.emit(engineEvent(\"session_request\", r.request.id), {\n          error,\n        });\n      });\n    }\n  };\n\n  private processSessionRequestQueue = () => {\n    if (this.sessionRequestQueue.state === ENGINE_QUEUE_STATES.active) {\n      this.client.logger.info(\"session request queue is already active.\");\n      return;\n    }\n    // Select the first/oldest request in the array to ensure last-in-first-out (LIFO)\n    const request = this.sessionRequestQueue.queue[0];\n    if (!request) {\n      this.client.logger.info(\"session request queue is empty.\");\n      return;\n    }\n\n    try {\n      this.sessionRequestQueue.state = ENGINE_QUEUE_STATES.active;\n      this.emitSessionRequest(request);\n    } catch (error) {\n      this.client.logger.error(error);\n    }\n  };\n\n  private emitSessionRequest = (request: PendingRequestTypes.Struct) => {\n    this.client.events.emit(\"session_request\", request);\n  };\n\n  // ---------- Expirer Events ---------------------------------------- //\n\n  private registerExpirerEvents() {\n    this.client.core.expirer.on(EXPIRER_EVENTS.expired, async (event: ExpirerTypes.Expiration) => {\n      const { topic, id } = parseExpirerTarget(event.target);\n      if (id && this.client.pendingRequest.keys.includes(id)) {\n        return await this.deletePendingSessionRequest(id, getInternalError(\"EXPIRED\"), true);\n      }\n      if (id && this.client.auth.requests.keys.includes(id)) {\n        return await this.deletePendingAuthRequest(id, getInternalError(\"EXPIRED\"), true);\n      }\n\n      if (topic) {\n        if (this.client.session.keys.includes(topic)) {\n          await this.deleteSession({ topic, expirerHasDeleted: true });\n          this.client.events.emit(\"session_expire\", { topic });\n        }\n      } else if (id) {\n        await this.deleteProposal(id, true);\n        this.client.events.emit(\"proposal_expire\", { id });\n      }\n    });\n  }\n\n  // ---------- Pairing Events ---------------------------------------- //\n  private registerPairingEvents() {\n    this.client.core.pairing.events.on(PAIRING_EVENTS.create, (pairing: PairingTypes.Struct) =>\n      this.onPairingCreated(pairing),\n    );\n    this.client.core.pairing.events.on(PAIRING_EVENTS.delete, (pairing: PairingTypes.Struct) => {\n      this.addToRecentlyDeleted(pairing.topic, \"pairing\");\n    });\n  }\n\n  /**\n   * when a pairing is created, we check if there is a pending proposal for it.\n   * if there is, we send it to onSessionProposeRequest to be processed as if it was received from the relay.\n   * It allows QR/URI to be scanned multiple times without having to create new pairing.\n   */\n  private onPairingCreated = (pairing: PairingTypes.Struct) => {\n    if (pairing.methods) {\n      this.expectedPairingMethodMap.set(pairing.topic, pairing.methods);\n    }\n    if (pairing.active) return;\n    const proposals = this.client.proposal.getAll();\n    const proposal = proposals.find((p) => p.pairingTopic === pairing.topic);\n    if (!proposal) return;\n    this.onSessionProposeRequest({\n      topic: pairing.topic,\n      payload: formatJsonRpcRequest(\n        \"wc_sessionPropose\",\n        {\n          requiredNamespaces: proposal.requiredNamespaces,\n          optionalNamespaces: proposal.optionalNamespaces,\n          relays: proposal.relays,\n          proposer: proposal.proposer,\n          sessionProperties: proposal.sessionProperties,\n        },\n        proposal.id,\n      ),\n    });\n  };\n\n  // ---------- Validation Helpers ------------------------------------ //\n  private isValidPairingTopic(topic: any) {\n    if (!isValidString(topic, false)) {\n      const { message } = getInternalError(\n        \"MISSING_OR_INVALID\",\n        `pairing topic should be a string: ${topic}`,\n      );\n      throw new Error(message);\n    }\n    if (!this.client.core.pairing.pairings.keys.includes(topic)) {\n      const { message } = getInternalError(\n        \"NO_MATCHING_KEY\",\n        `pairing topic doesn't exist: ${topic}`,\n      );\n      throw new Error(message);\n    }\n    if (isExpired(this.client.core.pairing.pairings.get(topic).expiry)) {\n      const { message } = getInternalError(\"EXPIRED\", `pairing topic: ${topic}`);\n      throw new Error(message);\n    }\n  }\n\n  private async isValidSessionTopic(topic: any) {\n    if (!isValidString(topic, false)) {\n      const { message } = getInternalError(\n        \"MISSING_OR_INVALID\",\n        `session topic should be a string: ${topic}`,\n      );\n      throw new Error(message);\n    }\n    // Store will throw custom message if topic was recently deleted\n    this.checkRecentlyDeleted(topic);\n    if (!this.client.session.keys.includes(topic)) {\n      const { message } = getInternalError(\n        \"NO_MATCHING_KEY\",\n        `session topic doesn't exist: ${topic}`,\n      );\n      throw new Error(message);\n    }\n    if (isExpired(this.client.session.get(topic).expiry)) {\n      await this.deleteSession({ topic });\n      const { message } = getInternalError(\"EXPIRED\", `session topic: ${topic}`);\n      throw new Error(message);\n    }\n\n    if (!this.client.core.crypto.keychain.has(topic)) {\n      const { message } = getInternalError(\n        \"MISSING_OR_INVALID\",\n        `session topic does not exist in keychain: ${topic}`,\n      );\n      await this.deleteSession({ topic });\n      throw new Error(message);\n    }\n  }\n\n  private async isValidSessionOrPairingTopic(topic: string) {\n    this.checkRecentlyDeleted(topic);\n    if (this.client.session.keys.includes(topic)) {\n      await this.isValidSessionTopic(topic);\n    } else if (this.client.core.pairing.pairings.keys.includes(topic)) {\n      this.isValidPairingTopic(topic);\n    } else if (!isValidString(topic, false)) {\n      const { message } = getInternalError(\n        \"MISSING_OR_INVALID\",\n        `session or pairing topic should be a string: ${topic}`,\n      );\n      throw new Error(message);\n    } else {\n      const { message } = getInternalError(\n        \"NO_MATCHING_KEY\",\n        `session or pairing topic doesn't exist: ${topic}`,\n      );\n      throw new Error(message);\n    }\n  }\n\n  private async isValidProposalId(id: any) {\n    if (!isValidId(id)) {\n      const { message } = getInternalError(\n        \"MISSING_OR_INVALID\",\n        `proposal id should be a number: ${id}`,\n      );\n      throw new Error(message);\n    }\n    if (!this.client.proposal.keys.includes(id)) {\n      const { message } = getInternalError(\"NO_MATCHING_KEY\", `proposal id doesn't exist: ${id}`);\n      throw new Error(message);\n    }\n    if (isExpired(this.client.proposal.get(id).expiryTimestamp)) {\n      await this.deleteProposal(id);\n      const { message } = getInternalError(\"EXPIRED\", `proposal id: ${id}`);\n      throw new Error(message);\n    }\n  }\n\n  // ---------- Validation  ------------------------------------------- //\n\n  private isValidConnect: EnginePrivate[\"isValidConnect\"] = async (params) => {\n    if (!isValidParams(params)) {\n      const { message } = getInternalError(\n        \"MISSING_OR_INVALID\",\n        `connect() params: ${JSON.stringify(params)}`,\n      );\n      throw new Error(message);\n    }\n    const { pairingTopic, requiredNamespaces, optionalNamespaces, sessionProperties, relays } =\n      params;\n    if (!isUndefined(pairingTopic)) await this.isValidPairingTopic(pairingTopic);\n\n    if (!isValidRelays(relays, true)) {\n      const { message } = getInternalError(\"MISSING_OR_INVALID\", `connect() relays: ${relays}`);\n      throw new Error(message);\n    }\n\n    // validate required namespaces only if they are defined\n    if (!isUndefined(requiredNamespaces) && isValidObject(requiredNamespaces) !== 0) {\n      this.validateNamespaces(requiredNamespaces, \"requiredNamespaces\");\n    }\n\n    // validate optional namespaces only if they are defined\n    if (!isUndefined(optionalNamespaces) && isValidObject(optionalNamespaces) !== 0) {\n      this.validateNamespaces(optionalNamespaces, \"optionalNamespaces\");\n    }\n\n    // validate session properties only if they are defined\n    if (!isUndefined(sessionProperties)) {\n      this.validateSessionProps(sessionProperties, \"sessionProperties\");\n    }\n  };\n\n  private validateNamespaces = (\n    namespaces: ProposalTypes.RequiredNamespaces | ProposalTypes.OptionalNamespaces,\n    type: string,\n  ) => {\n    const validRequiredNamespacesError = isValidRequiredNamespaces(namespaces, \"connect()\", type);\n    if (validRequiredNamespacesError) throw new Error(validRequiredNamespacesError.message);\n  };\n\n  private isValidApprove: EnginePrivate[\"isValidApprove\"] = async (params) => {\n    if (!isValidParams(params))\n      throw new Error(\n        getInternalError(\"MISSING_OR_INVALID\", `approve() params: ${params}`).message,\n      );\n    const { id, namespaces, relayProtocol, sessionProperties } = params;\n\n    this.checkRecentlyDeleted(id);\n    await this.isValidProposalId(id);\n    const proposal = this.client.proposal.get(id);\n    const validNamespacesError = isValidNamespaces(namespaces, \"approve()\");\n    if (validNamespacesError) throw new Error(validNamespacesError.message);\n    const conformingNamespacesError = isConformingNamespaces(\n      proposal.requiredNamespaces,\n      namespaces,\n      \"approve()\",\n    );\n    if (conformingNamespacesError) throw new Error(conformingNamespacesError.message);\n    if (!isValidString(relayProtocol, true)) {\n      const { message } = getInternalError(\n        \"MISSING_OR_INVALID\",\n        `approve() relayProtocol: ${relayProtocol}`,\n      );\n      throw new Error(message);\n    }\n\n    if (!isUndefined(sessionProperties)) {\n      this.validateSessionProps(sessionProperties, \"sessionProperties\");\n    }\n  };\n\n  private isValidReject: EnginePrivate[\"isValidReject\"] = async (params) => {\n    if (!isValidParams(params)) {\n      const { message } = getInternalError(\"MISSING_OR_INVALID\", `reject() params: ${params}`);\n      throw new Error(message);\n    }\n    const { id, reason } = params;\n    this.checkRecentlyDeleted(id);\n    await this.isValidProposalId(id);\n    if (!isValidErrorReason(reason)) {\n      const { message } = getInternalError(\n        \"MISSING_OR_INVALID\",\n        `reject() reason: ${JSON.stringify(reason)}`,\n      );\n      throw new Error(message);\n    }\n  };\n\n  private isValidSessionSettleRequest: EnginePrivate[\"isValidSessionSettleRequest\"] = (params) => {\n    if (!isValidParams(params)) {\n      const { message } = getInternalError(\n        \"MISSING_OR_INVALID\",\n        `onSessionSettleRequest() params: ${params}`,\n      );\n      throw new Error(message);\n    }\n    const { relay, controller, namespaces, expiry } = params;\n    if (!isValidRelay(relay)) {\n      const { message } = getInternalError(\n        \"MISSING_OR_INVALID\",\n        `onSessionSettleRequest() relay protocol should be a string`,\n      );\n      throw new Error(message);\n    }\n    const validControllerError = isValidController(controller, \"onSessionSettleRequest()\");\n    if (validControllerError) throw new Error(validControllerError.message);\n    const validNamespacesError = isValidNamespaces(namespaces, \"onSessionSettleRequest()\");\n    if (validNamespacesError) throw new Error(validNamespacesError.message);\n    if (isExpired(expiry)) {\n      const { message } = getInternalError(\"EXPIRED\", `onSessionSettleRequest()`);\n      throw new Error(message);\n    }\n  };\n\n  private isValidUpdate: EnginePrivate[\"isValidUpdate\"] = async (params) => {\n    if (!isValidParams(params)) {\n      const { message } = getInternalError(\"MISSING_OR_INVALID\", `update() params: ${params}`);\n      throw new Error(message);\n    }\n    const { topic, namespaces } = params;\n\n    this.checkRecentlyDeleted(topic);\n    await this.isValidSessionTopic(topic);\n    const session = this.client.session.get(topic);\n    const validNamespacesError = isValidNamespaces(namespaces, \"update()\");\n    if (validNamespacesError) throw new Error(validNamespacesError.message);\n    const conformingNamespacesError = isConformingNamespaces(\n      session.requiredNamespaces,\n      namespaces,\n      \"update()\",\n    );\n    if (conformingNamespacesError) throw new Error(conformingNamespacesError.message);\n    // TODO(ilja) - check if wallet\n  };\n\n  private isValidExtend: EnginePrivate[\"isValidExtend\"] = async (params) => {\n    if (!isValidParams(params)) {\n      const { message } = getInternalError(\"MISSING_OR_INVALID\", `extend() params: ${params}`);\n      throw new Error(message);\n    }\n    const { topic } = params;\n\n    this.checkRecentlyDeleted(topic);\n    await this.isValidSessionTopic(topic);\n  };\n\n  private isValidRequest: EnginePrivate[\"isValidRequest\"] = async (params) => {\n    if (!isValidParams(params)) {\n      const { message } = getInternalError(\"MISSING_OR_INVALID\", `request() params: ${params}`);\n      throw new Error(message);\n    }\n    const { topic, request, chainId, expiry } = params;\n    this.checkRecentlyDeleted(topic);\n    await this.isValidSessionTopic(topic);\n    const { namespaces } = this.client.session.get(topic);\n    if (!isValidNamespacesChainId(namespaces, chainId)) {\n      const { message } = getInternalError(\"MISSING_OR_INVALID\", `request() chainId: ${chainId}`);\n      throw new Error(message);\n    }\n    if (!isValidRequest(request)) {\n      const { message } = getInternalError(\n        \"MISSING_OR_INVALID\",\n        `request() ${JSON.stringify(request)}`,\n      );\n      throw new Error(message);\n    }\n    if (!isValidNamespacesRequest(namespaces, chainId, request.method)) {\n      const { message } = getInternalError(\n        \"MISSING_OR_INVALID\",\n        `request() method: ${request.method}`,\n      );\n      throw new Error(message);\n    }\n    if (expiry && !isValidRequestExpiry(expiry, SESSION_REQUEST_EXPIRY_BOUNDARIES)) {\n      const { message } = getInternalError(\n        \"MISSING_OR_INVALID\",\n        `request() expiry: ${expiry}. Expiry must be a number (in seconds) between ${SESSION_REQUEST_EXPIRY_BOUNDARIES.min} and ${SESSION_REQUEST_EXPIRY_BOUNDARIES.max}`,\n      );\n      throw new Error(message);\n    }\n  };\n\n  private isValidRespond: EnginePrivate[\"isValidRespond\"] = async (params) => {\n    if (!isValidParams(params)) {\n      const { message } = getInternalError(\"MISSING_OR_INVALID\", `respond() params: ${params}`);\n      throw new Error(message);\n    }\n    const { topic, response } = params;\n    try {\n      // if the session is already disconnected, we can't respond to the request so we need to delete it\n      await this.isValidSessionTopic(topic);\n    } catch (error) {\n      if (params?.response?.id) this.cleanupAfterResponse(params);\n      throw error;\n    }\n    if (!isValidResponse(response)) {\n      const { message } = getInternalError(\n        \"MISSING_OR_INVALID\",\n        `respond() response: ${JSON.stringify(response)}`,\n      );\n      throw new Error(message);\n    }\n  };\n\n  private isValidPing: EnginePrivate[\"isValidPing\"] = async (params) => {\n    if (!isValidParams(params)) {\n      const { message } = getInternalError(\"MISSING_OR_INVALID\", `ping() params: ${params}`);\n      throw new Error(message);\n    }\n    const { topic } = params;\n    await this.isValidSessionOrPairingTopic(topic);\n  };\n\n  private isValidEmit: EnginePrivate[\"isValidEmit\"] = async (params) => {\n    if (!isValidParams(params)) {\n      const { message } = getInternalError(\"MISSING_OR_INVALID\", `emit() params: ${params}`);\n      throw new Error(message);\n    }\n    const { topic, event, chainId } = params;\n    await this.isValidSessionTopic(topic);\n    const { namespaces } = this.client.session.get(topic);\n    if (!isValidNamespacesChainId(namespaces, chainId)) {\n      const { message } = getInternalError(\"MISSING_OR_INVALID\", `emit() chainId: ${chainId}`);\n      throw new Error(message);\n    }\n    if (!isValidEvent(event)) {\n      const { message } = getInternalError(\n        \"MISSING_OR_INVALID\",\n        `emit() event: ${JSON.stringify(event)}`,\n      );\n      throw new Error(message);\n    }\n    if (!isValidNamespacesEvent(namespaces, chainId, event.name)) {\n      const { message } = getInternalError(\n        \"MISSING_OR_INVALID\",\n        `emit() event: ${JSON.stringify(event)}`,\n      );\n      throw new Error(message);\n    }\n  };\n\n  private isValidDisconnect: EnginePrivate[\"isValidDisconnect\"] = async (params) => {\n    if (!isValidParams(params)) {\n      const { message } = getInternalError(\"MISSING_OR_INVALID\", `disconnect() params: ${params}`);\n      throw new Error(message);\n    }\n    const { topic } = params;\n    await this.isValidSessionOrPairingTopic(topic);\n  };\n\n  private isValidAuthenticate = (params: AuthTypes.SessionAuthenticateParams) => {\n    const { chains, uri, domain, nonce } = params;\n\n    // ----- validate params ----- //\n    if (!Array.isArray(chains) || chains.length === 0) {\n      throw new Error(\"chains is required and must be a non-empty array\");\n    }\n    if (!isValidString(uri, false)) {\n      throw new Error(\"uri is required parameter\");\n    }\n    if (!isValidString(domain, false)) {\n      throw new Error(\"domain is required parameter\");\n    }\n    if (!isValidString(nonce, false)) {\n      throw new Error(\"nonce is required parameter\");\n    }\n\n    // ----- reject multi namespaces ----- //\n    const uniqueNamespaces = [...new Set(chains.map((chain) => parseChainId(chain).namespace))];\n    if (uniqueNamespaces.length > 1) {\n      throw new Error(\n        \"Multi-namespace requests are not supported. Please request single namespace only.\",\n      );\n    }\n\n    const { namespace } = parseChainId(chains[0]);\n    if (namespace !== \"eip155\") {\n      throw new Error(\n        \"Only eip155 namespace is supported for authenticated sessions. Please use .connect() for non-eip155 chains.\",\n      );\n    }\n  };\n\n  private getVerifyContext = async (params: {\n    attestationId?: string;\n    hash?: string;\n    encryptedId?: string;\n    metadata: CoreTypes.Metadata;\n    transportType?: RelayerTypes.TransportType;\n  }) => {\n    const { attestationId, hash, encryptedId, metadata, transportType } = params;\n    const context: Verify.Context = {\n      verified: {\n        verifyUrl: metadata.verifyUrl || VERIFY_SERVER,\n        validation: \"UNKNOWN\",\n        origin: metadata.url || \"\",\n      },\n    };\n\n    try {\n      if (transportType === TRANSPORT_TYPES.link_mode) {\n        const applink = this.getAppLinkIfEnabled(metadata, transportType);\n        context.verified.validation =\n          applink && new URL(applink).origin === new URL(metadata.url).origin ? \"VALID\" : \"INVALID\";\n        return context;\n      }\n      const result = await this.client.core.verify.resolve({\n        attestationId,\n        hash,\n        encryptedId,\n        verifyUrl: metadata.verifyUrl,\n      });\n      if (result) {\n        context.verified.origin = result.origin;\n        context.verified.isScam = result.isScam;\n        context.verified.validation =\n          result.origin === new URL(metadata.url).origin ? \"VALID\" : \"INVALID\";\n      }\n    } catch (e) {\n      this.client.logger.warn(e);\n    }\n\n    this.client.logger.debug(`Verify context: ${JSON.stringify(context)}`);\n    return context;\n  };\n\n  private validateSessionProps = (properties: ProposalTypes.SessionProperties, type: string) => {\n    Object.values(properties).forEach((property) => {\n      if (!isValidString(property, false)) {\n        const { message } = getInternalError(\n          \"MISSING_OR_INVALID\",\n          `${type} must be in Record<string, string> format. Received: ${JSON.stringify(property)}`,\n        );\n        throw new Error(message);\n      }\n    });\n  };\n\n  private getPendingAuthRequest = (id: number) => {\n    const request = this.client.auth.requests.get(id);\n    return typeof request === \"object\" ? request : undefined;\n  };\n\n  private addToRecentlyDeleted = (\n    id: string | number,\n    type: \"pairing\" | \"session\" | \"proposal\" | \"request\",\n  ) => {\n    this.recentlyDeletedMap.set(id, type);\n    // remove first half of the map if it exceeds the limit\n    if (this.recentlyDeletedMap.size >= this.recentlyDeletedLimit) {\n      let i = 0;\n      const numItemsToDelete = this.recentlyDeletedLimit / 2;\n      for (const k of this.recentlyDeletedMap.keys()) {\n        if (i++ >= numItemsToDelete) {\n          break;\n        }\n        this.recentlyDeletedMap.delete(k);\n      }\n    }\n  };\n\n  private checkRecentlyDeleted = (id: string | number) => {\n    const deletedRecord = this.recentlyDeletedMap.get(id);\n    if (deletedRecord) {\n      const { message } = getInternalError(\n        \"MISSING_OR_INVALID\",\n        `Record was recently deleted - ${deletedRecord}: ${id}`,\n      );\n      throw new Error(message);\n    }\n  };\n\n  private isLinkModeEnabled = (\n    peerMetadata?: CoreTypes.Metadata,\n    transportType?: RelayerTypes.TransportType,\n  ): boolean => {\n    if (!peerMetadata || transportType !== TRANSPORT_TYPES.link_mode) return false;\n\n    return (\n      this.client.metadata?.redirect?.linkMode === true &&\n      this.client.metadata?.redirect?.universal !== undefined &&\n      this.client.metadata?.redirect?.universal !== \"\" &&\n      peerMetadata?.redirect?.universal !== undefined &&\n      peerMetadata?.redirect?.universal !== \"\" &&\n      peerMetadata?.redirect?.linkMode === true &&\n      this.client.core.linkModeSupportedApps.includes(peerMetadata.redirect.universal) &&\n      typeof (global as any)?.Linking !== \"undefined\"\n    );\n  };\n\n  private getAppLinkIfEnabled = (\n    peerMetadata?: CoreTypes.Metadata,\n    transportType?: RelayerTypes.TransportType,\n  ): string | undefined => {\n    return this.isLinkModeEnabled(peerMetadata, transportType)\n      ? peerMetadata?.redirect?.universal\n      : undefined;\n  };\n\n  private handleLinkModeMessage = ({ url }: { url: string }) => {\n    if (!url || !url.includes(\"wc_ev\") || !url.includes(\"topic\")) return;\n\n    const topic = getSearchParamFromURL(url, \"topic\") || \"\";\n    const message = decodeURIComponent(getSearchParamFromURL(url, \"wc_ev\") || \"\");\n\n    const sessionExists = this.client.session.keys.includes(topic);\n\n    if (sessionExists) {\n      this.client.session.update(topic, { transportType: TRANSPORT_TYPES.link_mode });\n    }\n\n    this.client.core.dispatchEnvelope({ topic, message, sessionExists });\n  };\n\n  private registerLinkModeListeners = async () => {\n    if (\n      (typeof process !== \"undefined\" && process.env.IS_VITEST) ||\n      (isReactNative() && this.client.metadata.redirect?.linkMode)\n    ) {\n      const linking = (global as any)?.Linking;\n      // global.Linking is set by react-native-compat\n      if (typeof linking !== \"undefined\") {\n        // set URL listener\n        linking.addEventListener(\"url\", this.handleLinkModeMessage, this.client.name);\n\n        // check for initial URL -> cold boots\n        const initialUrl = await linking.getInitialURL();\n        if (initialUrl) {\n          // wait to process the message to allow event listeners to be registered by the implementing app\n          setTimeout(() => {\n            this.handleLinkModeMessage({ url: initialUrl });\n          }, 50);\n        }\n      }\n    }\n  };\n}\n","import { Store } from \"@walletconnect/core\";\nimport { Logger } from \"@walletconnect/logger\";\nimport { ICore, ProposalTypes } from \"@walletconnect/types\";\n\nimport { SIGN_CLIENT_STORAGE_PREFIX, PROPOSAL_CONTEXT } from \"../constants\";\n\nexport class Proposal extends Store<number, ProposalTypes.Struct> {\n  constructor(public core: ICore, public logger: Logger) {\n    super(core, logger, PROPOSAL_CONTEXT, SIGN_CLIENT_STORAGE_PREFIX);\n  }\n}\n","import { Store } from \"@walletconnect/core\";\nimport { Logger } from \"@walletconnect/logger\";\nimport { ICore, SessionTypes } from \"@walletconnect/types\";\n\nimport { SIGN_CLIENT_STORAGE_PREFIX, SESSION_CONTEXT } from \"../constants\";\n\nexport class Session extends Store<string, SessionTypes.Struct> {\n  constructor(public core: ICore, public logger: Logger) {\n    super(core, logger, SESSION_CONTEXT, SIGN_CLIENT_STORAGE_PREFIX);\n  }\n}\n","import { Store } from \"@walletconnect/core\";\nimport { Logger } from \"@walletconnect/logger\";\nimport { ICore, PendingRequestTypes } from \"@walletconnect/types\";\nimport { REQUEST_CONTEXT, SIGN_CLIENT_STORAGE_PREFIX } from \"../constants\";\n\nexport class PendingRequest extends Store<number, PendingRequestTypes.Struct> {\n  constructor(public core: ICore, public logger: Logger) {\n    super(\n      core,\n      logger,\n      REQUEST_CONTEXT,\n      SIGN_CLIENT_STORAGE_PREFIX,\n      (val: PendingRequestTypes.Struct) => val.id,\n    );\n  }\n}\n","import { Store } from \"@walletconnect/core\";\nimport { Logger } from \"@walletconnect/logger\";\nimport { ICore } from \"@walletconnect/types\";\n\nimport { AUTH_KEYS_CONTEXT, AUTH_STORAGE_PREFIX, AUTH_PUBLIC_KEY_NAME } from \"../constants\";\n\nexport class AuthKey extends Store<string, { responseTopic: string; publicKey: string }> {\n  constructor(public core: ICore, public logger: Logger) {\n    super(core, logger, AUTH_KEYS_CONTEXT, AUTH_STORAGE_PREFIX, () => AUTH_PUBLIC_KEY_NAME);\n  }\n}\n","import { Store } from \"@walletconnect/core\";\nimport { Logger } from \"@walletconnect/logger\";\nimport { ICore } from \"@walletconnect/types\";\n\nimport { AUTH_PAIRING_TOPIC_CONTEXT, AUTH_STORAGE_PREFIX } from \"../constants\";\n\nexport class AuthPairingTopic extends Store<string, { topic: string; pairingTopic: string }> {\n  constructor(public core: ICore, public logger: Logger) {\n    super(core, logger, AUTH_PAIRING_TOPIC_CONTEXT, AUTH_STORAGE_PREFIX);\n  }\n}\n","import { Store } from \"@walletconnect/core\";\nimport { Logger } from \"@walletconnect/logger\";\nimport { AuthTypes, ICore } from \"@walletconnect/types\";\n\nimport { AUTH_STORAGE_PREFIX, AUTH_REQUEST_CONTEXT } from \"../constants\";\n\nexport class AuthRequest extends Store<number, AuthTypes.PendingRequest> {\n  constructor(public core: ICore, public logger: Logger) {\n    super(\n      core,\n      logger,\n      AUTH_REQUEST_CONTEXT,\n      AUTH_STORAGE_PREFIX,\n      (val: AuthTypes.PendingRequest) => val.id,\n    );\n  }\n}\n","import { Logger } from \"@walletconnect/logger\";\nimport { IAuth, ICore } from \"@walletconnect/types\";\nimport { AuthPairingTopic } from \"./authPairingTopic\";\nimport { AuthRequest } from \"./authRequest\";\nimport { AuthKey } from \"./authKey\";\n\nexport class AuthStore {\n  public authKeys: IAuth[\"authKeys\"];\n  public pairingTopics: IAuth[\"pairingTopics\"];\n  public requests: IAuth[\"requests\"];\n\n  constructor(public core: ICore, public logger: Logger) {\n    this.authKeys = new AuthKey(this.core, this.logger);\n    this.pairingTopics = new AuthPairingTopic(this.core, this.logger);\n    this.requests = new AuthRequest(this.core, this.logger);\n  }\n\n  public async init() {\n    await this.authKeys.init();\n    await this.pairingTopics.init();\n    await this.requests.init();\n  }\n}\n","import { Core } from \"@walletconnect/core\";\nimport {\n  generateChildLogger,\n  getDefaultLoggerOptions,\n  getLoggerContext,\n  pino,\n} from \"@walletconnect/logger\";\nimport { SignClientTypes, ISignClient, ISignClientEvents, EngineTypes } from \"@walletconnect/types\";\nimport { getAppMetadata } from \"@walletconnect/utils\";\nimport { EventEmitter } from \"events\";\nimport { SIGN_CLIENT_DEFAULT, SIGN_CLIENT_PROTOCOL, SIGN_CLIENT_VERSION } from \"./constants\";\nimport { AuthStore, Engine, PendingRequest, Proposal, Session } from \"./controllers\";\n\nexport class SignClient extends ISignClient {\n  public readonly protocol = SIGN_CLIENT_PROTOCOL;\n  public readonly version = SIGN_CLIENT_VERSION;\n  public readonly name: ISignClient[\"name\"] = SIGN_CLIENT_DEFAULT.name;\n  public readonly metadata: ISignClient[\"metadata\"];\n\n  public core: ISignClient[\"core\"];\n  public logger: ISignClient[\"logger\"];\n  public events: ISignClient[\"events\"] = new EventEmitter();\n  public engine: ISignClient[\"engine\"];\n  public session: ISignClient[\"session\"];\n  public proposal: ISignClient[\"proposal\"];\n  public pendingRequest: ISignClient[\"pendingRequest\"];\n  public auth: ISignClient[\"auth\"];\n  public signConfig?: ISignClient[\"signConfig\"];\n\n  static async init(opts?: SignClientTypes.Options) {\n    const client = new SignClient(opts);\n    await client.initialize();\n\n    return client;\n  }\n\n  constructor(opts?: SignClientTypes.Options) {\n    super(opts);\n\n    this.name = opts?.name || SIGN_CLIENT_DEFAULT.name;\n    this.metadata = opts?.metadata || getAppMetadata();\n    this.signConfig = opts?.signConfig;\n\n    const logger =\n      typeof opts?.logger !== \"undefined\" && typeof opts?.logger !== \"string\"\n        ? opts.logger\n        : pino(getDefaultLoggerOptions({ level: opts?.logger || SIGN_CLIENT_DEFAULT.logger }));\n\n    this.core = opts?.core || new Core(opts);\n    this.logger = generateChildLogger(logger, this.name);\n    this.session = new Session(this.core, this.logger);\n    this.proposal = new Proposal(this.core, this.logger);\n    this.pendingRequest = new PendingRequest(this.core, this.logger);\n    this.engine = new Engine(this);\n    this.auth = new AuthStore(this.core, this.logger);\n  }\n\n  get context() {\n    return getLoggerContext(this.logger);\n  }\n\n  get pairing() {\n    return this.core.pairing.pairings;\n  }\n\n  // ---------- Events ----------------------------------------------- //\n\n  public on: ISignClientEvents[\"on\"] = (name, listener) => {\n    return this.events.on(name, listener);\n  };\n\n  public once: ISignClientEvents[\"once\"] = (name, listener) => {\n    return this.events.once(name, listener);\n  };\n\n  public off: ISignClientEvents[\"off\"] = (name, listener) => {\n    return this.events.off(name, listener);\n  };\n\n  public removeListener: ISignClientEvents[\"removeListener\"] = (name, listener) => {\n    return this.events.removeListener(name, listener);\n  };\n\n  public removeAllListeners: ISignClientEvents[\"removeAllListeners\"] = (name) => {\n    return this.events.removeAllListeners(name);\n  };\n\n  // ---------- Engine ----------------------------------------------- //\n\n  public connect: ISignClient[\"connect\"] = async (params) => {\n    try {\n      return await this.engine.connect(params);\n    } catch (error: any) {\n      this.logger.error(error.message);\n      throw error;\n    }\n  };\n\n  public pair: ISignClient[\"pair\"] = async (params) => {\n    try {\n      return await this.engine.pair(params);\n    } catch (error: any) {\n      this.logger.error(error.message);\n      throw error;\n    }\n  };\n\n  public approve: ISignClient[\"approve\"] = async (params) => {\n    try {\n      return await this.engine.approve(params);\n    } catch (error: any) {\n      this.logger.error(error.message);\n      throw error;\n    }\n  };\n\n  public reject: ISignClient[\"reject\"] = async (params) => {\n    try {\n      return await this.engine.reject(params);\n    } catch (error: any) {\n      this.logger.error(error.message);\n      throw error;\n    }\n  };\n\n  public update: ISignClient[\"update\"] = async (params) => {\n    try {\n      return await this.engine.update(params);\n    } catch (error: any) {\n      this.logger.error(error.message);\n      throw error;\n    }\n  };\n\n  public extend: ISignClient[\"extend\"] = async (params) => {\n    try {\n      return await this.engine.extend(params);\n    } catch (error: any) {\n      this.logger.error(error.message);\n      throw error;\n    }\n  };\n\n  public request: ISignClient[\"request\"] = async <T>(params: EngineTypes.RequestParams) => {\n    try {\n      return await this.engine.request<T>(params);\n    } catch (error: any) {\n      this.logger.error(error.message);\n      throw error;\n    }\n  };\n\n  public respond: ISignClient[\"respond\"] = async (params) => {\n    try {\n      return await this.engine.respond(params);\n    } catch (error: any) {\n      this.logger.error(error.message);\n      throw error;\n    }\n  };\n\n  public ping: ISignClient[\"ping\"] = async (params) => {\n    try {\n      return await this.engine.ping(params);\n    } catch (error: any) {\n      this.logger.error(error.message);\n      throw error;\n    }\n  };\n\n  public emit: ISignClient[\"emit\"] = async (params) => {\n    try {\n      return await this.engine.emit(params);\n    } catch (error: any) {\n      this.logger.error(error.message);\n      throw error;\n    }\n  };\n\n  public disconnect: ISignClient[\"disconnect\"] = async (params) => {\n    try {\n      return await this.engine.disconnect(params);\n    } catch (error: any) {\n      this.logger.error(error.message);\n      throw error;\n    }\n  };\n\n  public find: ISignClient[\"find\"] = (params) => {\n    try {\n      return this.engine.find(params);\n    } catch (error: any) {\n      this.logger.error(error.message);\n      throw error;\n    }\n  };\n\n  public getPendingSessionRequests: ISignClient[\"getPendingSessionRequests\"] = () => {\n    try {\n      return this.engine.getPendingSessionRequests();\n    } catch (error: any) {\n      this.logger.error(error.message);\n      throw error;\n    }\n  };\n\n  public authenticate: ISignClient[\"authenticate\"] = async (params, walletUniversalLink) => {\n    try {\n      return await this.engine.authenticate(params, walletUniversalLink);\n    } catch (error: any) {\n      this.logger.error(error.message);\n      throw error;\n    }\n  };\n\n  public formatAuthMessage: ISignClient[\"formatAuthMessage\"] = (params) => {\n    try {\n      return this.engine.formatAuthMessage(params);\n    } catch (error: any) {\n      this.logger.error(error.message);\n      throw error;\n    }\n  };\n\n  public approveSessionAuthenticate: ISignClient[\"approveSessionAuthenticate\"] = async (params) => {\n    try {\n      return await this.engine.approveSessionAuthenticate(params);\n    } catch (error: any) {\n      this.logger.error(error.message);\n      throw error;\n    }\n  };\n\n  public rejectSessionAuthenticate: ISignClient[\"rejectSessionAuthenticate\"] = async (params) => {\n    try {\n      return await this.engine.rejectSessionAuthenticate(params);\n    } catch (error: any) {\n      this.logger.error(error.message);\n      throw error;\n    }\n  };\n\n  // ---------- Private ----------------------------------------------- //\n\n  private async initialize() {\n    this.logger.trace(`Initialized`);\n    try {\n      await this.core.start();\n      await this.session.init();\n      await this.proposal.init();\n      await this.pendingRequest.init();\n      await this.auth.init();\n      await this.engine.init();\n      this.logger.info(`SignClient Initialization Success`);\n      this.engine.processRelayMessageCache();\n    } catch (error: any) {\n      this.logger.info(`SignClient Initialization Failure`);\n      this.logger.error(error.message);\n      throw error;\n    }\n  }\n}\n","import { SignClient as Client } from \"./client\";\nimport { Session } from \"./controllers/session\";\nexport * from \"./constants\";\n\nexport const SessionStore = Session;\nexport const SignClient = Client;\nexport default Client;\n"],"names":["THIRTY_DAYS","SEVEN_DAYS","FIVE_MINUTES","ONE_DAY","ONE_HOUR","IEngine","client","ENGINE_CONTEXT","EventEmmiter","ENGINE_QUEUE_STATES","ONE_SECOND","ENGINE_RPC_OPTS","toMiliseconds","params","connectParams","__spreadProps","__spreadValues","pairingTopic","requiredNamespaces","optionalNamespaces","sessionProperties","relays","topic","uri","active","error","newTopic","newUri","message","getInternalError","publicKey","expiry","expiryTimestamp","calcExpiry","proposal","RELAYER_DEFAULT_PROTOCOL","reject","resolve","approval","createDelayedPromise","PROPOSAL_EXPIRY_MESSAGE","engineEvent","session","completeSession","TRANSPORT_TYPES","id","_a","_b","_c","configEvent","EVENT_CLIENT_SESSION_TRACES","EVENT_CLIENT_SESSION_ERRORS","relayProtocol","namespaces","sessionConfig","proposer","event","selfPublicKey","peerPublicKey","sessionTopic","sessionSettle","SESSION_EXPIRY","transportType","getSdkError","reason","acknowledged","clientRpcId","payloadId","relayRpcId","getBigIntRpcId","oldNamespaces","e","chainId","request","done","result","appLink","wcDeepLink","getDeepLink","WALLETCONNECT_DEEPLINK_CHOICE","handleDeeplinkRedirect","response","isJsonRpcResult","isJsonRpcError","isSessionCompatible","walletUniversalLink","isLinkMode","chains","statement","domain","nonce","type","exp","nbf","methods","resources","connectionUri","responseTopic","hashKey","AUTH_PUBLIC_KEY_NAME","namespace","parseChainId","recap","createEncodedRecap","getRecapFromResources","mergeEncodedRecaps","authRequestExpiry","onSessionConnect","onAuthenticate","sessionObject","fallbackId","payload","cacaos","responder","approvedMethods","approvedAccounts","cacao","validateSignedCacao","approvedChains","getNamespacedDidChainId","parsedAddress","getDidAddress","methodsfromRecap","getMethodsFromRecap","chainsFromRecap","getChainsFromRecap","chain","buildNamespacesFromAuth","linkModeURL","formatJsonRpcRequest","TYPE_2","BASE64URL","getLinkModeURL","sessionAuthenticateResponseParams","auths","EVENT_CLIENT_AUTHENTICATE_TRACES","EVENT_CLIENT_AUTHENTICATE_ERRORS","pendingRequest","receiverPublicKey","senderPublicKey","encodeOpts","TYPE_1","invalidErr","iss","formatMessage","pairing","duplicates","p","expirerHasDeleted","emitEvent","self","r","verifyContext","args","method","throwOnFailedPublish","encoding","BASE64","attestation","METHODS_TO_VERIFY","decryptedId","hashMessage","opts","redirectURL","formatJsonRpcResult","record","rpcOpts","formatJsonRpcError","sessionTopics","proposalIds","toCleanup","isExpired","encryptedId","reqMethod","resMethod","requestMethod","expectedMethods","EVENT_CLIENT_PAIRING_ERRORS","EVENT_CLIENT_PAIRING_TRACES","err","subscriptionId","target","relay","controller","memoryKey","lastSessionUpdateId","MemoryStore","lastId","currentId","_topic","RELAYER_EVENTS","requester","authPayload","pendingRequests","isValidParams","isUndefined","isValidRelays","isValidObject","validRequiredNamespacesError","isValidRequiredNamespaces","validNamespacesError","isValidNamespaces","conformingNamespacesError","isConformingNamespaces","isValidString","isValidErrorReason","isValidRelay","validControllerError","isValidController","isValidNamespacesChainId","isValidRequest","isValidNamespacesRequest","isValidRequestExpiry","SESSION_REQUEST_EXPIRY_BOUNDARIES","isValidResponse","isValidEvent","isValidNamespacesEvent","attestationId","hash","metadata","context","VERIFY_SERVER","applink","properties","property","i","numItemsToDelete","k","deletedRecord","peerMetadata","_d","_e","_f","_g","_h","_i","url","getSearchParamFromURL","sessionExists","isReactNative","linking","initialUrl","isJsonRpcRequest","isJsonRpcResponse","EXPIRER_EVENTS","parseExpirerTarget","PAIRING_EVENTS","isValidId","Store","core","logger","PROPOSAL_CONTEXT","SIGN_CLIENT_STORAGE_PREFIX","SESSION_CONTEXT","REQUEST_CONTEXT","val","AUTH_KEYS_CONTEXT","AUTH_STORAGE_PREFIX","AUTH_PAIRING_TOPIC_CONTEXT","AUTH_REQUEST_CONTEXT","AuthKey","AuthPairingTopic","AuthRequest","SignClient","ISignClient","SIGN_CLIENT_PROTOCOL","SIGN_CLIENT_VERSION","SIGN_CLIENT_DEFAULT","EventEmitter","name","listener","getAppMetadata","pino","getDefaultLoggerOptions","Core","generateChildLogger","Session","Proposal","PendingRequest","Engine","AuthStore","getLoggerContext","Client"],"mappings":"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"}