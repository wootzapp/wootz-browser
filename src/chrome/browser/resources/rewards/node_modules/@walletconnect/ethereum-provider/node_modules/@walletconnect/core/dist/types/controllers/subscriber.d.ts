/// <reference types="node" />
import { EventEmitter } from "events";
import { Logger } from "@walletconnect/logger";
import { IRelayer, ISubscriber, SubscriberTypes } from "@walletconnect/types";
import { SubscriberTopicMap } from "./topicmap";
export declare class Subscriber extends ISubscriber {
    relayer: IRelayer;
    logger: Logger;
    subscriptions: Map<string, SubscriberTypes.Active>;
    topicMap: SubscriberTopicMap;
    events: EventEmitter;
    name: string;
    version: string;
    pending: Map<string, SubscriberTypes.Params>;
    private cached;
    private initialized;
    private pendingSubscriptionWatchLabel;
    private pollingInterval;
    private storagePrefix;
    private subscribeTimeout;
    private restartInProgress;
    private clientId;
    private batchSubscribeTopicsLimit;
    private pendingBatchMessages;
    constructor(relayer: IRelayer, logger: Logger);
    init: ISubscriber["init"];
    get context(): string;
    get storageKey(): string;
    get length(): number;
    get ids(): string[];
    get values(): SubscriberTypes.Active[];
    get topics(): string[];
    subscribe: ISubscriber["subscribe"];
    unsubscribe: ISubscriber["unsubscribe"];
    isSubscribed: ISubscriber["isSubscribed"];
    on: ISubscriber["on"];
    once: ISubscriber["once"];
    off: ISubscriber["off"];
    removeListener: ISubscriber["removeListener"];
    start: ISubscriber["start"];
    stop: ISubscriber["stop"];
    private hasSubscription;
    private onEnable;
    private onDisable;
    private unsubscribeByTopic;
    private unsubscribeById;
    private rpcSubscribe;
    private rpcBatchSubscribe;
    private rpcBatchFetchMessages;
    private rpcUnsubscribe;
    private onSubscribe;
    private onBatchSubscribe;
    private onUnsubscribe;
    private setRelayerSubscriptions;
    private getRelayerSubscriptions;
    private setSubscription;
    private addSubscription;
    private getSubscription;
    private deleteSubscription;
    private restart;
    private persist;
    private reset;
    private restore;
    private batchSubscribe;
    private batchFetchMessages;
    private onConnect;
    private onDisconnect;
    private checkPending;
    private registerEventListeners;
    private isInitialized;
    private restartToComplete;
}
//# sourceMappingURL=subscriber.d.ts.map