{"version":3,"file":"index.cjs.js","sources":["../src/constants/client.ts","../src/constants/history.ts","../src/constants/proposal.ts","../src/constants/session.ts","../src/constants/engine.ts","../src/constants/pendingRequest.ts","../src/constants/verify.ts","../src/constants/auth.ts","../src/controllers/engine.ts","../src/controllers/proposal.ts","../src/controllers/session.ts","../src/controllers/pendingRequest.ts","../src/controllers/authKey.ts","../src/controllers/authPairingTopic.ts","../src/controllers/authRequest.ts","../src/controllers/authStore.ts","../src/client.ts","../src/index.ts"],"sourcesContent":["import { SignClientTypes } from \"@walletconnect/types\";\n\nexport const SIGN_CLIENT_PROTOCOL = \"wc\";\nexport const SIGN_CLIENT_VERSION = 2;\nexport const SIGN_CLIENT_CONTEXT = \"client\";\n\nexport const SIGN_CLIENT_STORAGE_PREFIX = `${SIGN_CLIENT_PROTOCOL}@${SIGN_CLIENT_VERSION}:${SIGN_CLIENT_CONTEXT}:`;\n\nexport const SIGN_CLIENT_DEFAULT = {\n  name: SIGN_CLIENT_CONTEXT,\n  logger: \"error\",\n  controller: false,\n  relayUrl: \"wss://relay.walletconnect.com\",\n};\n\nexport const SIGN_CLIENT_EVENTS: Record<SignClientTypes.Event, SignClientTypes.Event> = {\n  session_proposal: \"session_proposal\",\n  session_update: \"session_update\",\n  session_extend: \"session_extend\",\n  session_ping: \"session_ping\",\n  session_delete: \"session_delete\",\n  session_expire: \"session_expire\",\n  session_request: \"session_request\",\n  session_request_sent: \"session_request_sent\",\n  session_event: \"session_event\",\n  proposal_expire: \"proposal_expire\",\n  session_authenticate: \"session_authenticate\",\n  session_request_expire: \"session_request_expire\",\n};\n\nexport const SIGN_CLIENT_STORAGE_OPTIONS = {\n  database: \":memory:\",\n};\n\nexport const WALLETCONNECT_DEEPLINK_CHOICE = \"WALLETCONNECT_DEEPLINK_CHOICE\";\n","export const HISTORY_EVENTS = {\n  created: \"history_created\",\n  updated: \"history_updated\",\n  deleted: \"history_deleted\",\n  sync: \"history_sync\",\n};\n\nexport const HISTORY_CONTEXT = \"history\";\n\nexport const HISTORY_STORAGE_VERSION = \"0.3\";\n","import { THIRTY_DAYS } from \"@walletconnect/time\";\n\nexport const PROPOSAL_CONTEXT = \"proposal\";\n\nexport const PROPOSAL_EXPIRY = THIRTY_DAYS;\n\nexport const PROPOSAL_EXPIRY_MESSAGE = \"Proposal expired\";\n","import { SEVEN_DAYS } from \"@walletconnect/time\";\n\nexport const SESSION_CONTEXT = \"session\";\n\nexport const SESSION_EXPIRY = SEVEN_DAYS;\n","import { FIVE_MINUTES, ONE_DAY, ONE_HOUR, SEVEN_DAYS } from \"@walletconnect/time\";\nimport { EngineTypes } from \"@walletconnect/types\";\n\nexport const ENGINE_CONTEXT = \"engine\";\n\nexport const ENGINE_RPC_OPTS: EngineTypes.RpcOptsMap = {\n  wc_sessionPropose: {\n    req: {\n      ttl: FIVE_MINUTES,\n      prompt: true,\n      tag: 1100,\n    },\n    res: {\n      ttl: FIVE_MINUTES,\n      prompt: false,\n      tag: 1101,\n    },\n    reject: {\n      ttl: FIVE_MINUTES,\n      prompt: false,\n      tag: 1120,\n    },\n    autoReject: {\n      ttl: FIVE_MINUTES,\n      prompt: false,\n      tag: 1121,\n    },\n  },\n  wc_sessionSettle: {\n    req: {\n      ttl: FIVE_MINUTES,\n      prompt: false,\n      tag: 1102,\n    },\n    res: {\n      ttl: FIVE_MINUTES,\n      prompt: false,\n      tag: 1103,\n    },\n  },\n  wc_sessionUpdate: {\n    req: {\n      ttl: ONE_DAY,\n      prompt: false,\n      tag: 1104,\n    },\n    res: {\n      ttl: ONE_DAY,\n      prompt: false,\n      tag: 1105,\n    },\n  },\n  wc_sessionExtend: {\n    req: {\n      ttl: ONE_DAY,\n      prompt: false,\n      tag: 1106,\n    },\n    res: {\n      ttl: ONE_DAY,\n      prompt: false,\n      tag: 1107,\n    },\n  },\n  wc_sessionRequest: {\n    req: {\n      ttl: FIVE_MINUTES,\n      prompt: true,\n      tag: 1108,\n    },\n    res: {\n      ttl: FIVE_MINUTES,\n      prompt: false,\n      tag: 1109,\n    },\n  },\n  wc_sessionEvent: {\n    req: {\n      ttl: FIVE_MINUTES,\n      prompt: true,\n      tag: 1110,\n    },\n    res: {\n      ttl: FIVE_MINUTES,\n      prompt: false,\n      tag: 1111,\n    },\n  },\n\n  wc_sessionDelete: {\n    req: {\n      ttl: ONE_DAY,\n      prompt: false,\n      tag: 1112,\n    },\n    res: {\n      ttl: ONE_DAY,\n      prompt: false,\n      tag: 1113,\n    },\n  },\n  wc_sessionPing: {\n    req: {\n      ttl: ONE_DAY,\n      prompt: false,\n      tag: 1114,\n    },\n    res: {\n      ttl: ONE_DAY,\n      prompt: false,\n      tag: 1115,\n    },\n  },\n  wc_sessionAuthenticate: {\n    req: {\n      ttl: ONE_HOUR,\n      prompt: true,\n      tag: 1116,\n    },\n    res: {\n      ttl: ONE_HOUR,\n      prompt: false,\n      tag: 1117,\n    },\n    reject: {\n      ttl: FIVE_MINUTES,\n      prompt: false,\n      tag: 1118,\n    },\n    autoReject: {\n      ttl: FIVE_MINUTES,\n      prompt: false,\n      tag: 1119,\n    },\n  },\n};\n\nexport const SESSION_REQUEST_EXPIRY_BOUNDARIES = {\n  min: FIVE_MINUTES,\n  max: SEVEN_DAYS,\n};\n\nexport const ENGINE_QUEUE_STATES: { idle: \"IDLE\"; active: \"ACTIVE\" } = {\n  idle: \"IDLE\",\n  active: \"ACTIVE\",\n};\n","export const REQUEST_CONTEXT = \"request\";\n","export const METHODS_TO_VERIFY = [\n  \"wc_sessionPropose\",\n  \"wc_sessionRequest\",\n  \"wc_authRequest\",\n  \"wc_sessionAuthenticate\",\n];\n","export const AUTH_PROTOCOL = \"wc\";\nexport const AUTH_VERSION = 1.5;\nexport const AUTH_CONTEXT = \"auth\";\nexport const AUTH_KEYS_CONTEXT = \"authKeys\";\nexport const AUTH_PAIRING_TOPIC_CONTEXT = \"pairingTopics\";\nexport const AUTH_REQUEST_CONTEXT = \"requests\";\n\nexport const AUTH_STORAGE_PREFIX = `${AUTH_PROTOCOL}@${AUTH_VERSION}:${AUTH_CONTEXT}:`;\nexport const AUTH_PUBLIC_KEY_NAME = `${AUTH_STORAGE_PREFIX}:PUB_KEY`;\n","import {\n  EVENT_CLIENT_AUTHENTICATE_ERRORS,\n  EVENT_CLIENT_AUTHENTICATE_TRACES,\n  EVENT_CLIENT_PAIRING_ERRORS,\n  EVENT_CLIENT_PAIRING_TRACES,\n  EVENT_CLIENT_SESSION_ERRORS,\n  EVENT_CLIENT_SESSION_TRACES,\n  EXPIRER_EVENTS,\n  PAIRING_EVENTS,\n  RELAYER_DEFAULT_PROTOCOL,\n  RELAYER_EVENTS,\n  VERIFY_SERVER,\n} from \"@walletconnect/core\";\n\nimport {\n  formatJsonRpcError,\n  formatJsonRpcRequest,\n  formatJsonRpcResult,\n  payloadId,\n  isJsonRpcError,\n  isJsonRpcRequest,\n  isJsonRpcResponse,\n  isJsonRpcResult,\n  JsonRpcRequest,\n  ErrorResponse,\n  getBigIntRpcId,\n} from \"@walletconnect/jsonrpc-utils\";\nimport { FIVE_MINUTES, ONE_SECOND, toMiliseconds } from \"@walletconnect/time\";\nimport {\n  EnginePrivate,\n  EngineTypes,\n  ExpirerTypes,\n  IEngine,\n  IEngineEvents,\n  JsonRpcTypes,\n  PendingRequestTypes,\n  Verify,\n  CoreTypes,\n  ProposalTypes,\n  RelayerTypes,\n  SessionTypes,\n  PairingTypes,\n  AuthTypes,\n  EventClientTypes,\n} from \"@walletconnect/types\";\nimport {\n  calcExpiry,\n  createDelayedPromise,\n  engineEvent,\n  getInternalError,\n  getSdkError,\n  isConformingNamespaces,\n  isExpired,\n  isSessionCompatible,\n  isUndefined,\n  isValidController,\n  isValidErrorReason,\n  isValidEvent,\n  isValidId,\n  isValidNamespaces,\n  isValidNamespacesChainId,\n  isValidNamespacesEvent,\n  isValidNamespacesRequest,\n  isValidObject,\n  isValidParams,\n  isValidRelay,\n  isValidRelays,\n  isValidRequest,\n  isValidRequestExpiry,\n  hashMessage,\n  isValidRequiredNamespaces,\n  isValidResponse,\n  isValidString,\n  parseExpirerTarget,\n  TYPE_1,\n  handleDeeplinkRedirect,\n  MemoryStore,\n  getDeepLink,\n  hashKey,\n  getDidAddress,\n  formatMessage,\n  getMethodsFromRecap,\n  buildNamespacesFromAuth,\n  createEncodedRecap,\n  getChainsFromRecap,\n  mergeEncodedRecaps,\n  getRecapFromResources,\n  validateSignedCacao,\n  getNamespacedDidChainId,\n  parseChainId,\n} from \"@walletconnect/utils\";\nimport EventEmmiter from \"events\";\nimport {\n  ENGINE_CONTEXT,\n  ENGINE_RPC_OPTS,\n  PROPOSAL_EXPIRY_MESSAGE,\n  SESSION_EXPIRY,\n  SESSION_REQUEST_EXPIRY_BOUNDARIES,\n  METHODS_TO_VERIFY,\n  WALLETCONNECT_DEEPLINK_CHOICE,\n  ENGINE_QUEUE_STATES,\n  AUTH_PUBLIC_KEY_NAME,\n} from \"../constants\";\n\nexport class Engine extends IEngine {\n  public name = ENGINE_CONTEXT;\n\n  private events: IEngineEvents = new EventEmmiter();\n  private initialized = false;\n\n  /**\n   * Queue responsible for processing incoming requests such as session_update, session_event, session_ping etc\n   * It's needed when the client receives multiple requests at once from the mailbox immediately after initialization and to avoid attempting to process them all at the same time\n   */\n  private requestQueue: EngineTypes.EngineQueue<EngineTypes.EventCallback<JsonRpcRequest>> = {\n    state: ENGINE_QUEUE_STATES.idle,\n    queue: [],\n  };\n\n  /**\n   * Queue responsible for processing incoming session_request\n   * The queue emits the next request only after the previous one has been responded to\n   */\n  private sessionRequestQueue: EngineTypes.EngineQueue<PendingRequestTypes.Struct> = {\n    state: ENGINE_QUEUE_STATES.idle,\n    queue: [],\n  };\n\n  private requestQueueDelay = ONE_SECOND;\n\n  private expectedPairingMethodMap: Map<string, string[]> = new Map();\n\n  // Ephemeral (in-memory) map to store recently deleted items\n  private recentlyDeletedMap = new Map<\n    string | number,\n    \"pairing\" | \"session\" | \"proposal\" | \"request\"\n  >();\n\n  private recentlyDeletedLimit = 200;\n  private relayMessageCache: RelayerTypes.MessageEvent[] = [];\n\n  constructor(client: IEngine[\"client\"]) {\n    super(client);\n  }\n\n  public init: IEngine[\"init\"] = async () => {\n    if (!this.initialized) {\n      await this.cleanup();\n      this.registerRelayerEvents();\n      this.registerExpirerEvents();\n      this.registerPairingEvents();\n      this.client.core.pairing.register({ methods: Object.keys(ENGINE_RPC_OPTS) });\n      this.initialized = true;\n      setTimeout(() => {\n        this.sessionRequestQueue.queue = this.getPendingSessionRequests();\n        this.processSessionRequestQueue();\n      }, toMiliseconds(this.requestQueueDelay));\n    }\n  };\n\n  // ---------- Public ------------------------------------------------ //\n\n  public connect: IEngine[\"connect\"] = async (params) => {\n    await this.isInitialized();\n    const connectParams = {\n      ...params,\n      requiredNamespaces: params.requiredNamespaces || {},\n      optionalNamespaces: params.optionalNamespaces || {},\n    };\n    await this.isValidConnect(connectParams);\n    const { pairingTopic, requiredNamespaces, optionalNamespaces, sessionProperties, relays } =\n      connectParams;\n    let topic = pairingTopic;\n    let uri: string | undefined;\n    let active = false;\n\n    try {\n      if (topic) {\n        const pairing = this.client.core.pairing.pairings.get(topic);\n        active = pairing.active;\n      }\n    } catch (error) {\n      this.client.logger.error(`connect() -> pairing.get(${topic}) failed`);\n      throw error;\n    }\n    if (!topic || !active) {\n      const { topic: newTopic, uri: newUri } = await this.client.core.pairing.create();\n      topic = newTopic;\n      uri = newUri;\n    }\n    // safety check to ensure pairing topic is available\n    if (!topic) {\n      const { message } = getInternalError(\"NO_MATCHING_KEY\", `connect() pairing topic: ${topic}`);\n      throw new Error(message);\n    }\n\n    const publicKey = await this.client.core.crypto.generateKeyPair();\n\n    const expiry = ENGINE_RPC_OPTS.wc_sessionPropose.req.ttl || FIVE_MINUTES;\n    const expiryTimestamp = calcExpiry(expiry);\n    const proposal = {\n      requiredNamespaces,\n      optionalNamespaces,\n      relays: relays ?? [{ protocol: RELAYER_DEFAULT_PROTOCOL }],\n      proposer: {\n        publicKey,\n        metadata: this.client.metadata,\n      },\n      expiryTimestamp,\n      pairingTopic: topic,\n      ...(sessionProperties && { sessionProperties }),\n    };\n    const {\n      reject,\n      resolve,\n      done: approval,\n    } = createDelayedPromise<SessionTypes.Struct>(expiry, PROPOSAL_EXPIRY_MESSAGE);\n    this.events.once<\"session_connect\">(\n      engineEvent(\"session_connect\"),\n      async ({ error, session }) => {\n        if (error) reject(error);\n        else if (session) {\n          session.self.publicKey = publicKey;\n          const completeSession = {\n            ...session,\n            pairingTopic: proposal.pairingTopic,\n            requiredNamespaces: proposal.requiredNamespaces,\n            optionalNamespaces: proposal.optionalNamespaces,\n          };\n          await this.client.session.set(session.topic, completeSession);\n          await this.setExpiry(session.topic, session.expiry);\n          if (topic) {\n            await this.client.core.pairing.updateMetadata({\n              topic,\n              metadata: session.peer.metadata,\n            });\n          }\n          this.cleanupDuplicatePairings(completeSession);\n          resolve(completeSession);\n        }\n      },\n    );\n    const id = await this.sendRequest({\n      topic,\n      method: \"wc_sessionPropose\",\n      params: proposal,\n      throwOnFailedPublish: true,\n    });\n    await this.setProposal(id, { id, ...proposal });\n    return { uri, approval };\n  };\n\n  public pair: IEngine[\"pair\"] = async (params) => {\n    await this.isInitialized();\n    try {\n      return await this.client.core.pairing.pair(params);\n    } catch (error) {\n      this.client.logger.error(\"pair() failed\");\n      throw error;\n    }\n  };\n\n  public approve: IEngine[\"approve\"] = async (params) => {\n    const configEvent = this.client.core.eventClient.createEvent({\n      properties: {\n        topic: params?.id?.toString(),\n        trace: [EVENT_CLIENT_SESSION_TRACES.session_approve_started],\n      },\n    });\n    try {\n      await this.isInitialized();\n    } catch (error) {\n      configEvent.setError(EVENT_CLIENT_SESSION_ERRORS.no_internet_connection);\n      throw error;\n    }\n    try {\n      await this.isValidProposalId(params?.id);\n    } catch (error) {\n      this.client.logger.error(`approve() -> proposal.get(${params?.id}) failed`);\n      configEvent.setError(EVENT_CLIENT_SESSION_ERRORS.proposal_not_found);\n      throw error;\n    }\n    try {\n      await this.isValidApprove(params);\n    } catch (error) {\n      this.client.logger.error(\"approve() -> isValidApprove() failed\");\n      configEvent.setError(\n        EVENT_CLIENT_SESSION_ERRORS.session_approve_namespace_validation_failure,\n      );\n      throw error;\n    }\n\n    const { id, relayProtocol, namespaces, sessionProperties, sessionConfig } = params;\n\n    const proposal = this.client.proposal.get(id);\n\n    this.client.core.eventClient.deleteEvent({ eventId: configEvent.eventId });\n\n    const { pairingTopic, proposer, requiredNamespaces, optionalNamespaces } = proposal;\n\n    let event = this.client.core.eventClient?.getEvent({\n      topic: pairingTopic,\n    }) as EventClientTypes.Event;\n    if (!event) {\n      event = this.client.core.eventClient?.createEvent({\n        type: EVENT_CLIENT_SESSION_TRACES.session_approve_started,\n        properties: {\n          topic: pairingTopic,\n          trace: [\n            EVENT_CLIENT_SESSION_TRACES.session_approve_started,\n            EVENT_CLIENT_SESSION_TRACES.session_namespaces_validation_success,\n          ],\n        },\n      });\n    }\n\n    const selfPublicKey = await this.client.core.crypto.generateKeyPair();\n    const peerPublicKey = proposer.publicKey;\n    const sessionTopic = await this.client.core.crypto.generateSharedKey(\n      selfPublicKey,\n      peerPublicKey,\n    );\n    const sessionSettle = {\n      relay: { protocol: relayProtocol ?? \"irn\" },\n      namespaces,\n      controller: { publicKey: selfPublicKey, metadata: this.client.metadata },\n      expiry: calcExpiry(SESSION_EXPIRY),\n      ...(sessionProperties && { sessionProperties }),\n      ...(sessionConfig && { sessionConfig }),\n    };\n\n    event.addTrace(EVENT_CLIENT_SESSION_TRACES.subscribing_session_topic);\n\n    try {\n      await this.client.core.relayer.subscribe(sessionTopic);\n    } catch (error) {\n      event.setError(EVENT_CLIENT_SESSION_ERRORS.subscribe_session_topic_failure);\n      throw error;\n    }\n\n    event.addTrace(EVENT_CLIENT_SESSION_TRACES.subscribe_session_topic_success);\n\n    const session = {\n      ...sessionSettle,\n      topic: sessionTopic,\n      requiredNamespaces,\n      optionalNamespaces,\n      pairingTopic,\n      acknowledged: false,\n      self: sessionSettle.controller,\n      peer: {\n        publicKey: proposer.publicKey,\n        metadata: proposer.metadata,\n      },\n      controller: selfPublicKey,\n    };\n    await this.client.session.set(sessionTopic, session);\n\n    event.addTrace(EVENT_CLIENT_SESSION_TRACES.store_session);\n\n    try {\n      event.addTrace(EVENT_CLIENT_SESSION_TRACES.publishing_session_settle);\n      await this.sendRequest({\n        topic: sessionTopic,\n        method: \"wc_sessionSettle\",\n        params: sessionSettle,\n        throwOnFailedPublish: true,\n      }).catch((error) => {\n        event?.setError(EVENT_CLIENT_SESSION_ERRORS.session_settle_publish_failure);\n        throw error;\n      });\n\n      event.addTrace(EVENT_CLIENT_SESSION_TRACES.session_settle_publish_success);\n\n      event.addTrace(EVENT_CLIENT_SESSION_TRACES.publishing_session_approve);\n      await this.sendResult<\"wc_sessionPropose\">({\n        id,\n        topic: pairingTopic,\n        result: {\n          relay: {\n            protocol: relayProtocol ?? \"irn\",\n          },\n          responderPublicKey: selfPublicKey,\n        },\n        throwOnFailedPublish: true,\n      }).catch((error) => {\n        event?.setError(EVENT_CLIENT_SESSION_ERRORS.session_approve_publish_failure);\n        throw error;\n      });\n\n      event.addTrace(EVENT_CLIENT_SESSION_TRACES.session_approve_publish_success);\n    } catch (error) {\n      this.client.logger.error(error);\n      // if the publish fails, delete the session and throw an error\n      this.client.session.delete(sessionTopic, getSdkError(\"USER_DISCONNECTED\"));\n      await this.client.core.relayer.unsubscribe(sessionTopic);\n      throw error;\n    }\n\n    this.client.core.eventClient.deleteEvent({ eventId: event.eventId });\n\n    await this.client.core.pairing.updateMetadata({\n      topic: pairingTopic,\n      metadata: proposer.metadata,\n    });\n    await this.client.proposal.delete(id, getSdkError(\"USER_DISCONNECTED\"));\n    await this.client.core.pairing.activate({ topic: pairingTopic });\n    await this.setExpiry(sessionTopic, calcExpiry(SESSION_EXPIRY));\n    return {\n      topic: sessionTopic,\n      acknowledged: () => Promise.resolve(this.client.session.get(sessionTopic)),\n    };\n  };\n\n  public reject: IEngine[\"reject\"] = async (params) => {\n    await this.isInitialized();\n    try {\n      await this.isValidReject(params);\n    } catch (error) {\n      this.client.logger.error(\"reject() -> isValidReject() failed\");\n      throw error;\n    }\n    const { id, reason } = params;\n    let pairingTopic;\n    try {\n      const proposal = this.client.proposal.get(id);\n      pairingTopic = proposal.pairingTopic;\n    } catch (error) {\n      this.client.logger.error(`reject() -> proposal.get(${id}) failed`);\n      throw error;\n    }\n\n    if (pairingTopic) {\n      await this.sendError({\n        id,\n        topic: pairingTopic,\n        error: reason,\n        rpcOpts: ENGINE_RPC_OPTS.wc_sessionPropose.reject,\n      });\n      await this.client.proposal.delete(id, getSdkError(\"USER_DISCONNECTED\"));\n    }\n  };\n\n  public update: IEngine[\"update\"] = async (params) => {\n    await this.isInitialized();\n    try {\n      await this.isValidUpdate(params);\n    } catch (error) {\n      this.client.logger.error(\"update() -> isValidUpdate() failed\");\n      throw error;\n    }\n    const { topic, namespaces } = params;\n\n    const { done: acknowledged, resolve, reject } = createDelayedPromise<void>();\n    const clientRpcId = payloadId();\n    const relayRpcId = getBigIntRpcId().toString() as any;\n\n    const oldNamespaces = this.client.session.get(topic).namespaces;\n    this.events.once(engineEvent(\"session_update\", clientRpcId), ({ error }: any) => {\n      if (error) reject(error);\n      else {\n        resolve();\n      }\n    });\n    // Update the session with the new namespaces, if the publish fails, revert to the old.\n    // This allows the client to use the updated session like emitting events\n    // without waiting for the peer to acknowledge\n    await this.client.session.update(topic, { namespaces });\n    await this.sendRequest({\n      topic,\n      method: \"wc_sessionUpdate\",\n      params: { namespaces },\n      throwOnFailedPublish: true,\n      clientRpcId,\n      relayRpcId,\n    }).catch((error) => {\n      this.client.logger.error(error);\n      this.client.session.update(topic, { namespaces: oldNamespaces });\n      reject(error);\n    });\n    return { acknowledged };\n  };\n\n  public extend: IEngine[\"extend\"] = async (params) => {\n    await this.isInitialized();\n    try {\n      await this.isValidExtend(params);\n    } catch (error) {\n      this.client.logger.error(\"extend() -> isValidExtend() failed\");\n      throw error;\n    }\n\n    const { topic } = params;\n    const clientRpcId = payloadId();\n    const { done: acknowledged, resolve, reject } = createDelayedPromise<void>();\n    this.events.once(engineEvent(\"session_extend\", clientRpcId), ({ error }: any) => {\n      if (error) reject(error);\n      else resolve();\n    });\n\n    await this.setExpiry(topic, calcExpiry(SESSION_EXPIRY));\n    this.sendRequest({\n      topic,\n      method: \"wc_sessionExtend\",\n      params: {},\n      clientRpcId,\n      throwOnFailedPublish: true,\n    }).catch((e) => {\n      reject(e);\n    });\n\n    return { acknowledged };\n  };\n\n  public request: IEngine[\"request\"] = async <T>(params: EngineTypes.RequestParams) => {\n    await this.isInitialized();\n    try {\n      await this.isValidRequest(params);\n    } catch (error) {\n      this.client.logger.error(\"request() -> isValidRequest() failed\");\n      throw error;\n    }\n    const { chainId, request, topic, expiry = ENGINE_RPC_OPTS.wc_sessionRequest.req.ttl } = params;\n    const session = this.client.session.get(topic);\n    const clientRpcId = payloadId();\n    const relayRpcId = getBigIntRpcId().toString() as any;\n    const { done, resolve, reject } = createDelayedPromise<T>(\n      expiry,\n      \"Request expired. Please try again.\",\n    );\n    this.events.once<\"session_request\">(\n      engineEvent(\"session_request\", clientRpcId),\n      ({ error, result }) => {\n        if (error) reject(error);\n        else resolve(result);\n      },\n    );\n    return await Promise.all([\n      new Promise<void>(async (resolve) => {\n        await this.sendRequest({\n          clientRpcId,\n          relayRpcId,\n          topic,\n          method: \"wc_sessionRequest\",\n          params: {\n            request: {\n              ...request,\n              expiryTimestamp: calcExpiry(expiry),\n            },\n            chainId,\n          },\n          expiry,\n          throwOnFailedPublish: true,\n        }).catch((error) => reject(error));\n        this.client.events.emit(\"session_request_sent\", {\n          topic,\n          request,\n          chainId,\n          id: clientRpcId,\n        });\n        resolve();\n      }),\n      new Promise<void>(async (resolve) => {\n        // only attempt to handle deeplinks if they are not explicitly disabled in the session config\n        if (!session.sessionConfig?.disableDeepLink) {\n          const wcDeepLink = await getDeepLink(\n            this.client.core.storage,\n            WALLETCONNECT_DEEPLINK_CHOICE,\n          );\n          handleDeeplinkRedirect({ id: clientRpcId, topic, wcDeepLink });\n        }\n        resolve();\n      }),\n      done(),\n    ]).then((result) => result[2]); // order is important here, we want to return the result of the `done` promise\n  };\n\n  public respond: IEngine[\"respond\"] = async (params) => {\n    await this.isInitialized();\n    await this.isValidRespond(params);\n    const { topic, response } = params;\n    const { id } = response;\n    if (isJsonRpcResult(response)) {\n      await this.sendResult({ id, topic, result: response.result, throwOnFailedPublish: true });\n    } else if (isJsonRpcError(response)) {\n      await this.sendError({ id, topic, error: response.error });\n    }\n    this.cleanupAfterResponse(params);\n  };\n\n  public ping: IEngine[\"ping\"] = async (params) => {\n    await this.isInitialized();\n    try {\n      await this.isValidPing(params);\n    } catch (error) {\n      this.client.logger.error(\"ping() -> isValidPing() failed\");\n      throw error;\n    }\n    const { topic } = params;\n    if (this.client.session.keys.includes(topic)) {\n      const clientRpcId = payloadId();\n      const relayRpcId = getBigIntRpcId().toString() as any;\n      const { done, resolve, reject } = createDelayedPromise<void>();\n      this.events.once(engineEvent(\"session_ping\", clientRpcId), ({ error }: any) => {\n        if (error) reject(error);\n        else resolve();\n      });\n      await Promise.all([\n        this.sendRequest({\n          topic,\n          method: \"wc_sessionPing\",\n          params: {},\n          throwOnFailedPublish: true,\n          clientRpcId,\n          relayRpcId,\n        }),\n        done(),\n      ]);\n    } else if (this.client.core.pairing.pairings.keys.includes(topic)) {\n      await this.client.core.pairing.ping({ topic });\n    }\n  };\n\n  public emit: IEngine[\"emit\"] = async (params) => {\n    await this.isInitialized();\n    await this.isValidEmit(params);\n    const { topic, event, chainId } = params;\n    const relayRpcId = getBigIntRpcId().toString() as any;\n    await this.sendRequest({\n      topic,\n      method: \"wc_sessionEvent\",\n      params: { event, chainId },\n      throwOnFailedPublish: true,\n      relayRpcId,\n    });\n  };\n\n  public disconnect: IEngine[\"disconnect\"] = async (params) => {\n    await this.isInitialized();\n    await this.isValidDisconnect(params);\n    const { topic } = params;\n    if (this.client.session.keys.includes(topic)) {\n      // await an ack to ensure the relay has received the disconnect request\n      await this.sendRequest({\n        topic,\n        method: \"wc_sessionDelete\",\n        params: getSdkError(\"USER_DISCONNECTED\"),\n        throwOnFailedPublish: true,\n      });\n      await this.deleteSession({ topic, emitEvent: false });\n    } else if (this.client.core.pairing.pairings.keys.includes(topic)) {\n      await this.client.core.pairing.disconnect({ topic });\n    } else {\n      const { message } = getInternalError(\n        \"MISMATCHED_TOPIC\",\n        `Session or pairing topic not found: ${topic}`,\n      );\n      throw new Error(message);\n    }\n  };\n\n  public find: IEngine[\"find\"] = (params) => {\n    this.isInitialized();\n    return this.client.session.getAll().filter((session) => isSessionCompatible(session, params));\n  };\n\n  public getPendingSessionRequests: IEngine[\"getPendingSessionRequests\"] = () => {\n    return this.client.pendingRequest.getAll();\n  };\n\n  // ---------- Auth ------------------------------------------------ //\n\n  public authenticate: IEngine[\"authenticate\"] = async (params) => {\n    this.isInitialized();\n    this.isValidAuthenticate(params);\n\n    const {\n      chains,\n      statement = \"\",\n      uri,\n      domain,\n      nonce,\n      type,\n      exp,\n      nbf,\n      methods = [],\n      expiry,\n    } = params;\n    // reassign resources to remove reference as the array is modified and might cause side effects\n    const resources = [...(params.resources || [])];\n\n    const { topic: pairingTopic, uri: connectionUri } = await this.client.core.pairing.create({\n      methods: [\"wc_sessionAuthenticate\"],\n    });\n\n    this.client.logger.info({\n      message: \"Generated new pairing\",\n      pairing: { topic: pairingTopic, uri: connectionUri },\n    });\n\n    const publicKey = await this.client.core.crypto.generateKeyPair();\n    const responseTopic = hashKey(publicKey);\n\n    await Promise.all([\n      this.client.auth.authKeys.set(AUTH_PUBLIC_KEY_NAME, { responseTopic, publicKey }),\n      this.client.auth.pairingTopics.set(responseTopic, { topic: responseTopic, pairingTopic }),\n    ]);\n    // Subscribe to response topic\n    await this.client.core.relayer.subscribe(responseTopic);\n\n    this.client.logger.info(`sending request to new pairing topic: ${pairingTopic}`);\n\n    if (methods.length > 0) {\n      const { namespace } = parseChainId(chains[0]);\n      let recap = createEncodedRecap(namespace, \"request\", methods);\n      const existingRecap = getRecapFromResources(resources);\n      if (existingRecap) {\n        // per Recaps spec, recap must occupy the last position in the resources array\n        // using .pop to remove the element given we already checked it's a recap and will replace it\n        const mergedRecap = mergeEncodedRecaps(recap, resources.pop() as string);\n        recap = mergedRecap;\n      }\n      resources.push(recap);\n    }\n\n    // Ensure the expiry is greater than the minimum required for the request - currently 1h\n    const authRequestExpiry =\n      expiry && expiry > ENGINE_RPC_OPTS.wc_sessionAuthenticate.req.ttl\n        ? expiry\n        : ENGINE_RPC_OPTS.wc_sessionAuthenticate.req.ttl;\n\n    const request = {\n      authPayload: {\n        type: type ?? \"caip122\",\n        chains,\n        statement,\n        aud: uri,\n        domain,\n        version: \"1\",\n        nonce,\n        iat: new Date().toISOString(),\n        exp,\n        nbf,\n        resources,\n      },\n      requester: { publicKey, metadata: this.client.metadata },\n      expiryTimestamp: calcExpiry(authRequestExpiry),\n    };\n\n    // ----- build namespaces for fallback session proposal ----- //\n    const namespaces = {\n      eip155: {\n        chains,\n        // request `personal_sign` method by default to allow for fallback siwe\n        methods: [...new Set([\"personal_sign\", ...methods])],\n        events: [\"chainChanged\", \"accountsChanged\"],\n      },\n    };\n\n    const proposal = {\n      requiredNamespaces: {},\n      optionalNamespaces: namespaces,\n      relays: [{ protocol: \"irn\" }],\n      pairingTopic,\n      proposer: {\n        publicKey,\n        metadata: this.client.metadata,\n      },\n      expiryTimestamp: calcExpiry(ENGINE_RPC_OPTS.wc_sessionPropose.req.ttl),\n    };\n\n    const { done, resolve, reject } = createDelayedPromise(authRequestExpiry, \"Request expired\");\n\n    // handle fallback session proposal response\n    const onSessionConnect = async ({ error, session }: any) => {\n      // cleanup listener for authenticate response\n      this.events.off(engineEvent(\"session_request\", id), onAuthenticate);\n      if (error) reject(error);\n      else if (session) {\n        session.self.publicKey = publicKey;\n        await this.client.session.set(session.topic, session);\n        await this.setExpiry(session.topic, session.expiry);\n        if (pairingTopic) {\n          await this.client.core.pairing.updateMetadata({\n            topic: pairingTopic,\n            metadata: session.peer.metadata,\n          });\n        }\n        const sessionObject = this.client.session.get(session.topic);\n        await this.deleteProposal(fallbackId);\n        resolve({\n          session: sessionObject,\n        });\n      }\n    };\n    // handle session authenticate response\n    const onAuthenticate = async (payload: any) => {\n      // delete this auth request on response\n      // we're using payload from the wallet to establish the session so we don't need to keep this around\n      await this.deletePendingAuthRequest(id, { message: \"fulfilled\", code: 0 });\n      if (payload.error) {\n        // wallets that do not support wc_sessionAuthenticate will return an error\n        // we should not reject the promise in this case as the fallback session proposal will be used\n        const error = getSdkError(\"WC_METHOD_UNSUPPORTED\", \"wc_sessionAuthenticate\");\n        if (payload.error.code === error.code) return;\n\n        // cleanup listener for fallback response\n        this.events.off(engineEvent(\"session_connect\"), onSessionConnect);\n        return reject(payload.error.message);\n      }\n      // delete fallback proposal on successful authenticate as the proposal will not be responded to\n      await this.deleteProposal(fallbackId);\n      // cleanup listener for fallback response\n      this.events.off(engineEvent(\"session_connect\"), onSessionConnect);\n\n      const {\n        cacaos,\n        responder,\n      }: {\n        cacaos: AuthTypes.SessionAuthenticateResponseParams[\"cacaos\"];\n        responder: AuthTypes.SessionAuthenticateResponseParams[\"responder\"];\n      } = payload.result;\n\n      const approvedMethods: string[] = [];\n      const approvedAccounts: string[] = [];\n      for (const cacao of cacaos) {\n        const isValid = await validateSignedCacao({ cacao, projectId: this.client.core.projectId });\n        if (!isValid) {\n          this.client.logger.error(cacao, \"Signature verification failed\");\n          reject(getSdkError(\"SESSION_SETTLEMENT_FAILED\", \"Signature verification failed\"));\n        }\n\n        const { p: payload } = cacao;\n        const recap = getRecapFromResources(payload.resources);\n\n        const approvedChains: string[] = [getNamespacedDidChainId(payload.iss) as string];\n        const parsedAddress = getDidAddress(payload.iss) as string;\n\n        if (recap) {\n          const methodsfromRecap = getMethodsFromRecap(recap);\n          const chainsFromRecap = getChainsFromRecap(recap);\n          approvedMethods.push(...methodsfromRecap);\n          approvedChains.push(...chainsFromRecap);\n        }\n\n        for (const chain of approvedChains) {\n          approvedAccounts.push(`${chain}:${parsedAddress}`);\n        }\n      }\n      const sessionTopic = await this.client.core.crypto.generateSharedKey(\n        publicKey,\n        responder.publicKey,\n      );\n\n      //create session object\n      let session: SessionTypes.Struct | undefined;\n\n      if (approvedMethods.length > 0) {\n        session = {\n          topic: sessionTopic,\n          acknowledged: true,\n          self: {\n            publicKey,\n            metadata: this.client.metadata,\n          },\n          peer: responder,\n          controller: responder.publicKey,\n          expiry: calcExpiry(SESSION_EXPIRY),\n          requiredNamespaces: {},\n          optionalNamespaces: {},\n          relay: { protocol: \"irn\" },\n          pairingTopic,\n          namespaces: buildNamespacesFromAuth(\n            [...new Set(approvedMethods)],\n            [...new Set(approvedAccounts)],\n          ),\n        };\n\n        await this.client.core.relayer.subscribe(sessionTopic);\n        await this.client.session.set(sessionTopic, session);\n        if (pairingTopic) {\n          await this.client.core.pairing.updateMetadata({\n            topic: pairingTopic,\n            metadata: responder.metadata,\n          });\n        }\n\n        session = this.client.session.get(sessionTopic);\n      }\n      resolve({\n        auths: cacaos,\n        session,\n      });\n    };\n\n    // set the ids for both requests\n    const id = payloadId();\n    const fallbackId = payloadId();\n    // subscribe to response events\n    this.events.once<\"session_connect\">(engineEvent(\"session_connect\"), onSessionConnect);\n    this.events.once(engineEvent(\"session_request\", id), onAuthenticate);\n\n    try {\n      // send both (main & fallback) requests\n      await Promise.all([\n        this.sendRequest({\n          topic: pairingTopic,\n          method: \"wc_sessionAuthenticate\",\n          params: request,\n          expiry: params.expiry,\n          throwOnFailedPublish: true,\n          clientRpcId: id,\n        }),\n        this.sendRequest({\n          topic: pairingTopic,\n          method: \"wc_sessionPropose\",\n          params: proposal,\n          expiry: ENGINE_RPC_OPTS.wc_sessionPropose.req.ttl,\n          throwOnFailedPublish: true,\n          clientRpcId: fallbackId,\n        }),\n      ]);\n    } catch (error) {\n      // cleanup listeners on failed publish\n      this.events.off(engineEvent(\"session_connect\"), onSessionConnect);\n      this.events.off(engineEvent(\"session_request\", id), onAuthenticate);\n      throw error;\n    }\n\n    await this.setProposal(fallbackId, { id: fallbackId, ...proposal });\n    await this.setAuthRequest(id, {\n      request: { ...request, verifyContext: {} as any },\n      pairingTopic,\n    });\n\n    return {\n      uri: connectionUri,\n      response: done,\n    } as EngineTypes.SessionAuthenticateResponsePromise;\n  };\n\n  public approveSessionAuthenticate: IEngine[\"approveSessionAuthenticate\"] = async (\n    sessionAuthenticateResponseParams,\n  ) => {\n    const { id, auths } = sessionAuthenticateResponseParams;\n\n    const event = this.client.core.eventClient.createEvent({\n      properties: {\n        topic: id.toString(),\n        trace: [EVENT_CLIENT_AUTHENTICATE_TRACES.authenticated_session_approve_started],\n      },\n    });\n\n    try {\n      this.isInitialized();\n    } catch (error) {\n      event.setError(EVENT_CLIENT_AUTHENTICATE_ERRORS.no_internet_connection);\n      throw error;\n    }\n\n    const pendingRequest = this.getPendingAuthRequest(id);\n\n    if (!pendingRequest) {\n      event.setError(\n        EVENT_CLIENT_AUTHENTICATE_ERRORS.authenticated_session_pending_request_not_found,\n      );\n      throw new Error(`Could not find pending auth request with id ${id}`);\n    }\n\n    const receiverPublicKey = pendingRequest.requester.publicKey;\n    const senderPublicKey = await this.client.core.crypto.generateKeyPair();\n    const responseTopic = hashKey(receiverPublicKey);\n\n    const encodeOpts = {\n      type: TYPE_1,\n      receiverPublicKey,\n      senderPublicKey,\n    };\n\n    const approvedMethods: string[] = [];\n    const approvedAccounts: string[] = [];\n    for (const cacao of auths) {\n      const isValid = await validateSignedCacao({ cacao, projectId: this.client.core.projectId });\n      if (!isValid) {\n        event.setError(EVENT_CLIENT_AUTHENTICATE_ERRORS.invalid_cacao);\n\n        const invalidErr = getSdkError(\n          \"SESSION_SETTLEMENT_FAILED\",\n          \"Signature verification failed\",\n        );\n\n        await this.sendError({\n          id,\n          topic: responseTopic,\n          error: invalidErr,\n          encodeOpts,\n        });\n\n        throw new Error(invalidErr.message);\n      }\n\n      event.addTrace(EVENT_CLIENT_AUTHENTICATE_TRACES.cacaos_verified);\n\n      const { p: payload } = cacao;\n      const recap = getRecapFromResources(payload.resources);\n\n      const approvedChains: string[] = [getNamespacedDidChainId(payload.iss) as string];\n\n      const parsedAddress = getDidAddress(payload.iss) as string;\n\n      if (recap) {\n        const methodsfromRecap = getMethodsFromRecap(recap);\n        const chainsFromRecap = getChainsFromRecap(recap);\n        approvedMethods.push(...methodsfromRecap);\n        approvedChains.push(...chainsFromRecap);\n      }\n      for (const chain of approvedChains) {\n        approvedAccounts.push(`${chain}:${parsedAddress}`);\n      }\n    }\n\n    const sessionTopic = await this.client.core.crypto.generateSharedKey(\n      senderPublicKey,\n      receiverPublicKey,\n    );\n\n    event.addTrace(EVENT_CLIENT_AUTHENTICATE_TRACES.create_authenticated_session_topic);\n\n    let session: SessionTypes.Struct | undefined;\n    if (approvedMethods?.length > 0) {\n      session = {\n        topic: sessionTopic,\n        acknowledged: true,\n        self: {\n          publicKey: senderPublicKey,\n          metadata: this.client.metadata,\n        },\n        peer: {\n          publicKey: receiverPublicKey,\n          metadata: pendingRequest.requester.metadata,\n        },\n        controller: receiverPublicKey,\n        expiry: calcExpiry(SESSION_EXPIRY),\n        authentication: auths,\n        requiredNamespaces: {},\n        optionalNamespaces: {},\n        relay: { protocol: \"irn\" },\n        pairingTopic: pendingRequest.pairingTopic,\n        namespaces: buildNamespacesFromAuth(\n          [...new Set(approvedMethods)],\n          [...new Set(approvedAccounts)],\n        ),\n      };\n\n      event.addTrace(EVENT_CLIENT_AUTHENTICATE_TRACES.subscribing_authenticated_session_topic);\n\n      try {\n        await this.client.core.relayer.subscribe(sessionTopic);\n      } catch (error) {\n        event.setError(\n          EVENT_CLIENT_AUTHENTICATE_ERRORS.subscribe_authenticated_session_topic_failure,\n        );\n        throw error;\n      }\n\n      event.addTrace(\n        EVENT_CLIENT_AUTHENTICATE_TRACES.subscribe_authenticated_session_topic_success,\n      );\n\n      await this.client.session.set(sessionTopic, session);\n\n      event.addTrace(EVENT_CLIENT_AUTHENTICATE_TRACES.store_authenticated_session);\n\n      await this.client.core.pairing.updateMetadata({\n        topic: pendingRequest.pairingTopic,\n        metadata: pendingRequest.requester.metadata,\n      });\n    }\n\n    event.addTrace(EVENT_CLIENT_AUTHENTICATE_TRACES.publishing_authenticated_session_approve);\n\n    try {\n      await this.sendResult<\"wc_sessionAuthenticate\">({\n        topic: responseTopic,\n        id,\n        result: {\n          cacaos: auths,\n          responder: {\n            publicKey: senderPublicKey,\n            metadata: this.client.metadata,\n          },\n        },\n        encodeOpts,\n        throwOnFailedPublish: true,\n      });\n    } catch (error) {\n      event.setError(\n        EVENT_CLIENT_AUTHENTICATE_ERRORS.authenticated_session_approve_publish_failure,\n      );\n      throw error;\n    }\n\n    await this.client.auth.requests.delete(id, { message: \"fulfilled\", code: 0 });\n    await this.client.core.pairing.activate({ topic: pendingRequest.pairingTopic });\n\n    this.client.core.eventClient.deleteEvent({ eventId: event.eventId });\n\n    return { session };\n  };\n\n  public rejectSessionAuthenticate: IEngine[\"rejectSessionAuthenticate\"] = async (params) => {\n    await this.isInitialized();\n\n    const { id, reason } = params;\n\n    const pendingRequest = this.getPendingAuthRequest(id);\n\n    if (!pendingRequest) {\n      throw new Error(`Could not find pending auth request with id ${id}`);\n    }\n\n    const receiverPublicKey = pendingRequest.requester.publicKey;\n    const senderPublicKey = await this.client.core.crypto.generateKeyPair();\n    const responseTopic = hashKey(receiverPublicKey);\n\n    const encodeOpts = {\n      type: TYPE_1,\n      receiverPublicKey,\n      senderPublicKey,\n    };\n\n    await this.sendError({\n      id,\n      topic: responseTopic,\n      error: reason,\n      encodeOpts,\n      rpcOpts: ENGINE_RPC_OPTS.wc_sessionAuthenticate.reject,\n    });\n    await this.client.auth.requests.delete(id, { message: \"rejected\", code: 0 });\n    await this.client.proposal.delete(id, getSdkError(\"USER_DISCONNECTED\"));\n  };\n\n  public formatAuthMessage: IEngine[\"formatAuthMessage\"] = (params) => {\n    this.isInitialized();\n    const { request, iss } = params;\n    return formatMessage(request, iss);\n  };\n\n  public processRelayMessageCache: IEngine[\"processRelayMessageCache\"] = () => {\n    // process the relay messages cache in the next tick to allow event listeners to be registered by the implementing app\n    setTimeout(async () => {\n      if (this.relayMessageCache.length === 0) return;\n      while (this.relayMessageCache.length > 0) {\n        try {\n          const message = this.relayMessageCache.shift();\n          if (message) {\n            await this.onRelayMessage(message);\n          }\n        } catch (error) {\n          this.client.logger.error(error);\n        }\n      }\n    }, 50);\n  };\n\n  // ---------- Private Helpers --------------------------------------- //\n\n  private cleanupDuplicatePairings: EnginePrivate[\"cleanupDuplicatePairings\"] = async (\n    session: SessionTypes.Struct,\n  ) => {\n    // older SDK versions are missing the `pairingTopic` prop thus we need to check for it\n    if (!session.pairingTopic) return;\n\n    try {\n      const pairing = this.client.core.pairing.pairings.get(session.pairingTopic);\n      const allPairings = this.client.core.pairing.pairings.getAll();\n      const duplicates = allPairings.filter(\n        (p) =>\n          p.peerMetadata?.url &&\n          p.peerMetadata?.url === session.peer.metadata.url &&\n          p.topic &&\n          p.topic !== pairing.topic,\n      );\n      if (duplicates.length === 0) return;\n      this.client.logger.info(`Cleaning up ${duplicates.length} duplicate pairing(s)`);\n      await Promise.all(\n        duplicates.map((p) => this.client.core.pairing.disconnect({ topic: p.topic })),\n      );\n      this.client.logger.info(`Duplicate pairings clean up finished`);\n    } catch (error) {\n      this.client.logger.error(error);\n    }\n  };\n\n  private deleteSession: EnginePrivate[\"deleteSession\"] = async (params) => {\n    const { topic, expirerHasDeleted = false, emitEvent = true, id = 0 } = params;\n    const { self } = this.client.session.get(topic);\n    // Await the unsubscribe first to avoid deleting the symKey too early below.\n    await this.client.core.relayer.unsubscribe(topic);\n    await this.client.session.delete(topic, getSdkError(\"USER_DISCONNECTED\"));\n    this.addToRecentlyDeleted(topic, \"session\");\n    if (this.client.core.crypto.keychain.has(self.publicKey)) {\n      await this.client.core.crypto.deleteKeyPair(self.publicKey);\n    }\n    if (this.client.core.crypto.keychain.has(topic)) {\n      await this.client.core.crypto.deleteSymKey(topic);\n    }\n    if (!expirerHasDeleted) this.client.core.expirer.del(topic);\n    // remove any deeplinks from storage after the session is deleted\n    // to avoid navigating to incorrect deeplink later on\n    this.client.core.storage\n      .removeItem(WALLETCONNECT_DEEPLINK_CHOICE)\n      .catch((e) => this.client.logger.warn(e));\n    this.getPendingSessionRequests().forEach((r) => {\n      if (r.topic === topic) {\n        this.deletePendingSessionRequest(r.id, getSdkError(\"USER_DISCONNECTED\"));\n      }\n    });\n    // reset the queue state back to idle if a request for the deleted session is still in the queue\n    if (topic === this.sessionRequestQueue.queue[0]?.topic) {\n      this.sessionRequestQueue.state = ENGINE_QUEUE_STATES.idle;\n    }\n    if (emitEvent) this.client.events.emit(\"session_delete\", { id, topic });\n  };\n\n  private deleteProposal: EnginePrivate[\"deleteProposal\"] = async (id, expirerHasDeleted) => {\n    if (expirerHasDeleted) {\n      try {\n        const proposal = this.client.proposal.get(id);\n        const event = this.client.core.eventClient.getEvent({ topic: proposal.pairingTopic });\n        event?.setError(EVENT_CLIENT_SESSION_ERRORS.proposal_expired);\n      } catch (error) {}\n    }\n    await Promise.all([\n      this.client.proposal.delete(id, getSdkError(\"USER_DISCONNECTED\")),\n      expirerHasDeleted ? Promise.resolve() : this.client.core.expirer.del(id),\n    ]);\n    this.addToRecentlyDeleted(id, \"proposal\");\n  };\n\n  private deletePendingSessionRequest: EnginePrivate[\"deletePendingSessionRequest\"] = async (\n    id,\n    reason,\n    expirerHasDeleted = false,\n  ) => {\n    await Promise.all([\n      this.client.pendingRequest.delete(id, reason),\n      expirerHasDeleted ? Promise.resolve() : this.client.core.expirer.del(id),\n    ]);\n    this.addToRecentlyDeleted(id, \"request\");\n    this.sessionRequestQueue.queue = this.sessionRequestQueue.queue.filter((r) => r.id !== id);\n    if (expirerHasDeleted) {\n      this.sessionRequestQueue.state = ENGINE_QUEUE_STATES.idle;\n      this.client.events.emit(\"session_request_expire\", { id });\n    }\n  };\n\n  private deletePendingAuthRequest: EnginePrivate[\"deletePendingAuthRequest\"] = async (\n    id,\n    reason,\n    expirerHasDeleted = false,\n  ) => {\n    await Promise.all([\n      this.client.auth.requests.delete(id, reason),\n      expirerHasDeleted ? Promise.resolve() : this.client.core.expirer.del(id),\n    ]);\n  };\n\n  private setExpiry: EnginePrivate[\"setExpiry\"] = async (topic, expiry) => {\n    if (!this.client.session.keys.includes(topic)) return;\n    this.client.core.expirer.set(topic, expiry);\n    await this.client.session.update(topic, { expiry });\n  };\n\n  private setProposal: EnginePrivate[\"setProposal\"] = async (id, proposal) => {\n    this.client.core.expirer.set(id, calcExpiry(ENGINE_RPC_OPTS.wc_sessionPropose.req.ttl));\n    await this.client.proposal.set(id, proposal);\n  };\n\n  private setAuthRequest: EnginePrivate[\"setAuthRequest\"] = async (id, params) => {\n    const { request, pairingTopic } = params;\n    this.client.core.expirer.set(id, request.expiryTimestamp);\n    await this.client.auth.requests.set(id, {\n      authPayload: request.authPayload,\n      requester: request.requester,\n      expiryTimestamp: request.expiryTimestamp,\n      id,\n      pairingTopic,\n      verifyContext: request.verifyContext,\n    });\n  };\n\n  private setPendingSessionRequest: EnginePrivate[\"setPendingSessionRequest\"] = async (\n    pendingRequest: PendingRequestTypes.Struct,\n  ) => {\n    const { id, topic, params, verifyContext } = pendingRequest;\n    const expiry =\n      params.request.expiryTimestamp || calcExpiry(ENGINE_RPC_OPTS.wc_sessionRequest.req.ttl);\n    this.client.core.expirer.set(id, expiry);\n    await this.client.pendingRequest.set(id, {\n      id,\n      topic,\n      params,\n      verifyContext,\n    });\n  };\n\n  private sendRequest: EnginePrivate[\"sendRequest\"] = async (args) => {\n    const { topic, method, params, expiry, relayRpcId, clientRpcId, throwOnFailedPublish } = args;\n    const payload = formatJsonRpcRequest(method, params, clientRpcId);\n\n    let message;\n    try {\n      message = await this.client.core.crypto.encode(topic, payload);\n    } catch (error) {\n      await this.cleanup();\n      this.client.logger.error(`sendRequest() -> core.crypto.encode() for topic ${topic} failed`);\n      throw error;\n    }\n\n    let attestation: string | undefined;\n    if (METHODS_TO_VERIFY.includes(method)) {\n      const decryptedId = hashMessage(JSON.stringify(payload));\n      const id = hashMessage(message);\n      attestation = await this.client.core.verify.register({ id, decryptedId });\n    }\n    const opts = ENGINE_RPC_OPTS[method].req;\n    opts.attestation = attestation;\n    if (expiry) opts.ttl = expiry;\n    if (relayRpcId) opts.id = relayRpcId;\n    this.client.core.history.set(topic, payload);\n    if (throwOnFailedPublish) {\n      opts.internal = {\n        ...opts.internal,\n        throwOnFailedPublish: true,\n      };\n      await this.client.core.relayer.publish(topic, message, opts);\n    } else {\n      this.client.core.relayer\n        .publish(topic, message, opts)\n        .catch((error) => this.client.logger.error(error));\n    }\n    return payload.id;\n  };\n\n  private sendResult: EnginePrivate[\"sendResult\"] = async (args) => {\n    const { id, topic, result, throwOnFailedPublish, encodeOpts } = args;\n    const payload = formatJsonRpcResult(id, result);\n    let message;\n    try {\n      message = await this.client.core.crypto.encode(topic, payload, encodeOpts);\n    } catch (error) {\n      // if encoding fails e.g. due to missing keychain, we want to cleanup all related data as its unusable\n      await this.cleanup();\n      this.client.logger.error(`sendResult() -> core.crypto.encode() for topic ${topic} failed`);\n      throw error;\n    }\n    let record;\n    try {\n      record = await this.client.core.history.get(topic, id);\n    } catch (error) {\n      this.client.logger.error(`sendResult() -> history.get(${topic}, ${id}) failed`);\n      throw error;\n    }\n    const opts = ENGINE_RPC_OPTS[record.request.method].res;\n    if (throwOnFailedPublish) {\n      opts.internal = {\n        ...opts.internal,\n        throwOnFailedPublish: true,\n      };\n      await this.client.core.relayer.publish(topic, message, opts);\n    } else {\n      this.client.core.relayer\n        .publish(topic, message, opts)\n        .catch((error) => this.client.logger.error(error));\n    }\n    await this.client.core.history.resolve(payload);\n  };\n\n  private sendError: EnginePrivate[\"sendError\"] = async (params) => {\n    const { id, topic, error, encodeOpts, rpcOpts } = params;\n    const payload = formatJsonRpcError(id, error);\n    let message;\n    try {\n      message = await this.client.core.crypto.encode(topic, payload, encodeOpts);\n    } catch (error) {\n      await this.cleanup();\n      this.client.logger.error(`sendError() -> core.crypto.encode() for topic ${topic} failed`);\n      throw error;\n    }\n    let record;\n    try {\n      record = await this.client.core.history.get(topic, id);\n    } catch (error) {\n      this.client.logger.error(`sendError() -> history.get(${topic}, ${id}) failed`);\n      throw error;\n    }\n    const opts = rpcOpts || ENGINE_RPC_OPTS[record.request.method].res;\n    // await is intentionally omitted to speed up performance\n    this.client.core.relayer.publish(topic, message, opts);\n    await this.client.core.history.resolve(payload);\n  };\n\n  private cleanup: EnginePrivate[\"cleanup\"] = async () => {\n    const sessionTopics: string[] = [];\n    const proposalIds: number[] = [];\n    this.client.session.getAll().forEach((session) => {\n      let toCleanup = false;\n      if (isExpired(session.expiry)) toCleanup = true;\n      if (!this.client.core.crypto.keychain.has(session.topic)) toCleanup = true;\n      if (toCleanup) sessionTopics.push(session.topic);\n    });\n    this.client.proposal.getAll().forEach((proposal) => {\n      if (isExpired(proposal.expiryTimestamp)) proposalIds.push(proposal.id);\n    });\n    await Promise.all([\n      ...sessionTopics.map((topic) => this.deleteSession({ topic })),\n      ...proposalIds.map((id) => this.deleteProposal(id)),\n    ]);\n  };\n\n  private async isInitialized() {\n    if (!this.initialized) {\n      const { message } = getInternalError(\"NOT_INITIALIZED\", this.name);\n      throw new Error(message);\n    }\n    await this.client.core.relayer.confirmOnlineStateOrThrow();\n  }\n\n  // ---------- Relay Events Router ----------------------------------- //\n\n  private registerRelayerEvents() {\n    this.client.core.relayer.on(RELAYER_EVENTS.message, (event: RelayerTypes.MessageEvent) => {\n      // capture any messages that arrive before the client is initialized so we can process them after initialization is complete\n      if (!this.initialized || this.relayMessageCache.length > 0) {\n        this.relayMessageCache.push(event);\n      } else {\n        this.onRelayMessage(event);\n      }\n    });\n  }\n\n  private async onRelayMessage(event: RelayerTypes.MessageEvent) {\n    const { topic, message, attestation } = event;\n\n    // Retrieve the public key (if defined) to decrypt possible `auth_request` response\n    const { publicKey } = this.client.auth.authKeys.keys.includes(AUTH_PUBLIC_KEY_NAME)\n      ? this.client.auth.authKeys.get(AUTH_PUBLIC_KEY_NAME)\n      : ({ responseTopic: undefined, publicKey: undefined } as any);\n\n    const payload = await this.client.core.crypto.decode(topic, message, {\n      receiverPublicKey: publicKey,\n    });\n\n    try {\n      if (isJsonRpcRequest(payload)) {\n        this.client.core.history.set(topic, payload);\n        this.onRelayEventRequest({\n          topic,\n          payload,\n          attestation,\n          encryptedId: hashMessage(message),\n        });\n      } else if (isJsonRpcResponse(payload)) {\n        await this.client.core.history.resolve(payload);\n        await this.onRelayEventResponse({ topic, payload });\n        this.client.core.history.delete(topic, payload.id);\n      } else {\n        this.onRelayEventUnknownPayload({ topic, payload });\n      }\n    } catch (error) {\n      this.client.logger.error(error);\n    }\n  }\n\n  private onRelayEventRequest: EnginePrivate[\"onRelayEventRequest\"] = async (event) => {\n    this.requestQueue.queue.push(event);\n    await this.processRequestsQueue();\n  };\n\n  private processRequestsQueue = async () => {\n    if (this.requestQueue.state === ENGINE_QUEUE_STATES.active) {\n      this.client.logger.info(`Request queue already active, skipping...`);\n      return;\n    }\n\n    this.client.logger.info(\n      `Request queue starting with ${this.requestQueue.queue.length} requests`,\n    );\n\n    while (this.requestQueue.queue.length > 0) {\n      this.requestQueue.state = ENGINE_QUEUE_STATES.active;\n      const request = this.requestQueue.queue.shift();\n      if (!request) continue;\n\n      try {\n        await this.processRequest(request);\n      } catch (error) {\n        this.client.logger.warn(error);\n      }\n    }\n    this.requestQueue.state = ENGINE_QUEUE_STATES.idle;\n  };\n\n  private processRequest: EnginePrivate[\"onRelayEventRequest\"] = async (event) => {\n    const { topic, payload, attestation, encryptedId } = event;\n    const reqMethod = payload.method as JsonRpcTypes.WcMethod;\n\n    if (this.shouldIgnorePairingRequest({ topic, requestMethod: reqMethod })) {\n      return;\n    }\n\n    switch (reqMethod) {\n      case \"wc_sessionPropose\":\n        return await this.onSessionProposeRequest({ topic, payload, attestation, encryptedId });\n      case \"wc_sessionSettle\":\n        return await this.onSessionSettleRequest(topic, payload);\n      case \"wc_sessionUpdate\":\n        return await this.onSessionUpdateRequest(topic, payload);\n      case \"wc_sessionExtend\":\n        return await this.onSessionExtendRequest(topic, payload);\n      case \"wc_sessionPing\":\n        return await this.onSessionPingRequest(topic, payload);\n      case \"wc_sessionDelete\":\n        return await this.onSessionDeleteRequest(topic, payload);\n      case \"wc_sessionRequest\":\n        return await this.onSessionRequest({ topic, payload, attestation, encryptedId });\n      case \"wc_sessionEvent\":\n        return await this.onSessionEventRequest(topic, payload);\n      case \"wc_sessionAuthenticate\":\n        return await this.onSessionAuthenticateRequest({\n          topic,\n          payload,\n          attestation,\n          encryptedId,\n        });\n      default:\n        return this.client.logger.info(`Unsupported request method ${reqMethod}`);\n    }\n  };\n\n  private onRelayEventResponse: EnginePrivate[\"onRelayEventResponse\"] = async (event) => {\n    const { topic, payload } = event;\n    const record = await this.client.core.history.get(topic, payload.id);\n    const resMethod = record.request.method as JsonRpcTypes.WcMethod;\n    switch (resMethod) {\n      case \"wc_sessionPropose\":\n        return this.onSessionProposeResponse(topic, payload);\n      case \"wc_sessionSettle\":\n        return this.onSessionSettleResponse(topic, payload);\n      case \"wc_sessionUpdate\":\n        return this.onSessionUpdateResponse(topic, payload);\n      case \"wc_sessionExtend\":\n        return this.onSessionExtendResponse(topic, payload);\n      case \"wc_sessionPing\":\n        return this.onSessionPingResponse(topic, payload);\n      case \"wc_sessionRequest\":\n        return this.onSessionRequestResponse(topic, payload);\n      case \"wc_sessionAuthenticate\":\n        return this.onSessionAuthenticateResponse(topic, payload);\n      default:\n        return this.client.logger.info(`Unsupported response method ${resMethod}`);\n    }\n  };\n\n  private onRelayEventUnknownPayload: EnginePrivate[\"onRelayEventUnknownPayload\"] = (event) => {\n    const { topic } = event;\n    const { message } = getInternalError(\n      \"MISSING_OR_INVALID\",\n      `Decoded payload on topic ${topic} is not identifiable as a JSON-RPC request or a response.`,\n    );\n    throw new Error(message);\n  };\n\n  private shouldIgnorePairingRequest: EnginePrivate[\"shouldIgnorePairingRequest\"] = (params) => {\n    const { topic, requestMethod } = params;\n    const expectedMethods = this.expectedPairingMethodMap.get(topic);\n    // check if the request method matches the expected method\n    if (!expectedMethods) return false;\n    if (expectedMethods.includes(requestMethod)) return false;\n\n    /**\n     * we want to make sure fallback session proposal is ignored only if there are subscribers\n     * for the `session_authenticate` event, otherwise this would result in no-op for the user\n     */\n    if (expectedMethods.includes(\"wc_sessionAuthenticate\")) {\n      if (this.client.events.listenerCount(\"session_authenticate\") > 0) {\n        return true;\n      }\n    }\n    return false;\n  };\n\n  // ---------- Relay Events Handlers --------------------------------- //\n\n  private onSessionProposeRequest: EnginePrivate[\"onSessionProposeRequest\"] = async (args) => {\n    const { topic, payload, attestation, encryptedId } = args;\n    const { params, id } = payload;\n    try {\n      const event = this.client.core.eventClient.getEvent({ topic });\n      this.isValidConnect({ ...payload.params });\n      const expiryTimestamp =\n        params.expiryTimestamp || calcExpiry(ENGINE_RPC_OPTS.wc_sessionPropose.req.ttl);\n      const proposal = { id, pairingTopic: topic, expiryTimestamp, ...params };\n      await this.setProposal(id, proposal);\n\n      const verifyContext = await this.getVerifyContext({\n        attestationId: attestation,\n        hash: hashMessage(JSON.stringify(payload)),\n        encryptedId,\n        metadata: proposal.proposer.metadata,\n      });\n\n      if (this.client.events.listenerCount(\"session_proposal\") === 0) {\n        console.warn(\"No listener for session_proposal event\");\n        event?.setError(EVENT_CLIENT_PAIRING_ERRORS.proposal_listener_not_found);\n      }\n      event?.addTrace(EVENT_CLIENT_PAIRING_TRACES.emit_session_proposal);\n\n      this.client.events.emit(\"session_proposal\", { id, params: proposal, verifyContext });\n    } catch (err: any) {\n      await this.sendError({\n        id,\n        topic,\n        error: err,\n        rpcOpts: ENGINE_RPC_OPTS.wc_sessionPropose.autoReject,\n      });\n      this.client.logger.error(err);\n    }\n  };\n\n  private onSessionProposeResponse: EnginePrivate[\"onSessionProposeResponse\"] = async (\n    topic,\n    payload,\n  ) => {\n    const { id } = payload;\n    if (isJsonRpcResult(payload)) {\n      const { result } = payload;\n      this.client.logger.trace({ type: \"method\", method: \"onSessionProposeResponse\", result });\n      const proposal = this.client.proposal.get(id);\n      this.client.logger.trace({ type: \"method\", method: \"onSessionProposeResponse\", proposal });\n      const selfPublicKey = proposal.proposer.publicKey;\n      this.client.logger.trace({\n        type: \"method\",\n        method: \"onSessionProposeResponse\",\n        selfPublicKey,\n      });\n      const peerPublicKey = result.responderPublicKey;\n      this.client.logger.trace({\n        type: \"method\",\n        method: \"onSessionProposeResponse\",\n        peerPublicKey,\n      });\n      const sessionTopic = await this.client.core.crypto.generateSharedKey(\n        selfPublicKey,\n        peerPublicKey,\n      );\n      this.client.logger.trace({\n        type: \"method\",\n        method: \"onSessionProposeResponse\",\n        sessionTopic,\n      });\n      const subscriptionId = await this.client.core.relayer.subscribe(sessionTopic);\n      this.client.logger.trace({\n        type: \"method\",\n        method: \"onSessionProposeResponse\",\n        subscriptionId,\n      });\n      await this.client.core.pairing.activate({ topic });\n    } else if (isJsonRpcError(payload)) {\n      await this.client.proposal.delete(id, getSdkError(\"USER_DISCONNECTED\"));\n      const target = engineEvent(\"session_connect\");\n      const listeners = this.events.listenerCount(target);\n      if (listeners === 0) {\n        throw new Error(`emitting ${target} without any listeners, 954`);\n      }\n      this.events.emit(engineEvent(\"session_connect\"), { error: payload.error });\n    }\n  };\n\n  private onSessionSettleRequest: EnginePrivate[\"onSessionSettleRequest\"] = async (\n    topic,\n    payload,\n  ) => {\n    const { id, params } = payload;\n    try {\n      this.isValidSessionSettleRequest(params);\n      const { relay, controller, expiry, namespaces, sessionProperties, sessionConfig } =\n        payload.params;\n      const session = {\n        topic,\n        relay,\n        expiry,\n        namespaces,\n        acknowledged: true,\n        pairingTopic: \"\", // pairingTopic will be set in the `session_connect` handler\n        requiredNamespaces: {},\n        optionalNamespaces: {},\n        controller: controller.publicKey,\n        self: {\n          publicKey: \"\",\n          metadata: this.client.metadata,\n        },\n        peer: {\n          publicKey: controller.publicKey,\n          metadata: controller.metadata,\n        },\n        ...(sessionProperties && { sessionProperties }),\n        ...(sessionConfig && { sessionConfig }),\n      };\n      const target = engineEvent(\"session_connect\");\n      const listeners = this.events.listenerCount(target);\n      if (listeners === 0) {\n        throw new Error(`emitting ${target} without any listeners 997`);\n      }\n      this.events.emit(engineEvent(\"session_connect\"), { session });\n      await this.sendResult<\"wc_sessionSettle\">({\n        id: payload.id,\n        topic,\n        result: true,\n        throwOnFailedPublish: true,\n      });\n    } catch (err: any) {\n      await this.sendError({\n        id,\n        topic,\n        error: err,\n      });\n      this.client.logger.error(err);\n    }\n  };\n\n  private onSessionSettleResponse: EnginePrivate[\"onSessionSettleResponse\"] = async (\n    topic,\n    payload,\n  ) => {\n    const { id } = payload;\n    if (isJsonRpcResult(payload)) {\n      await this.client.session.update(topic, { acknowledged: true });\n      this.events.emit(engineEvent(\"session_approve\", id), {});\n    } else if (isJsonRpcError(payload)) {\n      await this.client.session.delete(topic, getSdkError(\"USER_DISCONNECTED\"));\n      this.events.emit(engineEvent(\"session_approve\", id), { error: payload.error });\n    }\n  };\n\n  private onSessionUpdateRequest: EnginePrivate[\"onSessionUpdateRequest\"] = async (\n    topic,\n    payload,\n  ) => {\n    const { params, id } = payload;\n    try {\n      const memoryKey = `${topic}_session_update`;\n      // compare the current request id with the last processed session update\n      // we want to update only if the request is newer than the last processed one\n      const lastSessionUpdateId = MemoryStore.get<number>(memoryKey);\n\n      if (lastSessionUpdateId && this.isRequestOutOfSync(lastSessionUpdateId, id)) {\n        this.client.logger.info(`Discarding out of sync request - ${id}`);\n        this.sendError({ id, topic, error: getSdkError(\"INVALID_UPDATE_REQUEST\") });\n        return;\n      }\n      this.isValidUpdate({ topic, ...params });\n      try {\n        MemoryStore.set(memoryKey, id);\n        await this.client.session.update(topic, { namespaces: params.namespaces });\n        await this.sendResult<\"wc_sessionUpdate\">({\n          id,\n          topic,\n          result: true,\n          throwOnFailedPublish: true,\n        });\n      } catch (e) {\n        MemoryStore.delete(memoryKey);\n        throw e;\n      }\n\n      this.client.events.emit(\"session_update\", { id, topic, params });\n    } catch (err: any) {\n      await this.sendError({\n        id,\n        topic,\n        error: err,\n      });\n      this.client.logger.error(err);\n    }\n  };\n\n  // compares the timestamp of the last processed request with the current request\n  // client <-> client rpc ID is timestamp + 3 random digits\n  private isRequestOutOfSync = (lastId: number, currentId: number) => {\n    return parseInt(currentId.toString().slice(0, -3)) <= parseInt(lastId.toString().slice(0, -3));\n  };\n\n  private onSessionUpdateResponse: EnginePrivate[\"onSessionUpdateResponse\"] = (_topic, payload) => {\n    const { id } = payload;\n    const target = engineEvent(\"session_update\", id);\n    const listeners = this.events.listenerCount(target);\n    if (listeners === 0) {\n      throw new Error(`emitting ${target} without any listeners`);\n    }\n    if (isJsonRpcResult(payload)) {\n      this.events.emit(engineEvent(\"session_update\", id), {});\n    } else if (isJsonRpcError(payload)) {\n      this.events.emit(engineEvent(\"session_update\", id), { error: payload.error });\n    }\n  };\n\n  private onSessionExtendRequest: EnginePrivate[\"onSessionExtendRequest\"] = async (\n    topic,\n    payload,\n  ) => {\n    const { id } = payload;\n    try {\n      this.isValidExtend({ topic });\n      await this.setExpiry(topic, calcExpiry(SESSION_EXPIRY));\n      await this.sendResult<\"wc_sessionExtend\">({\n        id,\n        topic,\n        result: true,\n        throwOnFailedPublish: true,\n      });\n      this.client.events.emit(\"session_extend\", { id, topic });\n    } catch (err: any) {\n      await this.sendError({\n        id,\n        topic,\n        error: err,\n      });\n      this.client.logger.error(err);\n    }\n  };\n\n  private onSessionExtendResponse: EnginePrivate[\"onSessionExtendResponse\"] = (_topic, payload) => {\n    const { id } = payload;\n    const target = engineEvent(\"session_extend\", id);\n    const listeners = this.events.listenerCount(target);\n    if (listeners === 0) {\n      throw new Error(`emitting ${target} without any listeners`);\n    }\n    if (isJsonRpcResult(payload)) {\n      this.events.emit(engineEvent(\"session_extend\", id), {});\n    } else if (isJsonRpcError(payload)) {\n      this.events.emit(engineEvent(\"session_extend\", id), { error: payload.error });\n    }\n  };\n\n  private onSessionPingRequest: EnginePrivate[\"onSessionPingRequest\"] = async (topic, payload) => {\n    const { id } = payload;\n    try {\n      this.isValidPing({ topic });\n      await this.sendResult<\"wc_sessionPing\">({\n        id,\n        topic,\n        result: true,\n        throwOnFailedPublish: true,\n      });\n      this.client.events.emit(\"session_ping\", { id, topic });\n    } catch (err: any) {\n      await this.sendError({\n        id,\n        topic,\n        error: err,\n      });\n      this.client.logger.error(err);\n    }\n  };\n\n  private onSessionPingResponse: EnginePrivate[\"onSessionPingResponse\"] = (_topic, payload) => {\n    const { id } = payload;\n    const target = engineEvent(\"session_ping\", id);\n    const listeners = this.events.listenerCount(target);\n    if (listeners === 0) {\n      throw new Error(`emitting ${target} without any listeners`);\n    }\n    // put at the end of the stack to avoid a race condition\n    // where session_ping listener is not yet initialized\n    setTimeout(() => {\n      if (isJsonRpcResult(payload)) {\n        this.events.emit(engineEvent(\"session_ping\", id), {});\n      } else if (isJsonRpcError(payload)) {\n        this.events.emit(engineEvent(\"session_ping\", id), { error: payload.error });\n      }\n    }, 500);\n  };\n\n  private onSessionDeleteRequest: EnginePrivate[\"onSessionDeleteRequest\"] = async (\n    topic,\n    payload,\n  ) => {\n    const { id } = payload;\n    try {\n      this.isValidDisconnect({ topic, reason: payload.params });\n      await Promise.all([\n        new Promise((resolve) => {\n          // RPC request needs to happen before deletion as it utalises session encryption\n          this.client.core.relayer.once(RELAYER_EVENTS.publish, async () => {\n            resolve(await this.deleteSession({ topic, id }));\n          });\n        }),\n        this.sendResult<\"wc_sessionDelete\">({\n          id,\n          topic,\n          result: true,\n          throwOnFailedPublish: true,\n        }),\n        this.cleanupPendingSentRequestsForTopic({ topic, error: getSdkError(\"USER_DISCONNECTED\") }),\n      ]);\n    } catch (err: any) {\n      this.client.logger.error(err);\n    }\n  };\n\n  private onSessionRequest: EnginePrivate[\"onSessionRequest\"] = async (args) => {\n    const { topic, payload, attestation, encryptedId } = args;\n    const { id, params } = payload;\n    try {\n      await this.isValidRequest({ topic, ...params });\n      const session = this.client.session.get(topic);\n      const verifyContext = await this.getVerifyContext({\n        attestationId: attestation,\n        hash: hashMessage(JSON.stringify(formatJsonRpcRequest(\"wc_sessionRequest\", params, id))),\n        encryptedId,\n        metadata: session.peer.metadata,\n      });\n      const request = {\n        id,\n        topic,\n        params,\n        verifyContext,\n      };\n      await this.setPendingSessionRequest(request);\n      if (this.client.signConfig?.disableRequestQueue) {\n        this.emitSessionRequest(request);\n      } else {\n        this.addSessionRequestToSessionRequestQueue(request);\n        this.processSessionRequestQueue();\n      }\n    } catch (err: any) {\n      await this.sendError({\n        id,\n        topic,\n        error: err,\n      });\n      this.client.logger.error(err);\n    }\n  };\n\n  private onSessionRequestResponse: EnginePrivate[\"onSessionRequestResponse\"] = (\n    _topic,\n    payload,\n  ) => {\n    const { id } = payload;\n    const target = engineEvent(\"session_request\", id);\n    const listeners = this.events.listenerCount(target);\n    if (listeners === 0) {\n      throw new Error(`emitting ${target} without any listeners`);\n    }\n    if (isJsonRpcResult(payload)) {\n      this.events.emit(engineEvent(\"session_request\", id), { result: payload.result });\n    } else if (isJsonRpcError(payload)) {\n      this.events.emit(engineEvent(\"session_request\", id), { error: payload.error });\n    }\n  };\n\n  private onSessionEventRequest: EnginePrivate[\"onSessionEventRequest\"] = async (\n    topic,\n    payload,\n  ) => {\n    const { id, params } = payload;\n    try {\n      // similar to session update, we want to discard out of sync requests\n      // additionally we have to check the event type as well e.g. chainChanged/accountsChanged\n      const memoryKey = `${topic}_session_event_${params.event.name}`;\n      // compare the current request id with the last processed session update\n      // we want to update only if the request is newer than the last processed one\n      const lastSessionUpdateId = MemoryStore.get<number>(memoryKey);\n      if (lastSessionUpdateId && this.isRequestOutOfSync(lastSessionUpdateId, id)) {\n        this.client.logger.info(`Discarding out of sync request - ${id}`);\n        return;\n      }\n\n      this.isValidEmit({ topic, ...params });\n      this.client.events.emit(\"session_event\", { id, topic, params });\n      MemoryStore.set(memoryKey, id);\n    } catch (err: any) {\n      await this.sendError({\n        id,\n        topic,\n        error: err,\n      });\n      this.client.logger.error(err);\n    }\n  };\n\n  private onSessionAuthenticateResponse: EnginePrivate[\"onSessionAuthenticateResponse\"] = (\n    topic,\n    payload,\n  ) => {\n    const { id } = payload;\n    this.client.logger.trace({\n      type: \"method\",\n      method: \"onSessionAuthenticateResponse\",\n      topic,\n      payload,\n    });\n    if (isJsonRpcResult(payload)) {\n      this.events.emit(engineEvent(\"session_request\", id), { result: payload.result });\n    } else if (isJsonRpcError(payload)) {\n      this.events.emit(engineEvent(\"session_request\", id), { error: payload.error });\n    }\n  };\n\n  private onSessionAuthenticateRequest: EnginePrivate[\"onSessionAuthenticateRequest\"] = async (\n    args,\n  ) => {\n    const { topic, payload, attestation, encryptedId } = args;\n    try {\n      const { requester, authPayload, expiryTimestamp } = payload.params;\n      const verifyContext = await this.getVerifyContext({\n        attestationId: attestation,\n        hash: hashMessage(JSON.stringify(payload)),\n        encryptedId,\n        metadata: this.client.metadata,\n      });\n      const pendingRequest = {\n        requester,\n        pairingTopic: topic,\n        id: payload.id,\n        authPayload,\n        verifyContext,\n        expiryTimestamp,\n      };\n      await this.setAuthRequest(payload.id, { request: pendingRequest, pairingTopic: topic });\n      this.client.events.emit(\"session_authenticate\", {\n        topic,\n        params: payload.params,\n        id: payload.id,\n        verifyContext,\n      });\n    } catch (err: any) {\n      this.client.logger.error(err);\n\n      const receiverPublicKey = payload.params.requester.publicKey;\n      const senderPublicKey = await this.client.core.crypto.generateKeyPair();\n\n      const encodeOpts = {\n        type: TYPE_1,\n        receiverPublicKey,\n        senderPublicKey,\n      };\n      await this.sendError({\n        id: payload.id,\n        topic,\n        error: err,\n        encodeOpts,\n        rpcOpts: ENGINE_RPC_OPTS.wc_sessionAuthenticate.autoReject,\n      });\n    }\n  };\n\n  private addSessionRequestToSessionRequestQueue = (request: PendingRequestTypes.Struct) => {\n    this.sessionRequestQueue.queue.push(request);\n  };\n\n  private cleanupAfterResponse = (params: EngineTypes.RespondParams) => {\n    this.deletePendingSessionRequest(params.response.id, { message: \"fulfilled\", code: 0 });\n    // intentionally delay the emitting of the next pending request a bit\n    setTimeout(() => {\n      this.sessionRequestQueue.state = ENGINE_QUEUE_STATES.idle;\n      this.processSessionRequestQueue();\n    }, toMiliseconds(this.requestQueueDelay));\n  };\n\n  // Allows for cleanup on any sent pending requests if the peer disconnects the session before responding\n  private cleanupPendingSentRequestsForTopic = ({\n    topic,\n    error,\n  }: {\n    topic: string;\n    error: ErrorResponse;\n  }) => {\n    const pendingRequests = this.client.core.history.pending;\n    if (pendingRequests.length > 0) {\n      const forSession = pendingRequests.filter(\n        (r) => r.topic === topic && r.request.method === \"wc_sessionRequest\",\n      );\n      forSession.forEach((r) => {\n        const id = r.request.id;\n        const target = engineEvent(\"session_request\", id);\n        const listeners = this.events.listenerCount(target);\n        if (listeners === 0) {\n          throw new Error(`emitting ${target} without any listeners`);\n        }\n        // notify .request() handler of the rejection\n        this.events.emit(engineEvent(\"session_request\", r.request.id), {\n          error,\n        });\n      });\n    }\n  };\n\n  private processSessionRequestQueue = () => {\n    if (this.sessionRequestQueue.state === ENGINE_QUEUE_STATES.active) {\n      this.client.logger.info(\"session request queue is already active.\");\n      return;\n    }\n    // Select the first/oldest request in the array to ensure last-in-first-out (LIFO)\n    const request = this.sessionRequestQueue.queue[0];\n    if (!request) {\n      this.client.logger.info(\"session request queue is empty.\");\n      return;\n    }\n\n    try {\n      this.sessionRequestQueue.state = ENGINE_QUEUE_STATES.active;\n      this.emitSessionRequest(request);\n    } catch (error) {\n      this.client.logger.error(error);\n    }\n  };\n\n  private emitSessionRequest = (request: PendingRequestTypes.Struct) => {\n    this.client.events.emit(\"session_request\", request);\n  };\n\n  // ---------- Expirer Events ---------------------------------------- //\n\n  private registerExpirerEvents() {\n    this.client.core.expirer.on(EXPIRER_EVENTS.expired, async (event: ExpirerTypes.Expiration) => {\n      const { topic, id } = parseExpirerTarget(event.target);\n      if (id && this.client.pendingRequest.keys.includes(id)) {\n        return await this.deletePendingSessionRequest(id, getInternalError(\"EXPIRED\"), true);\n      }\n      if (id && this.client.auth.requests.keys.includes(id)) {\n        return await this.deletePendingAuthRequest(id, getInternalError(\"EXPIRED\"), true);\n      }\n\n      if (topic) {\n        if (this.client.session.keys.includes(topic)) {\n          await this.deleteSession({ topic, expirerHasDeleted: true });\n          this.client.events.emit(\"session_expire\", { topic });\n        }\n      } else if (id) {\n        await this.deleteProposal(id, true);\n        this.client.events.emit(\"proposal_expire\", { id });\n      }\n    });\n  }\n\n  // ---------- Pairing Events ---------------------------------------- //\n  private registerPairingEvents() {\n    this.client.core.pairing.events.on(PAIRING_EVENTS.create, (pairing: PairingTypes.Struct) =>\n      this.onPairingCreated(pairing),\n    );\n    this.client.core.pairing.events.on(PAIRING_EVENTS.delete, (pairing: PairingTypes.Struct) => {\n      this.addToRecentlyDeleted(pairing.topic, \"pairing\");\n    });\n  }\n\n  /**\n   * when a pairing is created, we check if there is a pending proposal for it.\n   * if there is, we send it to onSessionProposeRequest to be processed as if it was received from the relay.\n   * It allows QR/URI to be scanned multiple times without having to create new pairing.\n   */\n  private onPairingCreated = (pairing: PairingTypes.Struct) => {\n    if (pairing.methods) {\n      this.expectedPairingMethodMap.set(pairing.topic, pairing.methods);\n    }\n    if (pairing.active) return;\n    const proposals = this.client.proposal.getAll();\n    const proposal = proposals.find((p) => p.pairingTopic === pairing.topic);\n    if (!proposal) return;\n    this.onSessionProposeRequest({\n      topic: pairing.topic,\n      payload: formatJsonRpcRequest(\n        \"wc_sessionPropose\",\n        {\n          requiredNamespaces: proposal.requiredNamespaces,\n          optionalNamespaces: proposal.optionalNamespaces,\n          relays: proposal.relays,\n          proposer: proposal.proposer,\n          sessionProperties: proposal.sessionProperties,\n        },\n        proposal.id,\n      ),\n    });\n  };\n\n  // ---------- Validation Helpers ------------------------------------ //\n  private isValidPairingTopic(topic: any) {\n    if (!isValidString(topic, false)) {\n      const { message } = getInternalError(\n        \"MISSING_OR_INVALID\",\n        `pairing topic should be a string: ${topic}`,\n      );\n      throw new Error(message);\n    }\n    if (!this.client.core.pairing.pairings.keys.includes(topic)) {\n      const { message } = getInternalError(\n        \"NO_MATCHING_KEY\",\n        `pairing topic doesn't exist: ${topic}`,\n      );\n      throw new Error(message);\n    }\n    if (isExpired(this.client.core.pairing.pairings.get(topic).expiry)) {\n      const { message } = getInternalError(\"EXPIRED\", `pairing topic: ${topic}`);\n      throw new Error(message);\n    }\n  }\n\n  private async isValidSessionTopic(topic: any) {\n    if (!isValidString(topic, false)) {\n      const { message } = getInternalError(\n        \"MISSING_OR_INVALID\",\n        `session topic should be a string: ${topic}`,\n      );\n      throw new Error(message);\n    }\n    // Store will throw custom message if topic was recently deleted\n    this.checkRecentlyDeleted(topic);\n    if (!this.client.session.keys.includes(topic)) {\n      const { message } = getInternalError(\n        \"NO_MATCHING_KEY\",\n        `session topic doesn't exist: ${topic}`,\n      );\n      throw new Error(message);\n    }\n    if (isExpired(this.client.session.get(topic).expiry)) {\n      await this.deleteSession({ topic });\n      const { message } = getInternalError(\"EXPIRED\", `session topic: ${topic}`);\n      throw new Error(message);\n    }\n\n    if (!this.client.core.crypto.keychain.has(topic)) {\n      const { message } = getInternalError(\n        \"MISSING_OR_INVALID\",\n        `session topic does not exist in keychain: ${topic}`,\n      );\n      await this.deleteSession({ topic });\n      throw new Error(message);\n    }\n  }\n\n  private async isValidSessionOrPairingTopic(topic: string) {\n    this.checkRecentlyDeleted(topic);\n    if (this.client.session.keys.includes(topic)) {\n      await this.isValidSessionTopic(topic);\n    } else if (this.client.core.pairing.pairings.keys.includes(topic)) {\n      this.isValidPairingTopic(topic);\n    } else if (!isValidString(topic, false)) {\n      const { message } = getInternalError(\n        \"MISSING_OR_INVALID\",\n        `session or pairing topic should be a string: ${topic}`,\n      );\n      throw new Error(message);\n    } else {\n      const { message } = getInternalError(\n        \"NO_MATCHING_KEY\",\n        `session or pairing topic doesn't exist: ${topic}`,\n      );\n      throw new Error(message);\n    }\n  }\n\n  private async isValidProposalId(id: any) {\n    if (!isValidId(id)) {\n      const { message } = getInternalError(\n        \"MISSING_OR_INVALID\",\n        `proposal id should be a number: ${id}`,\n      );\n      throw new Error(message);\n    }\n    if (!this.client.proposal.keys.includes(id)) {\n      const { message } = getInternalError(\"NO_MATCHING_KEY\", `proposal id doesn't exist: ${id}`);\n      throw new Error(message);\n    }\n    if (isExpired(this.client.proposal.get(id).expiryTimestamp)) {\n      await this.deleteProposal(id);\n      const { message } = getInternalError(\"EXPIRED\", `proposal id: ${id}`);\n      throw new Error(message);\n    }\n  }\n\n  // ---------- Validation  ------------------------------------------- //\n\n  private isValidConnect: EnginePrivate[\"isValidConnect\"] = async (params) => {\n    if (!isValidParams(params)) {\n      const { message } = getInternalError(\n        \"MISSING_OR_INVALID\",\n        `connect() params: ${JSON.stringify(params)}`,\n      );\n      throw new Error(message);\n    }\n    const { pairingTopic, requiredNamespaces, optionalNamespaces, sessionProperties, relays } =\n      params;\n    if (!isUndefined(pairingTopic)) await this.isValidPairingTopic(pairingTopic);\n\n    if (!isValidRelays(relays, true)) {\n      const { message } = getInternalError(\"MISSING_OR_INVALID\", `connect() relays: ${relays}`);\n      throw new Error(message);\n    }\n\n    // validate required namespaces only if they are defined\n    if (!isUndefined(requiredNamespaces) && isValidObject(requiredNamespaces) !== 0) {\n      this.validateNamespaces(requiredNamespaces, \"requiredNamespaces\");\n    }\n\n    // validate optional namespaces only if they are defined\n    if (!isUndefined(optionalNamespaces) && isValidObject(optionalNamespaces) !== 0) {\n      this.validateNamespaces(optionalNamespaces, \"optionalNamespaces\");\n    }\n\n    // validate session properties only if they are defined\n    if (!isUndefined(sessionProperties)) {\n      this.validateSessionProps(sessionProperties, \"sessionProperties\");\n    }\n  };\n\n  private validateNamespaces = (\n    namespaces: ProposalTypes.RequiredNamespaces | ProposalTypes.OptionalNamespaces,\n    type: string,\n  ) => {\n    const validRequiredNamespacesError = isValidRequiredNamespaces(namespaces, \"connect()\", type);\n    if (validRequiredNamespacesError) throw new Error(validRequiredNamespacesError.message);\n  };\n\n  private isValidApprove: EnginePrivate[\"isValidApprove\"] = async (params) => {\n    if (!isValidParams(params))\n      throw new Error(\n        getInternalError(\"MISSING_OR_INVALID\", `approve() params: ${params}`).message,\n      );\n    const { id, namespaces, relayProtocol, sessionProperties } = params;\n\n    this.checkRecentlyDeleted(id);\n    await this.isValidProposalId(id);\n    const proposal = this.client.proposal.get(id);\n    const validNamespacesError = isValidNamespaces(namespaces, \"approve()\");\n    if (validNamespacesError) throw new Error(validNamespacesError.message);\n    const conformingNamespacesError = isConformingNamespaces(\n      proposal.requiredNamespaces,\n      namespaces,\n      \"approve()\",\n    );\n    if (conformingNamespacesError) throw new Error(conformingNamespacesError.message);\n    if (!isValidString(relayProtocol, true)) {\n      const { message } = getInternalError(\n        \"MISSING_OR_INVALID\",\n        `approve() relayProtocol: ${relayProtocol}`,\n      );\n      throw new Error(message);\n    }\n\n    if (!isUndefined(sessionProperties)) {\n      this.validateSessionProps(sessionProperties, \"sessionProperties\");\n    }\n  };\n\n  private isValidReject: EnginePrivate[\"isValidReject\"] = async (params) => {\n    if (!isValidParams(params)) {\n      const { message } = getInternalError(\"MISSING_OR_INVALID\", `reject() params: ${params}`);\n      throw new Error(message);\n    }\n    const { id, reason } = params;\n    this.checkRecentlyDeleted(id);\n    await this.isValidProposalId(id);\n    if (!isValidErrorReason(reason)) {\n      const { message } = getInternalError(\n        \"MISSING_OR_INVALID\",\n        `reject() reason: ${JSON.stringify(reason)}`,\n      );\n      throw new Error(message);\n    }\n  };\n\n  private isValidSessionSettleRequest: EnginePrivate[\"isValidSessionSettleRequest\"] = (params) => {\n    if (!isValidParams(params)) {\n      const { message } = getInternalError(\n        \"MISSING_OR_INVALID\",\n        `onSessionSettleRequest() params: ${params}`,\n      );\n      throw new Error(message);\n    }\n    const { relay, controller, namespaces, expiry } = params;\n    if (!isValidRelay(relay)) {\n      const { message } = getInternalError(\n        \"MISSING_OR_INVALID\",\n        `onSessionSettleRequest() relay protocol should be a string`,\n      );\n      throw new Error(message);\n    }\n    const validControllerError = isValidController(controller, \"onSessionSettleRequest()\");\n    if (validControllerError) throw new Error(validControllerError.message);\n    const validNamespacesError = isValidNamespaces(namespaces, \"onSessionSettleRequest()\");\n    if (validNamespacesError) throw new Error(validNamespacesError.message);\n    if (isExpired(expiry)) {\n      const { message } = getInternalError(\"EXPIRED\", `onSessionSettleRequest()`);\n      throw new Error(message);\n    }\n  };\n\n  private isValidUpdate: EnginePrivate[\"isValidUpdate\"] = async (params) => {\n    if (!isValidParams(params)) {\n      const { message } = getInternalError(\"MISSING_OR_INVALID\", `update() params: ${params}`);\n      throw new Error(message);\n    }\n    const { topic, namespaces } = params;\n\n    this.checkRecentlyDeleted(topic);\n    await this.isValidSessionTopic(topic);\n    const session = this.client.session.get(topic);\n    const validNamespacesError = isValidNamespaces(namespaces, \"update()\");\n    if (validNamespacesError) throw new Error(validNamespacesError.message);\n    const conformingNamespacesError = isConformingNamespaces(\n      session.requiredNamespaces,\n      namespaces,\n      \"update()\",\n    );\n    if (conformingNamespacesError) throw new Error(conformingNamespacesError.message);\n    // TODO(ilja) - check if wallet\n  };\n\n  private isValidExtend: EnginePrivate[\"isValidExtend\"] = async (params) => {\n    if (!isValidParams(params)) {\n      const { message } = getInternalError(\"MISSING_OR_INVALID\", `extend() params: ${params}`);\n      throw new Error(message);\n    }\n    const { topic } = params;\n\n    this.checkRecentlyDeleted(topic);\n    await this.isValidSessionTopic(topic);\n  };\n\n  private isValidRequest: EnginePrivate[\"isValidRequest\"] = async (params) => {\n    if (!isValidParams(params)) {\n      const { message } = getInternalError(\"MISSING_OR_INVALID\", `request() params: ${params}`);\n      throw new Error(message);\n    }\n    const { topic, request, chainId, expiry } = params;\n    this.checkRecentlyDeleted(topic);\n    await this.isValidSessionTopic(topic);\n    const { namespaces } = this.client.session.get(topic);\n    if (!isValidNamespacesChainId(namespaces, chainId)) {\n      const { message } = getInternalError(\"MISSING_OR_INVALID\", `request() chainId: ${chainId}`);\n      throw new Error(message);\n    }\n    if (!isValidRequest(request)) {\n      const { message } = getInternalError(\n        \"MISSING_OR_INVALID\",\n        `request() ${JSON.stringify(request)}`,\n      );\n      throw new Error(message);\n    }\n    if (!isValidNamespacesRequest(namespaces, chainId, request.method)) {\n      const { message } = getInternalError(\n        \"MISSING_OR_INVALID\",\n        `request() method: ${request.method}`,\n      );\n      throw new Error(message);\n    }\n    if (expiry && !isValidRequestExpiry(expiry, SESSION_REQUEST_EXPIRY_BOUNDARIES)) {\n      const { message } = getInternalError(\n        \"MISSING_OR_INVALID\",\n        `request() expiry: ${expiry}. Expiry must be a number (in seconds) between ${SESSION_REQUEST_EXPIRY_BOUNDARIES.min} and ${SESSION_REQUEST_EXPIRY_BOUNDARIES.max}`,\n      );\n      throw new Error(message);\n    }\n  };\n\n  private isValidRespond: EnginePrivate[\"isValidRespond\"] = async (params) => {\n    if (!isValidParams(params)) {\n      const { message } = getInternalError(\"MISSING_OR_INVALID\", `respond() params: ${params}`);\n      throw new Error(message);\n    }\n    const { topic, response } = params;\n    try {\n      // if the session is already disconnected, we can't respond to the request so we need to delete it\n      await this.isValidSessionTopic(topic);\n    } catch (error) {\n      if (params?.response?.id) this.cleanupAfterResponse(params);\n      throw error;\n    }\n    if (!isValidResponse(response)) {\n      const { message } = getInternalError(\n        \"MISSING_OR_INVALID\",\n        `respond() response: ${JSON.stringify(response)}`,\n      );\n      throw new Error(message);\n    }\n  };\n\n  private isValidPing: EnginePrivate[\"isValidPing\"] = async (params) => {\n    if (!isValidParams(params)) {\n      const { message } = getInternalError(\"MISSING_OR_INVALID\", `ping() params: ${params}`);\n      throw new Error(message);\n    }\n    const { topic } = params;\n    await this.isValidSessionOrPairingTopic(topic);\n  };\n\n  private isValidEmit: EnginePrivate[\"isValidEmit\"] = async (params) => {\n    if (!isValidParams(params)) {\n      const { message } = getInternalError(\"MISSING_OR_INVALID\", `emit() params: ${params}`);\n      throw new Error(message);\n    }\n    const { topic, event, chainId } = params;\n    await this.isValidSessionTopic(topic);\n    const { namespaces } = this.client.session.get(topic);\n    if (!isValidNamespacesChainId(namespaces, chainId)) {\n      const { message } = getInternalError(\"MISSING_OR_INVALID\", `emit() chainId: ${chainId}`);\n      throw new Error(message);\n    }\n    if (!isValidEvent(event)) {\n      const { message } = getInternalError(\n        \"MISSING_OR_INVALID\",\n        `emit() event: ${JSON.stringify(event)}`,\n      );\n      throw new Error(message);\n    }\n    if (!isValidNamespacesEvent(namespaces, chainId, event.name)) {\n      const { message } = getInternalError(\n        \"MISSING_OR_INVALID\",\n        `emit() event: ${JSON.stringify(event)}`,\n      );\n      throw new Error(message);\n    }\n  };\n\n  private isValidDisconnect: EnginePrivate[\"isValidDisconnect\"] = async (params) => {\n    if (!isValidParams(params)) {\n      const { message } = getInternalError(\"MISSING_OR_INVALID\", `disconnect() params: ${params}`);\n      throw new Error(message);\n    }\n    const { topic } = params;\n    await this.isValidSessionOrPairingTopic(topic);\n  };\n\n  private isValidAuthenticate = (params: AuthTypes.SessionAuthenticateParams) => {\n    const { chains, uri, domain, nonce } = params;\n\n    // ----- validate params ----- //\n    if (!Array.isArray(chains) || chains.length === 0) {\n      throw new Error(\"chains is required and must be a non-empty array\");\n    }\n    if (!isValidString(uri, false)) {\n      throw new Error(\"uri is required parameter\");\n    }\n    if (!isValidString(domain, false)) {\n      throw new Error(\"domain is required parameter\");\n    }\n    if (!isValidString(nonce, false)) {\n      throw new Error(\"nonce is required parameter\");\n    }\n\n    // ----- reject multi namespaces ----- //\n    const uniqueNamespaces = [...new Set(chains.map((chain) => parseChainId(chain).namespace))];\n    if (uniqueNamespaces.length > 1) {\n      throw new Error(\n        \"Multi-namespace requests are not supported. Please request single namespace only.\",\n      );\n    }\n\n    const { namespace } = parseChainId(chains[0]);\n    if (namespace !== \"eip155\") {\n      throw new Error(\n        \"Only eip155 namespace is supported for authenticated sessions. Please use .connect() for non-eip155 chains.\",\n      );\n    }\n  };\n\n  private getVerifyContext = async (params: {\n    attestationId?: string;\n    hash?: string;\n    encryptedId?: string;\n    metadata: CoreTypes.Metadata;\n  }) => {\n    const { attestationId, hash, encryptedId, metadata } = params;\n    const context: Verify.Context = {\n      verified: {\n        verifyUrl: metadata.verifyUrl || VERIFY_SERVER,\n        validation: \"UNKNOWN\",\n        origin: metadata.url || \"\",\n      },\n    };\n\n    try {\n      const result = await this.client.core.verify.resolve({\n        attestationId,\n        hash,\n        encryptedId,\n        verifyUrl: metadata.verifyUrl,\n      });\n      if (result) {\n        context.verified.origin = result.origin;\n        context.verified.isScam = result.isScam;\n        context.verified.validation =\n          result.origin === new URL(metadata.url).origin ? \"VALID\" : \"INVALID\";\n      }\n    } catch (e) {\n      this.client.logger.warn(e);\n    }\n\n    this.client.logger.debug(`Verify context: ${JSON.stringify(context)}`);\n    return context;\n  };\n\n  private validateSessionProps = (properties: ProposalTypes.SessionProperties, type: string) => {\n    Object.values(properties).forEach((property) => {\n      if (!isValidString(property, false)) {\n        const { message } = getInternalError(\n          \"MISSING_OR_INVALID\",\n          `${type} must be in Record<string, string> format. Received: ${JSON.stringify(property)}`,\n        );\n        throw new Error(message);\n      }\n    });\n  };\n\n  private getPendingAuthRequest = (id: number) => {\n    const request = this.client.auth.requests.get(id);\n    return typeof request === \"object\" ? request : undefined;\n  };\n\n  private addToRecentlyDeleted = (\n    id: string | number,\n    type: \"pairing\" | \"session\" | \"proposal\" | \"request\",\n  ) => {\n    this.recentlyDeletedMap.set(id, type);\n    // remove first half of the map if it exceeds the limit\n    if (this.recentlyDeletedMap.size >= this.recentlyDeletedLimit) {\n      let i = 0;\n      const numItemsToDelete = this.recentlyDeletedLimit / 2;\n      for (const k of this.recentlyDeletedMap.keys()) {\n        if (i++ >= numItemsToDelete) {\n          break;\n        }\n        this.recentlyDeletedMap.delete(k);\n      }\n    }\n  };\n\n  private checkRecentlyDeleted = (id: string | number) => {\n    const deletedRecord = this.recentlyDeletedMap.get(id);\n    if (deletedRecord) {\n      const { message } = getInternalError(\n        \"MISSING_OR_INVALID\",\n        `Record was recently deleted - ${deletedRecord}: ${id}`,\n      );\n      throw new Error(message);\n    }\n  };\n}\n","import { Store } from \"@walletconnect/core\";\nimport { Logger } from \"@walletconnect/logger\";\nimport { ICore, ProposalTypes } from \"@walletconnect/types\";\n\nimport { SIGN_CLIENT_STORAGE_PREFIX, PROPOSAL_CONTEXT } from \"../constants\";\n\nexport class Proposal extends Store<number, ProposalTypes.Struct> {\n  constructor(public core: ICore, public logger: Logger) {\n    super(core, logger, PROPOSAL_CONTEXT, SIGN_CLIENT_STORAGE_PREFIX);\n  }\n}\n","import { Store } from \"@walletconnect/core\";\nimport { Logger } from \"@walletconnect/logger\";\nimport { ICore, SessionTypes } from \"@walletconnect/types\";\n\nimport { SIGN_CLIENT_STORAGE_PREFIX, SESSION_CONTEXT } from \"../constants\";\n\nexport class Session extends Store<string, SessionTypes.Struct> {\n  constructor(public core: ICore, public logger: Logger) {\n    super(core, logger, SESSION_CONTEXT, SIGN_CLIENT_STORAGE_PREFIX);\n  }\n}\n","import { Store } from \"@walletconnect/core\";\nimport { Logger } from \"@walletconnect/logger\";\nimport { ICore, PendingRequestTypes } from \"@walletconnect/types\";\nimport { REQUEST_CONTEXT, SIGN_CLIENT_STORAGE_PREFIX } from \"../constants\";\n\nexport class PendingRequest extends Store<number, PendingRequestTypes.Struct> {\n  constructor(public core: ICore, public logger: Logger) {\n    super(\n      core,\n      logger,\n      REQUEST_CONTEXT,\n      SIGN_CLIENT_STORAGE_PREFIX,\n      (val: PendingRequestTypes.Struct) => val.id,\n    );\n  }\n}\n","import { Store } from \"@walletconnect/core\";\nimport { Logger } from \"@walletconnect/logger\";\nimport { ICore } from \"@walletconnect/types\";\n\nimport { AUTH_KEYS_CONTEXT, AUTH_STORAGE_PREFIX, AUTH_PUBLIC_KEY_NAME } from \"../constants\";\n\nexport class AuthKey extends Store<string, { responseTopic: string; publicKey: string }> {\n  constructor(public core: ICore, public logger: Logger) {\n    super(core, logger, AUTH_KEYS_CONTEXT, AUTH_STORAGE_PREFIX, () => AUTH_PUBLIC_KEY_NAME);\n  }\n}\n","import { Store } from \"@walletconnect/core\";\nimport { Logger } from \"@walletconnect/logger\";\nimport { ICore } from \"@walletconnect/types\";\n\nimport { AUTH_PAIRING_TOPIC_CONTEXT, AUTH_STORAGE_PREFIX } from \"../constants\";\n\nexport class AuthPairingTopic extends Store<string, { topic: string; pairingTopic: string }> {\n  constructor(public core: ICore, public logger: Logger) {\n    super(core, logger, AUTH_PAIRING_TOPIC_CONTEXT, AUTH_STORAGE_PREFIX);\n  }\n}\n","import { Store } from \"@walletconnect/core\";\nimport { Logger } from \"@walletconnect/logger\";\nimport { AuthTypes, ICore } from \"@walletconnect/types\";\n\nimport { AUTH_STORAGE_PREFIX, AUTH_REQUEST_CONTEXT } from \"../constants\";\n\nexport class AuthRequest extends Store<number, AuthTypes.PendingRequest> {\n  constructor(public core: ICore, public logger: Logger) {\n    super(\n      core,\n      logger,\n      AUTH_REQUEST_CONTEXT,\n      AUTH_STORAGE_PREFIX,\n      (val: AuthTypes.PendingRequest) => val.id,\n    );\n  }\n}\n","import { Logger } from \"@walletconnect/logger\";\nimport { IAuth, ICore } from \"@walletconnect/types\";\nimport { AuthPairingTopic } from \"./authPairingTopic\";\nimport { AuthRequest } from \"./authRequest\";\nimport { AuthKey } from \"./authKey\";\n\nexport class AuthStore {\n  public authKeys: IAuth[\"authKeys\"];\n  public pairingTopics: IAuth[\"pairingTopics\"];\n  public requests: IAuth[\"requests\"];\n\n  constructor(public core: ICore, public logger: Logger) {\n    this.authKeys = new AuthKey(this.core, this.logger);\n    this.pairingTopics = new AuthPairingTopic(this.core, this.logger);\n    this.requests = new AuthRequest(this.core, this.logger);\n  }\n\n  public async init() {\n    await this.authKeys.init();\n    await this.pairingTopics.init();\n    await this.requests.init();\n  }\n}\n","import { Core } from \"@walletconnect/core\";\nimport {\n  generateChildLogger,\n  getDefaultLoggerOptions,\n  getLoggerContext,\n  pino,\n} from \"@walletconnect/logger\";\nimport { SignClientTypes, ISignClient, ISignClientEvents, EngineTypes } from \"@walletconnect/types\";\nimport { getAppMetadata } from \"@walletconnect/utils\";\nimport { EventEmitter } from \"events\";\nimport { SIGN_CLIENT_DEFAULT, SIGN_CLIENT_PROTOCOL, SIGN_CLIENT_VERSION } from \"./constants\";\nimport { AuthStore, Engine, PendingRequest, Proposal, Session } from \"./controllers\";\n\nexport class SignClient extends ISignClient {\n  public readonly protocol = SIGN_CLIENT_PROTOCOL;\n  public readonly version = SIGN_CLIENT_VERSION;\n  public readonly name: ISignClient[\"name\"] = SIGN_CLIENT_DEFAULT.name;\n  public readonly metadata: ISignClient[\"metadata\"];\n\n  public core: ISignClient[\"core\"];\n  public logger: ISignClient[\"logger\"];\n  public events: ISignClient[\"events\"] = new EventEmitter();\n  public engine: ISignClient[\"engine\"];\n  public session: ISignClient[\"session\"];\n  public proposal: ISignClient[\"proposal\"];\n  public pendingRequest: ISignClient[\"pendingRequest\"];\n  public auth: ISignClient[\"auth\"];\n  public signConfig?: ISignClient[\"signConfig\"];\n\n  static async init(opts?: SignClientTypes.Options) {\n    const client = new SignClient(opts);\n    await client.initialize();\n\n    return client;\n  }\n\n  constructor(opts?: SignClientTypes.Options) {\n    super(opts);\n\n    this.name = opts?.name || SIGN_CLIENT_DEFAULT.name;\n    this.metadata = opts?.metadata || getAppMetadata();\n    this.signConfig = opts?.signConfig;\n\n    const logger =\n      typeof opts?.logger !== \"undefined\" && typeof opts?.logger !== \"string\"\n        ? opts.logger\n        : pino(getDefaultLoggerOptions({ level: opts?.logger || SIGN_CLIENT_DEFAULT.logger }));\n\n    this.core = opts?.core || new Core(opts);\n    this.logger = generateChildLogger(logger, this.name);\n    this.session = new Session(this.core, this.logger);\n    this.proposal = new Proposal(this.core, this.logger);\n    this.pendingRequest = new PendingRequest(this.core, this.logger);\n    this.engine = new Engine(this);\n    this.auth = new AuthStore(this.core, this.logger);\n  }\n\n  get context() {\n    return getLoggerContext(this.logger);\n  }\n\n  get pairing() {\n    return this.core.pairing.pairings;\n  }\n\n  // ---------- Events ----------------------------------------------- //\n\n  public on: ISignClientEvents[\"on\"] = (name, listener) => {\n    return this.events.on(name, listener);\n  };\n\n  public once: ISignClientEvents[\"once\"] = (name, listener) => {\n    return this.events.once(name, listener);\n  };\n\n  public off: ISignClientEvents[\"off\"] = (name, listener) => {\n    return this.events.off(name, listener);\n  };\n\n  public removeListener: ISignClientEvents[\"removeListener\"] = (name, listener) => {\n    return this.events.removeListener(name, listener);\n  };\n\n  public removeAllListeners: ISignClientEvents[\"removeAllListeners\"] = (name) => {\n    return this.events.removeAllListeners(name);\n  };\n\n  // ---------- Engine ----------------------------------------------- //\n\n  public connect: ISignClient[\"connect\"] = async (params) => {\n    try {\n      return await this.engine.connect(params);\n    } catch (error: any) {\n      this.logger.error(error.message);\n      throw error;\n    }\n  };\n\n  public pair: ISignClient[\"pair\"] = async (params) => {\n    try {\n      return await this.engine.pair(params);\n    } catch (error: any) {\n      this.logger.error(error.message);\n      throw error;\n    }\n  };\n\n  public approve: ISignClient[\"approve\"] = async (params) => {\n    try {\n      return await this.engine.approve(params);\n    } catch (error: any) {\n      this.logger.error(error.message);\n      throw error;\n    }\n  };\n\n  public reject: ISignClient[\"reject\"] = async (params) => {\n    try {\n      return await this.engine.reject(params);\n    } catch (error: any) {\n      this.logger.error(error.message);\n      throw error;\n    }\n  };\n\n  public update: ISignClient[\"update\"] = async (params) => {\n    try {\n      return await this.engine.update(params);\n    } catch (error: any) {\n      this.logger.error(error.message);\n      throw error;\n    }\n  };\n\n  public extend: ISignClient[\"extend\"] = async (params) => {\n    try {\n      return await this.engine.extend(params);\n    } catch (error: any) {\n      this.logger.error(error.message);\n      throw error;\n    }\n  };\n\n  public request: ISignClient[\"request\"] = async <T>(params: EngineTypes.RequestParams) => {\n    try {\n      return await this.engine.request<T>(params);\n    } catch (error: any) {\n      this.logger.error(error.message);\n      throw error;\n    }\n  };\n\n  public respond: ISignClient[\"respond\"] = async (params) => {\n    try {\n      return await this.engine.respond(params);\n    } catch (error: any) {\n      this.logger.error(error.message);\n      throw error;\n    }\n  };\n\n  public ping: ISignClient[\"ping\"] = async (params) => {\n    try {\n      return await this.engine.ping(params);\n    } catch (error: any) {\n      this.logger.error(error.message);\n      throw error;\n    }\n  };\n\n  public emit: ISignClient[\"emit\"] = async (params) => {\n    try {\n      return await this.engine.emit(params);\n    } catch (error: any) {\n      this.logger.error(error.message);\n      throw error;\n    }\n  };\n\n  public disconnect: ISignClient[\"disconnect\"] = async (params) => {\n    try {\n      return await this.engine.disconnect(params);\n    } catch (error: any) {\n      this.logger.error(error.message);\n      throw error;\n    }\n  };\n\n  public find: ISignClient[\"find\"] = (params) => {\n    try {\n      return this.engine.find(params);\n    } catch (error: any) {\n      this.logger.error(error.message);\n      throw error;\n    }\n  };\n\n  public getPendingSessionRequests: ISignClient[\"getPendingSessionRequests\"] = () => {\n    try {\n      return this.engine.getPendingSessionRequests();\n    } catch (error: any) {\n      this.logger.error(error.message);\n      throw error;\n    }\n  };\n\n  public authenticate: ISignClient[\"authenticate\"] = async (params) => {\n    try {\n      return await this.engine.authenticate(params);\n    } catch (error: any) {\n      this.logger.error(error.message);\n      throw error;\n    }\n  };\n\n  public formatAuthMessage: ISignClient[\"formatAuthMessage\"] = (params) => {\n    try {\n      return this.engine.formatAuthMessage(params);\n    } catch (error: any) {\n      this.logger.error(error.message);\n      throw error;\n    }\n  };\n\n  public approveSessionAuthenticate: ISignClient[\"approveSessionAuthenticate\"] = async (params) => {\n    try {\n      return await this.engine.approveSessionAuthenticate(params);\n    } catch (error: any) {\n      this.logger.error(error.message);\n      throw error;\n    }\n  };\n\n  public rejectSessionAuthenticate: ISignClient[\"rejectSessionAuthenticate\"] = async (params) => {\n    try {\n      return await this.engine.rejectSessionAuthenticate(params);\n    } catch (error: any) {\n      this.logger.error(error.message);\n      throw error;\n    }\n  };\n\n  // ---------- Private ----------------------------------------------- //\n\n  private async initialize() {\n    this.logger.trace(`Initialized`);\n    try {\n      await this.core.start();\n      await this.session.init();\n      await this.proposal.init();\n      await this.pendingRequest.init();\n      await this.engine.init();\n      await this.auth.init();\n      this.logger.info(`SignClient Initialization Success`);\n      this.engine.processRelayMessageCache();\n    } catch (error: any) {\n      this.logger.info(`SignClient Initialization Failure`);\n      this.logger.error(error.message);\n      throw error;\n    }\n  }\n}\n","import { SignClient as Client } from \"./client\";\nimport { Session } from \"./controllers/session\";\nexport * from \"./constants\";\n\nexport const SessionStore = Session;\nexport const SignClient = Client;\nexport default Client;\n"],"names":["THIRTY_DAYS","SEVEN_DAYS","FIVE_MINUTES","ONE_DAY","ONE_HOUR","IEngine","client","ENGINE_CONTEXT","EventEmmiter","ENGINE_QUEUE_STATES","ONE_SECOND","ENGINE_RPC_OPTS","toMiliseconds","params","connectParams","__spreadProps","__spreadValues","pairingTopic","requiredNamespaces","optionalNamespaces","sessionProperties","relays","topic","uri","active","error","newTopic","newUri","message","getInternalError","publicKey","expiry","expiryTimestamp","calcExpiry","proposal","RELAYER_DEFAULT_PROTOCOL","reject","resolve","approval","createDelayedPromise","PROPOSAL_EXPIRY_MESSAGE","engineEvent","session","completeSession","id","_a","_b","_c","configEvent","EVENT_CLIENT_SESSION_TRACES","EVENT_CLIENT_SESSION_ERRORS","relayProtocol","namespaces","sessionConfig","proposer","event","selfPublicKey","peerPublicKey","sessionTopic","sessionSettle","SESSION_EXPIRY","getSdkError","reason","acknowledged","clientRpcId","payloadId","relayRpcId","getBigIntRpcId","oldNamespaces","e","chainId","request","done","result","wcDeepLink","getDeepLink","WALLETCONNECT_DEEPLINK_CHOICE","handleDeeplinkRedirect","response","isJsonRpcResult","isJsonRpcError","isSessionCompatible","chains","statement","domain","nonce","type","exp","nbf","methods","resources","connectionUri","responseTopic","hashKey","AUTH_PUBLIC_KEY_NAME","namespace","parseChainId","recap","createEncodedRecap","getRecapFromResources","mergeEncodedRecaps","authRequestExpiry","onSessionConnect","onAuthenticate","sessionObject","fallbackId","payload","cacaos","responder","approvedMethods","approvedAccounts","cacao","validateSignedCacao","approvedChains","getNamespacedDidChainId","parsedAddress","getDidAddress","methodsfromRecap","getMethodsFromRecap","chainsFromRecap","getChainsFromRecap","chain","buildNamespacesFromAuth","sessionAuthenticateResponseParams","auths","EVENT_CLIENT_AUTHENTICATE_TRACES","EVENT_CLIENT_AUTHENTICATE_ERRORS","pendingRequest","receiverPublicKey","senderPublicKey","encodeOpts","TYPE_1","invalidErr","iss","formatMessage","pairing","duplicates","p","expirerHasDeleted","emitEvent","self","r","verifyContext","args","method","throwOnFailedPublish","formatJsonRpcRequest","attestation","METHODS_TO_VERIFY","decryptedId","hashMessage","opts","formatJsonRpcResult","record","rpcOpts","formatJsonRpcError","sessionTopics","proposalIds","toCleanup","isExpired","encryptedId","reqMethod","resMethod","requestMethod","expectedMethods","EVENT_CLIENT_PAIRING_ERRORS","EVENT_CLIENT_PAIRING_TRACES","err","subscriptionId","target","relay","controller","memoryKey","lastSessionUpdateId","MemoryStore","lastId","currentId","_topic","RELAYER_EVENTS","requester","authPayload","pendingRequests","isValidParams","isUndefined","isValidRelays","isValidObject","validRequiredNamespacesError","isValidRequiredNamespaces","validNamespacesError","isValidNamespaces","conformingNamespacesError","isConformingNamespaces","isValidString","isValidErrorReason","isValidRelay","validControllerError","isValidController","isValidNamespacesChainId","isValidRequest","isValidNamespacesRequest","isValidRequestExpiry","SESSION_REQUEST_EXPIRY_BOUNDARIES","isValidResponse","isValidEvent","isValidNamespacesEvent","attestationId","hash","metadata","context","VERIFY_SERVER","properties","property","i","numItemsToDelete","k","deletedRecord","isJsonRpcRequest","isJsonRpcResponse","EXPIRER_EVENTS","parseExpirerTarget","PAIRING_EVENTS","isValidId","Store","core","logger","PROPOSAL_CONTEXT","SIGN_CLIENT_STORAGE_PREFIX","SESSION_CONTEXT","REQUEST_CONTEXT","val","AUTH_KEYS_CONTEXT","AUTH_STORAGE_PREFIX","AUTH_PAIRING_TOPIC_CONTEXT","AUTH_REQUEST_CONTEXT","AuthKey","AuthPairingTopic","AuthRequest","SignClient","ISignClient","SIGN_CLIENT_PROTOCOL","SIGN_CLIENT_VERSION","SIGN_CLIENT_DEFAULT","EventEmitter","name","listener","getAppMetadata","pino","getDefaultLoggerOptions","Core","generateChildLogger","Session","Proposal","PendingRequest","Engine","AuthStore","getLoggerContext","Client"],"mappings":"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"}