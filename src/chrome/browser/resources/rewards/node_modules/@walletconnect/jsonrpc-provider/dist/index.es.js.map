{"version":3,"file":"index.es.js","sources":["../src/provider.ts"],"sourcesContent":["import { EventEmitter } from \"events\";\nimport {\n  RequestArguments,\n  IJsonRpcProvider,\n  IJsonRpcConnection,\n  JsonRpcRequest,\n  JsonRpcPayload,\n  JsonRpcProviderMessage,\n  isJsonRpcResponse,\n  formatJsonRpcRequest,\n  isJsonRpcError,\n  getBigIntRpcId,\n} from \"@walletconnect/jsonrpc-utils\";\n\nexport class JsonRpcProvider extends IJsonRpcProvider {\n  public events = new EventEmitter();\n\n  public connection: IJsonRpcConnection;\n\n  private hasRegisteredEventListeners = false;\n\n  constructor(connection: IJsonRpcConnection) {\n    super(connection);\n    this.connection = this.setConnection(connection);\n    if (this.connection.connected) {\n      this.registerEventListeners();\n    }\n  }\n\n  public async connect(connection: string | IJsonRpcConnection = this.connection): Promise<void> {\n    await this.open(connection);\n  }\n\n  public async disconnect(): Promise<void> {\n    await this.close();\n  }\n\n  public on(event: string, listener: any): void {\n    this.events.on(event, listener);\n  }\n\n  public once(event: string, listener: any): void {\n    this.events.once(event, listener);\n  }\n\n  public off(event: string, listener: any): void {\n    this.events.off(event, listener);\n  }\n\n  public removeListener(event: string, listener: any): void {\n    this.events.removeListener(event, listener);\n  }\n\n  public async request<Result = any, Params = any>(\n    request: RequestArguments<Params>,\n    context?: any,\n  ): Promise<Result> {\n    return this.requestStrict(\n      formatJsonRpcRequest(\n        request.method,\n        request.params || [],\n        request.id || (getBigIntRpcId().toString() as any),\n      ), // casting to any is required in order to use BigInt as rpcId\n      context,\n    );\n  }\n\n  // ---------- Protected ----------------------------------------------- //\n\n  protected async requestStrict<Result = any, Params = any>(\n    request: JsonRpcRequest<Params>,\n    context?: any,\n  ): Promise<Result> {\n    return new Promise(async (resolve, reject) => {\n      if (!this.connection.connected) {\n        try {\n          await this.open();\n        } catch (e) {\n          reject(e);\n        }\n      }\n      this.events.on(`${request.id}`, (response) => {\n        if (isJsonRpcError(response)) {\n          reject(response.error);\n        } else {\n          resolve(response.result);\n        }\n      });\n      try {\n        await this.connection.send(request, context);\n      } catch (e) {\n        reject(e);\n      }\n    });\n  }\n\n  protected setConnection(connection: IJsonRpcConnection = this.connection) {\n    return connection;\n  }\n\n  protected onPayload(payload: JsonRpcPayload): void {\n    this.events.emit(\"payload\", payload);\n    if (isJsonRpcResponse(payload)) {\n      this.events.emit(`${payload.id}`, payload);\n    } else {\n      this.events.emit(\"message\", {\n        type: payload.method,\n        data: payload.params,\n      } as JsonRpcProviderMessage);\n    }\n  }\n\n  protected onClose(event?: CloseEvent): void {\n    // Code 3000 indicates an abnormal closure signalled by the relay -> emit an error in this case.\n    if (event && event.code === 3000) {\n      this.events.emit(\n        \"error\",\n        new Error(\n          `WebSocket connection closed abnormally with code: ${event.code} ${\n            event.reason ? `(${event.reason})` : \"\"\n          }`,\n        ),\n      );\n    }\n    this.events.emit(\"disconnect\");\n  }\n\n  protected async open(connection: string | IJsonRpcConnection = this.connection) {\n    if (this.connection === connection && this.connection.connected) return;\n    if (this.connection.connected) this.close();\n    if (typeof connection === \"string\") {\n      await this.connection.open(connection);\n      connection = this.connection;\n    }\n    this.connection = this.setConnection(connection);\n    await this.connection.open();\n    this.registerEventListeners();\n    this.events.emit(\"connect\");\n  }\n\n  protected async close() {\n    await this.connection.close();\n  }\n\n  // ---------- Private ----------------------------------------------- //\n\n  private registerEventListeners() {\n    if (this.hasRegisteredEventListeners) return;\n    this.connection.on(\"payload\", (payload: JsonRpcPayload) => this.onPayload(payload));\n    this.connection.on(\"close\", (event?: CloseEvent) => this.onClose(event));\n    this.connection.on(\"error\", (error: Error) => this.events.emit(\"error\", error));\n    this.connection.on(\"register_error\", (_error: Error) => this.onClose());\n    this.hasRegisteredEventListeners = true;\n  }\n}\n\nexport default JsonRpcProvider;\n"],"names":["IJsonRpcProvider","connection","EventEmitter","event","listener","request","context","formatJsonRpcRequest","getBigIntRpcId","resolve","reject","e","response","isJsonRpcError","payload","isJsonRpcResponse","error","_error"],"mappings":"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"}