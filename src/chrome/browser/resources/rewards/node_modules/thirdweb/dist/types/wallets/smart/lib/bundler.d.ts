import { type TransactionSerializable } from "viem";
import type { TransactionReceipt } from "../../../transaction/types.js";
import { type Hex } from "../../../utils/encoding/hex.js";
import { type BundlerOptions, type EstimationResult, type GasPriceResult, type PmTransactionData, type UserOperationReceipt, type UserOperationV06, type UserOperationV07 } from "../types.js";
/**
 * Bundle a user operation.
 * @param args - The options for bundling a user operation.
 * @returns The bundle hash of the user operation.
 * @example
 * ```ts
 * import { bundleUserOp } from "thirdweb/wallets/smart";
 *
 * const userOpHash = await bundleUserOp({
 *  userOp,
 *  options,
 * });
 * ```
 * @walletUtils
 */
export declare function bundleUserOp(args: {
    userOp: UserOperationV06 | UserOperationV07;
    options: BundlerOptions;
}): Promise<Hex>;
/**
 * Estimate the gas cost of a user operation.
 * @param args - The options for estimating the gas cost of a user operation.
 * @returns The estimated gas cost of the user operation.
 * @example
 * ```ts
 * import { estimateUserOpGas } from "thirdweb/wallets/smart";
 *
 * const gasCost = await estimateUserOpGas({
 *  userOp,
 *  options,
 * });
 * ```
 * @walletUtils
 */
export declare function estimateUserOpGas(args: {
    userOp: UserOperationV06 | UserOperationV07;
    options: BundlerOptions;
}): Promise<EstimationResult>;
/**
 * Get the gas fees of a user operation.
 * @param args - The options for getting the gas price of a user operation.
 * @returns The gas price of the user operation.
 * @example
 * ```ts
 * import { getUserOpGasPrice } from "thirdweb/wallets/smart";
 *
 * const fees = await getUserOpGasPrice({
 *  options,
 * });
 * ```
 * @walletUtils
 */
export declare function getUserOpGasFees(args: {
    options: BundlerOptions;
}): Promise<GasPriceResult>;
/**
 * Get the receipt of a user operation.
 * @param args - The options for getting the receipt of a user operation.
 * @returns The receipt of the user operation.
 * @example
 * ```ts
 * import { getUserOpReceipt } from "thirdweb/wallets/smart";
 *
 * const receipt = await getUserOpReceipt({
 *  client,
 *  chain,
 *  userOpHash,
 * });
 * ```
 * @walletUtils
 */
export declare function getUserOpReceipt(args: BundlerOptions & {
    userOpHash: Hex;
}): Promise<TransactionReceipt | undefined>;
/**
 * Get the receipt of a user operation.
 * @param args - The options for getting the receipt of a user operation.
 * @returns The raw receipt of the user operation.
 * @example
 * ```ts
 * import { getUserOpReceiptRaw } from "thirdweb/wallets/smart";
 *
 * const receipt = await getUserOpReceiptRaw({
 *  client,
 *  chain,
 *  userOpHash,
 * });
 * ```
 * @walletUtils
 */
export declare function getUserOpReceiptRaw(args: BundlerOptions & {
    userOpHash: Hex;
}): Promise<UserOperationReceipt | undefined>;
/**
 * @internal
 */
export declare function getZkPaymasterData(args: {
    options: BundlerOptions;
    transaction: TransactionSerializable;
}): Promise<PmTransactionData>;
export declare function broadcastZkTransaction(args: {
    options: BundlerOptions;
    transaction: TransactionSerializable;
    signedTransaction: Hex;
}): Promise<{
    transactionHash: Hex;
}>;
//# sourceMappingURL=bundler.d.ts.map