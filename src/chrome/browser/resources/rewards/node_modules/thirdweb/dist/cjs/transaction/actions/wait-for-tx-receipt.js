"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.waitForReceipt = waitForReceipt;
const eth_getTransactionReceipt_js_1 = require("../../rpc/actions/eth_getTransactionReceipt.js");
const rpc_js_1 = require("../../rpc/rpc.js");
const watchBlockNumber_js_1 = require("../../rpc/watchBlockNumber.js");
const DEFAULT_MAX_BLOCKS_WAIT_TIME = 100;
const map = new Map();
/**
 * Waits for the transaction receipt of a given transaction hash on a specific contract.
 * @param options - The options for waiting for the receipt.
 * By default, it's 100 blocks.
 * @returns A promise that resolves with the transaction receipt.
 * @transaction
 * @example
 * ```ts
 * import { waitForReceipt } from "thirdweb";
 * const receipt = await waitForReceipt({
 *   client,
 *   chain,
 *   transactionHash: "0x123...",
 * });
 * ```
 */
function waitForReceipt(options) {
    const { transactionHash, chain, client } = options;
    const chainId = chain.id;
    const key = `${chainId}:tx_${transactionHash}`;
    const maxBlocksWaitTime = options.maxBlocksWaitTime ?? DEFAULT_MAX_BLOCKS_WAIT_TIME;
    if (map.has(key)) {
        // biome-ignore lint/style/noNonNullAssertion: the `has` above ensures that this will always be set
        return map.get(key);
    }
    const promise = new Promise((resolve, reject) => {
        if (!transactionHash) {
            reject(new Error("Transaction has no transactionHash to wait for, did you execute it?"));
        }
        const request = (0, rpc_js_1.getRpcClient)({ client, chain });
        // start at -1 because the first block doesn't count
        let blocksWaited = -1;
        const unwatch = (0, watchBlockNumber_js_1.watchBlockNumber)({
            client: client,
            chain: chain,
            onNewBlockNumber: async () => {
                blocksWaited++;
                if (blocksWaited >= maxBlocksWaitTime) {
                    unwatch();
                    reject(new Error(`Transaction not found after ${maxBlocksWaitTime} blocks`));
                    return;
                }
                try {
                    const receipt = await (0, eth_getTransactionReceipt_js_1.eth_getTransactionReceipt)(request, {
                        hash: transactionHash,
                    });
                    // stop the polling
                    unwatch();
                    // resolve the top level promise with the receipt
                    resolve(receipt);
                }
                catch {
                    // noop, we'll try again on the next blocks
                }
            },
        });
        // remove the promise from the map when it's done (one way or the other)
    }).finally(() => {
        map.delete(key);
    });
    map.set(key, promise);
    return promise;
}
//# sourceMappingURL=wait-for-tx-receipt.js.map