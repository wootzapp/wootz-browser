"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.resolveAddress = resolveAddress;
const ethereum_js_1 = require("../../chains/chain-definitions/ethereum.js");
const contract_js_1 = require("../../contract/contract.js");
const address_js_1 = require("../../utils/address.js");
const hex_js_1 = require("../../utils/encoding/hex.js");
const namehash_js_1 = require("../../utils/ens/namehash.js");
const packetToBytes_js_1 = require("../../utils/ens/packetToBytes.js");
const withCache_js_1 = require("../../utils/promise/withCache.js");
const addr_js_1 = require("./__generated__/AddressResolver/read/addr.js");
const resolve_js_1 = require("./__generated__/UniversalResolver/read/resolve.js");
const constants_js_1 = require("./constants.js");
/**
 * Resolves an ENS name to an Ethereum address.
 * @param options - The options for resolving an ENS address.
 * @example
 * ```ts
 * import { resolveAddress } from "thirdweb/extensions/ens";
 * const address = await resolveAddress({
 *    client,
 *    name: "vitalik.eth",
 * });
 * ```
 *
 * Resolve an address to a Basename.
 * ```ts
 * import { resolveAddress, BASENAME_RESOLVER_ADDRESS } from "thirdweb/extensions/ens";
 * import { base } from "thirdweb/chains";
 * const address = await resolveAddress({
 *    client,
 *    name: "myk.base.eth",
 *    resolverAddress: BASENAME_RESOLVER_ADDRESS,
 *    resolverChain: base,
 * });
 * ```
 * @extension ENS
 * @returns A promise that resolves to the Ethereum address.
 */
async function resolveAddress(options) {
    const { client, name, resolverAddress, resolverChain } = options;
    if ((0, address_js_1.isAddress)(name)) {
        return (0, address_js_1.getAddress)(name);
    }
    return (0, withCache_js_1.withCache)(async () => {
        const contract = (0, contract_js_1.getContract)({
            client,
            chain: resolverChain || ethereum_js_1.ethereum,
            address: resolverAddress || constants_js_1.UNIVERSAL_RESOLVER_ADDRESS,
        });
        const data = (0, addr_js_1.encodeAddr)({ name: (0, namehash_js_1.namehash)(name) });
        const result = await (0, resolve_js_1.resolve)({
            contract,
            name: (0, hex_js_1.toHex)((0, packetToBytes_js_1.packetToBytes)(name)),
            data,
        });
        const resolvedAddress = (0, address_js_1.getAddress)(`0x${result[0].slice(-40)}`);
        return resolvedAddress;
    }, {
        cacheKey: `ens:addr:${resolverChain?.id || 1}:${name}`,
        // 1min cache
        cacheTime: 60 * 1000,
    });
}
//# sourceMappingURL=resolve-address.js.map