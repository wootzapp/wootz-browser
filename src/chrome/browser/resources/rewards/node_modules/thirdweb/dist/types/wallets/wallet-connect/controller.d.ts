import type { EthereumProvider } from "@walletconnect/ethereum-provider";
import type { Chain } from "../../chains/types.js";
import type { AsyncStorage } from "../../utils/storage/AsyncStorage.js";
import type { WCSupportedWalletIds } from "../__generated__/wallet-ids.js";
import type { Account, Wallet } from "../interfaces/wallet.js";
import type { DisconnectFn, SwitchChainFn } from "../types.js";
import type { WalletEmitter } from "../wallet-emitter.js";
import type { WalletId } from "../wallet-types.js";
import type { WCAutoConnectOptions, WCConnectOptions } from "./types.js";
type WCProvider = InstanceType<typeof EthereumProvider>;
/**
 * Checks if the provided wallet is a Wallet Connect wallet.
 *
 * @param wallet - The wallet to check.
 * @returns True if the wallet is a Wallet Connect wallet, false otherwise.
 */
export declare function isWalletConnect(wallet: Wallet<WalletId>): wallet is Wallet<"walletConnect">;
/**
 * @internal
 */
export declare function connectWC(options: WCConnectOptions, emitter: WalletEmitter<WCSupportedWalletIds>, walletId: WCSupportedWalletIds | "walletConnect", storage: AsyncStorage, sessionHandler?: (uri: string) => void): Promise<ReturnType<typeof onConnect>>;
/**
 * Auto connect to already connected wallet connect session.
 * @internal
 */
export declare function autoConnectWC(options: WCAutoConnectOptions, emitter: WalletEmitter<WCSupportedWalletIds>, walletId: WCSupportedWalletIds | "walletConnect", storage: AsyncStorage, sessionHandler?: (uri: string) => void): Promise<ReturnType<typeof onConnect>>;
declare function onConnect(address: string, chain: Chain, provider: WCProvider, emitter: WalletEmitter<WCSupportedWalletIds>, storage: AsyncStorage): [Account, Chain, DisconnectFn, SwitchChainFn];
export {};
//# sourceMappingURL=controller.d.ts.map