import { webLocalStorage } from "../../../../../utils/storage/webStorage.js";
import { ClientScopedStorage } from "../../../core/authentication/client-scoped-storage.js";
import { BaseLogin } from "./base-login.js";
/**
 *
 */
export class Auth {
    /**
     * Used to manage the user's auth states. This should not be instantiated directly.
     * @internal
     */
    constructor({ client, querier, onAuthSuccess, ecosystem, baseUrl, }) {
        Object.defineProperty(this, "client", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "AuthQuerier", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "localStorage", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "onAuthSuccess", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "BaseLogin", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.client = client;
        this.AuthQuerier = querier;
        this.localStorage = new ClientScopedStorage({
            storage: webLocalStorage,
            clientId: client.clientId,
            ecosystemId: ecosystem?.id,
        });
        this.onAuthSuccess = onAuthSuccess;
        this.BaseLogin = new BaseLogin({
            postLogin: async (result) => {
                return this.postLogin(result);
            },
            preLogin: async () => {
                await this.preLogin();
            },
            ecosystem,
            querier: querier,
            client,
            baseUrl,
        });
    }
    async preLogin() {
        await this.logout();
    }
    async postLogin({ storedToken, walletDetails, }) {
        if (storedToken.shouldStoreCookieString) {
            await this.localStorage.saveAuthCookie(storedToken.cookieString);
        }
        const initializedUser = await this.onAuthSuccess({
            storedToken,
            walletDetails,
        });
        return initializedUser;
    }
    async loginWithAuthToken(authToken, recoveryCode) {
        await this.preLogin();
        const result = await this.AuthQuerier.call({
            procedureName: "loginWithStoredTokenDetails",
            params: {
                storedToken: authToken.storedToken,
                recoveryCode,
            },
        });
        return this.postLogin(result);
    }
    /**
     * Used to log the user into their thirdweb wallet on your platform via a myriad of auth providers
     * @example
     * ```typescript
     * const thirdwebInAppWallet = new InAppWalletSdk({clientId: "YOUR_CLIENT_ID", chain: "Polygon"})
     * try {
     *   const user = await thirdwebInAppWallet.auth.loginWithModal();
     *   // user is now logged in
     * } catch (e) {
     *   // User closed modal or something else went wrong during the authentication process
     *   console.error(e)
     * }
     * ```
     * @returns `{{user: InitializedUser}}` An InitializedUser object.
     */
    async loginWithModal() {
        return this.BaseLogin.loginWithModal();
    }
    async authenticateWithModal() {
        return this.BaseLogin.authenticateWithModal();
    }
    /**
     * Used to log the user into their thirdweb wallet using email OTP
     * @example
     * ```typescript
     *  // Basic Flow
     *  const thirdwebInAppWallet = new InAppWalletSdk({clientId: "", chain: "Polygon"});
     *  try {
     *    // prompts user to enter the code they received
     *    const user = await thirdwebInAppWallet.auth.loginWithThirdwebEmailOtp({ email : "you@example.com" });
     *    // user is now logged in
     *  } catch (e) {
     *    // User closed the OTP modal or something else went wrong during the authentication process
     *    console.error(e)
     *  }
     * ```
     * @param args - args.email: We will send the email an OTP that needs to be entered in order for them to be logged in.
     * @returns `{{user: InitializedUser}}` An InitializedUser object. See {@link InAppWalletSdk.getUser} for more
     */
    async loginWithIframe(args) {
        return this.BaseLogin.loginWithIframe(args);
    }
    async authenticateWithIframe(args) {
        return this.BaseLogin.authenticateWithIframe(args);
    }
    /**
     * @internal
     */
    async loginWithCustomJwt(args) {
        return this.BaseLogin.loginWithCustomJwt(args);
    }
    async authenticateWithCustomJwt(args) {
        return this.BaseLogin.authenticateWithCustomJwt(args);
    }
    /**
     * @internal
     */
    async loginWithCustomAuthEndpoint(args) {
        return this.BaseLogin.loginWithCustomAuthEndpoint(args);
    }
    async authenticateWithCustomAuthEndpoint(args) {
        return this.BaseLogin.authenticateWithCustomAuthEndpoint(args);
    }
    /**
     * A headless way to send the users at the passed email an OTP code.
     * You need to then call {@link Auth.loginWithEmailOtp} in order to complete the login process
     * @example
     * @param param0.email
     * ```typescript
     *  const thirdwebInAppWallet = new InAppWalletSdk({clientId: "", chain: "Polygon"});
     *  // sends user an OTP code
     * try {
     *    await thirdwebInAppWallet.auth.sendEmailLoginOtp({ email : "you@example.com" });
     * } catch(e) {
     *    // Error Sending user's email an OTP code
     *    console.error(e);
     * }
     *
     * // Then when your user is ready to verify their OTP
     * try {
     *    const user = await thirdwebInAppWallet.auth.verifyEmailLoginOtp({ email: "you@example.com", otp: "6-DIGIT_CODE_HERE" });
     * } catch(e) {
     *    // Error verifying the OTP code
     *    console.error(e)
     * }
     * ```
     * @param param0 - param0.email We will send the email an OTP that needs to be entered in order for them to be logged in.
     * @returns `{{ isNewUser: boolean }}` IsNewUser indicates if the user is a new user to your platform
     * @internal
     */
    async sendEmailLoginOtp({ email, }) {
        return this.BaseLogin.sendEmailLoginOtp({
            email,
        });
    }
    /**
     * @internal
     */
    async sendSmsLoginOtp({ phoneNumber, }) {
        return this.BaseLogin.sendSmsLoginOtp({
            phoneNumber,
        });
    }
    /**
     * Used to verify the otp that the user receives from thirdweb
     *
     * See {@link Auth.sendEmailLoginOtp} for how the headless call flow looks like. Simply swap out the calls to `loginWithThirdwebEmailOtp` with `verifyThirdwebEmailLoginOtp`
     * @param args - props.email We will send the email an OTP that needs to be entered in order for them to be logged in.
     * props.otp The code that the user received in their email
     * @returns `{{user: InitializedUser}}` An InitializedUser object containing the user's status, wallet, authDetails, and more
     * @internal
     */
    async loginWithEmailOtp(args) {
        await this.preLogin();
        return this.BaseLogin.loginWithEmailOtp(args);
    }
    async authenticateWithEmailOtp(args) {
        return this.BaseLogin.authenticateWithEmailOtp(args);
    }
    /**
     * @internal
     */
    async loginWithSmsOtp(args) {
        await this.preLogin();
        return this.BaseLogin.loginWithSmsOtp(args);
    }
    async authenticateWithSmsOtp(args) {
        return this.BaseLogin.authenticateWithSmsOtp(args);
    }
    /**
     * Logs any existing user out of their wallet.
     * @returns `{{success: boolean}}` true if a user is successfully logged out. false if there's no user currently logged in.
     * @internal
     */
    async logout() {
        const { success } = await this.AuthQuerier.call({
            procedureName: "logout",
            params: undefined,
        });
        const isRemoveAuthCookie = await this.localStorage.removeAuthCookie();
        const isRemoveUserId = await this.localStorage.removeWalletUserId();
        return {
            success: success || isRemoveAuthCookie || isRemoveUserId,
        };
    }
}
//# sourceMappingURL=iframe-auth.js.map