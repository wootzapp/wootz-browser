import { toFunctionSelector, toFunctionSignature } from "viem";
import { resolveContractAbi } from "../../contract/actions/resolve-abi.js";
import { deployViaAutoFactory } from "../../contract/deployment/deploy-via-autofactory.js";
import { getOrDeployInfraContract, getOrDeployInfraForPublishedContract, } from "../../contract/deployment/utils/bootstrap.js";
import { upload } from "../../storage/upload.js";
import { getRoyaltyEngineV1ByChainId } from "../../utils/royalty-engine.js";
import { initialize as initMarketplace } from "./__generated__/Marketplace/write/initialize.js";
/**
 * TODO not quite ready for public consumption yet
 * @internal
 */
export async function deployMarketplaceContract(options) {
    const { chain, client, account, params } = options;
    const WETH = await getOrDeployInfraContract({
        chain,
        client,
        account,
        contractId: "WETH9",
        constructorParams: [],
    });
    const direct = await getOrDeployInfraForPublishedContract({
        chain,
        client,
        account,
        contractId: "DirectListingsLogic",
        constructorParams: [WETH.address],
    });
    const english = await getOrDeployInfraForPublishedContract({
        chain,
        client,
        account,
        contractId: "EnglishAuctionsLogic",
        constructorParams: [WETH.address],
    });
    const offers = await getOrDeployInfraForPublishedContract({
        chain,
        client,
        account,
        contractId: "OffersLogic",
        constructorParams: [],
    });
    const [directFunctions, englishFunctions, offersFunctions] = await Promise.all([
        resolveContractAbi(direct.implementationContract).then(generateExtensionFunctionsFromAbi),
        resolveContractAbi(english.implementationContract).then(generateExtensionFunctionsFromAbi),
        resolveContractAbi(offers.implementationContract).then(generateExtensionFunctionsFromAbi),
    ]);
    const { cloneFactoryContract, implementationContract } = await getOrDeployInfraForPublishedContract({
        chain,
        client,
        account,
        contractId: "MarketplaceV3",
        constructorParams: [
            {
                extensions: [
                    {
                        metadata: {
                            name: "Direct Listings",
                            metadataURI: "",
                            implementation: direct.implementationContract.address,
                        },
                        functions: directFunctions,
                    },
                    {
                        metadata: {
                            name: "English Auctions",
                            metadataURI: "",
                            implementation: english.implementationContract.address,
                        },
                        functions: englishFunctions,
                    },
                    {
                        metadata: {
                            name: "Offers",
                            metadataURI: "",
                            implementation: offers.implementationContract.address,
                        },
                        functions: offersFunctions,
                    },
                ],
                royaltyEngineAddress: getRoyaltyEngineV1ByChainId(chain.id),
                nativeTokenWrapper: WETH.address,
            },
        ],
    });
    const initializeTransaction = await getInitializeTransaction({
        client,
        implementationContract,
        params,
        accountAddress: account.address,
    });
    return deployViaAutoFactory({
        client,
        chain,
        account,
        cloneFactoryContract,
        initializeTransaction,
    });
}
async function getInitializeTransaction(options) {
    const { client, implementationContract, params, accountAddress } = options;
    const contractURI = options.params.contractURI ||
        (await upload({
            client,
            files: [
                {
                    name: params.name,
                    description: params.description,
                    image: params.image,
                    external_link: params.external_link,
                    social_urls: params.social_urls,
                },
            ],
        })) ||
        "";
    return initMarketplace({
        contract: implementationContract,
        contractURI,
        defaultAdmin: params.defaultAdmin || accountAddress,
        platformFeeBps: params.platformFeeBps || 0,
        platformFeeRecipient: params.platformFeeRecipient || accountAddress,
        trustedForwarders: params.trustedForwarders || [],
    });
}
// helperFns
function generateExtensionFunctionsFromAbi(abi) {
    const functions = abi.filter((item) => item.type === "function" && !item.name.startsWith("_"));
    return functions.map((fn) => ({
        functionSelector: toFunctionSelector(fn),
        functionSignature: toFunctionSignature(fn),
    }));
}
//# sourceMappingURL=deploy-marketplace.js.map