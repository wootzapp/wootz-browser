"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.executeSale = executeSale;
const multicall_js_1 = require("../../../common/__generated__/IMulticall/write/multicall.js");
const collectAuctionPayout_js_1 = require("../../__generated__/IEnglishAuctions/write/collectAuctionPayout.js");
const collectAuctionTokens_js_1 = require("../../__generated__/IEnglishAuctions/write/collectAuctionTokens.js");
const getWinningBid_js_1 = require("../read/getWinningBid.js");
/**
 * Executes a sale for an English auction.
 *
 * @param options - The options for executing the sale.
 * @returns A transaction that can be sent to execute the sale.
 * @throws An error if the auction is still active and there is no winning bid.
 * @extension MARKETPLACE
 * @example
 * ```ts
 * import { executeSale } from "thirdweb/extensions/marketplace";
 * import { sendTransaction } from "thirdweb";
 *
 * const transaction = executeSale({
 *  contract,
 *  auctionId: 0n,
 * });
 *
 * await sendTransaction({ transaction, account });
 * ```
 */
function executeSale(options) {
    return (0, multicall_js_1.multicall)({
        contract: options.contract,
        asyncParams: async () => {
            const winningBid = await (0, getWinningBid_js_1.getWinningBid)({
                contract: options.contract,
                auctionId: options.auctionId,
            });
            if (!winningBid) {
                throw new Error("Auction is still active");
            }
            return {
                data: [
                    (0, collectAuctionTokens_js_1.encodeCollectAuctionTokens)({ auctionId: options.auctionId }),
                    (0, collectAuctionPayout_js_1.encodeCollectAuctionPayout)({ auctionId: options.auctionId }),
                ],
                overrides: {
                    extraGas: 50000n, // add extra gas to account for router call
                },
            };
        },
    });
}
//# sourceMappingURL=executeSale.js.map