"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getStoragePrice = getStoragePrice;
const bigint_js_1 = require("../../../utils/bigint.js");
const withCache_js_1 = require("../../../utils/promise/withCache.js");
const unitPrice_js_1 = require("../__generated__/IStorageRegistry/read/unitPrice.js");
const getStorageRegistry_js_1 = require("../contracts/getStorageRegistry.js");
/**
 * Retrieves the current cost to register a Farcaster fid in wei.
 * @param options - An object containing a client to use to fetch the price and the amount of extra storage to include in the returned price.
 * @returns A promise that resolves to the current cost of a Farcaster fid in USD.
 * @extension FARCASTER
 * @example
 * ```ts
 * import { getStoragePrice } from "thirdweb/extensions/farcaster";
 *
 * const price = await getStoragePrice({
 *  client,
 * });
 * ```
 */
async function getStoragePrice(options) {
    const units = (0, bigint_js_1.toBigInt)(options.units ?? 1);
    if (units < 1n) {
        throw new Error(`Expected units to be greater than or equal to 1, got ${options.units}`);
    }
    const fetch = async () => {
        const contract = (0, getStorageRegistry_js_1.getStorageRegistry)({
            client: options.client,
            chain: options.chain,
        });
        return (await (0, unitPrice_js_1.unitPrice)({ contract })) * units;
    };
    return (0, withCache_js_1.withCache)(fetch, {
        cacheKey: `${(0, bigint_js_1.toBigInt)(units)}:getStoragePrice`,
        cacheTime: options.disableCache ? 0 : 5 * 60 * 1000, // 5 minutes
    });
}
//# sourceMappingURL=getStoragePrice.js.map