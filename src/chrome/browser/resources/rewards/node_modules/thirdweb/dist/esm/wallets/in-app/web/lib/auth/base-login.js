import { AbstractLogin } from "./abstract-login.js";
/**
 *
 */
export class BaseLogin extends AbstractLogin {
    async authenticateWithModal() {
        return this.LoginQuerier.call({
            procedureName: "loginWithThirdwebModal",
            params: undefined,
            showIframe: true,
        });
    }
    /**
     * @internal
     */
    async loginWithModal() {
        await this.preLogin();
        const result = await this.authenticateWithModal();
        return this.postLogin(result);
    }
    async authenticateWithIframe({ email, }) {
        return this.LoginQuerier.call({
            procedureName: "loginWithThirdwebModal",
            params: { email },
            showIframe: true,
        });
    }
    /**
     * @internal
     */
    async loginWithIframe({ email, }) {
        await this.preLogin();
        const result = await this.authenticateWithIframe({ email });
        return this.postLogin(result);
    }
    async authenticateWithCustomJwt({ encryptionKey, jwt, }) {
        if (!encryptionKey || encryptionKey.length === 0) {
            throw new Error("Encryption key is required for custom jwt auth");
        }
        return this.LoginQuerier.call({
            procedureName: "loginWithCustomJwt",
            params: { encryptionKey, jwt },
        });
    }
    /**
     * @internal
     */
    async loginWithCustomJwt({ encryptionKey, jwt, }) {
        if (!encryptionKey || encryptionKey.length === 0) {
            throw new Error("Encryption key is required for custom jwt auth");
        }
        await this.preLogin();
        const result = await this.authenticateWithCustomJwt({ encryptionKey, jwt });
        return this.postLogin(result);
    }
    async authenticateWithCustomAuthEndpoint({ encryptionKey, payload, }) {
        return this.LoginQuerier.call({
            procedureName: "loginWithCustomAuthEndpoint",
            params: { encryptionKey, payload },
        });
    }
    /**
     * @internal
     */
    async loginWithCustomAuthEndpoint({ encryptionKey, payload, }) {
        if (!encryptionKey || encryptionKey.length === 0) {
            throw new Error("Encryption key is required for custom auth");
        }
        await this.preLogin();
        const result = await this.authenticateWithCustomAuthEndpoint({
            encryptionKey,
            payload,
        });
        return this.postLogin(result);
    }
    async authenticateWithEmailOtp({ email, otp, recoveryCode, }) {
        return this.LoginQuerier.call({
            procedureName: "verifyThirdwebEmailLoginOtp",
            params: { email, otp, recoveryCode },
        });
    }
    /**
     * @internal
     */
    async loginWithEmailOtp({ email, otp, recoveryCode, }) {
        const result = await this.authenticateWithEmailOtp({
            email,
            otp,
            recoveryCode,
        });
        return this.postLogin(result);
    }
    async authenticateWithSmsOtp({ phoneNumber, otp, recoveryCode, }) {
        return this.LoginQuerier.call({
            procedureName: "verifyThirdwebSmsLoginOtp",
            params: { phoneNumber, otp, recoveryCode },
        });
    }
    /**
     * @internal
     */
    async loginWithSmsOtp({ phoneNumber, otp, recoveryCode, }) {
        const result = await this.authenticateWithSmsOtp({
            phoneNumber,
            otp,
            recoveryCode,
        });
        return this.postLogin(result);
    }
}
//# sourceMappingURL=base-login.js.map