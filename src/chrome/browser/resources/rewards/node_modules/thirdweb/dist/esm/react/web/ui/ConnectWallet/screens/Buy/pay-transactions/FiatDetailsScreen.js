import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { useState } from "react";
import { useBuyWithFiatStatus } from "../../../../../../core/hooks/pay/useBuyWithFiatStatus.js";
import { Container, Line, ModalHeader } from "../../../../components/basic.js";
import { OnRampTxDetailsTable } from "../fiat/FiatTxDetailsTable.js";
import { PostOnRampSwapFlow } from "../fiat/PostOnRampSwapFlow.js";
import { getBuyWithFiatStatusMeta } from "./statusMeta.js";
export function FiatDetailsScreen(props) {
    const initialStatus = props.status;
    const [stopPolling, setStopPolling] = useState(false);
    const statusQuery = useBuyWithFiatStatus(stopPolling
        ? undefined
        : {
            client: props.client,
            intentId: initialStatus.intentId,
        });
    const status = (statusQuery.data?.status === "NOT_FOUND" ? undefined : statusQuery.data) ||
        initialStatus;
    const hasTwoSteps = isSwapRequiredAfterOnRamp(status);
    const statusMeta = getBuyWithFiatStatusMeta(status);
    if (hasTwoSteps) {
        const fiatQuote = status.quote;
        return (_jsx(PostOnRampSwapFlow, { title: props.title, client: props.client, status: status, onBack: props.onBack, transactionMode: props.transactionMode, isEmbed: props.isEmbed, quote: {
                fromCurrencyAmount: fiatQuote.fromCurrencyWithFees.amount,
                fromCurrencySymbol: fiatQuote.fromCurrencyWithFees.currencySymbol,
                onRampTokenAmount: fiatQuote.estimatedOnRampAmount,
                toTokenAmount: fiatQuote.estimatedToTokenAmount,
                onRampToken: {
                    chainId: fiatQuote.onRampToken.chainId,
                    tokenAddress: fiatQuote.onRampToken.tokenAddress,
                    name: fiatQuote.onRampToken.name,
                    symbol: fiatQuote.onRampToken.symbol,
                },
                toToken: {
                    chainId: fiatQuote.toToken.chainId,
                    tokenAddress: fiatQuote.toToken.tokenAddress,
                    name: fiatQuote.toToken.name,
                    symbol: fiatQuote.toToken.symbol,
                },
            }, onDone: props.onDone, onSwapFlowStarted: () => {
                setStopPolling(true);
            }, payer: props.payer, 
            // viewing history - ignore onSuccess
            onSuccess: undefined }));
    }
    return (_jsxs(Container, { children: [_jsx(Container, { p: "lg", children: _jsx(ModalHeader, { title: "Transaction Details", onBack: props.onBack }) }), _jsx(Line, {}), _jsx(Container, { p: "lg", children: _jsx(OnRampTxDetailsTable, { client: props.client, token: status.source
                        ? {
                            chainId: status.source.token.chainId,
                            address: status.source.token.tokenAddress,
                            symbol: status.source.token.symbol || "",
                            amount: status.source.amount,
                        }
                        : {
                            address: status.quote.onRampToken.tokenAddress,
                            amount: status.quote.estimatedOnRampAmount,
                            chainId: status.quote.onRampToken.chainId,
                            symbol: status.quote.onRampToken.symbol || "",
                        }, fiat: {
                        amount: status.quote.fromCurrencyWithFees.amount,
                        currencySymbol: status.quote.fromCurrencyWithFees.currencySymbol,
                    }, statusMeta: {
                        color: statusMeta.color,
                        text: statusMeta.status,
                        txHash: status.source?.transactionHash,
                    } }) })] }));
}
// if the toToken is the same as the onRampToken, no swap is required
function isSwapRequiredAfterOnRamp(buyWithFiatStatus) {
    if (buyWithFiatStatus.status === "NOT_FOUND") {
        return false;
    }
    const sameChain = buyWithFiatStatus.quote.toToken.chainId ===
        buyWithFiatStatus.quote.onRampToken.chainId;
    const sameToken = buyWithFiatStatus.quote.toToken.tokenAddress ===
        buyWithFiatStatus.quote.onRampToken.tokenAddress;
    return !(sameChain && sameToken);
}
//# sourceMappingURL=FiatDetailsScreen.js.map