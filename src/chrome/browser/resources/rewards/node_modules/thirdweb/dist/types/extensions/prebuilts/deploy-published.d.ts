import type { Chain } from "../../chains/types.js";
import type { ThirdwebClient } from "../../client/client.js";
import type { FetchDeployMetadataResult } from "../../utils/any-evm/deploy-metadata.js";
import type { Account } from "../../wallets/interfaces/wallet.js";
/**
 * @extension DEPLOY
 */
export type DeployPublishedContractOptions = {
    client: ThirdwebClient;
    chain: Chain;
    account: Account;
    contractId: string;
    contractParams?: Record<string, unknown>;
    publisher?: string;
    version?: string;
    implementationConstructorParams?: Record<string, unknown>;
    salt?: string;
};
/**
 * Deploy an instance of a published contract on a given chain
 * @param options - the deploy options
 * @returns a promise that resolves to the deployed contract address
 * @example
 *
 * ## Deploying a published contract
 *
 * ```ts
 * import { deployPublishedContract } from "thirdweb/deploys";
 *
 * const address = await deployedPublishedContract({
 *   client,
 *   chain,
 *   account,
 *   contractId: "MyPublishedContract",
 *   contractParams: {
 *     param1: "value1",
 *     param2: 123,
 *   },
 *   publisher: "0x...", // optional, defaults to the thirdweb deployer
 * });
 * ```
 *
 *  ## Deploying a published contract deterministically
 *
 * ```ts
 * import { deployPublishedContract } from "thirdweb/deploys";
 *
 * const address = await deployedPublishedContract({
 *   client,
 *   chain,
 *   account,
 *   contractId: "MyPublishedContract",
 *   contractParams: {
 *     param1: "value1",
 *     param2: 123,
 *   },
 *   publisher: "0x...",
 *   salt: "your-salt", // this will deterministically deploy the contract at the same address on all chains
 * });
 * ```
 * @extension DEPLOY
 */
export declare function deployPublishedContract(options: DeployPublishedContractOptions): Promise<string>;
/**
 * @internal
 */
export type DeployContractfromDeployMetadataOptions = {
    client: ThirdwebClient;
    chain: Chain;
    account: Account;
    deployMetadata: FetchDeployMetadataResult;
    initializeParams?: Record<string, unknown>;
    implementationConstructorParams?: Record<string, unknown>;
    modules?: {
        deployMetadata: FetchDeployMetadataResult;
        initializeParams?: Record<string, unknown>;
    }[];
    salt?: string;
};
/**
 * @internal
 */
export declare function deployContractfromDeployMetadata(options: DeployContractfromDeployMetadataOptions): Promise<string>;
//# sourceMappingURL=deploy-published.d.ts.map