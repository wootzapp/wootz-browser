"use strict";
"use client";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AnyWalletConnectUI = AnyWalletConnectUI;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_query_1 = require("@tanstack/react-query");
const react_1 = require("react");
const isMobile_js_1 = require("../../../../../utils/web/isMobile.js");
const constants_js_1 = require("../../../../../wallets/constants.js");
const is_ecosystem_wallet_js_1 = require("../../../../../wallets/ecosystem/is-ecosystem-wallet.js");
const mipdStore_js_1 = require("../../../../../wallets/injected/mipdStore.js");
const index_js_1 = require("../../../../core/design-system/index.js");
const wallet_js_1 = require("../../../../core/utils/wallet.js");
const getInjectedWalletLocale_js_1 = require("../../../wallets/injected/locale/getInjectedWalletLocale.js");
const GetStartedScreen_js_1 = require("../../../wallets/shared/GetStartedScreen.js");
const LoadingScreen_js_1 = require("../../../wallets/shared/LoadingScreen.js");
const WalletConnectConnection_js_1 = require("../../../wallets/shared/WalletConnectConnection.js");
const Spacer_js_1 = require("../../components/Spacer.js");
const basic_js_1 = require("../../components/basic.js");
const text_js_1 = require("../../components/text.js");
const AccentFailIcon_js_1 = require("../icons/AccentFailIcon.js");
const DeepLinkConnectUI_js_1 = require("./DeepLinkConnectUI.js");
const InjectedConnectUI_js_1 = require("./InjectedConnectUI.js");
const CoinbaseSDKWalletConnectUI = /* @__PURE__ */ (0, react_1.lazy)(() => Promise.resolve().then(() => require("../../../wallets/shared/CoinbaseSDKConnection.js")));
const InAppWalletConnectUI = /* @__PURE__ */ (0, react_1.lazy)(() => Promise.resolve().then(() => require("../../../wallets/in-app/InAppWalletConnectUI.js")));
const EcosystemWalletConnectUI = /* @__PURE__ */ (0, react_1.lazy)(() => Promise.resolve().then(() => require("../../../wallets/ecosystem/EcosystemWalletConnectUI.js")));
/**
 * @internal
 */
function AnyWalletConnectUI(props) {
    const [screen, setScreen] = (0, react_1.useState)("main");
    const { wallet } = props;
    const walletInfo = (0, wallet_js_1.useWalletInfo)(props.wallet.id);
    const localeId = props.connectLocale.id;
    const localeFnQuery = (0, react_query_1.useQuery)({
        queryKey: ["injectedWalletLocale", localeId, walletInfo.data?.name],
        queryFn: async () => {
            return (0, getInjectedWalletLocale_js_1.getInjectedWalletLocale)(localeId);
        },
        refetchOnWindowFocus: false,
        refetchOnMount: false,
    });
    if (walletInfo.isLoading || !localeFnQuery.data) {
        return (0, jsx_runtime_1.jsx)(LoadingScreen_js_1.LoadingScreen, {});
    }
    const localeFn = localeFnQuery.data;
    if (!walletInfo.data) {
        const injectedProvider = (0, mipdStore_js_1.getInstalledWalletProviders)().find((w) => w.info.rdns === wallet.id);
        // Unknown wallet id but it's injected
        if (injectedProvider) {
            return ((0, jsx_runtime_1.jsx)(InjectedConnectUI_js_1.InjectedConnectUI, { wallet: props.wallet, walletName: injectedProvider.info.name, done: props.done, locale: localeFn(injectedProvider.info.name), onBack: props.onBack, chain: props.chain, client: props.client, size: props.size }));
        }
        // This will only happen if developer passes a wallet with unknown id and it's not injected
        // Adding a fallback UI just in case
        return ((0, jsx_runtime_1.jsxs)(basic_js_1.Container, { animate: "fadein", fullHeight: true, flex: "column", children: [(0, jsx_runtime_1.jsx)(basic_js_1.Container, { p: "lg", children: (0, jsx_runtime_1.jsx)(basic_js_1.ModalHeader, { title: "Not Supported", onBack: props.onBack }) }), (0, jsx_runtime_1.jsxs)(basic_js_1.Container, { flex: "column", expand: true, center: "both", p: "lg", style: {
                        minHeight: "300px",
                    }, children: [(0, jsx_runtime_1.jsx)(AccentFailIcon_js_1.AccentFailIcon, { size: index_js_1.iconSize["3xl"] }), (0, jsx_runtime_1.jsx)(Spacer_js_1.Spacer, { y: "lg" }), (0, jsx_runtime_1.jsx)(text_js_1.Text, { color: "primaryText", center: true, children: "Wallet is not supported" }), (0, jsx_runtime_1.jsx)(Spacer_js_1.Spacer, { y: "xxl" })] })] }));
    }
    const locale = localeFn(walletInfo.data.name);
    // if wallet can connect to injected wallet + wallet is injected
    const isInstalled = (0, mipdStore_js_1.getInstalledWalletProviders)().find((w) => w.info.rdns === walletInfo.data.rdns);
    if (screen === "get-started") {
        return ((0, jsx_runtime_1.jsx)(GetStartedScreen_js_1.GetStartedScreen, { locale: locale, wallet: props.wallet, walletInfo: walletInfo.data, onBack: () => {
                setScreen("main");
            }, client: props.client }));
    }
    if (walletInfo.data.deepLink &&
        !isInstalled &&
        wallet.getConfig()
            ?.preferDeepLink &&
        (0, isMobile_js_1.isMobile)()) {
        return ((0, jsx_runtime_1.jsx)(DeepLinkConnectUI_js_1.DeepLinkConnectUI, { wallet: props.wallet, walletInfo: walletInfo.data, deepLinkPrefix: walletInfo.data.deepLink.mobile, locale: locale, onGetStarted: () => {
                setScreen("get-started");
            }, onBack: props.onBack, client: props.client }));
    }
    if (walletInfo.data.rdns && isInstalled) {
        return ((0, jsx_runtime_1.jsx)(InjectedConnectUI_js_1.InjectedConnectUI, { wallet: props.wallet, walletName: walletInfo.data.name, done: props.done, locale: locale, onGetStarted: () => {
                setScreen("get-started");
            }, onBack: props.onBack, chain: props.chain, client: props.client, size: props.size }));
    }
    // coinbase wallet sdk
    if (props.wallet.id === constants_js_1.COINBASE) {
        return ((0, jsx_runtime_1.jsx)(react_1.Suspense, { fallback: (0, jsx_runtime_1.jsx)(LoadingScreen_js_1.LoadingScreen, {}), children: (0, jsx_runtime_1.jsx)(CoinbaseSDKWalletConnectUI, { locale: locale, onGetStarted: () => {
                    setScreen("get-started");
                }, onBack: props.onBack, done: props.done, wallet: props.wallet, walletInfo: walletInfo.data, chain: props.chain, client: props.client, size: props.size }) }));
    }
    // wallet connect
    if (walletInfo.data.mobile.native || walletInfo.data.mobile.universal) {
        return ((0, jsx_runtime_1.jsx)(WalletConnectConnection_js_1.WalletConnectConnection, { locale: locale, onGetStarted: () => {
                setScreen("get-started");
            }, onBack: props.onBack, done: props.done, wallet: props.wallet, walletInfo: walletInfo.data, chain: props.chain, chains: props.chains, client: props.client, size: props.size, walletConnect: props.walletConnect }));
    }
    // wallet connect
    if (props.wallet.id === "walletConnect") {
        return ((0, jsx_runtime_1.jsx)(WalletConnectConnection_js_1.WalletConnectStandaloneConnection, { locale: locale, onBack: props.onBack, done: props.done, wallet: props.wallet, walletInfo: walletInfo.data, setModalVisibility: props.setModalVisibility, chain: props.chain, chains: props.chains, client: props.client, size: props.size, walletConnect: props.walletConnect }));
    }
    if (props.wallet.id === "inApp" || props.wallet.id === "embedded") {
        return ((0, jsx_runtime_1.jsx)(react_1.Suspense, { fallback: (0, jsx_runtime_1.jsx)(LoadingScreen_js_1.LoadingScreen, {}), children: (0, jsx_runtime_1.jsx)(InAppWalletConnectUI, { wallet: props.wallet, done: props.done, goBack: props.onBack, chain: props.chain, client: props.client, size: props.size, walletConnect: props.walletConnect, connectLocale: props.connectLocale, meta: props.meta }) }));
    }
    if ((0, is_ecosystem_wallet_js_1.isEcosystemWallet)(props.wallet.id)) {
        return ((0, jsx_runtime_1.jsx)(react_1.Suspense, { fallback: (0, jsx_runtime_1.jsx)(LoadingScreen_js_1.LoadingScreen, {}), children: (0, jsx_runtime_1.jsx)(EcosystemWalletConnectUI, { wallet: props.wallet, done: props.done, goBack: props.onBack, chain: props.chain, client: props.client, size: props.size, meta: props.meta, walletConnect: props.walletConnect, connectLocale: props.connectLocale }) }));
    }
    // if can't connect in any way - show get started screen
    return ((0, jsx_runtime_1.jsx)(GetStartedScreen_js_1.GetStartedScreen, { locale: locale, wallet: props.wallet, walletInfo: walletInfo.data, onBack: props.onBack, client: props.client }));
}
//# sourceMappingURL=AnyWalletConnectUI.js.map