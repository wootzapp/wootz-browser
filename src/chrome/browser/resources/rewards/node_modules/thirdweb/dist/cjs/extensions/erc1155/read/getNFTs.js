"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getNFTs = getNFTs;
exports.isGetNFTsSupported = isGetNFTsSupported;
const viem_1 = require("viem");
const bigint_js_1 = require("../../../utils/bigint.js");
const nextTokenIdToMint_js_1 = require("../__generated__/IERC1155Enumerable/read/nextTokenIdToMint.js");
const getNFT_js_1 = require("./getNFT.js");
const DEFAULT_QUERY_ALL_COUNT = 100n;
/**
 * Retrieves an array of NFTs ("ERC1155") based on the provided options.
 * @param options - The options for retrieving the NFTs.
 * @returns A promise that resolves to an array of NFTs.
 * @extension ERC1155
 * @example
 * ```ts
 * import { getNFTs } from "thirdweb/extensions/erc1155";
 * const nfts = await getNFTs({
 *  contract,
 *  start: 0,
 *  count: 10,
 * });
 * ```
 */
async function getNFTs(options) {
    const start = BigInt(options.start || 0);
    const count = BigInt(options.count || DEFAULT_QUERY_ALL_COUNT);
    // try to get the totalCount (non-standard) - if this fails then just use maxUint256
    const totalCount = await (0, nextTokenIdToMint_js_1.nextTokenIdToMint)(options).catch(() => viem_1.maxUint256);
    // get the maxId to query up to (either the totalCount or the start + count, whichever is smaller)
    const maxId = (0, bigint_js_1.min)(totalCount, start + count);
    const promises = [];
    for (let i = start; i < maxId; i++) {
        promises.push((0, getNFT_js_1.getNFT)({
            ...options,
            tokenId: i,
        }));
    }
    return await Promise.all(promises);
}
/**
 * Checks if the `getNFTs` method is supported by the given contract.
 * @param availableSelectors An array of 4byte function selectors of the contract. You can get this in various ways, such as using "whatsabi" or if you have the ABI of the contract available you can use it to generate the selectors.
 * @returns A boolean indicating if the `getNFTs` method is supported.
 * @extension ERC1155
 * @example
 * ```ts
 * import { isGetNFTsSupported } from "thirdweb/extensions/erc721";
 *
 * const supported = isGetNFTsSupported(["0x..."]);
 * ```
 */
function isGetNFTsSupported(availableSelectors) {
    return ((0, getNFT_js_1.isGetNFTSupported)(availableSelectors) &&
        (0, nextTokenIdToMint_js_1.isNextTokenIdToMintSupported)(availableSelectors));
}
//# sourceMappingURL=getNFTs.js.map