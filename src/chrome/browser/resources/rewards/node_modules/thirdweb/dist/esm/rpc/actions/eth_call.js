import { numberToHex } from "../../utils/encoding/hex.js";
function encodeStateOverrides(overrides) {
    return Object.fromEntries(Object.entries(overrides).map(([address, override]) => {
        return [
            address,
            {
                balance: override.balance ? numberToHex(override.balance) : undefined,
                nonce: override.nonce ? numberToHex(override.nonce) : undefined,
                code: override.code,
                state: override.state,
                stateDiff: override.stateDiff,
            },
        ];
    }));
}
/**
 * Executes a call or a transaction on the Ethereum network.
 * @param request - The EIP1193 request function.
 * @param params - The parameters for the call or transaction.
 * @returns A promise that resolves to the result of the call or transaction.
 * @rpc
 * @example
 * ```ts
 * import { getRpcClient, eth_call } from "thirdweb/rpc";
 * const rpcRequest = getRpcClient({ client, chain });
 * const result = await eth_call(rpcRequest, {
 *  to: "0x...",
 *  ...
 * });
 * ```
 */
export async function eth_call(request, params) {
    const { blockNumber, blockTag, ...txRequest } = params;
    const blockNumberHex = blockNumber ? numberToHex(blockNumber) : undefined;
    // default to "latest" if no block is provided
    const block = blockNumberHex || blockTag || "latest";
    return await request({
        method: "eth_call",
        params: params.stateOverrides
            ? [
                txRequest,
                block,
                encodeStateOverrides(params.stateOverrides),
            ]
            : [txRequest, block],
    });
}
//# sourceMappingURL=eth_call.js.map