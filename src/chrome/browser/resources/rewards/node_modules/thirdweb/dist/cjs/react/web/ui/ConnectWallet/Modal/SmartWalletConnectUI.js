"use strict";
"use client";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SmartConnectUI = SmartConnectUI;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_icons_1 = require("@radix-ui/react-icons");
const react_query_1 = require("@tanstack/react-query");
const react_1 = require("react");
const index_js_1 = require("../../../../core/design-system/index.js");
const connection_manager_js_1 = require("../../../../core/providers/connection-manager.js");
const wallet_js_1 = require("../../../../core/utils/wallet.js");
const LoadingScreen_js_1 = require("../../../wallets/shared/LoadingScreen.js");
const getSmartWalletLocale_js_1 = require("../../../wallets/smartWallet/locale/getSmartWalletLocale.js");
const Spacer_js_1 = require("../../components/Spacer.js");
const Spinner_js_1 = require("../../components/Spinner.js");
const basic_js_1 = require("../../components/basic.js");
const buttons_js_1 = require("../../components/buttons.js");
const text_js_1 = require("../../components/text.js");
const AnyWalletConnectUI_js_1 = require("./AnyWalletConnectUI.js");
/**
 * @internal
 */
function SmartConnectUI(props) {
    const personalWalletInfo = (0, wallet_js_1.useWalletInfo)(props.personalWallet.id);
    const [keyConnected, setKeyConnected] = (0, react_1.useState)(false);
    if (!personalWalletInfo.data) {
        return (0, jsx_runtime_1.jsx)(LoadingScreen_js_1.LoadingScreen, {});
    }
    // connect personal wallet
    if (!keyConnected) {
        return ((0, jsx_runtime_1.jsx)(AnyWalletConnectUI_js_1.AnyWalletConnectUI, { wallet: props.personalWallet, done: () => {
                setKeyConnected(true);
            }, onBack: props.onBack, setModalVisibility: props.setModalVisibility, chain: props.chain, chains: props.chains, client: props.client, meta: props.meta, size: props.size, walletConnect: props.walletConnect, connectLocale: props.connectLocale }));
    }
    return ((0, jsx_runtime_1.jsx)(SmartWalletConnecting, { done: props.done, personalWallet: props.personalWallet, accountAbstraction: props.accountAbstraction, onBack: props.onBack, personalWalletInfo: personalWalletInfo.data, localeId: props.connectLocale.id, size: props.size, client: props.client }));
}
function SmartWalletConnecting(props) {
    const localeQuery = (0, react_query_1.useQuery)({
        queryKey: ["getSmartWalletLocale", props.localeId],
        queryFn: () => (0, getSmartWalletLocale_js_1.getSmartWalletLocale)(props.localeId),
    });
    const { chain: smartWalletChain } = props.accountAbstraction;
    const { personalWallet } = props;
    const { done } = props;
    const [personalWalletChainId, setPersonalWalletChainId] = (0, react_1.useState)(personalWallet.getChain()?.id);
    (0, react_1.useEffect)(() => {
        const unsubChainChanged = personalWallet.subscribe("chainChanged", (chain) => setPersonalWalletChainId(chain.id));
        return () => {
            unsubChainChanged();
        };
    }, [personalWallet]);
    const wrongNetwork = personalWalletChainId !== smartWalletChain.id;
    const [smartWalletConnectionStatus, setSmartWalletConnectionStatus] = (0, react_1.useState)("idle");
    const [personalWalletChainSwitchStatus, setPersonalWalletChainSwitchStatus] = (0, react_1.useState)("idle");
    const connectionManager = (0, connection_manager_js_1.useConnectionManager)();
    const handleConnect = (0, react_1.useCallback)(async () => {
        if (!personalWallet) {
            throw new Error("No personal wallet");
        }
        setSmartWalletConnectionStatus("connecting");
        try {
            const connected = await connectionManager.handleConnection(personalWallet, {
                accountAbstraction: props.accountAbstraction,
                client: props.client,
            });
            done(connected);
            setSmartWalletConnectionStatus("idle");
        }
        catch (e) {
            console.error(e);
            setSmartWalletConnectionStatus("connect-error");
        }
    }, [
        done,
        personalWallet,
        props.client,
        props.accountAbstraction,
        connectionManager,
    ]);
    const connectStarted = (0, react_1.useRef)(false);
    (0, react_1.useEffect)(() => {
        if (!wrongNetwork && !connectStarted.current) {
            handleConnect();
            connectStarted.current = true;
        }
    }, [handleConnect, wrongNetwork]);
    if (!localeQuery.data) {
        return (0, jsx_runtime_1.jsx)(LoadingScreen_js_1.LoadingScreen, {});
    }
    if (wrongNetwork) {
        return ((0, jsx_runtime_1.jsxs)(basic_js_1.Container, { fullHeight: true, animate: "fadein", flex: "column", children: [(0, jsx_runtime_1.jsx)(basic_js_1.Container, { p: "lg", children: (0, jsx_runtime_1.jsx)(basic_js_1.ModalHeader, { title: props.personalWalletInfo.name, onBack: props.onBack }) }), props.size === "compact" && (0, jsx_runtime_1.jsx)(Spacer_js_1.Spacer, { y: "lg" }), (0, jsx_runtime_1.jsx)(basic_js_1.Container, { expand: true, flex: "column", center: "both", p: "lg", children: (0, jsx_runtime_1.jsxs)(basic_js_1.Container, { p: props.size === "wide" ? "lg" : undefined, children: [(0, jsx_runtime_1.jsx)(basic_js_1.Container, { flex: "row", center: "x", color: "danger", children: (0, jsx_runtime_1.jsx)(react_icons_1.ExclamationTriangleIcon, { width: index_js_1.iconSize.lg, height: index_js_1.iconSize.lg }) }), (0, jsx_runtime_1.jsx)(Spacer_js_1.Spacer, { y: "md" }), (0, jsx_runtime_1.jsx)(text_js_1.Text, { size: "lg", color: "primaryText", center: true, weight: 500, children: localeQuery.data.wrongNetworkScreen.title }), (0, jsx_runtime_1.jsx)(Spacer_js_1.Spacer, { y: "lg" }), (0, jsx_runtime_1.jsx)(text_js_1.Text, { multiline: true, center: true, children: localeQuery.data.wrongNetworkScreen.subtitle }), (0, jsx_runtime_1.jsx)(Spacer_js_1.Spacer, { y: "xl" }), (0, jsx_runtime_1.jsxs)(basic_js_1.Container, { flex: "column", gap: "md", children: [(0, jsx_runtime_1.jsxs)(buttons_js_1.Button, { type: "button", fullWidth: true, variant: "accent", style: {
                                            display: "flex",
                                            alignItems: "center",
                                            gap: index_js_1.spacing.sm,
                                        }, onClick: async () => {
                                            if (!personalWallet.switchChain) {
                                                setPersonalWalletChainSwitchStatus("switch-error");
                                                throw new Error("No switchChain method");
                                            }
                                            try {
                                                setPersonalWalletChainSwitchStatus("switching");
                                                await personalWallet.switchChain(smartWalletChain);
                                                const newChain = personalWallet.getChain();
                                                if (newChain) {
                                                    setPersonalWalletChainId(newChain.id);
                                                }
                                                setPersonalWalletChainSwitchStatus("idle");
                                            }
                                            catch (e) {
                                                console.error(e);
                                                setPersonalWalletChainSwitchStatus("switch-error");
                                            }
                                        }, children: [personalWalletChainSwitchStatus === "switching"
                                                ? "Switching"
                                                : "Switch Network", personalWalletChainSwitchStatus === "switching" && ((0, jsx_runtime_1.jsx)(Spinner_js_1.Spinner, { size: "sm", color: "accentButtonText" }))] }), (0, jsx_runtime_1.jsxs)(basic_js_1.Container, { flex: "row", gap: "sm", center: "both", color: "danger", style: {
                                            textAlign: "center",
                                            fontSize: index_js_1.fontSize.sm,
                                            opacity: personalWalletChainSwitchStatus === "switch-error" ? 1 : 0,
                                            transition: "opacity 200ms ease",
                                        }, children: [(0, jsx_runtime_1.jsx)(react_icons_1.ExclamationTriangleIcon, { width: index_js_1.iconSize.sm, height: index_js_1.iconSize.sm }), (0, jsx_runtime_1.jsx)("span", { children: localeQuery.data.wrongNetworkScreen.failedToSwitch })] })] })] }) })] }));
    }
    if (smartWalletConnectionStatus === "connect-error") {
        return ((0, jsx_runtime_1.jsx)(basic_js_1.Container, { fullHeight: true, animate: "fadein", flex: "column", center: "both", p: "lg", style: {
                minHeight: "300px",
            }, children: (0, jsx_runtime_1.jsx)(text_js_1.Text, { color: "danger", children: localeQuery.data.failedToConnect }) }));
    }
    return ((0, jsx_runtime_1.jsxs)(basic_js_1.Container, { fullHeight: true, flex: "column", center: "both", style: {
            minHeight: "300px",
        }, children: [(0, jsx_runtime_1.jsx)(text_js_1.Text, { color: "primaryText", multiline: true, center: true, children: localeQuery.data.connecting }), (0, jsx_runtime_1.jsx)(Spacer_js_1.Spacer, { y: "lg" }), (0, jsx_runtime_1.jsx)(Spinner_js_1.Spinner, { color: "accentText", size: "lg" })] }));
}
//# sourceMappingURL=SmartWalletConnectUI.js.map