import { useCallback, useState } from "react";
import { useConnectionManagerCtx } from "../../providers/connection-manager.js";
import { useSetActiveWalletConnectionStatus } from "./useSetActiveWalletConnectionStatus.js";
/**
 * A hook to set a wallet as active wallet
 * @returns A function that lets you connect a wallet.
 * @example
 * ```jsx
 * import { useConnect } from "thirdweb/react";
 * import { createWallet } from "thirdweb/wallets";
 *
 * function Example() {
 *   const { connect, isConnecting, error } = useConnect();
 *   return (
 *     <button
 *       onClick={() =>
 *         connect(async () => {
 *           // instantiate wallet
 *           const wallet = createWallet("io.metamask");
 *           // connect wallet
 *           await wallet.connect();
 *           // return the wallet
 *           return wallet;
 *         })
 *       }
 *     >
 *       Connect
 *     </button>
 *   );
 * }
 * ```
 * @walletConnection
 */
export function useConnect(options) {
    const manager = useConnectionManagerCtx("useConnect");
    const { connect } = manager;
    const setConnectionStatus = useSetActiveWalletConnectionStatus();
    const [isConnecting, setIsConnecting] = useState(false);
    const [error, setError] = useState(null);
    const handleConnection = useCallback(async (walletOrFn) => {
        // reset error state
        setError(null);
        setConnectionStatus("connecting");
        if (typeof walletOrFn !== "function") {
            const account = await connect(walletOrFn, options);
            setConnectionStatus("connected");
            return account;
        }
        setIsConnecting(true);
        try {
            const w = await walletOrFn();
            const account = await connect(w, options);
            setConnectionStatus("connected");
            return account;
        }
        catch (e) {
            console.error(e);
            setError(e);
            setConnectionStatus("disconnected");
        }
        finally {
            setIsConnecting(false);
        }
        return null;
    }, [connect, options, setConnectionStatus]);
    return { connect: handleConnection, isConnecting, error };
}
//# sourceMappingURL=useConnect.js.map