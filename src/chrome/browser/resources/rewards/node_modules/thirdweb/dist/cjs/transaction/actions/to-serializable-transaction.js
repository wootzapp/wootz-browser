"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.toSerializableTransaction = toSerializableTransaction;
const fee_data_js_1 = require("../../gas/fee-data.js");
const rpc_js_1 = require("../../rpc/rpc.js");
const resolve_promised_value_js_1 = require("../../utils/promise/resolve-promised-value.js");
const encode_js_1 = require("./encode.js");
const estimate_gas_js_1 = require("./estimate-gas.js");
/**
 * Converts a prepared transaction to a transaction with populated options.
 * @param options - The transaction and additional options for conversion
 * @returns A serializable transaction for inspection or submission to an account.
 *
 * @note For easier transaction sending, {@see sendTransaction}
 * @example
 * ```ts
 * import { prepareTransaction, toSerializableTransaction } from "thirdweb";
 *
 * const transaction = await prepareTransaction({
 *   transaction: {
 *     to: "0x...",
 *     value: 100,
 *   },
 * });
 * const finalTx = await toSerializableTransaction({
 *   transaction,
 * });
 *
 * account.sendTransaction(finalTx);
 * ```
 * @transaction
 */
async function toSerializableTransaction(options) {
    const rpcRequest = (0, rpc_js_1.getRpcClient)(options.transaction);
    const chainId = options.transaction.chain.id;
    const from = options.from;
    let [data, nonce, gas, feeData, to, accessList, value] = await Promise.all([
        (0, encode_js_1.encode)(options.transaction),
        (async () => {
            // if the user has specified a nonce, use that
            const resolvedNonce = await (0, resolve_promised_value_js_1.resolvePromisedValue)(options.transaction.nonce);
            if (resolvedNonce !== undefined) {
                return resolvedNonce;
            }
            return from // otherwise get the next nonce (import the method to do so)
                ? await Promise.resolve().then(() => require("../../rpc/actions/eth_getTransactionCount.js")).then(({ eth_getTransactionCount }) => eth_getTransactionCount(rpcRequest, {
                    address: from,
                    blockTag: "pending",
                }))
                : undefined;
        })(),
        // takes the same options as the sendTransaction function thankfully!
        (0, estimate_gas_js_1.estimateGas)(options),
        (0, fee_data_js_1.getGasOverridesForTransaction)(options.transaction),
        (0, resolve_promised_value_js_1.resolvePromisedValue)(options.transaction.to),
        (0, resolve_promised_value_js_1.resolvePromisedValue)(options.transaction.accessList),
        (0, resolve_promised_value_js_1.resolvePromisedValue)(options.transaction.value),
    ]);
    const extraGas = await (0, resolve_promised_value_js_1.resolvePromisedValue)(options.transaction.extraGas);
    if (extraGas) {
        gas += extraGas;
    }
    return {
        to,
        chainId,
        data,
        gas,
        nonce,
        accessList,
        value,
        ...feeData,
    };
}
//# sourceMappingURL=to-serializable-transaction.js.map