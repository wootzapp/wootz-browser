import type { ThirdwebClient } from "../../../../client/client.js";
import type { EcosystemWalletId } from "../../../wallet-types.js";
import type { AuthenticateResult, PasskeyClient, RegisterResult, RpInfo } from "../../core/authentication/passkeys.js";
export declare class PasskeyNativeClient implements PasskeyClient {
    isAvailable(): boolean;
    register(args: {
        name: string;
        challenge: string;
        rp: RpInfo;
    }): Promise<RegisterResult>;
    authenticate(args: {
        credentialId: string | undefined;
        challenge: string;
        rp: RpInfo;
    }): Promise<AuthenticateResult>;
}
/**
 * Returns whether this device has a stored passkey ready to be used for sign-in
 * @param client - the thirdweb client
 * @returns whether the device has a stored passkey
 * @walletUtils
 */
export declare function hasStoredPasskey(client: ThirdwebClient, ecosystemId?: EcosystemWalletId): Promise<boolean>;
//# sourceMappingURL=passkeys.d.ts.map