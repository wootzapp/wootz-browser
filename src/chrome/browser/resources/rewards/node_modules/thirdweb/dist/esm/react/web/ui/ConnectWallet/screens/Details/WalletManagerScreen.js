import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { CheckIcon, MinusIcon, PlusIcon } from "@radix-ui/react-icons";
import { useState } from "react";
import { shortenAddress } from "../../../../../../utils/address.js";
import { useCustomTheme } from "../../../../../core/design-system/CustomThemeProvider.js";
import { fontSize, iconSize, spacing, } from "../../../../../core/design-system/index.js";
import { useWalletBalance } from "../../../../../core/hooks/others/useWalletBalance.js";
import { useActiveWallet } from "../../../../../core/hooks/wallets/useActiveWallet.js";
import { useConnectedWallets } from "../../../../../core/hooks/wallets/useConnectedWallets.js";
import { useDisconnect } from "../../../../../core/hooks/wallets/useDisconnect.js";
import { useSetActiveWallet } from "../../../../../core/hooks/wallets/useSetActiveWallet.js";
import { Skeleton } from "../../../components/Skeleton.js";
import { Spacer } from "../../../components/Spacer.js";
import { ToolTip } from "../../../components/Tooltip.js";
import { WalletImage } from "../../../components/WalletImage.js";
import { Container, Line, ModalHeader } from "../../../components/basic.js";
import { Button, IconButton } from "../../../components/buttons.js";
import { Text } from "../../../components/text.js";
import { WalletButtonEl } from "../../WalletEntryButton.js";
import { WalletSwitcherConnectionScreen, } from "../WalletSwitcherConnectionScreen.js";
import { formatTokenBalance } from "../formatTokenBalance.js";
export function WalletManagerScreen(props) {
    const [screen, setScreen] = useState("wallets");
    const connectedWallets = useConnectedWallets();
    const setActive = useSetActiveWallet();
    // if all wallets are connected and showAll wallets is disabled, hide the connect button
    const hideConnectButton = !props.showAllWallets &&
        props.wallets?.every((w) => connectedWallets.includes(w));
    if (screen === "connect") {
        return (_jsx(WalletSwitcherConnectionScreen, { ...props, isEmbed: false, onSelect: (w) => {
                setActive(w);
                props.onBack();
            } }));
    }
    return (_jsxs(Container, { children: [_jsx(Container, { p: "lg", children: _jsx(ModalHeader, { title: "Wallets", onBack: props.onBack }) }), _jsx(Line, {}), _jsx(Spacer, { y: "md" }), _jsx(Container, { px: "md", style: {
                    minHeight: "150px",
                }, children: _jsx(Container, { flex: "column", gap: "xs", children: connectedWallets
                        .filter((w) => !props.hiddenWallets?.includes(w.id))
                        .map((w) => {
                        return (_jsx(WalletManangerButton, { client: props.client, 
                            // address={address || ""}
                            onClick: () => {
                                setActive(w);
                                props.onBack();
                            }, chain: props.activeChain, wallet: w }, w.id));
                    }) }) }), _jsx(Spacer, { y: "xxl" }), _jsx(Container, { p: "lg", children: !hideConnectButton && (_jsxs(Button, { variant: "accent", fullWidth: true, onClick: () => {
                        setScreen("connect");
                    }, gap: "xs", children: [_jsx(PlusIcon, { width: iconSize.sm, height: iconSize.sm }), "Connect Wallet"] })) })] }));
}
function WalletManangerButton(props) {
    const theme = useCustomTheme();
    const activeWallet = useActiveWallet();
    const { disconnect } = useDisconnect();
    const walletId = props.wallet.id;
    const address = props.wallet.getAccount()?.address;
    const balanceQuery = useWalletBalance({
        address: address,
        chain: props.chain,
        client: props.client,
    });
    return (_jsxs("div", { style: {
            position: "relative",
        }, children: [_jsx(WalletButtonEl, { onClick: props.onClick, style: {
                    justifyContent: "space-between",
                }, children: _jsxs(Container, { flex: "row", gap: "md", center: "y", children: [_jsx(WalletImage, { client: props.client, id: walletId, size: iconSize.lg }), _jsxs(Container, { flex: "column", gap: "4xs", children: [_jsx(Text, { color: "primaryText", children: shortenAddress(address || "") }), balanceQuery.data ? (_jsx(Text, { size: "xs", color: "secondaryText", weight: 400, children: formatTokenBalance(balanceQuery.data) })) : (_jsx(Skeleton, { width: "100px", height: fontSize.sm }))] })] }) }), _jsx("div", { style: {
                    position: "absolute",
                    zIndex: 1,
                    right: spacing.xxs,
                    top: "50%",
                    transform: "translateY(-50%)",
                }, children: activeWallet?.id === props.wallet.id ? (_jsx(ToolTip, { tip: "Active Wallet", children: _jsx(IconButton, { children: _jsx(CheckIcon, { width: iconSize.md, height: iconSize.md }) }) })) : (_jsx(ToolTip, { tip: "Disconnect", children: _jsx(IconButton, { onClick: () => {
                            disconnect(props.wallet);
                        }, children: _jsx(MinusIcon, { width: iconSize.md, height: iconSize.md, style: {
                                color: theme.colors.secondaryText,
                            } }) }) })) })] }));
}
//# sourceMappingURL=WalletManagerScreen.js.map