"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.WalletSwitcherConnectionScreen = WalletSwitcherConnectionScreen;
const jsx_runtime_1 = require("react/jsx-runtime");
const useConnectedWallets_js_1 = require("../../../../core/hooks/wallets/useConnectedWallets.js");
const defaultWallets_js_1 = require("../../../wallets/defaultWallets.js");
const ConnectModalContent_js_1 = require("../Modal/ConnectModalContent.js");
const screen_js_1 = require("../Modal/screen.js");
function WalletSwitcherConnectionScreen(props) {
    const connectedWallets = (0, useConnectedWallets_js_1.useConnectedWallets)();
    const wallets = props.wallets ||
        (0, defaultWallets_js_1.getDefaultWallets)({
            appMetadata: props.appMetadata,
            chains: props.chains,
        }).filter((w) => w.id !== "inApp");
    const screenSetup = (0, screen_js_1.useSetupScreen)({
        size: "compact",
        welcomeScreen: undefined,
        wallets: wallets,
    });
    return ((0, jsx_runtime_1.jsx)(ConnectModalContent_js_1.ConnectModalContent, { accountAbstraction: props.accountAbstraction, auth: undefined, chain: props.chain, chains: props.chains, client: props.client, connectLocale: props.connectLocale, hideHeader: props.isEmbed, isOpen: true, meta: {
            showThirdwebBranding: false,
        }, onClose: () => { }, onConnect: (w) => {
            props.onSelect(w);
            props.onBack();
        }, recommendedWallets: props.recommendedWallets, screenSetup: screenSetup, welcomeScreen: undefined, wallets: wallets, setModalVisibility: () => { }, shouldSetActive: false, showAllWallets: props.showAllWallets, size: "compact", walletConnect: props.walletConnect, modalHeader: {
            title: "Connect",
            onBack: props.onBack,
        }, walletIdsToHide: connectedWallets.map((x) => x.id) }));
}
//# sourceMappingURL=WalletSwitcherConnectionScreen.js.map