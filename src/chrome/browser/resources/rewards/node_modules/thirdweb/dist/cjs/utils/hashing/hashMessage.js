"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.hashMessage = hashMessage;
const viem_1 = require("viem");
const to_bytes_js_1 = require("../encoding/to-bytes.js");
const keccak256_js_1 = require("./keccak256.js");
const presignMessagePrefix = "\x19Ethereum Signed Message:\n";
/**
 * Ethereum Signed Message hashing
 * @param message - The message to hash, either as a string, a Uint8Array, or an object with a `raw` property containing a Uint8Array.
 * @param to_ - The desired output format of the hash (optional). Defaults to 'hex'.
 * @example
 * ```ts
 * import { hashMessage } from "thirdweb/utils";
 * const hash = hashMessage("hello world");
 * ```
 * @returns The Ethereum Signed Message hash of the message in the specified format.
 * @utils
 */
function hashMessage(message, to_) {
    const messageBytes = (() => {
        if (typeof message === "string") {
            return (0, to_bytes_js_1.stringToBytes)(message);
        }
        if (message.raw instanceof Uint8Array) {
            return message.raw;
        }
        return (0, to_bytes_js_1.toBytes)(message.raw);
    })();
    const prefixBytes = (0, to_bytes_js_1.stringToBytes)(`${presignMessagePrefix}${messageBytes.length}`);
    return (0, keccak256_js_1.keccak256)((0, viem_1.concat)([prefixBytes, messageBytes]), to_);
}
//# sourceMappingURL=hashMessage.js.map