"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createWalletAdapter = createWalletAdapter;
const utils_js_1 = require("../chains/utils.js");
const wallet_emitter_js_1 = require("../wallets/wallet-emitter.js");
/**
 * Creates a wallet from the given account.
 *
 * You can use this to:
 *
 * - convert a third party library wallet (wagmi, viem, ethers) into a thirdweb wallet.
 * - connect with a private key (for automated tests)
 *
 * Available wallet adatpers:
 * - [Viem](https://portal.thirdweb.com/references/typescript/v5/viemAdapter)
 * - [Ethers 6](https://portal.thirdweb.com/references/typescript/v5/ethers6Adapter)
 * - [Ethers 5](https://portal.thirdweb.com/references/typescript/v5/ethers5Adapter)
 *
 * @param options - The options for the adapter wallet.
 * @returns a wallet instance.
 *
 * @example
 * ```ts
 * import { createWalletAdapter } from "thirdweb";
 *
 * const wallet = createWalletAdapter({
 *  client,
 *  adaptedAccount,
 *  chain,
 *  onDisconnect: () => {
 *    // disconnect logic
 *  },
 *  switchChain: async (chain) => {
 *    // switch chain logic
 *  },
 * });
 * ```
 * @wallet
 */
function createWalletAdapter(options) {
    const emitter = (0, wallet_emitter_js_1.createWalletEmitter)();
    let _chain = options.chain;
    return {
        id: "adapter",
        subscribe: emitter.subscribe,
        connect: async () => {
            emitter.emit("onConnect", options);
            return options.adaptedAccount;
        },
        autoConnect: async () => {
            emitter.emit("onConnect", options);
            return options.adaptedAccount;
        },
        disconnect: async () => {
            await options.onDisconnect();
            emitter.emit("disconnect", undefined);
        },
        getAccount() {
            return options.adaptedAccount;
        },
        getChain() {
            const cachedChain = (0, utils_js_1.getCachedChainIfExists)(_chain.id);
            _chain = cachedChain || _chain;
            return _chain;
        },
        getConfig() {
            return options;
        },
        switchChain: async (chain) => {
            await options.switchChain(chain);
            _chain = chain;
            emitter.emit("chainChanged", chain);
        },
    };
}
//# sourceMappingURL=wallet-adapter.js.map