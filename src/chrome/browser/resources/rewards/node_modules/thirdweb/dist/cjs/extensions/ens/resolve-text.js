"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.resolveText = resolveText;
const ethereum_js_1 = require("../../chains/chain-definitions/ethereum.js");
const contract_js_1 = require("../../contract/contract.js");
const hex_js_1 = require("../../utils/encoding/hex.js");
const namehash_js_1 = require("../../utils/ens/namehash.js");
const packetToBytes_js_1 = require("../../utils/ens/packetToBytes.js");
const withCache_js_1 = require("../../utils/promise/withCache.js");
const text_js_1 = require("./__generated__/AddressResolver/read/text.js");
const resolve_js_1 = require("./__generated__/UniversalResolver/read/resolve.js");
const constants_js_1 = require("./constants.js");
/**
 * Resolves an ENS name and key to the specified record.
 * @param options - The options for resolving an ENS address.
 * @example
 * ```ts
 * import { resolveText } from "thirdweb/extensions/ens";
 * const twitterUsername = await resolveText({
 *    client,
 *    name: "vitalik.eth",
 *    key: "com.twitter"
 * });
 * ```
 * @extension ENS
 * @returns A promise that resolves to the text record.
 */
async function resolveText(options) {
    const { client, name, key, resolverAddress, resolverChain } = options;
    return (0, withCache_js_1.withCache)(async () => {
        const contract = (0, contract_js_1.getContract)({
            client,
            chain: resolverChain || ethereum_js_1.ethereum,
            address: resolverAddress || constants_js_1.UNIVERSAL_RESOLVER_ADDRESS,
        });
        const data = (0, text_js_1.encodeText)({ name: (0, namehash_js_1.namehash)(name), key });
        const result = await (0, resolve_js_1.resolve)({
            contract,
            name: (0, hex_js_1.toHex)((0, packetToBytes_js_1.packetToBytes)(name)),
            data,
        });
        if (result[0] === "0x") {
            return null;
        }
        const record = (0, text_js_1.decodeTextResult)(result[0]);
        return record === "" ? null : record;
    }, {
        cacheKey: `ens:text:${name}:${key}`,
        // 1min cache
        cacheTime: 60 * 1000,
    });
}
//# sourceMappingURL=resolve-text.js.map