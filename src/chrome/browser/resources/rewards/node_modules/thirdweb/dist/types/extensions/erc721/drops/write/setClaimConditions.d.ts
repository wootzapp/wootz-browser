import type { BaseTransactionOptions } from "../../../../transaction/types.js";
import type { ClaimConditionsInput } from "../../../../utils/extensions/drops/types.js";
/**
 * @extension ERC721
 */
export type SetClaimConditionsParams = {
    phases: ClaimConditionsInput[];
    resetClaimEligibility?: boolean;
};
/**
 * Set the claim conditions for a ERC721 drop
 * @param options
 * @returns the prepared transaction
 * @extension ERC721
 * @example
 * ```ts
 * import { setClaimConditions } from "thirdweb/extensions/erc721";
 * import { sendTransaction } from "thirdweb";
 *
 * const transaction = setClaimConditions({
 *  contract,
 *  phases: [
 *    {
 *      maxClaimableSupply: 100n,
 *      maxClaimablePerWallet: 1n,
 *      currencyAddress: "0x...",
 *      price: 0.1,
 *      startTime: new Date(),
 *    },
 *   ],
 * });
 *
 * await sendTransaction({ transaction, account });
 * ```
 */
export declare function setClaimConditions(options: BaseTransactionOptions<SetClaimConditionsParams>): import("../../../../transaction/prepare-transaction.js").PreparedTransaction<any, import("abitype").AbiFunction, import("../../../../transaction/prepare-transaction.js").PrepareTransactionOptions>;
/**
 * Checks if the `setClaimConditions` method is supported by the given contract.
 * @param availableSelectors An array of 4byte function selectors of the contract. You can get this in various ways, such as using "whatsabi" or if you have the ABI of the contract available you can use it to generate the selectors.
 * @returns A boolean indicating if the `setClaimConditions` method is supported.
 * @extension ERC721
 * @example
 * ```ts
 * import { isSetClaimConditionsSupported } from "thirdweb/extensions/erc721";
 *
 * const supported = isSetClaimConditionsSupported(["0x..."]);
 * ```
 */
export declare function isSetClaimConditionsSupported(availableSelectors: string[]): boolean;
//# sourceMappingURL=setClaimConditions.d.ts.map