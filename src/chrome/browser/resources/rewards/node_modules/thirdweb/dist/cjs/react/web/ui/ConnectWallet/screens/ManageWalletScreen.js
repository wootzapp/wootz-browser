"use strict";
"use client";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ManageWalletScreen = ManageWalletScreen;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_icons_1 = require("@radix-ui/react-icons");
const is_ecosystem_wallet_js_1 = require("../../../../../wallets/ecosystem/is-ecosystem-wallet.js");
const index_js_1 = require("../../../../../wallets/in-app/core/wallet/index.js");
const mipdStore_js_1 = require("../../../../../wallets/injected/mipdStore.js");
const index_js_2 = require("../../../../core/design-system/index.js");
const useActiveWallet_js_1 = require("../../../../core/hooks/wallets/useActiveWallet.js");
const useAdminAccount_js_1 = require("../../../../core/hooks/wallets/useAdminAccount.js");
const Spacer_js_1 = require("../../components/Spacer.js");
const basic_js_1 = require("../../components/basic.js");
const text_js_1 = require("../../components/text.js");
const MenuButton_js_1 = require("../MenuButton.js");
const KeyIcon_js_1 = require("../icons/KeyIcon.js");
const MultiUserIcon_js_1 = require("../icons/MultiUserIcon.js");
const WalletConnectIcon_js_1 = require("../icons/WalletConnectIcon.js");
/**
 * @internal
 */
function ManageWalletScreen(props) {
    const activeWallet = (0, useAdminAccount_js_1.useAdminWallet)();
    return ((0, jsx_runtime_1.jsxs)(basic_js_1.Container, { style: {
            minHeight: "300px",
        }, children: [(0, jsx_runtime_1.jsx)(basic_js_1.Container, { p: "lg", children: (0, jsx_runtime_1.jsx)(basic_js_1.ModalHeader, { title: props.locale.manageWallet.title, onBack: props.onBack }) }), (0, jsx_runtime_1.jsx)(basic_js_1.Line, {}), (0, jsx_runtime_1.jsxs)(basic_js_1.Container, { px: "sm", scrollY: true, style: {
                    maxHeight: "500px",
                }, children: [(0, jsx_runtime_1.jsx)(Spacer_js_1.Spacer, { y: "md" }), (0, jsx_runtime_1.jsxs)(basic_js_1.Container, { style: { position: "relative", height: "250px" }, children: [(0, jsx_runtime_1.jsx)(SwitchMetamaskAccount, { closeModal: props.closeModal, connectLocale: props.locale }), activeWallet &&
                                (activeWallet?.id === "inApp" ||
                                    (0, is_ecosystem_wallet_js_1.isEcosystemWallet)(activeWallet)) && ((0, jsx_runtime_1.jsxs)(MenuButton_js_1.MenuButton, { onClick: () => {
                                    props.setScreen("linked-profiles");
                                }, style: {
                                    fontSize: index_js_2.fontSize.sm,
                                }, children: [(0, jsx_runtime_1.jsx)(MultiUserIcon_js_1.MultiUserIcon, { size: index_js_2.iconSize.md }), (0, jsx_runtime_1.jsx)(text_js_1.Text, { color: "primaryText", children: props.locale.manageWallet.linkedProfiles })] })), (0, jsx_runtime_1.jsxs)(MenuButton_js_1.MenuButton, { onClick: () => {
                                    props.setScreen("wallet-connect-receiver");
                                }, style: {
                                    fontSize: index_js_2.fontSize.sm,
                                }, children: [(0, jsx_runtime_1.jsx)(WalletConnectIcon_js_1.WalletConnectIcon, { size: index_js_2.iconSize.md }), (0, jsx_runtime_1.jsx)(text_js_1.Text, { color: "primaryText", children: props.locale.manageWallet.connectAnApp })] }), activeWallet &&
                                (0, index_js_1.isInAppWallet)(activeWallet) &&
                                !activeWallet.getConfig()?.hidePrivateKeyExport && ((0, jsx_runtime_1.jsxs)(MenuButton_js_1.MenuButton, { onClick: () => {
                                    props.setScreen("private-key");
                                }, style: {
                                    fontSize: index_js_2.fontSize.sm,
                                }, children: [(0, jsx_runtime_1.jsx)(KeyIcon_js_1.KeyIcon, { size: index_js_2.iconSize.md }), (0, jsx_runtime_1.jsx)(text_js_1.Text, { color: "primaryText", children: props.locale.manageWallet.exportPrivateKey })] }))] }), (0, jsx_runtime_1.jsx)(Spacer_js_1.Spacer, { y: "lg" })] })] }));
}
function SwitchMetamaskAccount(props) {
    const wallet = (0, useActiveWallet_js_1.useActiveWallet)();
    const connectLocale = props.connectLocale;
    if (wallet?.id !== "io.metamask") {
        return null;
    }
    const injectedMetamaskProvider = (0, mipdStore_js_1.injectedProvider)("io.metamask");
    if (!injectedMetamaskProvider) {
        return null;
    }
    return ((0, jsx_runtime_1.jsxs)(MenuButton_js_1.MenuButton, { type: "button", onClick: async () => {
            await injectedMetamaskProvider.request({
                method: "wallet_requestPermissions",
                params: [{ eth_accounts: {} }],
            });
            props.closeModal();
        }, children: [(0, jsx_runtime_1.jsx)(react_icons_1.ShuffleIcon, { width: index_js_2.iconSize.md, height: index_js_2.iconSize.md }), (0, jsx_runtime_1.jsx)(text_js_1.Text, { color: "primaryText", children: connectLocale.switchAccount })] }));
}
//# sourceMappingURL=ManageWalletScreen.js.map