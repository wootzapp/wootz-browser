"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getCallsStatus = getCallsStatus;
const coinbaseWebSDK_js_1 = require("../coinbase/coinbaseWebSDK.js");
const index_js_1 = require("../in-app/core/wallet/index.js");
const index_js_2 = require("../injected/index.js");
const index_js_3 = require("../smart/index.js");
const controller_js_1 = require("../wallet-connect/controller.js");
/**
 * Get the status of an [EIP-5792](https://eips.ethereum.org/EIPS/eip-5792) bundle.
 *
 * @note This function is dependent on the wallet's support for EIP-5792 and could fail.
 *
 * @param {GetCallsStatusOptions} options
 * @param {Wallet} options.wallet - The wallet that send the original calls.
 * @param {ThirdwebClient} options.client - A {@link ThirdwebClient} instance.
 * @param {WalletSendCallsId} options.bundleId - The ID of the bundle to get the status of.
 * @throws an error if the wallet does not support EIP-5792.
 * @returns {Promise<GetCallsStatusResponse>} - A promise that resolves to the bundle's status and receipts (if available). {@link GetCallsStatusResponse}
 * @beta
 * @example
 * ```ts
 *  import { createThirdwebClient } from "thirdweb";
 *  import { sendCalls, getCallsStatus } from "thirdweb/wallets/eip5792";
 *
 *  const client = createThirdwebClient({ clientId: ... });
 *
 *  const bundleId = await sendCalls({ wallet, client, calls });
 *
 *  let result;
 *  while (result.status !== "CONFIRMED") {
 *    result = await getCallsStatus({ wallet, client, bundleId });
 *  }
 * ```
 * @extension EIP5792
 * @extension EIP5792
 */
async function getCallsStatus({ wallet, client, bundleId, }) {
    const account = wallet.getAccount();
    if (!account) {
        throw new Error(`Failed to get call status, no account found for wallet ${wallet.id}`);
    }
    // These conveniently operate the same
    if ((0, index_js_3.isSmartWallet)(wallet) || (0, index_js_1.isInAppWallet)(wallet)) {
        const { inAppWalletGetCallsStatus } = await Promise.resolve().then(() => require("../in-app/core/eip5972/in-app-wallet-calls.js"));
        return inAppWalletGetCallsStatus({ wallet, client, bundleId });
    }
    if ((0, coinbaseWebSDK_js_1.isCoinbaseSDKWallet)(wallet)) {
        const { coinbaseSDKWalletGetCallsStatus } = await Promise.resolve().then(() => require("../coinbase/coinbaseWebSDK.js"));
        return coinbaseSDKWalletGetCallsStatus({ wallet, bundleId });
    }
    if ((0, controller_js_1.isWalletConnect)(wallet)) {
        throw new Error("getCallsStatus is not yet supported for Wallet Connect");
    }
    // Default to injected wallet
    const provider = (0, index_js_2.getInjectedProvider)(wallet.id);
    try {
        return await provider.request({
            method: "wallet_getCallsStatus",
            params: [bundleId],
        });
    }
    catch (error) {
        if (/unsupport|not support/i.test(error.message)) {
            throw new Error(`${wallet.id} does not support wallet_getCallsStatus, reach out to them directly to request EIP-5792 support.`);
        }
        throw error;
    }
}
//# sourceMappingURL=get-calls-status.js.map