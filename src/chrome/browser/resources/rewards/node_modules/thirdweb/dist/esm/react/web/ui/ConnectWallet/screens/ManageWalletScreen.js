"use client";
import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { ShuffleIcon } from "@radix-ui/react-icons";
import { isEcosystemWallet } from "../../../../../wallets/ecosystem/is-ecosystem-wallet.js";
import { isInAppWallet } from "../../../../../wallets/in-app/core/wallet/index.js";
import { injectedProvider } from "../../../../../wallets/injected/mipdStore.js";
import { fontSize, iconSize } from "../../../../core/design-system/index.js";
import { useActiveWallet } from "../../../../core/hooks/wallets/useActiveWallet.js";
import { useAdminWallet } from "../../../../core/hooks/wallets/useAdminAccount.js";
import { Spacer } from "../../components/Spacer.js";
import { Container, Line, ModalHeader } from "../../components/basic.js";
import { Text } from "../../components/text.js";
import { MenuButton } from "../MenuButton.js";
import { KeyIcon } from "../icons/KeyIcon.js";
import { MultiUserIcon } from "../icons/MultiUserIcon.js";
import { WalletConnectIcon } from "../icons/WalletConnectIcon.js";
/**
 * @internal
 */
export function ManageWalletScreen(props) {
    const activeWallet = useAdminWallet();
    return (_jsxs(Container, { style: {
            minHeight: "300px",
        }, children: [_jsx(Container, { p: "lg", children: _jsx(ModalHeader, { title: props.locale.manageWallet.title, onBack: props.onBack }) }), _jsx(Line, {}), _jsxs(Container, { px: "sm", scrollY: true, style: {
                    maxHeight: "500px",
                }, children: [_jsx(Spacer, { y: "md" }), _jsxs(Container, { style: { position: "relative", height: "250px" }, children: [_jsx(SwitchMetamaskAccount, { closeModal: props.closeModal, connectLocale: props.locale }), activeWallet &&
                                (activeWallet?.id === "inApp" ||
                                    isEcosystemWallet(activeWallet)) && (_jsxs(MenuButton, { onClick: () => {
                                    props.setScreen("linked-profiles");
                                }, style: {
                                    fontSize: fontSize.sm,
                                }, children: [_jsx(MultiUserIcon, { size: iconSize.md }), _jsx(Text, { color: "primaryText", children: props.locale.manageWallet.linkedProfiles })] })), _jsxs(MenuButton, { onClick: () => {
                                    props.setScreen("wallet-connect-receiver");
                                }, style: {
                                    fontSize: fontSize.sm,
                                }, children: [_jsx(WalletConnectIcon, { size: iconSize.md }), _jsx(Text, { color: "primaryText", children: props.locale.manageWallet.connectAnApp })] }), activeWallet &&
                                isInAppWallet(activeWallet) &&
                                !activeWallet.getConfig()?.hidePrivateKeyExport && (_jsxs(MenuButton, { onClick: () => {
                                    props.setScreen("private-key");
                                }, style: {
                                    fontSize: fontSize.sm,
                                }, children: [_jsx(KeyIcon, { size: iconSize.md }), _jsx(Text, { color: "primaryText", children: props.locale.manageWallet.exportPrivateKey })] }))] }), _jsx(Spacer, { y: "lg" })] })] }));
}
function SwitchMetamaskAccount(props) {
    const wallet = useActiveWallet();
    const connectLocale = props.connectLocale;
    if (wallet?.id !== "io.metamask") {
        return null;
    }
    const injectedMetamaskProvider = injectedProvider("io.metamask");
    if (!injectedMetamaskProvider) {
        return null;
    }
    return (_jsxs(MenuButton, { type: "button", onClick: async () => {
            await injectedMetamaskProvider.request({
                method: "wallet_requestPermissions",
                params: [{ eth_accounts: {} }],
            });
            props.closeModal();
        }, children: [_jsx(ShuffleIcon, { width: iconSize.md, height: iconSize.md }), _jsx(Text, { color: "primaryText", children: connectLocale.switchAccount })] }));
}
//# sourceMappingURL=ManageWalletScreen.js.map