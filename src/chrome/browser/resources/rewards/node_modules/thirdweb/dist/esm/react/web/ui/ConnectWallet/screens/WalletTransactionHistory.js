"use client";
import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import styled from "@emotion/styled";
import { CheckIcon, CrossCircledIcon } from "@radix-ui/react-icons";
import { useSyncExternalStore } from "react";
import { getCachedChain } from "../../../../../chains/utils.js";
import { getTransactionStore } from "../../../../../transaction/transaction-store.js";
import { shortenHex } from "../../../../../utils/address.js";
import { useCustomTheme } from "../../../../core/design-system/CustomThemeProvider.js";
import { iconSize, spacing } from "../../../../core/design-system/index.js";
import { useWaitForReceipt } from "../../../../core/hooks/contract/useWaitForReceipt.js";
import { useChainExplorers, useChainIconUrl, } from "../../../../core/hooks/others/useChainQuery.js";
import { useActiveWalletChain } from "../../../../core/hooks/wallets/useActiveWalletChain.js";
import { ChainIcon } from "../../components/ChainIcon.js";
import { ChainName } from "../../components/ChainName.js";
import { Spacer } from "../../components/Spacer.js";
import { Spinner } from "../../components/Spinner.js";
import { Container } from "../../components/basic.js";
import { Button } from "../../components/buttons.js";
import { Text } from "../../components/text.js";
export function WalletTransactionHistory(props) {
    const activeChain = useActiveWalletChain();
    const chainExplorers = useChainExplorers(activeChain);
    const transactionStore = getTransactionStore(props.address);
    const reverseChronologicalTransactions = useSyncExternalStore(transactionStore.subscribe, transactionStore.getValue);
    const transactions = [...reverseChronologicalTransactions].reverse();
    return (_jsx(Container, { scrollY: true, flex: "column", fullHeight: true, style: {
            minHeight: "250px",
            maxHeight: "370px",
            paddingBottom: spacing.lg,
        }, children: _jsx(Container, { flex: "column", gap: "xs", expand: true, children: transactions.length === 0 ? (_jsxs(Container, { flex: "column", gap: "md", center: "both", color: "secondaryText", style: {
                    flex: "1",
                    minHeight: "250px",
                }, children: [_jsx(CrossCircledIcon, { width: iconSize.xl, height: iconSize.xl }), _jsx(Text, { children: "No Transactions" })] })) : (_jsx(Container, { animate: "fadein", flex: "column", gap: "xs", style: { minHeight: "250px" }, children: transactions.map((tx) => {
                    return (_jsx(TransactionButton, { explorerUrl: chainExplorers.explorers[0]?.url, client: props.client, hash: tx.transactionHash, chainId: tx.chainId }, tx.transactionHash));
                }) })) }) }));
}
function TransactionButton(props) {
    const { data: receipt, isLoading, error, } = useWaitForReceipt({
        transactionHash: props.hash,
        chain: getCachedChain(props.chainId),
        client: props.client,
    });
    const chainIconQuery = useChainIconUrl(getCachedChain(props.chainId));
    const content = (_jsxs(TxButton, { variant: "secondary", fullWidth: true, style: {
            paddingBlock: spacing.sm,
        }, children: [_jsxs(Container, { flex: "row", center: "y", gap: "md", style: {
                    flex: 1,
                }, children: [_jsx(ChainIcon, { chainIconUrl: chainIconQuery.url, size: iconSize.lg, client: props.client }), _jsxs("div", { style: {
                            flex: 1,
                            display: "flex",
                            flexDirection: "column",
                            justifyContent: "center",
                        }, children: [_jsx(Container, { flex: "row", gap: "xs", center: "y", style: {
                                    justifyContent: "space-between",
                                }, children: _jsx(Text, { size: "sm", color: "primaryText", children: receipt?.to
                                        ? `Interacted with ${shortenHex(receipt.to, 4)}`
                                        : `Hash: ${shortenHex(props.hash, 4)}` }) }), _jsx(Spacer, { y: "xxs" }), _jsx(Container, { flex: "row", center: "y", gap: "xxs", style: {
                                    justifyContent: "space-between",
                                }, children: _jsx(ChainName, { chain: getCachedChain(props.chainId), size: "xs", client: props.client }) })] })] }), _jsxs(Container, { flex: "row", gap: "xxs", center: "y", children: [isLoading && _jsx(Spinner, { size: "sm", color: "primaryText" }), !isLoading && receipt && receipt.status === "success" && (_jsx(Text, { size: "md", color: "success", children: _jsx(CheckIcon, { width: iconSize.md, height: iconSize.md }) })), (error || (!isLoading && receipt && receipt.status !== "success")) && (_jsx(Text, { size: "md", color: "danger", children: _jsx(CrossCircledIcon, { width: iconSize.md, height: iconSize.md }) }))] })] }));
    if (props.explorerUrl) {
        return (_jsx("a", { href: `${props.explorerUrl}/tx/${props.hash}`, target: "_blank", rel: "noreferrer", children: content }));
    }
    return content;
}
const TxButton = /* @__PURE__ */ styled(Button)(() => {
    const theme = useCustomTheme();
    return {
        background: theme.colors.tertiaryBg,
        "&:hover": {
            background: theme.colors.secondaryButtonBg,
        },
        height: "62px",
    };
});
//# sourceMappingURL=WalletTransactionHistory.js.map