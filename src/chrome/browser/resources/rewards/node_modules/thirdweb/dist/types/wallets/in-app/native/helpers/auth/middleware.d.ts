import type { ThirdwebClient } from "../../../../../client/client.js";
import { AuthProvider, type AuthStoredTokenWithCookieReturnType } from "../../../core/authentication/types.js";
export declare function preAuth(args: {
    authenticationMethod: AuthProvider;
    email?: string;
    phone?: string;
}): Promise<void>;
export declare function postAuth({ storedToken, client, recoveryCode, }: {
    storedToken: AuthStoredTokenWithCookieReturnType["storedToken"];
    client: ThirdwebClient;
    recoveryCode?: string;
}): Promise<import("../../../core/authentication/types.js").StoredTokenType & {
    cookieString: string;
    shouldStoreCookieString: boolean;
    isNewUser: boolean;
}>;
export declare function postAuthUserManaged(storedToken: AuthStoredTokenWithCookieReturnType["storedToken"], client: ThirdwebClient, password: string): Promise<import("../../../core/authentication/types.js").StoredTokenType & {
    cookieString: string;
    shouldStoreCookieString: boolean;
    isNewUser: boolean;
}>;
//# sourceMappingURL=middleware.d.ts.map