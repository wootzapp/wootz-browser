import type { ThirdwebClient } from "../../../../../client/client.js";
import { AuthProvider, type AuthStoredTokenWithCookieReturnType, RecoveryShareManagement } from "../../../core/authentication/types.js";
export declare function postAuth({ storedToken, client, recoveryCode, }: {
    storedToken: AuthStoredTokenWithCookieReturnType["storedToken"];
    client: ThirdwebClient;
    recoveryCode?: string;
}): Promise<{
    jwtToken: string;
    authProvider: AuthProvider;
    authDetails: ({
        email?: string;
    } | {
        phoneNumber?: string;
    }) & {
        userWalletId: string;
        encryptionKey?: string;
        backupRecoveryCodes?: string[];
        recoveryShareManagement: RecoveryShareManagement;
        walletType?: "sharded" | "enclave";
    };
    developerClientId: string;
} & {
    cookieString: string;
    shouldStoreCookieString: boolean;
    isNewUser: boolean;
}>;
export declare function postAuthUserManaged(storedToken: AuthStoredTokenWithCookieReturnType["storedToken"], client: ThirdwebClient, password: string): Promise<{
    jwtToken: string;
    authProvider: AuthProvider;
    authDetails: ({
        email?: string;
    } | {
        phoneNumber?: string;
    }) & {
        userWalletId: string;
        encryptionKey?: string;
        backupRecoveryCodes?: string[];
        recoveryShareManagement: RecoveryShareManagement;
        walletType?: "sharded" | "enclave";
    };
    developerClientId: string;
} & {
    cookieString: string;
    shouldStoreCookieString: boolean;
    isNewUser: boolean;
}>;
//# sourceMappingURL=middleware.d.ts.map