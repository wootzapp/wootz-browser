"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getBuyHistory = getBuyHistory;
const fetch_js_1 = require("../utils/fetch.js");
const definitions_js_1 = require("./utils/definitions.js");
/**
 * Get Buy transaction history for a given wallet address.
 *
 * This includes both "Buy with Cryto" and "Buy with Fiat" transactions
 *
 * @param params Object of type [`BuyHistoryParams`](https://portal.thirdweb.com/references/typescript/v5/BuyHistoryParams)
 * @example
 * ```ts
 * import { createThirdwebClient } from "thirdweb";
 * import { getBuyHistory } from "thirdweb/pay";
 *
 * const client = createThirdwebClient({ clientId: "..." });
 *
 * const history = await getBuyHistory({
 *  client,
 *  walletAddress: "0x...",
 * })
 * ```
 * @buyCrypto
 */
async function getBuyHistory(params) {
    try {
        const queryParams = new URLSearchParams();
        queryParams.append("walletAddress", params.walletAddress);
        queryParams.append("start", params.start.toString());
        queryParams.append("count", params.count.toString());
        const queryString = queryParams.toString();
        const url = `${(0, definitions_js_1.getPayBuyHistoryEndpoint)()}?${queryString}`;
        const response = await (0, fetch_js_1.getClientFetch)(params.client)(url);
        // Assuming the response directly matches the SwapResponse interface
        if (!response.ok) {
            response.body?.cancel();
            throw new Error(`HTTP error! status: ${response.status}`);
        }
        const data = (await response.json()).result;
        return data;
    }
    catch (error) {
        throw new Error(`Fetch failed: ${error}`);
    }
}
//# sourceMappingURL=getBuyHistory.js.map