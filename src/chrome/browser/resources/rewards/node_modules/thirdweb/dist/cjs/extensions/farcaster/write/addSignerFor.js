"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.addSignerFor = addSignerFor;
const prepare_contract_call_js_1 = require("../../../transaction/prepare-contract-call.js");
const bigint_js_1 = require("../../../utils/bigint.js");
const nonces_js_1 = require("../__generated__/IKeyGateway/read/nonces.js");
const getKeyGateway_js_1 = require("../contracts/getKeyGateway.js");
const getFid_js_1 = require("../read/getFid.js");
/**
 * Adds farcaster signer for a given user. Helpful if you want to cover the gas fee for a user.
 * @param options - The options for adding the signer.
 * @returns A prepared transaction object to add the signer to the account.
 * @extension FARCASTER
 * @example
 * ```ts
 * import { addSignerFor } from "thirdweb/extensions/farcaster";
 * import { sendTransaction } from "thirdweb";
 *
 * const transaction = addSignerFor({
 *  client,
 * 	appAccount,
 * 	userAccount,
 *  signerPublicKey
 * });
 *
 * await sendTransaction({ transaction, account });
 * ```
 */
function addSignerFor(options) {
    const keyGateway = (0, getKeyGateway_js_1.getKeyGateway)({
        client: options.client,
        chain: options.chain,
    });
    return (0, prepare_contract_call_js_1.prepareContractCall)({
        contract: keyGateway,
        method: [
            "0xa005d3d2",
            [
                {
                    type: "address",
                    name: "fidOwner",
                },
                {
                    type: "uint32",
                    name: "keyType",
                },
                {
                    type: "bytes",
                    name: "key",
                },
                {
                    type: "uint8",
                    name: "metadataType",
                },
                {
                    type: "bytes",
                    name: "metadata",
                },
                {
                    type: "uint256",
                    name: "deadline",
                },
                {
                    type: "bytes",
                    name: "sig",
                },
            ],
            [],
        ],
        params: async () => {
            const deadline = "deadline" in options
                ? options.deadline
                : BigInt(Math.floor(Date.now() / 1000) + 3600); // default signatures last for 1 hour
            const appAccountAddress = "appAccount" in options
                ? options.appAccount.address
                : options.appAccountAddress;
            const userAddress = "userAccount" in options
                ? options.userAccount.address
                : options.userAddress;
            // Fetch the app's FID
            const appFid = await (0, getFid_js_1.getFid)({
                client: options.client,
                chain: options.chain,
                address: appAccountAddress,
                disableCache: options.disableCache,
            });
            if (appFid === 0n) {
                throw new Error(`No fid found for app account: ${appAccountAddress}`);
            }
            // Set the signedKeyRequestMetadata if provided, otherwise generate using the app account
            let signedKeyRequestMetadata;
            if ("signedKeyRequestMetadata" in options) {
                signedKeyRequestMetadata = options.signedKeyRequestMetadata;
            }
            else if ("appAccount" in options) {
                const { getSignedKeyRequestMetadata } = await Promise.resolve().then(() => require("../eip712Signatures/keyRequestSignature.js"));
                signedKeyRequestMetadata = await getSignedKeyRequestMetadata({
                    account: options.appAccount,
                    message: {
                        requestFid: (0, bigint_js_1.toBigInt)(appFid),
                        key: options.signerPublicKey,
                        deadline,
                    },
                });
            }
            else {
                throw new Error("Invalid options, expected signedKeyRequestMetadata or appAccount to be provided");
            }
            // Fetch the user's current key gateway nonce
            const nonce = await (0, nonces_js_1.nonces)({
                account: userAddress,
                contract: keyGateway,
            });
            // Set the addSignature if provided, otherwise generate one using the user account
            let addSignature;
            if ("addSignature" in options) {
                addSignature = options.addSignature;
            }
            else if ("userAccount" in options) {
                const { signAdd } = await Promise.resolve().then(() => require("../eip712Signatures/addSignature.js"));
                addSignature = await signAdd({
                    account: options.userAccount,
                    message: {
                        owner: userAddress,
                        keyType: 1,
                        key: options.signerPublicKey,
                        metadataType: 1,
                        metadata: signedKeyRequestMetadata,
                        nonce,
                        deadline,
                    },
                });
            }
            else {
                throw new Error("Invalid options, expected addSignature or userAccount to be provided");
            }
            return [
                userAddress,
                1,
                options.signerPublicKey,
                1,
                signedKeyRequestMetadata,
                deadline,
                addSignature,
            ];
        },
    });
}
//# sourceMappingURL=addSignerFor.js.map