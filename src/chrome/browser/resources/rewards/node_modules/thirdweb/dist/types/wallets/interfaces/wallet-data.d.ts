import type { Chain } from "../../chains/types.js";
import type { AsyncStorage } from "../../utils/storage/AsyncStorage.js";
import type { WalletCreationOptions, WalletId } from "../wallet-types.js";
import type { Account, Wallet } from "./wallet.js";
export type WalletData<TWalletId extends WalletId> = {
    chain: Chain | undefined;
    storage?: AsyncStorage;
    options: WalletCreationOptions<TWalletId>;
    account?: Account | undefined;
    onChainChanged: (newChainId: string) => void;
    onDisconnect: () => void;
    methods?: {
        switchChain?: (wallet: Wallet<TWalletId>, chain: Chain) => Promise<void>;
        disconnect?: (wallet: Wallet<TWalletId>) => Promise<void>;
    };
};
/**
 * @internal
 */
export declare function getWalletData<TID extends WalletId>(wallet: Wallet<TID>): WalletData<TID> | undefined;
/**
 * @internal
 */
export declare function setWalletData<TID extends WalletId>(wallet: Wallet<TID>, data: WalletData<TID>): void;
/**
 * @internal
 */
export declare function deleteWalletData<TID extends WalletId>(wallet: Wallet<TID>): void;
//# sourceMappingURL=wallet-data.d.ts.map