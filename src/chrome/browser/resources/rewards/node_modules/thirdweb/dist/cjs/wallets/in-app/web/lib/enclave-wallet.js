"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.EnclaveWallet = void 0;
const viem_1 = require("viem");
const utils_js_1 = require("../../../../chains/utils.js");
const eth_sendRawTransaction_js_1 = require("../../../../rpc/actions/eth_sendRawTransaction.js");
const rpc_js_1 = require("../../../../rpc/rpc.js");
const address_js_1 = require("../../../../utils/address.js");
const hex_js_1 = require("../../../../utils/encoding/hex.js");
const parseTypedData_js_1 = require("../../../../utils/signatures/helpers/parseTypedData.js");
const webStorage_js_1 = require("../../../../utils/storage/webStorage.js");
const client_scoped_storage_js_1 = require("../../core/authentication/client-scoped-storage.js");
const types_js_1 = require("../../core/authentication/types.js");
const get_enclave_user_status_js_1 = require("./actions/get-enclave-user-status.js");
const sign_message_enclave_js_1 = require("./actions/sign-message.enclave.js");
const sign_transaction_enclave_js_1 = require("./actions/sign-transaction.enclave.js");
const sign_typed_data_enclave_js_1 = require("./actions/sign-typed-data.enclave.js");
class EnclaveWallet {
    constructor({ client, ecosystem, address, }) {
        Object.defineProperty(this, "client", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "ecosystem", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "address", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "localStorage", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.client = client;
        this.ecosystem = ecosystem;
        this.address = address;
        this.localStorage = new client_scoped_storage_js_1.ClientScopedStorage({
            storage: webStorage_js_1.webLocalStorage,
            clientId: client.clientId,
            ecosystemId: ecosystem?.id,
        });
    }
    /**
     * Store the auth token for use
     * @returns `{walletAddress: string }` The user's wallet details
     * @internal
     */
    async postWalletSetUp({ walletAddress, authToken, }) {
        await this.localStorage.saveAuthCookie(authToken);
        return { walletAddress };
    }
    /**
     * Gets the current user's details
     * @internal
     */
    async getUserWalletStatus() {
        const token = await this.localStorage.getAuthCookie();
        if (!token) {
            return { status: types_js_1.UserWalletStatus.LOGGED_OUT };
        }
        const userStatus = await (0, get_enclave_user_status_js_1.getUserStatus)({
            authToken: token,
            client: this.client,
            ecosystem: this.ecosystem,
        });
        if (!userStatus) {
            return { status: types_js_1.UserWalletStatus.LOGGED_OUT };
        }
        const wallet = userStatus.wallets[0];
        const authDetails = {
            email: userStatus.linkedAccounts.find((account) => account.details.email !== undefined)?.details.email,
            phoneNumber: userStatus.linkedAccounts.find((account) => account.details.phone !== undefined)?.details.phone,
            userWalletId: userStatus.id || "",
            recoveryShareManagement: types_js_1.RecoveryShareManagement.ENCLAVE,
        };
        if (!wallet) {
            return {
                status: types_js_1.UserWalletStatus.LOGGED_IN_WALLET_UNINITIALIZED,
                authDetails,
            };
        }
        return {
            status: types_js_1.UserWalletStatus.LOGGED_IN_WALLET_INITIALIZED,
            walletAddress: wallet.address,
            authDetails,
            account: await this.getAccount(),
        };
    }
    /**
     * Returns an account to perform wallet operations
     * @internal
     */
    async getAccount() {
        const client = this.client;
        const ecosystem = this.ecosystem;
        const _signTransaction = async (tx) => {
            const rpcRequest = (0, rpc_js_1.getRpcClient)({
                client,
                chain: (0, utils_js_1.getCachedChain)(tx.chainId),
            });
            const transaction = {
                to: tx.to ?? undefined,
                data: tx.data ? (0, hex_js_1.toHex)(tx.data) : undefined,
                value: tx.value ? (0, hex_js_1.toHex)(tx.value) : undefined,
                gas: tx.gas ? (0, hex_js_1.toHex)(tx.gas + tx.gas / BigInt(10)) : undefined, // Add a 10% buffer to gas
                nonce: tx.nonce
                    ? (0, hex_js_1.toHex)(tx.nonce)
                    : (0, hex_js_1.toHex)(await Promise.resolve().then(() => require("../../../../rpc/actions/eth_getTransactionCount.js")).then(({ eth_getTransactionCount }) => eth_getTransactionCount(rpcRequest, {
                        address: this.address,
                        blockTag: "pending",
                    }))),
                chainId: (0, hex_js_1.toHex)(tx.chainId),
            };
            if (tx.maxFeePerGas) {
                transaction.maxFeePerGas = (0, hex_js_1.toHex)(tx.maxFeePerGas);
                transaction.maxPriorityFeePerGas = tx.maxPriorityFeePerGas
                    ? (0, hex_js_1.toHex)(tx.maxPriorityFeePerGas)
                    : undefined;
                transaction.type = 2;
            }
            else {
                transaction.gasPrice = tx.gasPrice ? (0, hex_js_1.toHex)(tx.gasPrice) : undefined;
                transaction.type = 0;
            }
            return (0, sign_transaction_enclave_js_1.signTransaction)({
                client,
                ecosystem,
                payload: transaction,
            });
        };
        return {
            address: (0, address_js_1.getAddress)(this.address),
            async signTransaction(tx) {
                if (!tx.chainId) {
                    throw new Error("chainId required in tx to sign");
                }
                return _signTransaction({
                    chainId: tx.chainId,
                    ...tx,
                });
            },
            async sendTransaction(tx) {
                const rpcRequest = (0, rpc_js_1.getRpcClient)({
                    client,
                    chain: (0, utils_js_1.getCachedChain)(tx.chainId),
                });
                const signedTx = await _signTransaction(tx);
                const transactionHash = await (0, eth_sendRawTransaction_js_1.eth_sendRawTransaction)(rpcRequest, signedTx);
                return {
                    transactionHash,
                };
            },
            async signMessage({ message }) {
                const messagePayload = (() => {
                    if (typeof message === "string") {
                        return { message, isRaw: false };
                    }
                    return {
                        message: typeof message.raw === "string"
                            ? message.raw
                            : (0, viem_1.bytesToHex)(message.raw),
                        isRaw: true,
                    };
                })();
                const { signature } = await (0, sign_message_enclave_js_1.signMessage)({
                    client,
                    ecosystem,
                    payload: messagePayload,
                });
                return signature;
            },
            async signTypedData(_typedData) {
                const parsedTypedData = (0, parseTypedData_js_1.parseTypedData)(_typedData);
                const { signature } = await (0, sign_typed_data_enclave_js_1.signTypedData)({
                    client,
                    ecosystem,
                    payload: parsedTypedData,
                });
                return signature;
            },
        };
    }
}
exports.EnclaveWallet = EnclaveWallet;
//# sourceMappingURL=enclave-wallet.js.map