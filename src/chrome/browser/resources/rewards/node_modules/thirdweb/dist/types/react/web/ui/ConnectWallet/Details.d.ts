import type { Chain } from "../../../../chains/types.js";
import type { ThirdwebClient } from "../../../../client/client.js";
import type { Account, Wallet } from "../../../../wallets/interfaces/wallet.js";
import type { SmartWalletOptions } from "../../../../wallets/smart/types.js";
import { type AppMetadata } from "../../../../wallets/types.js";
import type { WalletId } from "../../../../wallets/wallet-types.js";
import { type Theme } from "../../../core/design-system/index.js";
import type { ConnectButtonProps, ConnectButton_connectModalOptions, ConnectButton_detailsButtonOptions, ConnectButton_detailsModalOptions, PayUIOptions } from "../../../core/hooks/connection/ConnectButtonProps.js";
import type { SupportedNFTs, SupportedTokens } from "../../../core/utils/defaultTokens.js";
import type { LocaleId } from "../types.js";
import { type NetworkSelectorProps } from "./NetworkSelector.js";
import type { ConnectLocale } from "./locale/types.js";
/**
 * @internal
 */
export declare const ConnectedWalletDetails: React.FC<{
    onDisconnect: (info: {
        wallet: Wallet;
        account: Account;
    }) => void;
    detailsButton?: ConnectButton_detailsButtonOptions;
    detailsModal?: ConnectButton_detailsModalOptions;
    theme: "light" | "dark" | Theme;
    supportedTokens?: SupportedTokens;
    supportedNFTs?: SupportedNFTs;
    chains: Chain[];
    chain?: Chain;
    switchButton: ConnectButtonProps["switchButton"];
    connectLocale: ConnectLocale;
    client: ThirdwebClient;
    connectOptions: DetailsModalConnectOptions | undefined;
}>;
type DetailsModalConnectOptions = {
    connectModal?: ConnectButton_connectModalOptions;
    walletConnect?: {
        projectId?: string;
    };
    accountAbstraction?: SmartWalletOptions;
    wallets?: Wallet[];
    appMetadata?: AppMetadata;
    chain?: Chain;
    chains?: Chain[];
    recommendedWallets?: Wallet[];
    hiddenWallets?: WalletId[];
    showAllWallets?: boolean;
};
export type UseWalletDetailsModalOptions = {
    /**
     * A client is the entry point to the thirdweb SDK.
     * It is required for all other actions.
     * You can create a client using the `createThirdwebClient` function. Refer to the [Creating a Client](https://portal.thirdweb.com/typescript/v5/client) documentation for more information.
     *
     * You must provide a `clientId` or `secretKey` in order to initialize a client. Pass `clientId` if you want for client-side usage and `secretKey` for server-side usage.
     *
     * ```tsx
     * import { createThirdwebClient } from "thirdweb";
     *
     * const client = createThirdwebClient({
     *  clientId: "<your_client_id>",
     * })
     * ```
     */
    client: ThirdwebClient;
    /**
     * Set the theme for the Wallet Details Modal. By default it is set to `"dark"`
     *
     * theme can be set to either `"dark"`, `"light"` or a custom theme object.
     * You can also import [`lightTheme`](https://portal.thirdweb.com/references/typescript/v5/lightTheme)
     * or [`darkTheme`](https://portal.thirdweb.com/references/typescript/v5/darkTheme)
     * functions from `thirdweb/react` to use the default themes as base and overrides parts of it.
     * @example
     * ```ts
     * import { lightTheme } from "thirdweb/react";
     *
     * const customTheme = lightTheme({
     *  colors: {
     *    modalBg: 'red'
     *  }
     * })
     *
     * ```
     */
    theme?: "light" | "dark" | Theme;
    /**
     * Customize the tokens shown in the "Send Funds" screen in Details Modal for various networks.
     *
     * By default, The "Send Funds" screen shows a few popular tokens for default chains and the native token. For other chains it only shows the native token.
     * @example
     *
     * supportedTokens prop allows you to customize this list as shown below which shows  "Dai Stablecoin" when users wallet is connected to the "Base" mainnet.
     *
     * ```tsx
     * import { useWalletDetailsModal } from 'thirdweb/react';
     *
     * function Example() {
     *   const detailsModal = useWalletDetailsModal();
     *
     *   function handleClick() {
     *      detailsModal.open({
     *        client,
     *        supportedTokens:{
     * 				  84532: [
     * 					  {
     * 						  address: '0x50c5725949A6F0c72E6C4a641F24049A917DB0Cb', // token contract address
     * 						  name: 'Dai Stablecoin',
     * 						  symbol: 'DAI',
     * 						  icon: 'https://assets.coingecko.com/coins/images/9956/small/Badge_Dai.png?1687143508',
     * 					  },
     * 				  ],
     * 			  }
     *      });
     *   }
     *
     *   return (
     * 		<button onClick={handleClick}> show wallet details </button>
     * 	);
     * }
     * ```
     */
    supportedTokens?: SupportedTokens;
    /**
     * Customize the NFTs shown in the "View Funds" screen in Details Modal for various networks.
     *
     * By default, The "View Funds" screen shows a few popular tokens for default chains and the native token. For other chains it only shows the native token.
     * @example
     *
     * supportedTokens prop allows you to customize this list as shown below which shows "Pudgy Penguins" when a users wallet is connected to Ethereum mainnet.
     *
     * ```tsx
     * import { ConnectButton } from 'thirdweb/react';
     *
     * function Example() {
     *   return (
     * 		<ConnectButton
     * 			supportedNFTs={{
     *        // when connected to Ethereum mainnet - show Pudgy Penguins
     * 				1: [
     * 					'0xBd3531dA5CF5857e7CfAA92426877b022e612cf8',
     * 				],
     * 			}}
     * 		/>
     * 	);
     * }
     * ```
     */
    supportedNFTs?: SupportedNFTs;
    /**
     * By default - Details Modal UI uses the `en-US` locale for english language users.
     *
     * You can customize the language used in the Details Modal UI by setting the `locale` prop.
     *
     * Refer to the [`LocaleId`](https://portal.thirdweb.com/references/typescript/v5/LocaleId) type for supported locales.
     */
    locale?: LocaleId;
    /**
     * Array of chains that your app supports. They will be displayed in the network selector in the screen.
     *
     * This is only relevant if your app is a multi-chain app and works across multiple blockchains.
     * If your app only works on a single blockchain, you should only specify the `chain` prop.
     *
     * You can create a `Chain` object using the [`defineChain`](https://portal.thirdweb.com/references/typescript/v5/defineChain) function.
     * At minimum, you need to pass the `id` of the blockchain to `defineChain` function to create a `Chain` object.
     *
     * ```tsx
     * import { defineChain } from "thirdweb/react";
     *
     * const polygon = defineChain({
     *   id: 137,
     * });
     * ```
     */
    chains?: Chain[];
    /**
     * Show a "Request Testnet funds" link in Wallet Details Modal when user is connected to a testnet.
     *
     * By default it is `false`, If you want to show the "Request Testnet funds" link when user is connected to a testnet, set this prop to `true`
     */
    showTestnetFaucet?: boolean;
    /**
     * customize the Network selector shown in the Wallet Details Modal
     */
    networkSelector?: NetworkSelectorProps;
    /**
     * Hide the "Disconnect Wallet" button in the Wallet Details Modal.
     *
     * By default it is `false`
     */
    hideDisconnect?: boolean;
    /**
     * Hide the "Switch Wallet" button in the Wallet Details Modal.
     *
     * By default it is `false`
     */
    hideSwitchWallet?: boolean;
    /**
     * Callback to be called when a wallet is disconnected by clicking the "Disconnect Wallet" button in the Wallet Details Modal.
     *
     * ```tsx
     * import { useWalletDetailsModal } from 'thirdweb/react';
     *
     * function Example() {
     *   const detailsModal = useWalletDetailsModal();
     *
     *   function handleClick() {
     *      detailsModal.open({
     *        client,
     *        onDisconnect: ({ wallet, account }) => {
     *           console.log('disconnected', wallet, account);
     *        }
     *      });
     *   }
     *
     *   return (
     * 		<button onClick={handleClick}> wallet details </button>
     * 	);
     * }
     * ```
     */
    onDisconnect?: (info: {
        wallet: Wallet;
        account: Account;
    }) => void;
    /**
     * Render custom UI at the bottom of the Details Modal
     */
    footer?: (props: {
        close: () => void;
    }) => JSX.Element;
    /**
     * Configure options for thirdweb Pay.
     *
     * thirdweb Pay allows users to buy tokens using crypto or fiat currency.
     */
    payOptions?: Extract<PayUIOptions, {
        mode?: "fund_wallet";
    }>;
    /**
     * Display the balance of a token instead of the native token
     * @example
     * ```tsx
     * const displayBalanceToken = {
     *   // show USDC balance when connected to Ethereum mainnet or Polygon
     *   [ethereum.id]: "0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599",
     *   [polygon.id]: "0x3c499c542cEF5E3811e1192ce70d8cC03d5c3359",
     * }
     * ```
     */
    displayBalanceToken?: Record<number, string>;
    /**
     * Options to configure the Connect UI shown when user clicks the "Connect Wallet" button in the Wallet Switcher screen.
     */
    connectOptions?: DetailsModalConnectOptions;
    /**
     * Render custom UI for the connected wallet name in the `ConnectButton` Details Modal, overriding ENS name or wallet address.
     */
    connectedAccountName?: React.ReactNode;
    /**
     * Use custom avatar URL for the connected wallet image in the `ConnectButton` Details Modal, overriding ENS avatar or Blobbie icon.
     */
    connectedAccountAvatarUrl?: string;
    /**
     * Hide the "Send Funds" button in the Details Modal.
     *
     * By default the "Send Funds" button is shown.
     */
    hideSendFunds?: boolean;
    /**
     * Hide the "Receive Funds" button in the Details Modal.
     *
     * By default the "Receive Funds" button is shown.
     */
    hideReceiveFunds?: boolean;
    /**
     * Hide the "Buy Funds" button in the Details Modal.
     *
     * By default the "Buy Funds" button is shown.
     */
    hideBuyFunds?: boolean;
};
/**
 * Hook to open the Wallet Details Modal that shows various information about the connected wallet and allows users to perform various actions like sending funds, receiving funds, switching networks, Buying tokens, etc.
 *
 * @example
 * ```tsx
 * import { createThirdwebClient } from "thirdweb";
 * import { useWalletDetailsModal } from "thirdweb/react";
 *
 * const client = createThirdwebClient({
 *  clientId: "<your_client_id>",
 * });
 *
 * function Example() {
 *   const detailsModal = useWalletDetailsModal();
 *
 *   function handleClick() {
 *      detailsModal.open({ client, theme: 'light' });
 *   }
 *
 *   return <button onClick={handleClick}> Show Wallet Details </button>
 * }
 * ```
 * @wallet
 */
export declare function useWalletDetailsModal(): {
    open: (props: UseWalletDetailsModalOptions) => void;
};
export {};
//# sourceMappingURL=Details.d.ts.map