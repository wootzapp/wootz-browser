"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.claimTo = claimTo;
exports.isClaimToSupported = isClaimToSupported;
const get_claim_params_js_1 = require("../../../../utils/extensions/drops/get-claim-params.js");
const getContractMetadata_js_1 = require("../../../common/read/getContractMetadata.js");
const GeneratedClaim = require("../../__generated__/IDropERC20/write/claim.js");
const decimals_js_1 = require("../../read/decimals.js");
const getActiveClaimCondition_js_1 = require("../read/getActiveClaimCondition.js");
/**
 * Claim ERC20 NFTs to a specified address
 * @param options - The options for the transaction
 * @extension ERC20
 * @example
 * ```ts
 * import { claimTo } from "thirdweb/extensions/erc20";
 * import { sendTransaction } from "thirdweb";
 *
 * const transaction = claimTo({
 *   contract,
 *   to: "0x...",
 *   quantity: 100n,
 * });
 *
 * await sendTransaction({ transaction, account });
 * ```
 * @throws If no claim condition is set
 * @returns A promise that resolves with the submitted transaction hash.
 */
function claimTo(options) {
    return GeneratedClaim.claim({
        contract: options.contract,
        asyncParams: async () => {
            const quantity = await (async () => {
                if ("quantityInWei" in options) {
                    return options.quantityInWei;
                }
                const { toUnits } = await Promise.resolve().then(() => require("../../../../utils/units.js"));
                return toUnits(options.quantity, await (0, decimals_js_1.decimals)({ contract: options.contract }));
            })();
            return (0, get_claim_params_js_1.getClaimParams)({
                type: "erc20",
                contract: options.contract,
                to: options.to,
                quantity,
                from: options.from,
                tokenDecimals: await (0, decimals_js_1.decimals)({ contract: options.contract }),
            });
        },
    });
}
/**
 * Checks if the `claimTo` method is supported by the given contract.
 * @param availableSelectors An array of 4byte function selectors of the contract. You can get this in various ways, such as using "whatsabi" or if you have the ABI of the contract available you can use it to generate the selectors.
 * @returns A boolean indicating if the `claimTo` method is supported.
 * @extension ERC20
 * @example
 * ```ts
 * import { isClaimToSupported } from "thirdweb/extensions/erc20";
 *
 * const supported = isClaimToSupported(["0x..."]);
 * ```
 */
function isClaimToSupported(availableSelectors) {
    return [
        // has to support the claim method
        GeneratedClaim.isClaimSupported(availableSelectors),
        // has to support the getActiveClaimCondition method
        (0, getActiveClaimCondition_js_1.isGetActiveClaimConditionSupported)(availableSelectors),
        // has to support the decimals method
        (0, decimals_js_1.isDecimalsSupported)(availableSelectors),
        // requires contractMetadata for claimer proofs
        (0, getContractMetadata_js_1.isGetContractMetadataSupported)(availableSelectors),
    ].every(Boolean);
}
//# sourceMappingURL=claimTo.js.map