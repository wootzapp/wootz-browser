"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.computeCreate2FactoryAddress = computeCreate2FactoryAddress;
exports.getDeployedCreate2Factory = getDeployedCreate2Factory;
exports.deployCreate2Factory = deployCreate2Factory;
const viem_1 = require("viem");
const get_gas_price_js_1 = require("../../../gas/get-gas-price.js");
const eth_getBalance_js_1 = require("../../../rpc/actions/eth_getBalance.js");
const eth_sendRawTransaction_js_1 = require("../../../rpc/actions/eth_sendRawTransaction.js");
const rpc_js_1 = require("../../../rpc/rpc.js");
const send_transaction_js_1 = require("../../../transaction/actions/send-transaction.js");
const wait_for_tx_receipt_js_1 = require("../../../transaction/actions/wait-for-tx-receipt.js");
const prepare_transaction_js_1 = require("../../../transaction/prepare-transaction.js");
const is_eip155_enforced_js_1 = require("../../../utils/any-evm/is-eip155-enforced.js");
const keyless_transaction_js_1 = require("../../../utils/any-evm/keyless-transaction.js");
const is_contract_deployed_js_1 = require("../../../utils/bytecode/is-contract-deployed.js");
const contract_js_1 = require("../../contract.js");
const COMMON_FACTORY_ADDRESS = "0x4e59b44847b379578588920cA78FbF26c0B4956C"; // for pre-eip-155 supporting chains
/**
 * @internal
 */
const CREATE2_FACTORY_BYTECODE = "0x604580600e600039806000f350fe7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe03601600081602082378035828234f58015156039578182fd5b8082525050506014600cf3";
/**
 * @internal
 */
const SIGNATURE = {
    v: 27n,
    r: "0x2222222222222222222222222222222222222222222222222222222222222222",
    s: "0x2222222222222222222222222222222222222222222222222222222222222222",
};
/**
 * Computes the address of the Create2 factory contract and checks if it is deployed.
 * @param options - The options for retrieving the Create2 factory address.
 * @returns whether the Create2 factory is deployed.
 * @internal
 */
async function computeCreate2FactoryAddress(options) {
    const chainId = options.chain.id;
    // special handling for chains with hardcoded gasPrice and gasLimit
    if (CUSTOM_GAS_FOR_CHAIN[chainId]) {
        const enforceEip155 = await (0, is_eip155_enforced_js_1.isEIP155Enforced)(options);
        const eipChain = enforceEip155 ? chainId : 0;
        const gasPrice = CUSTOM_GAS_FOR_CHAIN[chainId.toString()]?.gasPrice;
        const gasLimit = CUSTOM_GAS_FOR_CHAIN[chainId.toString()]?.gasLimit;
        const deploymentInfo = await _getCreate2FactoryDeploymentInfo(eipChain, {
            gasPrice,
            gasLimit,
        });
        return deploymentInfo.predictedAddress;
    }
    // default flow
    const allBinsInfo = await Promise.all([
        // to generate EIP-155 transaction
        ...CUSTOM_GAS_BINS.map((b) => {
            return _getCreate2FactoryDeploymentInfo(chainId, { gasPrice: b });
        }),
        // to generate pre EIP-155 transaction, hence chainId 0
        ...CUSTOM_GAS_BINS.map((b) => {
            return _getCreate2FactoryDeploymentInfo(0, { gasPrice: b });
        }),
    ]);
    const allFactories = await Promise.all(allBinsInfo.map((b) => {
        const tempFactory = (0, contract_js_1.getContract)({
            ...options,
            address: b.predictedAddress,
        });
        return (0, is_contract_deployed_js_1.isContractDeployed)(tempFactory);
    }));
    const indexOfCommonFactory = allBinsInfo.findIndex((b) => b.predictedAddress === COMMON_FACTORY_ADDRESS);
    if (indexOfCommonFactory && allFactories[indexOfCommonFactory]) {
        return COMMON_FACTORY_ADDRESS;
    }
    const indexOfExistingDeployment = allFactories.findIndex((b) => b);
    if (indexOfExistingDeployment &&
        allBinsInfo &&
        allBinsInfo[indexOfExistingDeployment]?.predictedAddress) {
        // TODO: cleanup
        return allBinsInfo[indexOfExistingDeployment]?.predictedAddress;
    }
    const [enforceEip155, gasPriceFetched] = await Promise.all([
        (0, is_eip155_enforced_js_1.isEIP155Enforced)(options),
        (0, get_gas_price_js_1.getGasPrice)(options),
    ]);
    const eipChain = enforceEip155 ? chainId : 0;
    const bin = _getNearestGasPriceBin(gasPriceFetched);
    const deploymentInfo = await _getCreate2FactoryDeploymentInfo(eipChain, {
        gasPrice: bin,
    });
    return deploymentInfo.predictedAddress;
}
/**
 * @internal
 */
async function getDeployedCreate2Factory(options) {
    const address = await computeCreate2FactoryAddress(options);
    const factory = (0, contract_js_1.getContract)({
        ...options,
        address,
    });
    const isDeployed = await (0, is_contract_deployed_js_1.isContractDeployed)(factory);
    if (!isDeployed) {
        return null;
    }
    return factory;
}
/**
 * Deploys the Create2 factory contract using a keyless transaction.
 * @internal
 */
async function deployCreate2Factory(options) {
    const { client, chain, account } = options;
    const enforceEip155 = await (0, is_eip155_enforced_js_1.isEIP155Enforced)(options);
    const chainId = options.chain.id;
    const eipChain = enforceEip155 ? chainId : 0;
    const rpcRequest = (0, rpc_js_1.getRpcClient)({
        client: client,
        chain,
    });
    const gasPriceFetched = await (0, get_gas_price_js_1.getGasPrice)(options);
    const bin = _getNearestGasPriceBin(gasPriceFetched);
    const deploymentInfo = await _getCreate2FactoryDeploymentInfo(eipChain, {
        gasPrice: bin,
    });
    const balance = await (0, eth_getBalance_js_1.eth_getBalance)(rpcRequest, {
        address: deploymentInfo.signerAddress,
    });
    if (balance < deploymentInfo.valueToSend) {
        const transaction = (0, prepare_transaction_js_1.prepareTransaction)({
            chain,
            client,
            to: deploymentInfo.signerAddress,
            value: deploymentInfo.valueToSend,
        });
        const res = await (0, send_transaction_js_1.sendTransaction)({ transaction, account });
        await (0, wait_for_tx_receipt_js_1.waitForReceipt)(res);
    }
    const transactionHash = await (0, eth_sendRawTransaction_js_1.eth_sendRawTransaction)(rpcRequest, deploymentInfo.transaction);
    return {
        transactionHash,
    };
}
/**
 * Retrieves the deployment information for the Create2 factory contract.
 * @param chainId - The chain ID.
 * @param gasOptions - The gas options for the deployment transaction.
 * @returns The deployment information, including the deployment transaction and the create2 factory address.
 * @internal
 */
async function _getCreate2FactoryDeploymentInfo(chainId, gasOptions) {
    // 100000 is default deployment gas limit and 100 gwei is default gas price for create2 factory deployment
    // (See: https://github.com/Arachnid/deterministic-deployment-proxy?tab=readme-ov-file#deployment-gas-limit)
    const gasPrice = gasOptions.gasPrice ? gasOptions.gasPrice : 100n * 10n ** 9n;
    const gas = gasOptions.gasLimit ? gasOptions.gasLimit : 100000n;
    const deploymentTransaction = await (0, keyless_transaction_js_1.getKeylessTransaction)({
        transaction: {
            gasPrice,
            gas,
            nonce: 0,
            data: CREATE2_FACTORY_BYTECODE,
            chainId: chainId !== 0 ? Number(chainId) : undefined,
        },
        signature: SIGNATURE,
    });
    const create2FactoryAddress = (0, viem_1.getContractAddress)({
        from: deploymentTransaction.signerAddress,
        nonce: 0n,
    });
    return {
        ...deploymentTransaction,
        valueToSend: gasPrice * gas,
        predictedAddress: create2FactoryAddress,
    };
}
function _getNearestGasPriceBin(gasPrice) {
    return CUSTOM_GAS_BINS.find((e) => e >= gasPrice) || gasPrice;
}
const CUSTOM_GAS_FOR_CHAIN = {
    "5001": {
        name: "Mantle Testnet",
        gasPrice: 1n,
    },
    "71402": {
        name: "Godwoken Mainnet",
        gasPrice: 40000n * 10n ** 9n,
    },
    "1351057110": {
        name: "Chaos (SKALE Testnet)",
        gasPrice: 100000n,
    },
    "361": {
        name: "Theta Mainnet",
        gasPrice: 4000n * 10n ** 9n,
    },
    "365": {
        name: "Theta Testnet",
        gasPrice: 4000n * 10n ** 9n,
    },
    "7700": {
        name: "Canto",
        gasPrice: 1000n * 10n ** 9n,
    },
    "7701": {
        name: "Canto Testnet",
        gasPrice: 1000n * 10n ** 9n,
    },
    "338": {
        name: "Cronos Testnet",
        gasPrice: 2000n * 10n ** 9n,
    },
    "199": {
        name: "BitTorrent Chain",
        gasPrice: 300000n * 10n ** 9n,
    },
    "88882": {
        name: "Spicy Chain",
        gasPrice: 2500n * 10n ** 9n,
        gasLimit: 200000n,
    },
    "88888": {
        name: "Chiliz Chain",
        gasPrice: 2500n * 10n ** 9n,
        gasLimit: 200000n,
    },
};
const CUSTOM_GAS_BINS = [
    1n,
    1n * 10n ** 9n,
    100n * 10n ** 9n,
    500n * 10n ** 9n,
    1000n * 10n ** 9n,
    2500n * 10n ** 9n,
    5000n * 10n ** 9n,
    7500n * 10n ** 9n,
    10000n * 10n ** 9n,
    25000n * 10n ** 9n,
    50000n * 10n ** 9n,
    75000n * 10n ** 9n,
    100000n * 10n ** 9n,
    250000n * 10n ** 9n,
    500000n * 10n ** 9n,
    750000n * 10n ** 9n,
    1000000n * 10n ** 9n,
];
//# sourceMappingURL=create-2-factory.js.map