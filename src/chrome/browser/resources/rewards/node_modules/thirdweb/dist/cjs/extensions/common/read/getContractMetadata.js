"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isGetContractMetadataSupported = void 0;
exports.getContractMetadata = getContractMetadata;
const fetchContractMetadata_js_1 = require("../../../utils/contract/fetchContractMetadata.js");
const contractURI_js_1 = require("../__generated__/IContractMetadata/read/contractURI.js");
const name_js_1 = require("./name.js");
const symbol_js_1 = require("./symbol.js");
var contractURI_js_2 = require("../__generated__/IContractMetadata/read/contractURI.js");
Object.defineProperty(exports, "isGetContractMetadataSupported", { enumerable: true, get: function () { return contractURI_js_2.isContractURISupported; } });
/**
 * Retrieves the contract metadata including name and symbol.
 * @param options The transaction options.
 * @returns A promise that resolves to an object containing the resolved metadata, name, and symbol.
 * @extension COMMON
 * @example
 * ```ts
 * import { getContractMetadata } from "thirdweb/extensions/common";
 * const metadata = await getContractMetadata({ contract });
 * ```
 */
async function getContractMetadata(options) {
    const [resolvedMetadata, resolvedName, resolvedSymbol] = await Promise.all([
        (0, contractURI_js_1.contractURI)(options)
            .then((uri) => {
            if (uri) {
                return (0, fetchContractMetadata_js_1.fetchContractMetadata)({
                    client: options.contract.client,
                    uri,
                });
            }
            return null;
        })
            .catch(() => null),
        (0, name_js_1.name)(options).catch(() => null),
        (0, symbol_js_1.symbol)(options).catch(() => null),
    ]);
    // TODO: basic parsing?
    return {
        ...resolvedMetadata,
        name: resolvedMetadata?.name ?? resolvedName,
        symbol: resolvedMetadata?.symbol ?? resolvedSymbol,
    };
}
//# sourceMappingURL=getContractMetadata.js.map