import type { ThirdwebClient } from "../../../../client/client.js";
import type { OneOf, Prettify } from "../../../../utils/type-utils.js";
import type { Profile } from "../authentication/types.js";
export type GetUserResult = {
    userId: string;
    walletAddress: string;
    email?: string;
    phone?: string;
    createdAt: string;
    profiles: Profile[];
};
/**
 * Gets user based on the provided query parameters.
 * @note This function is only available on the server (a secret key is required in the client).
 *
 * @param options - The options for the find users function.
 * @param options.client - The Thirdweb client with a secret key included.
 * @param [options.walletAddress] - The wallet address to query by.
 * @param [options.email] - The email to query by.
 * @param [options.phone] - The phone number to query by.
 * @param [options.id] - The user ID to query by.
 *
 * @returns An array of user objects.
 *
 * @example
 * ```ts
 * import { getUser } from "thirdweb/wallets";
 *
 * const user = await getUser({
 *   client,
 *   walletAddress: "0x123...",
 * });
 * ```
 *
 * @wallet
 */
export declare function getUser({ client, walletAddress, email, phone, id, }: Prettify<{
    client: ThirdwebClient;
} & OneOf<{
    walletAddress?: string;
    email?: string;
    phone?: string;
    id?: string;
}>>): Promise<GetUserResult | null>;
//# sourceMappingURL=getUser.d.ts.map