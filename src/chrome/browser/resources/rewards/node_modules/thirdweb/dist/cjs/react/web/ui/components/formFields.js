"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.FormField = exports.FormFieldWithIconButton = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const Spacer_js_1 = require("./Spacer.js");
const buttons_js_1 = require("./buttons.js");
const formElements_js_1 = require("./formElements.js");
const text_js_1 = require("./text.js");
/**
 * @internal
 */
const FormFieldWithIconButton = (props) => {
    const errorEl = ((0, jsx_runtime_1.jsxs)("div", { style: {
            opacity: props.error ? 1 : 0,
            transition: "opacity 0.2s ease",
        }, children: [(0, jsx_runtime_1.jsx)(Spacer_js_1.Spacer, { y: "sm" }), (0, jsx_runtime_1.jsxs)(text_js_1.Text, { color: "danger", size: "sm", children: [props.error, " \u00A0"] })] }));
    return ((0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsx)(formElements_js_1.Label, { htmlFor: props.id, children: props.label }), (0, jsx_runtime_1.jsx)(Spacer_js_1.Spacer, { y: "sm" }), (0, jsx_runtime_1.jsxs)(formElements_js_1.InputContainer, { "data-error": !!props.error, children: [(0, jsx_runtime_1.jsx)(formElements_js_1.Input, { variant: "transparent", required: props.required, name: props.name, autoComplete: props.autocomplete, id: props.id, onChange: (e) => props.onChange(e.target.value), value: props.value, type: props.noSave ? "text" : props.type, style: props.type === "password" && props.noSave
                            ? {
                                WebkitTextSecurity: "disc",
                            }
                            : undefined, "data-test": props.dataTest, placeholder: props.placeholder }), (0, jsx_runtime_1.jsx)(buttons_js_1.InputButton, { type: "button", onClick: props.right.onClick, children: props.right.icon })] }), props.error && !props.noErrorShift && errorEl, props.noErrorShift && errorEl] }));
};
exports.FormFieldWithIconButton = FormFieldWithIconButton;
/**
 * @internal
 */
const FormField = (props) => {
    return ((0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsx)(formElements_js_1.Label, { htmlFor: props.id, children: props.label }), (0, jsx_runtime_1.jsx)(Spacer_js_1.Spacer, { y: "sm" }), (0, jsx_runtime_1.jsx)(formElements_js_1.Input, { variant: "outline", required: props.required, name: props.name, autoComplete: props.autocomplete, id: props.id, onChange: (e) => props.onChange(e.target.value), value: props.value, type: props.type, "data-error": !!props.errorMessage, placeholder: props.placeholder, disabled: props.disabled }), props.errorMessage && ((0, jsx_runtime_1.jsxs)(jsx_runtime_1.Fragment, { children: [(0, jsx_runtime_1.jsx)(Spacer_js_1.Spacer, { y: "xs" }), (0, jsx_runtime_1.jsx)(text_js_1.Text, { color: "danger", size: "sm", children: props.errorMessage })] }))] }));
};
exports.FormField = FormField;
//# sourceMappingURL=formFields.js.map