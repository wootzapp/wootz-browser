import type { Chain } from "../../../chains/types.js";
import type { ThirdwebClient } from "../../../client/client.js";
import type { FetchDeployMetadataResult } from "../../../utils/any-evm/deploy-metadata.js";
import type { Prettify } from "../../../utils/type-utils.js";
import type { ClientAndChain } from "../../../utils/types.js";
import { type ThirdwebContract } from "../../contract.js";
export type InfraContractId = "WETH9" | "Forwarder" | "ForwarderEOAOnly" | "TWCloneFactory" | (string & {});
type GetDeployedInfraParams = Prettify<ClientAndChain & {
    contractId: InfraContractId;
    constructorParams?: Record<string, unknown>;
    publisher?: string;
    version?: string;
}>;
/**
 * @internal
 */
export declare function getDeployedInfraContract(options: GetDeployedInfraParams): Promise<ThirdwebContract | null>;
/**
 * @internal
 */
export declare function getDeployedInfraContractFromMetadata(options: {
    client: ThirdwebClient;
    chain: Chain;
    contractMetadata: FetchDeployMetadataResult;
    constructorParams?: Record<string, unknown>;
    salt?: string;
}): Promise<ThirdwebContract | null>;
/**
 * @internal
 */
export declare function prepareInfraContractDeployTransactionFromMetadata(options: {
    client: ThirdwebClient;
    chain: Chain;
    contractMetadata: FetchDeployMetadataResult;
    constructorParams?: Record<string, unknown>;
    salt?: string;
}): import("../../../transaction/prepare-transaction.js").PreparedTransaction<[], import("abitype").AbiFunction, import("../../../transaction/prepare-transaction.js").PrepareTransactionOptions>;
export {};
//# sourceMappingURL=infra.d.ts.map