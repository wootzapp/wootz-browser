import { jsx as _jsx, Fragment as _Fragment, jsxs as _jsxs } from "react/jsx-runtime";
import { useState } from "react";
import { StyleSheet, TextInput, TouchableOpacity, View, } from "react-native";
import { SvgXml } from "react-native-svg";
import { radius, spacing } from "../../design-system/index.js";
import { RIGHT_ARROW } from "../icons/svgs.js";
import { ThemedSpinner } from "./spinner.js";
export function ThemedInput(props) {
    const { theme, rightView } = props;
    const [isFocused, setIsFocused] = useState(false);
    return (_jsxs(View, { style: [
            styles.container,
            {
                borderColor: isFocused
                    ? theme.colors.accentButtonBg
                    : theme.colors.borderColor,
            },
        ], children: [_jsx(TextInput, { placeholderTextColor: theme.colors.secondaryText, style: [styles.input, { color: theme.colors.primaryText }], onFocus: () => setIsFocused(true), onBlur: () => setIsFocused(false), ...props }), rightView && (_jsxs(_Fragment, { children: [_jsx(View, { style: { flex: 1 } }), rightView] }))] }));
}
export function ThemedInputWithSubmit(props) {
    const { theme, onSubmit } = props;
    const [isFocused, setIsFocused] = useState(false);
    const [val, setVal] = useState("");
    return (_jsxs(View, { style: [
            styles.container,
            {
                borderColor: isFocused
                    ? theme.colors.accentButtonBg
                    : theme.colors.borderColor,
            },
        ], children: [_jsx(TextInput, { placeholderTextColor: theme.colors.secondaryText, style: [
                    styles.input,
                    {
                        color: theme.colors.primaryText,
                    },
                ], value: val, onChangeText: setVal, onFocus: () => setIsFocused(true), onBlur: () => setIsFocused(false), ...props }), onSubmit && (_jsx(TouchableOpacity, { onPress: () => onSubmit(val), disabled: props.isSubmitting, style: {
                    paddingHorizontal: spacing.lg,
                }, children: props.isSubmitting ? (_jsx(ThemedSpinner, { size: 24, color: theme.colors.secondaryIconColor })) : (_jsx(SvgXml, { width: 24, height: 24, xml: RIGHT_ARROW, color: theme.colors.secondaryIconColor })) }))] }));
}
const styles = StyleSheet.create({
    container: {
        flexDirection: "row",
        alignItems: "center",
        borderRadius: radius.lg,
        borderWidth: 1,
        borderStyle: "solid",
    },
    input: {
        flex: 1,
        flexDirection: "row",
        fontSize: 16,
        height: 56,
        gap: spacing.md,
        paddingLeft: spacing.lg,
        paddingVertical: spacing.md,
        justifyContent: "center",
        alignItems: "center",
    },
});
//# sourceMappingURL=input.js.map