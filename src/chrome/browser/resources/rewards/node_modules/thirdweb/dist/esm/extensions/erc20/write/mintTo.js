import { toUnits } from "../../../utils/units.js";
import { mintTo as generatedMintTo } from "../__generated__/IMintableERC20/write/mintTo.js";
export { isMintToSupported } from "../__generated__/IMintableERC20/write/mintTo.js";
/**
 * Mints a specified amount of tokens to a given address.
 * @param options - The options for minting tokens.
 * @returns A prepared transaction object.
 * @extension ERC20
 * @example
 * ```ts
 * import { mintTo } from "thirdweb/extensions/erc20";
 * import { sendTransaction } from "thirdweb";
 *
 * const transaction = mintTo({
 *  contract,
 *  to: "0x...",
 *  amount: 100,
 * });
 *
 * await sendTransaction({ transaction, account });
 * ```
 */
export function mintTo(options) {
    return generatedMintTo({
        contract: options.contract,
        asyncParams: async () => {
            let amount;
            if ("amount" in options) {
                // if we need to parse the amount from ether to gwei then we pull in the decimals extension
                const { decimals } = await import("../read/decimals.js");
                // if this fails we fall back to `18` decimals
                const d = await decimals(options).catch(() => 18);
                // turn ether into gwei
                amount = toUnits(options.amount.toString(), d);
            }
            else {
                amount = options.amountWei;
            }
            return {
                to: options.to,
                amount: amount,
                overrides: options.overrides,
            };
        },
    });
}
//# sourceMappingURL=mintTo.js.map