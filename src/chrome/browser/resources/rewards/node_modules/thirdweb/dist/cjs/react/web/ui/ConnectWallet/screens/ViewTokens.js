"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ViewTokens = ViewTokens;
exports.ViewTokensContent = ViewTokensContent;
const jsx_runtime_1 = require("react/jsx-runtime");
const index_js_1 = require("../../../../core/design-system/index.js");
const useWalletBalance_js_1 = require("../../../../core/hooks/others/useWalletBalance.js");
const useActiveAccount_js_1 = require("../../../../core/hooks/wallets/useActiveAccount.js");
const useActiveWalletChain_js_1 = require("../../../../core/hooks/wallets/useActiveWalletChain.js");
const defaultTokens_js_1 = require("../../../../core/utils/defaultTokens.js");
const Skeleton_js_1 = require("../../components/Skeleton.js");
const Spacer_js_1 = require("../../components/Spacer.js");
const TokenIcon_js_1 = require("../../components/TokenIcon.js");
const basic_js_1 = require("../../components/basic.js");
const text_js_1 = require("../../components/text.js");
const formatTokenBalance_js_1 = require("./formatTokenBalance.js");
const nativeToken_js_1 = require("./nativeToken.js");
/**
 * @internal
 */
function ViewTokens(props) {
    return ((0, jsx_runtime_1.jsxs)(basic_js_1.Container, { style: {
            minHeight: "300px",
        }, children: [(0, jsx_runtime_1.jsx)(basic_js_1.Container, { p: "lg", children: (0, jsx_runtime_1.jsx)(basic_js_1.ModalHeader, { title: props.connectLocale.viewFunds.title, onBack: props.onBack }) }), (0, jsx_runtime_1.jsx)(basic_js_1.Line, {}), (0, jsx_runtime_1.jsxs)(basic_js_1.Container, { px: "sm", scrollY: true, style: {
                    maxHeight: "500px",
                }, children: [(0, jsx_runtime_1.jsx)(Spacer_js_1.Spacer, { y: "md" }), (0, jsx_runtime_1.jsx)(ViewTokensContent, { ...props }), (0, jsx_runtime_1.jsx)(Spacer_js_1.Spacer, { y: "lg" })] })] }));
}
function ViewTokensContent(props) {
    const activeChain = (0, useActiveWalletChain_js_1.useActiveWalletChain)();
    if (!activeChain) {
        return null;
    }
    const supportedTokens = props.supportedTokens || defaultTokens_js_1.defaultTokens;
    const tokenList = (activeChain?.id ? supportedTokens[activeChain.id] : undefined) || [];
    return ((0, jsx_runtime_1.jsxs)(jsx_runtime_1.Fragment, { children: [(0, jsx_runtime_1.jsx)(TokenInfo, { token: nativeToken_js_1.NATIVE_TOKEN, chain: activeChain, client: props.client }), tokenList.map((token) => {
                return ((0, jsx_runtime_1.jsx)(TokenInfo, { token: token, chain: activeChain, client: props.client }, token.address));
            })] }));
}
function TokenInfo(props) {
    const account = (0, useActiveAccount_js_1.useActiveAccount)();
    const tokenBalanceQuery = (0, useWalletBalance_js_1.useWalletBalance)({
        address: account?.address,
        chain: props.chain,
        tokenAddress: (0, nativeToken_js_1.isNativeToken)(props.token) ? undefined : props.token.address,
        client: props.client,
    });
    const tokenName = (0, nativeToken_js_1.isNativeToken)(props.token)
        ? tokenBalanceQuery.data?.name
        : props.token.name;
    return ((0, jsx_runtime_1.jsxs)(basic_js_1.Container, { flex: "row", gap: "sm", p: "sm", children: [(0, jsx_runtime_1.jsx)(TokenIcon_js_1.TokenIcon, { token: props.token, chain: props.chain, size: "lg", client: props.client }), (0, jsx_runtime_1.jsxs)(basic_js_1.Container, { flex: "column", gap: "xxs", children: [tokenName ? ((0, jsx_runtime_1.jsx)(text_js_1.Text, { size: "sm", color: "primaryText", children: tokenName })) : ((0, jsx_runtime_1.jsx)(Skeleton_js_1.Skeleton, { height: index_js_1.fontSize.md, width: "150px" })), tokenBalanceQuery.data ? ((0, jsx_runtime_1.jsxs)(text_js_1.Text, { size: "xs", children: [" ", (0, formatTokenBalance_js_1.formatTokenBalance)(tokenBalanceQuery.data)] })) : ((0, jsx_runtime_1.jsx)(Skeleton_js_1.Skeleton, { height: index_js_1.fontSize.xs, width: "100px" }))] })] }));
}
//# sourceMappingURL=ViewTokens.js.map