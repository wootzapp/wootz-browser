import { download } from "../../storage/download.js";
/**
 * Fetches source files from metadata.
 *
 * @param options - The options for fetching source files.
 * @returns A promise that resolves to an array of ContractSource objects.
 * @internal
 */
export async function fetchSourceFilesFromMetadata(options) {
    return Promise.all(Object.entries(options.publishedMetadata.metadata.sources).map(([path, info]) => {
        // biome-ignore lint/suspicious/noExplicitAny: TODO: fix later
        const urls = info.urls;
        const ipfsLink = urls
            ? urls.find((url) => url.includes("ipfs"))
            : undefined;
        // return early if we can't find an ipfs link
        if (!ipfsLink) {
            return {
                filename: path,
                source: 
                // biome-ignore lint/suspicious/noExplicitAny: TODO: fix later
                info.content ||
                    "Could not find source for this contract",
            };
        }
        const ipfsHash = ipfsLink.split("ipfs/")[1];
        return download({
            client: options.client,
            uri: `ipfs://${ipfsHash}`,
            // 3 sec timeout for sources that haven't been uploaded to ipfs
            requestTimeoutMs: 3000,
        })
            .then((res) => res.text())
            .then((source) => ({ filename: path, source }));
    }));
}
//# sourceMappingURL=source-files.js.map