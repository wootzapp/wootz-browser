import { type TransactionButtonProps } from "../../../core/hooks/transaction/transaction-button-utils.js";
/**
 * TransactionButton component is used to render a button that triggers a transaction.
 * It shows a "Switch Network" button if the connected wallet is on a different chain than the transaction.
 * @param props - The props for this component.
 * Refer to [TransactionButtonProps](https://portal.thirdweb.com/references/typescript/v5/TransactionButtonProps) for details.
 * @example
 *
 * ### Basic usage
 * ```tsx
 * <TransactionButton
 *   transaction={() => {}}
 *   onTransactionConfirmed={handleSuccess}
 *   onError={handleError}
 * >
 *   Confirm Transaction
 * </TransactionButton>
 * ```
 *
 * ### Customize the styling by passing the `unstyled` prop and your inline styles and/or classes:
 * ```tsx
 * <TransactionButton
 *   transaction={() => {}}
 *   unstyled
 *   className="bg-white text-black rounded-md p-4 flex items-center justify-center"
 * >
 *   Confirm Transaction
 * </TransactionButton>
 * ```
 *
 * ### Handle errors
 * ```tsx
 * <TransactionButton
 *   transaction={() => ...}
 *   onError={(err) => {
 *     alert(err.message);
 *     // Add your own logic here
 *   }}
 * >
 *   Confirm Transaction
 * </TransactionButton>
 * ```
 *
 * ### Alert when a transaction is sent
 * ```tsx
 * <TransactionButton
 *   transaction={() => ...}
 *   onTransactionSent={(tx) => {
 *     alert("transaction sent!");
 *     // Add your own logic here. For example, a toast
 *   }}
 * >
 *   Confirm Transaction
 * </TransactionButton>
 * ```
 *
 * ### Alert when a transaction is completed
 * ```tsx
 * <TransactionButton
 *   transaction={() => ...}
 *   onTransactionConfirmed={(tx) => {
 *     alert("transaction sent!");
 *     console.log(tx);
 *     // Add your own logic here. For example, a toast
 *   }}
 * >
 *   Confirm Transaction
 * </TransactionButton>
 * ```
 *
 * ### The onClick prop, if provided, will be called before the transaction is sent.
 * ```tsx
 * <TransactionButton
 *   onClick={() => alert("Transaction is about to be sent")}
 *   transaction={...}
 * >
 *   ...
 * </TransactionButton>
 * ```
 *
 * ### Attach custom Pay metadata
 * ```tsx
 * <TransactionButton
 *   payModal={{
 *     // This image & title will show up in the Pay modal
 *     metadata: {
 *       name: "Van Gogh Starry Night",
 *       image: "https://unsplash.com/starry-night.png"
 *     }
 *   }}
 * >
 *   ...
 * </TransactionButton>
 * ```
 *
 * ### Gasless usage with [thirdweb Engine](https://portal.thirdweb.com/engine)
 * ```tsx
 * <TransactionButton
 *   gasless={{
 *     provider: "engine",
 *     relayerUrl: "https://thirdweb.engine-***.thirdweb.com/relayer/***",
 *     relayerForwarderAddress: "0x...",
 *   }}
 * >
 *   ...
 * </TransactionButton>
 * ```
 *
 * ### Gasless usage with OpenZeppelin
 * ```tsx
 * <TransactionButton
 *   gasless={{
 *     provider: "openzeppelin",
 *     relayerUrl: "https://...",
 *     relayerForwarderAddress: "0x...",
 *   }}
 * >
 *   ...
 * </TransactionButton>
 * ```
 * @component
 */
export declare function TransactionButton(props: TransactionButtonProps): import("react/jsx-runtime.js").JSX.Element;
//# sourceMappingURL=index.d.ts.map