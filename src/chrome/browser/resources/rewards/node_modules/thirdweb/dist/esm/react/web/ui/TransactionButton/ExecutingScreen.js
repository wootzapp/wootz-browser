import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from "react/jsx-runtime";
import { CheckCircledIcon, ExternalLinkIcon } from "@radix-ui/react-icons";
import { useCallback, useEffect, useRef, useState } from "react";
import { iconSize } from "../../../core/design-system/index.js";
import { useChainExplorers } from "../../../core/hooks/others/useChainQuery.js";
import { useSendTransaction } from "../../hooks/transaction/useSendTransaction.js";
import { AccentFailIcon } from "../ConnectWallet/icons/AccentFailIcon.js";
import { Spacer } from "../components/Spacer.js";
import { Spinner } from "../components/Spinner.js";
import { Container, ModalHeader } from "../components/basic.js";
import { Button, ButtonLink } from "../components/buttons.js";
import { Text } from "../components/text.js";
export function ExecutingTxScreen(props) {
    const sendTxCore = useSendTransaction({
        payModal: false,
    });
    const [txHash, setTxHash] = useState();
    const chainExplorers = useChainExplorers(props.tx.chain);
    const [status, setStatus] = useState("loading");
    const sendTx = useCallback(async () => {
        setStatus("loading");
        try {
            const txData = await sendTxCore.mutateAsync(props.tx);
            setTxHash(txData.transactionHash);
            props.onTxSent(txData);
            setStatus("sent");
        }
        catch (e) {
            // Do not reject the transaction here, because the user may want to try again
            // we only reject on modal close
            console.error(e);
            setStatus("failed");
        }
    }, [sendTxCore, props.tx, props.onTxSent]);
    const done = useRef(false);
    useEffect(() => {
        if (done.current) {
            return;
        }
        done.current = true;
        sendTx();
    }, [sendTx]);
    return (_jsxs(Container, { p: "lg", children: [_jsx(ModalHeader, { title: "Transaction", onBack: props.onBack }), _jsx(Spacer, { y: "xxl" }), _jsx(Spacer, { y: "xxl" }), _jsxs(Container, { flex: "row", center: "x", children: [status === "loading" && _jsx(Spinner, { size: "xxl", color: "accentText" }), status === "failed" && _jsx(AccentFailIcon, { size: iconSize["3xl"] }), status === "sent" && (_jsx(Container, { color: "success", flex: "row", center: "both", children: _jsx(CheckCircledIcon, { width: iconSize["3xl"], height: iconSize["3xl"] }) }))] }), _jsx(Spacer, { y: "lg" }), _jsxs(Text, { color: "primaryText", center: true, size: "lg", children: [status === "loading" && "Sending transaction", status === "failed" && "Transaction failed", status === "sent" && "Transaction sent"] }), _jsx(Spacer, { y: "sm" }), _jsx(Text, { color: "danger", center: true, size: "sm", children: status === "failed" && sendTxCore.error
                    ? sendTxCore.error.message
                    : "" }), _jsx(Spacer, { y: "xxl" }), _jsx(Spacer, { y: "xxl" }), status === "failed" && (_jsx(Button, { variant: "accent", fullWidth: true, onClick: sendTx, children: "Try Again" })), status === "sent" && (_jsxs(_Fragment, { children: [_jsx(Button, { variant: "accent", fullWidth: true, onClick: props.closeModal, children: "Done" }), txHash && (_jsxs(_Fragment, { children: [_jsx(Spacer, { y: "sm" }), _jsxs(ButtonLink, { fullWidth: true, variant: "outline", href: `${chainExplorers.explorers[0]?.url}/tx/${txHash}`, target: "_blank", as: "a", gap: "xs", style: {
                                    textDecoration: "none",
                                    color: "inherit",
                                }, children: ["View on Explorer", _jsx(ExternalLinkIcon, { width: iconSize.sm, height: iconSize.sm })] })] }))] }))] }));
}
//# sourceMappingURL=ExecutingScreen.js.map