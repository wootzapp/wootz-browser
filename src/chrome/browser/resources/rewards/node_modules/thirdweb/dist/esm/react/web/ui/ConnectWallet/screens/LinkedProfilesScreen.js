"use client";
import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { shortenAddress } from "../../../../../utils/address.js";
import { fontSize, iconSize } from "../../../../core/design-system/index.js";
import { useProfiles } from "../../../../core/hooks/others/useProfiles.js";
import { useSocialProfiles } from "../../../../core/social/useSocialProfiles.js";
import { getWalletIcon } from "../../../../core/utils/walletIcon.js";
import { LoadingScreen } from "../../../wallets/shared/LoadingScreen.js";
import { Img } from "../../components/Img.js";
import { Spacer } from "../../components/Spacer.js";
import { Container, Line, ModalHeader } from "../../components/basic.js";
import { Text } from "../../components/text.js";
import { Blobbie } from "../Blobbie.js";
import { MenuButton } from "../MenuButton.js";
import { AddUserIcon } from "../icons/AddUserIcon.js";
function getProfileDisplayName(profile) {
    switch (true) {
        case profile.type === "email" && profile.details.email !== undefined:
            return profile.details.email;
        case profile.type === "google" && profile.details.email !== undefined:
            return profile.details.email;
        case profile.type === "phone" && profile.details.phone !== undefined:
            return profile.details.phone;
        case profile.details.address !== undefined:
            return shortenAddress(profile.details.address, 6);
        case profile.type === "cognito" &&
            profile.details.email !== undefined:
            return profile.details.email;
        default:
            return profile.type.slice(0, 1).toUpperCase() + profile.type.slice(1);
    }
}
/**
 * @internal
 */
export function LinkedProfilesScreen(props) {
    const { data: connectedProfiles, isLoading } = useProfiles();
    if (isLoading) {
        return _jsx(LoadingScreen, {});
    }
    return (_jsxs(Container, { style: {
            minHeight: "300px",
        }, children: [_jsx(Container, { p: "lg", children: _jsx(ModalHeader, { title: props.locale.manageWallet.linkedProfiles, onBack: props.onBack }) }), _jsx(Line, {}), isLoading ? (_jsx(LoadingScreen, {})) : (_jsxs(Container, { scrollY: true, style: {
                    height: "300px",
                }, children: [_jsx(Spacer, { y: "md" }), _jsxs(Container, { px: "sm", children: [_jsxs(MenuButton, { onClick: () => {
                                    props.setScreen("link-profile");
                                }, style: {
                                    fontSize: fontSize.sm,
                                }, children: [_jsx(AddUserIcon, { size: iconSize.md }), _jsx(Text, { color: "primaryText", children: props.locale.manageWallet.linkProfile })] }), _jsx(Spacer, { y: "xs" }), connectedProfiles
                                ?.filter((profile) => profile.type !== "guest")
                                .map((profile) => (_jsx(LinkedProfile, { profile: profile, client: props.client }, `${profile.type}-${getProfileDisplayName(profile)}`)))] }), _jsx(Spacer, { y: "md" })] }))] }));
}
function LinkedProfile({ profile, client, }) {
    const { data: socialProfiles } = useSocialProfiles({
        client,
        address: profile.details.address,
    });
    return (_jsxs(MenuButton, { style: {
            fontSize: fontSize.sm,
            cursor: "default",
        }, disabled // disabled until we have more data to show on a dedicated profile screen
        : true, children: [socialProfiles?.some((p) => p.avatar) ? (_jsx(Img, { src: socialProfiles?.find((p) => p.avatar)?.avatar, width: iconSize.lg, height: iconSize.lg, loading: "eager", client: client, style: {
                    borderRadius: "100%",
                } })) : profile.details.address !== undefined ? (_jsx(Container, { style: {
                    width: "32px",
                    height: "32px",
                    borderRadius: "100%",
                    overflow: "hidden",
                }, children: _jsx(Blobbie, { address: profile.details.address, size: 32 }) })) : (_jsx(Img, { src: getWalletIcon(profile.type), width: iconSize.lg, height: iconSize.lg, loading: "eager", client: client })), _jsxs("div", { style: {
                    display: "flex",
                    flexDirection: "row",
                    justifyContent: "space-between",
                    alignItems: "center",
                    flexGrow: 1,
                }, children: [_jsx(Text, { color: "primaryText", children: socialProfiles?.find((p) => p.avatar)?.name ||
                            getProfileDisplayName(profile) }), socialProfiles?.find((p) => p.avatar)?.name &&
                        profile.details.address && (_jsx(Text, { color: "secondaryText", size: "sm", children: shortenAddress(profile.details.address, 4) }))] })] }));
}
//# sourceMappingURL=LinkedProfilesScreen.js.map