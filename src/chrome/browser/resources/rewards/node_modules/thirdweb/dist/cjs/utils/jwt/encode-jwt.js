"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.encodeJWT = encodeJWT;
const to_bytes_js_1 = require("../encoding/to-bytes.js");
const random_js_1 = require("../random.js");
const uint8_array_js_1 = require("../uint8-array.js");
const jwt_header_js_1 = require("./jwt-header.js");
/**
 * Builds a JSON Web Token (JWT) using the provided options.
 * @param options - The options for building the JWT.
 * @returns The generated JWT.
 * @throws Error if the account is not found.
 * @example
 * ```ts
 * import { encodeJWT } from 'thirdweb/utils';
 *
 * const jwt = await encodeJWT({
 *  payload: {
 *    iss: '0x1234567890123456789012345678901234567890',
 *    sub: '0x1234567890123456789012345678901234567890',
 *    aud: '0x1234567890123456789012345678901234567890',
 *    exp: new Date(Date.now() + 1000 * 60 * 60),
 *    nbf: new Date(),
 *    iat: new Date(),
 *    jti: '1234567890',
 *    ctx: {
 *        example: 'example',
 *    },
 *  },
 *  wallet,
 * });
 * ```
 * @auth
 */
async function encodeJWT(options) {
    const payload = await ensureJWTPayload(options.payload);
    const message = JSON.stringify(payload);
    const signature = await options.account.signMessage({ message });
    const encodedData = (0, uint8_array_js_1.uint8ArrayToBase64)((0, to_bytes_js_1.stringToBytes)(JSON.stringify(payload)), { urlSafe: true });
    const encodedSignature = (0, uint8_array_js_1.uint8ArrayToBase64)((0, to_bytes_js_1.stringToBytes)(signature), {
        urlSafe: true,
    });
    // Generate a JWT with base64 encoded header, payload, and signature
    return `${jwt_header_js_1.PRECOMPILED_B64_ENCODED_JWT_HEADER}.${encodedData}.${encodedSignature}`;
}
async function ensureJWTPayload(payload) {
    return {
        iss: payload.iss,
        sub: payload.sub,
        aud: payload.aud,
        exp: Math.floor(payload.exp.getTime() / 1000),
        nbf: Math.floor(payload.nbf.getTime() / 1000),
        iat: Math.floor(payload.iat.getTime() / 1000),
        // default to uuid if jti is not provided
        jti: payload.jti || (await (0, random_js_1.randomBytesHex)()),
        ctx: payload.ctx,
    };
}
//# sourceMappingURL=encode-jwt.js.map