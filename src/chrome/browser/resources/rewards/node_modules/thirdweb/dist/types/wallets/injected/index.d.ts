import type { Chain } from "../../chains/types.js";
import type { Ethereum } from "../interfaces/ethereum.js";
import type { Account, Wallet } from "../interfaces/wallet.js";
import type { InjectedConnectOptions, WalletId } from "../wallet-types.js";
import type { InjectedSupportedWalletIds } from "../__generated__/wallet-ids.js";
import type { DisconnectFn, SwitchChainFn } from "../types.js";
import type { WalletEmitter } from "../wallet-emitter.js";
/**
 * Checks if the provided wallet is an injected wallet.
 *
 * @param wallet - The wallet to check.
 * @returns True if the wallet is an injected wallet, false otherwise.
 */
export declare function isInjectedWallet(wallet: Wallet<WalletId>): boolean;
export declare function getInjectedProvider(walletId: WalletId): Ethereum;
/**
 * @internal
 */
export declare function connectInjectedWallet(id: InjectedSupportedWalletIds, options: InjectedConnectOptions, emitter: WalletEmitter<InjectedSupportedWalletIds>): Promise<ReturnType<typeof onConnect>>;
/**
 * @internal
 */
export declare function autoConnectInjectedWallet(id: InjectedSupportedWalletIds, emitter: WalletEmitter<InjectedSupportedWalletIds>, chain?: Chain): Promise<ReturnType<typeof onConnect>>;
/**
 * Call this method when the wallet provider is connected or auto connected
 * @internal
 */
declare function onConnect(provider: Ethereum, address: string, chain: Chain, emitter: WalletEmitter<InjectedSupportedWalletIds>): Promise<[Account, Chain, DisconnectFn, SwitchChainFn]>;
export {};
//# sourceMappingURL=index.d.ts.map