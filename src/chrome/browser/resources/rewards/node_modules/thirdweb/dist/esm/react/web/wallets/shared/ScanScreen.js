"use client";
import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { CheckIcon, CopyIcon } from "@radix-ui/react-icons";
import { useState } from "react";
import { fontSize, iconSize, spacing, } from "../../../core/design-system/index.js";
import { AccentFailIcon } from "../../ui/ConnectWallet/icons/AccentFailIcon.js";
import { QRCode } from "../../ui/components/QRCode.js";
import { Spacer } from "../../ui/components/Spacer.js";
import { WalletImage } from "../../ui/components/WalletImage.js";
import { Container, ModalHeader, ScreenBottomContainer, } from "../../ui/components/basic.js";
import { Button } from "../../ui/components/buttons.js";
import { Text } from "../../ui/components/text.js";
/**
 * @internal
 */
export const ScanScreen = (props) => {
    const { connectModalSize, client } = props;
    const [linkCopied, setLinkCopied] = useState(false);
    return (_jsxs(Container, { fullHeight: true, flex: "column", animate: "fadein", children: [_jsx(Container, { p: "lg", children: _jsx(ModalHeader, { onBack: props.onBack, title: props.walletName }) }), _jsx(Spacer, { y: "sm" }), _jsxs(Container, { expand: true, flex: "column", px: "lg", center: "both", children: [!props.error && (_jsxs("div", { style: {
                            textAlign: "center",
                        }, children: [_jsx(QRCode, { qrCodeUri: props.qrCodeUri, QRIcon: _jsx(WalletImage, { size: iconSize.xxl, id: props.walletId, client: client }) }), _jsx(Spacer, { y: "xs" }), _jsxs(Button, { disabled: props.qrCodeUri === undefined, variant: "link", style: {
                                    fontSize: "12px",
                                    opacity: props.qrCodeUri === undefined ? 0.5 : 1,
                                    cursor: props.qrCodeUri === undefined ? "default" : "pointer",
                                }, onClick: () => {
                                    navigator.clipboard
                                        .writeText(props.qrCodeUri) // should always be string since the button is disabled otherwise
                                        .then(() => {
                                        setLinkCopied(true);
                                        setTimeout(() => setLinkCopied(false), 3000); // reset the check icon after 3 seconds
                                    })
                                        .catch((err) => {
                                        console.error("Failed to copy link to clipboard", err);
                                    });
                                }, children: [linkCopied ? (_jsx(CheckIcon, { width: 14, height: 14 })) : (_jsx(CopyIcon, { width: 14, height: 14 })), _jsx("span", { style: { padding: "0 4px" }, children: "Copy Link" })] }), _jsx(Spacer, { y: "lg" }), _jsx(Text, { center: true, multiline: true, balance: true, style: {
                                    paddingInline: spacing.lg,
                                }, children: props.qrScanInstruction })] })), props.error && (_jsxs(Container, { animate: "fadein", style: {
                            width: "100%",
                        }, children: [_jsx(Spacer, { y: "xxl" }), _jsx(Container, { flex: "row", center: "x", children: _jsx(AccentFailIcon, { size: iconSize["3xl"] }) }), _jsx(Spacer, { y: "lg" }), _jsx(Text, { center: true, size: "lg", color: "primaryText", children: "Connection Failed" }), _jsx(Spacer, { y: "3xl" }), _jsx(Button, { fullWidth: true, variant: "accent", onClick: props.onRetry, children: "Try again" })] }))] }), _jsx(Spacer, { y: "lg" }), props.onGetStarted && (_jsx(ScreenBottomContainer, { style: {
                    border: connectModalSize === "compact" ? undefined : "none",
                }, children: _jsx(Button, { variant: "link", onClick: props.onGetStarted, style: {
                        fontSize: fontSize.sm,
                        textAlign: "center",
                    }, children: props.getStartedLink }) }))] }));
};
//# sourceMappingURL=ScanScreen.js.map