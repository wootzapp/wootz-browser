"use strict";
"use client";
Object.defineProperty(exports, "__esModule", { value: true });
exports.LinkProfileScreen = LinkProfileScreen;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_icons_1 = require("@radix-ui/react-icons");
const react_query_1 = require("@tanstack/react-query");
const react_1 = require("react");
const is_ecosystem_wallet_js_1 = require("../../../../../wallets/ecosystem/is-ecosystem-wallet.js");
const index_js_1 = require("../../../../core/design-system/index.js");
const useActiveWalletChain_js_1 = require("../../../../core/hooks/wallets/useActiveWalletChain.js");
const useAdminAccount_js_1 = require("../../../../core/hooks/wallets/useAdminAccount.js");
const EcosystemWalletConnectUI_js_1 = require("../../../wallets/ecosystem/EcosystemWalletConnectUI.js");
const LoadingScreen_js_1 = require("../../../wallets/shared/LoadingScreen.js");
const basic_js_1 = require("../../components/basic.js");
const text_js_1 = require("../../components/text.js");
const InAppWalletConnectUI = /* @__PURE__ */ (0, react_1.lazy)(() => Promise.resolve().then(() => require("../../../wallets/in-app/InAppWalletConnectUI.js")));
/**
 * @internal
 */
function LinkProfileScreen(props) {
    const activeWallet = (0, useAdminAccount_js_1.useAdminWallet)();
    const chain = (0, useActiveWalletChain_js_1.useActiveWalletChain)();
    const queryClient = (0, react_query_1.useQueryClient)();
    if (!activeWallet) {
        return (0, jsx_runtime_1.jsx)(LoadingScreen_js_1.LoadingScreen, {});
    }
    if (activeWallet.id === "inApp") {
        return ((0, jsx_runtime_1.jsx)(react_1.Suspense, { fallback: (0, jsx_runtime_1.jsx)(LoadingScreen_js_1.LoadingScreen, {}), children: (0, jsx_runtime_1.jsx)(InAppWalletConnectUI, { walletConnect: props.walletConnect, wallet: activeWallet, done: () => {
                    queryClient.invalidateQueries({ queryKey: ["profiles"] });
                    props.onBack();
                }, connectLocale: props.locale, client: props.client, size: "compact", chain: chain, meta: {
                    title: props.locale.manageWallet.linkProfile,
                    showThirdwebBranding: false,
                }, isLinking: true, goBack: props.onBack }) }));
    }
    if ((0, is_ecosystem_wallet_js_1.isEcosystemWallet)(activeWallet)) {
        return ((0, jsx_runtime_1.jsx)(react_1.Suspense, { fallback: (0, jsx_runtime_1.jsx)(LoadingScreen_js_1.LoadingScreen, {}), children: (0, jsx_runtime_1.jsx)(EcosystemWalletConnectUI_js_1.default, { wallet: activeWallet, done: () => {
                    queryClient.invalidateQueries({ queryKey: ["profiles"] });
                    props.onBack();
                }, connectLocale: props.locale, client: props.client, size: "compact", chain: chain, meta: {
                    title: props.locale.manageWallet.linkProfile,
                    showThirdwebBranding: false,
                }, walletConnect: props.walletConnect, isLinking: true, goBack: props.onBack }) }));
    }
    return ((0, jsx_runtime_1.jsxs)(basic_js_1.Container, { style: {
            minHeight: "300px",
        }, children: [(0, jsx_runtime_1.jsx)(basic_js_1.Container, { p: "lg", children: (0, jsx_runtime_1.jsx)(basic_js_1.ModalHeader, { title: props.locale.manageWallet.linkProfile, onBack: props.onBack }) }), (0, jsx_runtime_1.jsx)(basic_js_1.Line, {}), (0, jsx_runtime_1.jsxs)(basic_js_1.Container, { flex: "column", gap: "md", center: "both", px: "xl", color: "secondaryText", style: {
                    flex: "1",
                    minHeight: "250px",
                }, children: [(0, jsx_runtime_1.jsx)(react_icons_1.CrossCircledIcon, { width: index_js_1.iconSize.xl, height: index_js_1.iconSize.xl }), (0, jsx_runtime_1.jsx)(text_js_1.Text, { center: true, children: "This wallet does not support account linking" })] })] }));
}
//# sourceMappingURL=LinkProfileScreen.js.map