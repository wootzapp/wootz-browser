import { getClientFetch } from "../../utils/fetch.js";
import { getPayBuyWithCryptoStatusUrl } from "../utils/definitions.js";
/**
 * Gets the status of a buy with crypto transaction
 * @param buyWithCryptoTransaction - Object of type [`BuyWithCryptoTransaction`](https://portal.thirdweb.com/references/typescript/v5/BuyWithCryptoTransaction)
 * @example
 *
 * ```ts
 * import { sendTransaction } from "thirdweb";
 * import { getBuyWithCryptoStatus, getBuyWithCryptoQuote } from "thirdweb/pay";
 *
 * // get a quote between two tokens
 * const quote = await getBuyWithCryptoQuote(quoteParams);
 *
 * // if approval is required, send the approval transaction
 * if (quote.approval) {
 *  const txResult = await sendTransaction({
 *    transaction: quote.approval,
 *    account: account, // account from connected wallet
 *  });
 *
 *  await waitForReceipt(txResult);
 * }
 *
 * // send the quoted transaction
 * const swapTxResult = await sendTransaction({
 *    transaction: quote.transactionRequest,
 *    account: account, // account from connected wallet
 *  });
 *
 * await waitForReceipt(swapTxResult);
 *
 * // keep polling the status of the quoted transaction until it returns a success or failure status
 * const status = await getBuyWithCryptoStatus({
 *    client,
 *    transactionHash: swapTxResult.transactionHash,
 * }});
 * ```
 * @returns Object of type [`BuyWithCryptoStatus`](https://portal.thirdweb.com/references/typescript/v5/BuyWithCryptoStatus)
 * @buyCrypto
 */
export async function getBuyWithCryptoStatus(buyWithCryptoTransaction) {
    try {
        if (!buyWithCryptoTransaction.transactionHash) {
            throw new Error("Transaction hash is required");
        }
        const queryString = new URLSearchParams({
            transactionHash: buyWithCryptoTransaction.transactionHash,
        }).toString();
        const url = `${getPayBuyWithCryptoStatusUrl()}?${queryString}`;
        const response = await getClientFetch(buyWithCryptoTransaction.client)(url);
        // Assuming the response directly matches the BuyWithCryptoStatus interface
        if (!response.ok) {
            response.body?.cancel();
            throw new Error(`HTTP error! status: ${response.status}`);
        }
        const data = (await response.json()).result;
        return data;
    }
    catch (error) {
        console.error("Fetch error:", error);
        throw new Error(`Fetch failed: ${error}`);
    }
}
//# sourceMappingURL=getStatus.js.map