import { eth_getTransactionReceipt } from "../../../../rpc/actions/eth_getTransactionReceipt.js";
import { getRpcClient } from "../../../../rpc/rpc.js";
import { sendAndConfirmTransaction } from "../../../../transaction/actions/send-and-confirm-transaction.js";
import { sendBatchTransaction } from "../../../../transaction/actions/send-batch-transaction.js";
import { LruMap } from "../../../../utils/caching/lru.js";
import { randomBytesHex } from "../../../../utils/random.js";
const bundlesToTransactions = new LruMap(1000);
/**
 * @internal
 */
export async function inAppWalletSendCalls(args) {
    const { account, calls } = args;
    const hashes = [];
    const bundleId = randomBytesHex(65);
    bundlesToTransactions.set(bundleId, hashes);
    if (account.sendBatchTransaction) {
        const receipt = await sendBatchTransaction({
            account,
            transactions: calls,
        });
        hashes.push(receipt.transactionHash);
        bundlesToTransactions.set(bundleId, hashes);
    }
    else {
        for (const tx of calls) {
            const receipt = await sendAndConfirmTransaction({
                account,
                transaction: tx,
            });
            hashes.push(receipt.transactionHash);
            bundlesToTransactions.set(bundleId, hashes);
        }
    }
    return bundleId;
}
/**
 * @internal
 */
export async function inAppWalletGetCallsStatus(args) {
    const { wallet, client, bundleId } = args;
    const chain = wallet.getChain();
    if (!chain) {
        throw new Error("Failed to get calls status, no active chain found");
    }
    const bundle = bundlesToTransactions.get(bundleId);
    if (!bundle) {
        throw new Error("Failed to get calls status, unknown bundle id");
    }
    const request = getRpcClient({ client, chain });
    let status = "CONFIRMED";
    const receipts = await Promise.all(bundle.map((hash) => eth_getTransactionReceipt(request, { hash })
        .then((receipt) => ({
        logs: receipt.logs.map((l) => ({
            address: l.address,
            data: l.data,
            topics: l.topics,
        })),
        status: receipt.status,
        blockHash: receipt.blockHash,
        blockNumber: receipt.blockNumber,
        gasUsed: receipt.gasUsed,
        transactionHash: receipt.transactionHash,
    }))
        .catch(() => {
        status = "PENDING";
        return null; // Return null if there's an error to filter out later
    })));
    return {
        status,
        receipts: receipts.filter((r) => r !== null), // ts 5.5 please come we need you
    };
}
//# sourceMappingURL=in-app-wallet-calls.js.map