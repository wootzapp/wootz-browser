import type { ThirdwebClient } from "../../../../../client/client.js";
import type { UserDetailsApiType } from "../../../core/authentication/types.js";
export declare function getSessionHeaders(): {
    "Content-Type": string;
    "x-session-nonce": `0x${string}`;
};
export declare const verifyClientId: (client: ThirdwebClient) => Promise<{
    success: boolean;
}>;
export declare const authFetchEmbeddedWalletUser: (client: ThirdwebClient, url: string, props: Parameters<typeof fetch>[1], retries?: number) => Promise<Response>;
export declare function fetchUserDetails(args: {
    email?: string;
    client: ThirdwebClient;
}): Promise<UserDetailsApiType>;
export declare function storeUserShares({ client, walletAddress, maybeEncryptedRecoveryShares, authShare, }: {
    client: ThirdwebClient;
    walletAddress: string;
    maybeEncryptedRecoveryShares?: {
        share: string;
        isClientEncrypted: boolean;
    }[];
    authShare?: string;
}): Promise<void>;
export declare function getUserShares(client: ThirdwebClient, getShareUrl: URL): Promise<{
    authShare?: string;
    maybeEncryptedRecoveryShares?: string[];
}>;
export declare function deleteAccount(client: ThirdwebClient): Promise<any>;
//# sourceMappingURL=fetchers.d.ts.map