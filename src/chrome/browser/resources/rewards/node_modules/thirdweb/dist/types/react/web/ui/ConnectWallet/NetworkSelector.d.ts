import type React from "react";
import type { Chain } from "../../../../chains/types.js";
import type { ThirdwebClient } from "../../../../client/client.js";
import { type Theme } from "../../../core/design-system/index.js";
import type { LocaleId } from "../types.js";
import type { ConnectLocale } from "./locale/types.js";
type NetworkSelectorChainProps = {
    /**
     * `Chain` object to be displayed
     */
    chain: Chain;
    /**
     * function to be called for switching to the given chain
     */
    switchChain: () => void;
    /**
     * flag indicating whether the SDK is currently switching to the given chain
     */
    switching: boolean;
    /**
     * flag indicating whether the SDK failed to switch to the given chain
     */
    switchFailed: boolean;
    /**
     * function to close the modal
     */
    close?: () => void;
};
type ChainSection = {
    label: string;
    chains: Chain[];
};
/**
 * @connectWallet
 */
export type NetworkSelectorProps = {
    /**
     * Chains to be displayed as "Popular"
     * @deprecated Use `sections` prop instead
     *
     * If `sections` prop is provided, this prop will be ignored
     */
    popularChainIds?: number[];
    /**
     * Chains to be displayed as "Recent"
     * @deprecated Use `sections` prop instead
     *
     * If `sections` prop is provided, this prop will be ignored
     */
    recentChainIds?: number[];
    /**
     * Specify sections of chains to be displayed in the Network Selector Modal
     *
     * @example
     * To display "Polygon", "Avalanche" chains under "Recently used" section and "Ethereum", "Arbitrum" chains under "Popular" section, you can set the prop with the following value
     * ```ts
     * import { arbitrum, base, ethereum, polygon } from "thirdweb/chains";
     *
     * const sections = [
     *  { label: 'Recently used', chains: [arbitrum, polygon] },
     *  { label: 'Popular', chains: [base, ethereum] },
     * ]
     * ```
     */
    sections?: Array<ChainSection>;
    /**
     * Override how the chain button is rendered in the Modal
     */
    renderChain?: React.FC<NetworkSelectorChainProps>;
    /**
     * Callback to be called when a chain is successfully switched
     * @param chain - The `Chain` of the chain that was switched to
     */
    onSwitch?: (chain: Chain) => void;
    /**
     * Callback to be called when the "Add Custom Network" button is clicked
     *
     * The "Add Custom Network" button is displayed at the bottom of the modal - only if this prop is provided
     */
    onCustomClick?: () => void;
};
type NetworkSelectorContentProps = {
    onBack?: () => void;
    closeModal: () => void;
    chains: Chain[];
    networkSelector?: NetworkSelectorProps;
    showTabs?: boolean;
    connectLocale: ConnectLocale;
    client: ThirdwebClient;
};
/**
 * @internal
 */
export declare function NetworkSelectorContent(props: NetworkSelectorContentProps): import("react/jsx-runtime.js").JSX.Element;
export declare const ChainButton: React.NamedExoticComponent<{
    chain: Chain;
    onClick: () => void;
    confirming: boolean;
    switchingFailed: boolean;
    client: ThirdwebClient;
    connectLocale: ConnectLocale;
}>;
/**
 * Options for the `useNetworkSwitcherModal` hook's returned `open` function
 * @connectWallet
 */
export type UseNetworkSwitcherModalOptions = {
    /**
     * Set the theme for the `NetworkSwitcher` Modal. By default it is set to `"dark"`
     *
     * theme can be set to either `"dark"`, `"light"` or a custom theme object.
     *
     * You can also import [`lightTheme`](https://portal.thirdweb.com/references/typescript/v5/lightTheme)
     * or [`darkTheme`](https://portal.thirdweb.com/references/typescript/v5/darkTheme)
     * functions from `thirdweb/react` to use the default themes as base and overrides parts of it.
     * @example
     * ```ts
     * import { lightTheme } from "thirdweb/react";
     *
     * const customTheme = lightTheme({
     *  colors: {
     *    modalBg: 'red'
     *  }
     * })
     * ```
     */
    theme?: Theme | "dark" | "light";
    /**
     * Specify sections of chains to be displayed in the Network Selector Modal
     *
     * @example
     * To display "Polygon", "Avalanche" chains under "Recently used" section and "Ethereum", "Arbitrum" chains under "Popular" section, you can set the prop with the following value
     * ```ts
     * import { arbitrum, base, ethereum, polygon } from "thirdweb/chains";
     *
     * const sections = [
     *  { label: 'Recently used', chains: [arbitrum, polygon] },
     *  { label: 'Popular', chains: [base, ethereum] },
     * ]
     * ```
     */
    sections?: Array<ChainSection>;
    /**
     * Override how the chain button is rendered in the Modal
     */
    renderChain?: React.FC<NetworkSelectorChainProps>;
    /**
     * Callback to be called when a chain is successfully switched
     * @param chain - The `Chain` of the chain that was switched to
     */
    onSwitch?: (chain: Chain) => void;
    /**
     * Callback to be called when the "Add Custom Network" button is clicked
     *
     * The "Add Custom Network" button is displayed at the bottom of the modal - only if this prop is provided
     */
    onCustomClick?: () => void;
    /**
     * A client is the entry point to the thirdweb SDK.
     * It is required for all other actions.
     * You can create a client using the `createThirdwebClient` function. Refer to the [Creating a Client](https://portal.thirdweb.com/typescript/v5/client) documentation for more information.
     *
     * You must provide a `clientId` or `secretKey` in order to initialize a client. Pass `clientId` if you want for client-side usage and `secretKey` for server-side usage.
     *
     * ```tsx
     * import { createThirdwebClient } from "thirdweb";
     *
     * const client = createThirdwebClient({
     *  clientId: "<your_client_id>",
     * })
     * ```
     */
    client: ThirdwebClient;
    /**
     * By default - NetworkSwitcher UI uses the `en-US` locale for english language users.
     *
     * You can customize the language used in the ConnectButton UI by setting the `locale` prop.
     *
     * Refer to the [`LocaleId`](https://portal.thirdweb.com/references/typescript/v5/LocaleId) type for supported locales.
     */
    locale?: LocaleId;
};
/**
 * Hook to open the Wallet Network Switcher Modal that shows allows users to switch to different network.
 *
 * @example
 * ```tsx
 * import { createThirdwebClient } from "thirdweb";
 * import { useNetworkSwitcherModal } from "thirdweb/react";
 * import { base, ethereum, polygon, sepolia, arbitrum } from "thirdweb/chains";
 *
 * const client = createThirdwebClient({
 *  clientId: "<your_client_id>",
 * });
 *
 * function Example() {
 *   const networkSwitcher = useNetworkSwitcherModal();
 *
 *   function handleClick() {
 *      networkSwitcher.open({
 *        client,
 *        theme: 'light'
 *        sections: [
 *          { label: 'Recently used', chains: [arbitrum, polygon] },
 *          { label: 'Popular', chains: [base, ethereum, sepolia] },
 *        ]
 *     });
 *   }
 *
 *   return <button onClick={handleClick}> Switch Network </button>
 * }
 * ```
 * @wallet
 */
export declare function useNetworkSwitcherModal(): {
    open: (props: UseNetworkSwitcherModalOptions) => Promise<void>;
    close: () => void;
};
export {};
//# sourceMappingURL=NetworkSelector.d.ts.map