"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getLoginCallbackUrl = exports.getLoginUrl = void 0;
const domains_js_1 = require("../../../../utils/domains.js");
const types_js_1 = require("../../../../wallets/types.js");
const getLoginOptionRoute = (option) => {
    if (!types_js_1.authOptions.includes(option) && option !== "wallet") {
        throw new Error(`Unknown auth option ${option}`);
    }
    switch (option) {
        case "wallet":
            return "siwe";
        default:
            return option;
    }
};
const getLoginUrl = ({ authOption, client, ecosystem, mode = "popup", redirectUrl, }) => {
    if (mode === "popup" && redirectUrl) {
        throw new Error("Redirect URL is not supported for popup mode");
    }
    if (mode === "window" && !redirectUrl) {
        throw new Error("Redirect URL is required for window mode");
    }
    const route = getLoginOptionRoute(authOption);
    let baseUrl = `${(0, domains_js_1.getThirdwebBaseUrl)("inAppWallet")}/api/2024-05-05/login/${route}?clientId=${client.clientId}`;
    if (ecosystem?.partnerId) {
        baseUrl = `${baseUrl}&ecosystemId=${ecosystem.id}&ecosystemPartnerId=${ecosystem.partnerId}`;
    }
    else if (ecosystem) {
        baseUrl = `${baseUrl}&ecosystemId=${ecosystem.id}`;
    }
    // Always append redirectUrl to the baseUrl if mode is not popup
    if (mode !== "popup") {
        const formattedRedirectUrl = new URL(redirectUrl || window.location.href);
        formattedRedirectUrl.searchParams.set("walletId", ecosystem?.id || "inApp");
        formattedRedirectUrl.searchParams.set("authProvider", authOption);
        baseUrl = `${baseUrl}&redirectUrl=${encodeURIComponent(formattedRedirectUrl.toString())}`;
    }
    return baseUrl;
};
exports.getLoginUrl = getLoginUrl;
const getLoginCallbackUrl = ({ authOption, client, ecosystem, }) => {
    const route = getLoginOptionRoute(authOption);
    let baseUrl = `${(0, domains_js_1.getThirdwebBaseUrl)("inAppWallet")}/api/2024-05-05/login/${route}/callback?clientId=${client.clientId}`;
    if (ecosystem?.partnerId) {
        baseUrl = `${baseUrl}&ecosystemId=${ecosystem.id}&ecosystemPartnerId=${ecosystem.partnerId}`;
    }
    else if (ecosystem) {
        baseUrl = `${baseUrl}&ecosystemId=${ecosystem.id}`;
    }
    return baseUrl;
};
exports.getLoginCallbackUrl = getLoginCallbackUrl;
//# sourceMappingURL=getLoginPath.js.map