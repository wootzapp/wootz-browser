import type { Chain } from "../../chains/types.js";
import type { ThirdwebClient } from "../../client/client.js";
export type GetWalletBalanceOptions = {
    address: string;
    client: ThirdwebClient;
    chain: Chain;
    /**
     * (Optional) The address of the token to retrieve the balance for. If not provided, the balance of the native token will be retrieved.
     */
    tokenAddress?: string;
};
export type GetWalletBalanceResult = {
    value: bigint;
    decimals: number;
    displayValue: string;
    symbol: string;
    name: string;
};
/**
 * Retrieves the balance of a token or native currency for a given wallet.
 * @param options - The options for retrieving the token balance.
 * @param options.address - The address for which to retrieve the balance.
 * @param options.client - The Thirdweb client to use for the request.
 * @param options.chain - The chain for which to retrieve the balance.
 * @param options.tokenAddress - (Optional) The address of the token to retrieve the balance for. If not provided, the balance of the native token will be retrieved.
 * @returns A promise that resolves to the token balance result.
 * @example
 * ```ts
 * import { getWalletBalance } from "thirdweb/wallets";
 * const balance = await getWalletBalance({ address, client, chain, tokenAddress });
 * ```
 * @walletUtils
 */
export declare function getWalletBalance(options: GetWalletBalanceOptions): Promise<GetWalletBalanceResult>;
//# sourceMappingURL=getWalletBalance.d.ts.map