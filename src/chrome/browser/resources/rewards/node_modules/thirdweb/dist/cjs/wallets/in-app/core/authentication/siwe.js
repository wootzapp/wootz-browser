"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.siweAuthenticate = siweAuthenticate;
const sign_login_payload_js_1 = require("../../../../auth/core/sign-login-payload.js");
const fetch_js_1 = require("../../../../utils/fetch.js");
const getLoginPath_js_1 = require("./getLoginPath.js");
/**
 * @internal
 */
async function siweAuthenticate(args) {
    const { wallet, chain } = args;
    const account = await wallet.connect({ client: args.client });
    const clientFetch = (0, fetch_js_1.getClientFetch)(args.client, args.ecosystem);
    const payload = await (async () => {
        const path = (0, getLoginPath_js_1.getLoginUrl)({
            authOption: "wallet",
            client: args.client,
            ecosystem: args.ecosystem,
        });
        const res = await clientFetch(`${path}&address=${account.address}&chainId=${chain.id}`);
        if (!res.ok)
            throw new Error("Failed to generate SIWE login payload");
        return (await res.json());
    })();
    const { signature } = await (0, sign_login_payload_js_1.signLoginPayload)({ payload, account });
    const authResult = await (async () => {
        const path = (0, getLoginPath_js_1.getLoginCallbackUrl)({
            authOption: "wallet",
            client: args.client,
            ecosystem: args.ecosystem,
        });
        const res = await clientFetch(`${path}&signature=${signature}&payload=${encodeURIComponent(payload)}`, {
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            },
            body: JSON.stringify({
                signature,
                payload,
            }),
        });
        if (!res.ok)
            throw new Error("Failed to verify SIWE signature");
        return (await res.json());
    })();
    return authResult;
}
//# sourceMappingURL=siwe.js.map