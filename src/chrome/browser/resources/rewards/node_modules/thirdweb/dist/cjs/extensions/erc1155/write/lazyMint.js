"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.lazyMint = lazyMint;
exports.isLazyMintSupported = isLazyMintSupported;
const ipfs_js_1 = require("../../../utils/ipfs.js");
const nextTokenIdToMint_js_1 = require("../__generated__/IERC1155Enumerable/read/nextTokenIdToMint.js");
const LazyMint = require("../__generated__/ILazyMint/write/lazyMint.js");
/**
 * Lazily mints ERC1155 tokens.
 * @param options - The options for the lazy minting process.
 * @returns A promise that resolves to the prepared contract call.
 * @extension ERC1155
 * @example
 * ```ts
 * import { lazyMint } from "thirdweb/extensions/erc1155";
 * import { sendTransaction } from "thirdweb";
 *
 * const transaction = lazyMint({
 * contract,
 * nfts: [
 *    {
 *      name: "My NFT",
 *      description: "This is my NFT",
 *      image: "https://example.com/image.png",
 *    },
 *  ],
 * });
 *
 * await sendTransaction({ transaction, account });
 * ```
 */
function lazyMint(options) {
    return LazyMint.lazyMint({
        contract: options.contract,
        asyncParams: async () => {
            const startFileNumber = await (0, nextTokenIdToMint_js_1.nextTokenIdToMint)({
                contract: options.contract,
            });
            const batchOfUris = await (0, ipfs_js_1.uploadOrExtractURIs)(options.nfts, options.contract.client, 
            // TODO: this is potentially unsafe since it *may* be bigger than what Number can represent, however the likelyhood is very low (fine, for now)
            Number(startFileNumber));
            const baseUri = (0, ipfs_js_1.getBaseUriFromBatch)(batchOfUris);
            return {
                amount: BigInt(batchOfUris.length),
                baseURIForTokens: baseUri.endsWith("/") ? baseUri : `${baseUri}/`,
                extraData: "0x",
            };
        },
    });
}
/**
 * Checks if the `lazyMint` method is supported by the given contract.
 * @param availableSelectors An array of 4byte function selectors of the contract. You can get this in various ways, such as using "whatsabi" or if you have the ABI of the contract available you can use it to generate the selectors.
 * @returns A boolean indicating if the `lazyMint` method is supported.
 * @extension ERC1155
 * @example
 * ```ts
 * import { isLazyMintSupported } from "thirdweb/extensions/erc1155";
 *
 * const supported = isLazyMintSupported(["0x..."]);
 * ```
 */
function isLazyMintSupported(availableSelectors) {
    return (LazyMint.isLazyMintSupported(availableSelectors) &&
        // required because we use it in the lazyMint function
        (0, nextTokenIdToMint_js_1.isNextTokenIdToMintSupported)(availableSelectors));
}
//# sourceMappingURL=lazyMint.js.map