"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getRequiredTransactions = getRequiredTransactions;
exports.getAllDefaultConstructorParamsForImplementation = getAllDefaultConstructorParamsForImplementation;
const create_2_factory_js_1 = require("../../contract/deployment/utils/create-2-factory.js");
const infra_js_1 = require("../../contract/deployment/utils/infra.js");
const infra_js_2 = require("../../contract/deployment/utils/infra.js");
const compute_published_contract_address_js_1 = require("../../utils/any-evm/compute-published-contract-address.js");
const isZkSyncChain_js_1 = require("../../utils/any-evm/zksync/isZkSyncChain.js");
/**
 * @internal
 */
async function getRequiredTransactions(options) {
    const { chain, client, deployMetadata, implementationConstructorParams, modules = [], } = options;
    if (deployMetadata?.deployType === "autoFactory") {
        const results = await Promise.all([
            (0, create_2_factory_js_1.getDeployedCreate2Factory)({
                chain,
                client,
            }).then((c) => c || (0, isZkSyncChain_js_1.isZkSyncChain)(chain)
                ? null
                : { type: "infra", contractId: "Create2Factory" }),
            (0, infra_js_1.getDeployedInfraContract)({
                chain,
                client,
                contractId: "Forwarder",
            }).then((c) => c || (0, isZkSyncChain_js_1.isZkSyncChain)(chain)
                ? null
                : { type: "infra", contractId: "Forwarder" }),
            (0, infra_js_1.getDeployedInfraContract)({
                chain,
                client,
                contractId: "TWCloneFactory",
                constructorParams: {
                    _trustedForwarder: await (0, compute_published_contract_address_js_1.computePublishedContractAddress)({
                        chain,
                        client,
                        contractId: "Forwarder",
                    }),
                },
            }).then((c) => c || (0, isZkSyncChain_js_1.isZkSyncChain)(chain)
                ? null
                : { type: "infra", contractId: "TWCloneFactory" }),
            // TODO (deploy): add WETH contract check for implementations that need it (check implementation constructor params)
            getTransactionsForImplementation({
                chain,
                client,
                deployMetadata,
                implementationConstructorParams,
            }),
            ...modules.map((m) => (0, infra_js_2.getDeployedInfraContractFromMetadata)({
                chain,
                client,
                contractMetadata: m.deployMetadata,
            }).then((c) => c
                ? null
                : {
                    type: "module",
                    contractId: m.deployMetadata.name,
                })),
        ]);
        results.push({ type: "proxy", contractId: deployMetadata.name });
        return results.flat().filter((r) => r !== null);
    }
    return [{ type: "implementation", contractId: deployMetadata.name }];
}
async function getTransactionsForImplementation(options) {
    const { chain, client, deployMetadata, implementationConstructorParams } = options;
    if (deployMetadata.name === "MarketplaceV3") {
        return getTransactionsForMaketplaceV3(options);
    }
    const constructorParams = implementationConstructorParams ??
        (await getAllDefaultConstructorParamsForImplementation({
            chain,
            client,
        }));
    const result = await (0, infra_js_1.getDeployedInfraContract)({
        chain,
        client,
        contractId: deployMetadata.name,
        constructorParams,
        publisher: deployMetadata.publisher,
        version: deployMetadata.version,
    }).then((c) => c
        ? null
        : {
            type: "implementation",
            contractId: deployMetadata.name,
        });
    return result ? [result] : [];
}
async function getTransactionsForMaketplaceV3(options) {
    const { chain, client } = options;
    const WETHAdress = await (0, compute_published_contract_address_js_1.computePublishedContractAddress)({
        chain,
        client,
        contractId: "WETH9",
    });
    const extensions = await Promise.all([
        (0, infra_js_1.getDeployedInfraContract)({
            chain,
            client,
            contractId: "WETH9",
        }).then((c) => c ? null : { type: "infra", contractId: "WETH9" }),
        (0, infra_js_1.getDeployedInfraContract)({
            chain,
            client,
            contractId: "DirectListingsLogic",
            constructorParams: { _nativeTokenWrapper: WETHAdress },
        }).then((c) => c
            ? null
            : { type: "extension", contractId: "DirectListingsLogic" }),
        (0, infra_js_1.getDeployedInfraContract)({
            chain,
            client,
            contractId: "EnglishAuctionsLogic",
            constructorParams: { _nativeTokenWrapper: WETHAdress },
        }).then((c) => c
            ? null
            : { type: "extension", contractId: "EnglishAuctionsLogic" }),
        (0, infra_js_1.getDeployedInfraContract)({
            chain,
            client,
            contractId: "OffersLogic",
        }).then((c) => c ? null : { type: "extension", contractId: "OffersLogic" }),
    ]);
    // hacky assumption: if we need to deploy any of the extensions, we also need to deploy the implementation
    const transactions = extensions.filter((e) => e !== null);
    if (transactions.length) {
        transactions.push({ type: "implementation", contractId: "MarketplaceV3" });
    }
    return transactions;
}
async function getAllDefaultConstructorParamsForImplementation(args) {
    const { chain, client } = args;
    const [forwarder, weth] = await Promise.all([
        (0, compute_published_contract_address_js_1.computePublishedContractAddress)({
            chain,
            client,
            contractId: "Forwarder",
        }),
        (0, compute_published_contract_address_js_1.computePublishedContractAddress)({
            chain,
            client,
            contractId: "WETH9",
        }),
    ]);
    return {
        trustedForwarder: forwarder,
        nativeTokenWrapper: weth,
    };
}
//# sourceMappingURL=get-required-transactions.js.map