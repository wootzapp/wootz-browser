import type { FetchDeployMetadataResult } from "../../../utils/any-evm/deploy-metadata.js";
import type { ClientAndChainAndAccount } from "../../../utils/types.js";
import { type ThirdwebContract } from "../../contract.js";
import { type InfraContractId } from "./infra.js";
/**
 * @internal
 */
export declare function getOrDeployInfraForPublishedContract(args: ClientAndChainAndAccount & {
    contractId: string;
    constructorParams?: Record<string, unknown>;
    publisher?: string;
    version?: string;
}): Promise<{
    cloneFactoryContract: ThirdwebContract;
    implementationContract: ThirdwebContract;
}>;
/**
 * @internal
 * @returns the deployed clone factory contract
 */
export declare function deployCloneFactory(options: ClientAndChainAndAccount): Promise<Readonly<import("../../contract.js").ContractOptions<[]>>>;
/**
 * @internal
 * @returns the deployed infra contract
 */
export declare function deployImplementation(options: ClientAndChainAndAccount & {
    contractId: string;
    constructorParams?: Record<string, unknown>;
    publisher?: string;
    version?: string;
}): Promise<Readonly<import("../../contract.js").ContractOptions<[]>>>;
/**
 * Convenience function to get or deploy an infra contract
 * @internal
 */
export declare function getOrDeployInfraContract(options: ClientAndChainAndAccount & {
    contractId: InfraContractId;
    constructorParams?: Record<string, unknown>;
    publisher?: string;
    version?: string;
}): Promise<Readonly<import("../../contract.js").ContractOptions<[]>>>;
export declare function getOrDeployInfraContractFromMetadata(options: ClientAndChainAndAccount & {
    contractMetadata: FetchDeployMetadataResult;
    constructorParams?: Record<string, unknown>;
}): Promise<Readonly<import("../../contract.js").ContractOptions<[]>>>;
//# sourceMappingURL=bootstrap.d.ts.map