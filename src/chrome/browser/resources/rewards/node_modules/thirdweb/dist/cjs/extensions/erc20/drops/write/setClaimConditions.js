"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.setClaimConditions = setClaimConditions;
exports.isSetClaimConditionsSupported = isSetClaimConditionsSupported;
const get_multicall_set_claim_claim_conditon_transactions_js_1 = require("../../../../utils/extensions/drops/get-multicall-set-claim-claim-conditon-transactions.js");
const setContractURI_js_1 = require("../../../common/__generated__/IContractMetadata/write/setContractURI.js");
const multicall_js_1 = require("../../../common/__generated__/IMulticall/write/multicall.js");
const getContractMetadata_js_1 = require("../../../common/read/getContractMetadata.js");
const setClaimConditions_js_1 = require("../../__generated__/IDropERC20/write/setClaimConditions.js");
const decimals_js_1 = require("../../read/decimals.js");
/**
 * Set the claim conditions for a ERC20 drop
 * @param options
 * @returns the prepared transaction
 * @extension ERC20
 * @example
 * ```ts
 * import { setClaimConditions } from "thirdweb/extensions/erc20";
 * import { sendTransaction } from "thirdweb";
 *
 * const transaction = setClaimConditions({
 *  contract,
 *  phases: [
 *    {
 *      maxClaimableSupply: 100n,
 *      maxClaimablePerWallet: 1n,
 *      currencyAddress: "0x...",
 *      price: 0.1,
 *      startTime: new Date(),
 *    },
 *   ],
 * });
 *
 * await sendTransaction({ transaction, account });
 * ```
 */
function setClaimConditions(options) {
    return (0, multicall_js_1.multicall)({
        contract: options.contract,
        asyncParams: async () => {
            return {
                data: await (0, get_multicall_set_claim_claim_conditon_transactions_js_1.getMulticallSetClaimConditionTransactions)({
                    contract: options.contract,
                    phases: options.phases,
                    resetClaimEligibility: options.resetClaimEligibility,
                    tokenDecimals: await (0, decimals_js_1.decimals)({ contract: options.contract }),
                }),
            };
        },
    });
}
/**
 * Checks if the `setClaimConditions` method is supported by the given contract.
 * @param availableSelectors An array of 4byte function selectors of the contract. You can get this in various ways, such as using "whatsabi" or if you have the ABI of the contract available you can use it to generate the selectors.
 * @returns A boolean indicating if the `setClaimConditions` method is supported.
 * @extension ERC20
 * @example
 * ```ts
 * import { isSetClaimConditionsSupported } from "thirdweb/extensions/erc20";
 *
 * const supported = isSetClaimConditionsSupported(["0x..."]);
 * ```
 */
function isSetClaimConditionsSupported(availableSelectors) {
    return ((0, multicall_js_1.isMulticallSupported)(availableSelectors) &&
        // needed for setting contract metadata
        (0, getContractMetadata_js_1.isGetContractMetadataSupported)(availableSelectors) &&
        (0, setContractURI_js_1.isSetContractURISupported)(availableSelectors) &&
        // needed for decimals
        (0, decimals_js_1.isDecimalsSupported)(availableSelectors) &&
        // needs to actually be able to set the claim Conditions
        (0, setClaimConditions_js_1.isSetClaimConditionsSupported)(availableSelectors));
}
//# sourceMappingURL=setClaimConditions.js.map