"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createAuction = createAuction;
const addresses_js_1 = require("../../../../constants/addresses.js");
const contract_js_1 = require("../../../../contract/contract.js");
const eth_getBlockByNumber_js_1 = require("../../../../rpc/actions/eth_getBlockByNumber.js");
const rpc_js_1 = require("../../../../rpc/rpc.js");
const units_js_1 = require("../../../../utils/units.js");
const isERC721_js_1 = require("../../../erc721/read/isERC721.js");
const isERC1155_js_1 = require("../../../erc1155/read/isERC1155.js");
const createAuction_js_1 = require("../../__generated__/IEnglishAuctions/write/createAuction.js");
/**
 * Creates an auction.
 * @param options The options for creating the auction.
 * @returns The result of creating the auction.
 * @extension MARKETPLACE
 * @example
 * ```typescript
 * import { createAuction } from "thirdweb/extensions/marketplace";
 * import { sendTransaction } from "thirdweb";
 *
 * const transaction = createAuction({...});
 *
 * await sendTransaction({ transaction, account });
 * ```
 */
function createAuction(options) {
    return (0, createAuction_js_1.createAuction)({
        ...options,
        asyncParams: async () => {
            const assetContract = (0, contract_js_1.getContract)({
                ...options.contract,
                address: options.assetContractAddress,
            });
            const rpcClient = (0, rpc_js_1.getRpcClient)(options.contract);
            const [assetIsERC721, assetIsERC1155, lastestBlock] = await Promise.all([
                (0, isERC721_js_1.isERC721)({ contract: assetContract }),
                (0, isERC1155_js_1.isERC1155)({ contract: assetContract }),
                (0, eth_getBlockByNumber_js_1.eth_getBlockByNumber)(rpcClient, { blockTag: "latest" }),
            ]);
            // validate valid asset
            if (!assetIsERC721 && !assetIsERC1155) {
                throw new Error("AssetContract must implement ERC 1155 or ERC 721.");
            }
            // validate the timestamps
            let startTimestamp = BigInt(Math.floor((options.startTimestamp ?? new Date()).getTime() / 1000));
            const endTimestamp = BigInt(Math.floor((options.endTimestamp ??
                new Date(Date.now() + 10 * 365 * 24 * 60 * 60 * 1000)).getTime() / 1000));
            if (startTimestamp <= lastestBlock.timestamp) {
                // set the start time to the next block if it is in the past
                startTimestamp = lastestBlock.timestamp + 1n;
            }
            if (startTimestamp >= endTimestamp) {
                throw new Error("Start time must be before end time.");
            }
            // valdiate quantity
            let quantity;
            if (assetIsERC721) {
                // force quantity to 1 for ERC721s
                quantity = 1n;
            }
            else {
                // otherwise use the provided quantity or default to 1
                quantity = options.quantity ?? 1n;
            }
            const currencyAddress = options.currencyContractAddress ?? addresses_js_1.NATIVE_TOKEN_ADDRESS;
            // validate buyout bid amount
            let buyoutBidAmount;
            if ("buyoutBidAmount" in options) {
                // for native token, we know decimals are 18
                if ((0, addresses_js_1.isNativeTokenAddress)(currencyAddress)) {
                    buyoutBidAmount = (0, units_js_1.toUnits)(options.buyoutBidAmount, 18);
                }
                else {
                    // otherwise get the decimals of the currency
                    const currencyContract = (0, contract_js_1.getContract)({
                        ...options.contract,
                        address: currencyAddress,
                    });
                    const { decimals } = await Promise.resolve().then(() => require("../../../erc20/read/decimals.js"));
                    const currencyDecimals = await decimals({
                        contract: currencyContract,
                    });
                    buyoutBidAmount = (0, units_js_1.toUnits)(options.buyoutBidAmount, currencyDecimals);
                }
            }
            else {
                buyoutBidAmount = BigInt(options.buyoutBidAmountWei);
            }
            // validate buyout bid amount
            let minimumBidAmount;
            if ("minimumBidAmount" in options) {
                // for native token, we know decimals are 18
                if ((0, addresses_js_1.isNativeTokenAddress)(currencyAddress)) {
                    minimumBidAmount = (0, units_js_1.toUnits)(options.minimumBidAmount, 18);
                }
                else {
                    // otherwise get the decimals of the currency
                    const currencyContract = (0, contract_js_1.getContract)({
                        ...options.contract,
                        address: currencyAddress,
                    });
                    const { decimals } = await Promise.resolve().then(() => require("../../../erc20/read/decimals.js"));
                    const currencyDecimals = await decimals({
                        contract: currencyContract,
                    });
                    minimumBidAmount = (0, units_js_1.toUnits)(options.minimumBidAmount, currencyDecimals);
                }
            }
            else {
                minimumBidAmount = BigInt(options.minimumBidAmountWei);
            }
            return {
                params: {
                    assetContract: options.assetContractAddress,
                    tokenId: options.tokenId,
                    currency: options.currencyContractAddress ?? addresses_js_1.NATIVE_TOKEN_ADDRESS,
                    quantity,
                    startTimestamp,
                    endTimestamp,
                    buyoutBidAmount,
                    minimumBidAmount,
                    // TODO validate these?
                    bidBufferBps: BigInt(options.bidBufferBps ?? 500),
                    timeBufferInSeconds: BigInt(options.timeBufferInSeconds ?? 900),
                },
                overrides: {
                    extraGas: 50000n, // add extra gas to account for router call
                },
            };
        },
    });
}
//# sourceMappingURL=createAuction.js.map