import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from "react/jsx-runtime";
import { ArrowRightIcon } from "@radix-ui/react-icons";
import { useMemo, useState, useSyncExternalStore } from "react";
import { isAddress } from "../../../../../../utils/address.js";
import { iconSize } from "../../../../../core/design-system/index.js";
import { useConnectionManager } from "../../../../../core/providers/connection-manager.js";
import { Spacer } from "../../../components/Spacer.js";
import { TextDivider } from "../../../components/TextDivider.js";
import { ToolTip } from "../../../components/Tooltip.js";
import { Container } from "../../../components/basic.js";
import { IconButton } from "../../../components/buttons.js";
import { Input } from "../../../components/formElements.js";
import { Text } from "../../../components/text.js";
import { WalletSelectorButton } from "./WalletSelectorButton.js";
export function ReceiverWalletDrawerScreen(props) {
    const [address, setAddress] = useState("");
    const isValidAddress = useMemo(() => isAddress(address), [address]);
    const showError = !!address && !isValidAddress;
    const connectionManager = useConnectionManager();
    const connectedWallets = useSyncExternalStore(connectionManager.connectedWallets.subscribe, connectionManager.connectedWallets.getValue);
    function handleSubmit() {
        props.onSelect(address);
        props.onBack();
    }
    return (_jsxs("div", { children: [_jsx(Text, { size: "lg", color: "primaryText", children: "Send to" }), _jsx(Spacer, { y: "lg" }), _jsxs("div", { style: {
                    position: "relative",
                }, children: [_jsx(Input, { "data-error": showError, value: address, placeholder: "Enter wallet address", variant: "outline", onChange: (e) => setAddress(e.target.value), style: {
                            paddingRight: "50px",
                        }, onKeyDown: (e) => {
                            if (isValidAddress && e.key === "Enter") {
                                handleSubmit();
                            }
                        } }), _jsx(ToolTip, { tip: "Confirm", children: _jsx(IconButton, { disabled: !isValidAddress, style: {
                                position: "absolute",
                                right: 0,
                                top: 0,
                                bottom: 0,
                                width: "40px",
                            }, onClick: handleSubmit, "aria-label": "Confirm", children: _jsx(ArrowRightIcon, { width: iconSize.md, height: iconSize.md }) }) })] }), showError && (_jsxs(_Fragment, { children: [_jsx(Spacer, { y: "xs" }), _jsx(Text, { color: "danger", size: "sm", children: "Invalid address" })] })), _jsx(Spacer, { y: "lg" }), _jsx(TextDivider, { text: "OR" }), _jsx(Spacer, { y: "md" }), _jsx(Text, { size: "sm", children: "Connected" }), _jsx(Spacer, { y: "xs" }), _jsx(Container, { flex: "column", gap: "sm", children: connectedWallets.map((w) => {
                    const address = (w.getAccount()?.address || "").toLowerCase();
                    return (_jsx(WalletSelectorButton, { address: address, client: props.client, onClick: () => {
                            props.onSelect(address);
                            props.onBack();
                        }, disableChevron: true, checked: address === props.receiverAddress.toLowerCase(), walletId: w.id }, w.id));
                }) })] }));
}
//# sourceMappingURL=ReceiverWalletSelectionScreen.js.map