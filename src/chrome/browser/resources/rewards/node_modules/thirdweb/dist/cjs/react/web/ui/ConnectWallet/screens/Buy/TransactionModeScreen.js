"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TransactionModeScreen = TransactionModeScreen;
const jsx_runtime_1 = require("react/jsx-runtime");
const track_js_1 = require("../../../../../../analytics/track.js");
const addresses_js_1 = require("../../../../../../constants/addresses.js");
const formatNumber_js_1 = require("../../../../../../utils/formatNumber.js");
const units_js_1 = require("../../../../../../utils/units.js");
const CustomThemeProvider_js_1 = require("../../../../../core/design-system/CustomThemeProvider.js");
const index_js_1 = require("../../../../../core/design-system/index.js");
const useChainQuery_js_1 = require("../../../../../core/hooks/others/useChainQuery.js");
const useActiveWallet_js_1 = require("../../../../../core/hooks/wallets/useActiveWallet.js");
const wallet_js_1 = require("../../../../../core/utils/wallet.js");
const LoadingScreen_js_1 = require("../../../../wallets/shared/LoadingScreen.js");
const ChainIcon_js_1 = require("../../../components/ChainIcon.js");
const Img_js_1 = require("../../../components/Img.js");
const Spacer_js_1 = require("../../../components/Spacer.js");
const TokenIcon_js_1 = require("../../../components/TokenIcon.js");
const WalletImage_js_1 = require("../../../components/WalletImage.js");
const basic_js_1 = require("../../../components/basic.js");
const buttons_js_1 = require("../../../components/buttons.js");
const text_js_1 = require("../../../components/text.js");
const ConnectButton_js_1 = require("../../ConnectButton.js");
const useBuyTxStates_js_1 = require("./main/useBuyTxStates.js");
function TransactionModeScreen(props) {
    const { payUiOptions, client, payerAccount, supportedDestinations, onContinue, } = props;
    const { data: chainData } = (0, useChainQuery_js_1.useChainMetadata)(payUiOptions.transaction.chain);
    const metadata = payUiOptions.metadata;
    const { data: transactionCostAndData } = (0, useBuyTxStates_js_1.useTransactionCostAndData)({
        transaction: payUiOptions.transaction,
        account: payerAccount,
        supportedDestinations,
    });
    const theme = (0, CustomThemeProvider_js_1.useCustomTheme)();
    const activeWallet = (0, useActiveWallet_js_1.useActiveWallet)();
    const sponsoredTransactionsEnabled = (0, wallet_js_1.hasSponsoredTransactionsEnabled)(activeWallet);
    if (!transactionCostAndData || !chainData) {
        return (0, jsx_runtime_1.jsx)(LoadingScreen_js_1.LoadingScreen, {});
    }
    return ((0, jsx_runtime_1.jsxs)(basic_js_1.Container, { p: "lg", children: [(0, jsx_runtime_1.jsx)(basic_js_1.ModalHeader, { title: metadata?.name || "Transaction" }), (0, jsx_runtime_1.jsx)(Spacer_js_1.Spacer, { y: "lg" }), (0, jsx_runtime_1.jsxs)(basic_js_1.Container, { children: [metadata?.image ? ((0, jsx_runtime_1.jsx)(Img_js_1.Img, { client: client, src: metadata?.image, style: {
                            width: "100%",
                            borderRadius: index_js_1.spacing.md,
                            backgroundColor: theme.colors.tertiaryBg,
                        } })) : activeWallet ? ((0, jsx_runtime_1.jsxs)(basic_js_1.Container, { flex: "row", center: "both", style: {
                            padding: index_js_1.spacing.md,
                            marginBottom: index_js_1.spacing.md,
                            borderRadius: index_js_1.spacing.md,
                            backgroundColor: theme.colors.tertiaryBg,
                        }, children: [(0, jsx_runtime_1.jsx)(WalletImage_js_1.WalletImage, { size: index_js_1.iconSize.xl, id: activeWallet.id, client: client }), (0, jsx_runtime_1.jsx)("div", { style: {
                                    flexGrow: 1,
                                    borderBottom: "6px dotted",
                                    borderColor: theme.colors.secondaryIconColor,
                                    marginLeft: index_js_1.spacing.md,
                                    marginRight: index_js_1.spacing.md,
                                } }), (0, jsx_runtime_1.jsx)(ChainIcon_js_1.ChainIcon, { client: client, size: index_js_1.iconSize.xl, chainIconUrl: chainData.icon?.url })] })) : null, (0, jsx_runtime_1.jsx)(Spacer_js_1.Spacer, { y: "md" }), (0, jsx_runtime_1.jsxs)(basic_js_1.Container, { flex: "row", children: [(0, jsx_runtime_1.jsx)(basic_js_1.Container, { flex: "column", expand: true, children: (0, jsx_runtime_1.jsx)(text_js_1.Text, { size: "md", color: "primaryText", weight: 700, children: "Price" }) }), (0, jsx_runtime_1.jsx)(basic_js_1.Container, { expand: true, children: (0, jsx_runtime_1.jsxs)(basic_js_1.Container, { flex: "row", gap: "xs", center: "y", style: { justifyContent: "right" }, children: [(0, jsx_runtime_1.jsx)(TokenIcon_js_1.TokenIcon, { chain: payUiOptions.transaction.chain, client: props.client, size: "sm", token: transactionCostAndData.token }), (0, jsx_runtime_1.jsxs)(text_js_1.Text, { color: "primaryText", size: "md", weight: 700, children: [String((0, formatNumber_js_1.formatNumber)(Number((0, units_js_1.toTokens)(transactionCostAndData.transactionValueWei, transactionCostAndData.decimals)), 6)), transactionCostAndData.token.symbol] })] }) })] }), (0, jsx_runtime_1.jsx)(Spacer_js_1.Spacer, { y: "md" }), (0, jsx_runtime_1.jsx)(basic_js_1.Line, {}), (0, jsx_runtime_1.jsx)(Spacer_js_1.Spacer, { y: "md" }), (0, jsx_runtime_1.jsxs)(basic_js_1.Container, { flex: "row", children: [(0, jsx_runtime_1.jsx)(basic_js_1.Container, { flex: "column", expand: true, children: (0, jsx_runtime_1.jsx)(text_js_1.Text, { size: "xs", color: "secondaryText", children: "Gas Fees" }) }), (0, jsx_runtime_1.jsx)(basic_js_1.Container, { expand: true, children: (0, jsx_runtime_1.jsx)(basic_js_1.Container, { flex: "row", gap: "xs", center: "y", style: { justifyContent: "right" }, children: (0, jsx_runtime_1.jsx)(text_js_1.Text, { color: sponsoredTransactionsEnabled ? "success" : "primaryText", size: "xs", children: sponsoredTransactionsEnabled
                                            ? "Sponsored"
                                            : `${String((0, formatNumber_js_1.formatNumber)(Number((0, units_js_1.toTokens)(transactionCostAndData.gasCostWei, chainData.nativeCurrency.decimals)), 6))} ${chainData.nativeCurrency.symbol}` }) }) })] }), (0, jsx_runtime_1.jsx)(Spacer_js_1.Spacer, { y: "sm" }), (0, jsx_runtime_1.jsxs)(basic_js_1.Container, { flex: "row", children: [(0, jsx_runtime_1.jsx)(basic_js_1.Container, { flex: "column", expand: true, children: (0, jsx_runtime_1.jsx)(text_js_1.Text, { size: "xs", color: "secondaryText", children: "Network" }) }), (0, jsx_runtime_1.jsx)(basic_js_1.Container, { expand: true, children: (0, jsx_runtime_1.jsxs)(basic_js_1.Container, { flex: "row", gap: "xs", center: "y", style: { justifyContent: "right" }, children: [(0, jsx_runtime_1.jsx)(ChainIcon_js_1.ChainIcon, { chainIconUrl: chainData.icon?.url, size: "xs", client: props.client }), (0, jsx_runtime_1.jsx)(text_js_1.Text, { size: "xs", color: "secondaryText", style: { textAlign: "right" }, children: chainData.name })] }) })] })] }), (0, jsx_runtime_1.jsx)(Spacer_js_1.Spacer, { y: "xl" }), payerAccount ? ((0, jsx_runtime_1.jsx)(buttons_js_1.Button, { variant: "accent", fullWidth: true, onClick: () => {
                    let totalCostWei = transactionCostAndData.transactionValueWei;
                    if (transactionCostAndData.token.address === addresses_js_1.NATIVE_TOKEN_ADDRESS &&
                        !sponsoredTransactionsEnabled) {
                        totalCostWei += transactionCostAndData.gasCostWei;
                    }
                    (0, track_js_1.trackPayEvent)({
                        event: "choose_payment_method_transaction_mode",
                        client,
                        walletAddress: payerAccount.address,
                        walletType: activeWallet?.id,
                    });
                    onContinue((0, units_js_1.toTokens)(totalCostWei, transactionCostAndData.decimals), payUiOptions.transaction.chain, transactionCostAndData.token);
                }, children: "Choose Payment Method" })) : ((0, jsx_runtime_1.jsx)("div", { children: (0, jsx_runtime_1.jsx)(ConnectButton_js_1.ConnectButton, { ...props.connectOptions, client: client, theme: theme, connectButton: {
                        style: {
                            width: "100%",
                        },
                    } }) }))] }));
}
//# sourceMappingURL=TransactionModeScreen.js.map