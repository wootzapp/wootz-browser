"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.FiatDetailsScreen = FiatDetailsScreen;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
const useBuyWithFiatStatus_js_1 = require("../../../../../../core/hooks/pay/useBuyWithFiatStatus.js");
const basic_js_1 = require("../../../../components/basic.js");
const FiatTxDetailsTable_js_1 = require("../fiat/FiatTxDetailsTable.js");
const PostOnRampSwapFlow_js_1 = require("../fiat/PostOnRampSwapFlow.js");
const statusMeta_js_1 = require("./statusMeta.js");
function FiatDetailsScreen(props) {
    const initialStatus = props.status;
    const [stopPolling, setStopPolling] = (0, react_1.useState)(false);
    const statusQuery = (0, useBuyWithFiatStatus_js_1.useBuyWithFiatStatus)(stopPolling
        ? undefined
        : {
            client: props.client,
            intentId: initialStatus.intentId,
        });
    const status = (statusQuery.data?.status === "NOT_FOUND" ? undefined : statusQuery.data) ||
        initialStatus;
    const hasTwoSteps = isSwapRequiredAfterOnRamp(status);
    const statusMeta = (0, statusMeta_js_1.getBuyWithFiatStatusMeta)(status);
    if (hasTwoSteps) {
        const fiatQuote = status.quote;
        return ((0, jsx_runtime_1.jsx)(PostOnRampSwapFlow_js_1.PostOnRampSwapFlow, { title: props.title, client: props.client, status: status, onBack: props.onBack, transactionMode: props.transactionMode, isEmbed: props.isEmbed, quote: {
                fromCurrencyAmount: fiatQuote.fromCurrencyWithFees.amount,
                fromCurrencySymbol: fiatQuote.fromCurrencyWithFees.currencySymbol,
                onRampTokenAmount: fiatQuote.estimatedOnRampAmount,
                toTokenAmount: fiatQuote.estimatedToTokenAmount,
                onRampToken: {
                    chainId: fiatQuote.onRampToken.chainId,
                    tokenAddress: fiatQuote.onRampToken.tokenAddress,
                    name: fiatQuote.onRampToken.name,
                    symbol: fiatQuote.onRampToken.symbol,
                },
                toToken: {
                    chainId: fiatQuote.toToken.chainId,
                    tokenAddress: fiatQuote.toToken.tokenAddress,
                    name: fiatQuote.toToken.name,
                    symbol: fiatQuote.toToken.symbol,
                },
            }, onDone: props.onDone, onSwapFlowStarted: () => {
                setStopPolling(true);
            }, payer: props.payer, 
            // viewing history - ignore onSuccess
            onSuccess: undefined }));
    }
    return ((0, jsx_runtime_1.jsxs)(basic_js_1.Container, { children: [(0, jsx_runtime_1.jsx)(basic_js_1.Container, { p: "lg", children: (0, jsx_runtime_1.jsx)(basic_js_1.ModalHeader, { title: "Transaction Details", onBack: props.onBack }) }), (0, jsx_runtime_1.jsx)(basic_js_1.Line, {}), (0, jsx_runtime_1.jsx)(basic_js_1.Container, { p: "lg", children: (0, jsx_runtime_1.jsx)(FiatTxDetailsTable_js_1.OnRampTxDetailsTable, { client: props.client, token: status.source
                        ? {
                            chainId: status.source.token.chainId,
                            address: status.source.token.tokenAddress,
                            symbol: status.source.token.symbol || "",
                            amount: status.source.amount,
                        }
                        : {
                            address: status.quote.onRampToken.tokenAddress,
                            amount: status.quote.estimatedOnRampAmount,
                            chainId: status.quote.onRampToken.chainId,
                            symbol: status.quote.onRampToken.symbol || "",
                        }, fiat: {
                        amount: status.quote.fromCurrencyWithFees.amount,
                        currencySymbol: status.quote.fromCurrencyWithFees.currencySymbol,
                    }, statusMeta: {
                        color: statusMeta.color,
                        text: statusMeta.status,
                        txHash: status.source?.transactionHash,
                    } }) })] }));
}
// if the toToken is the same as the onRampToken, no swap is required
function isSwapRequiredAfterOnRamp(buyWithFiatStatus) {
    if (buyWithFiatStatus.status === "NOT_FOUND") {
        return false;
    }
    const sameChain = buyWithFiatStatus.quote.toToken.chainId ===
        buyWithFiatStatus.quote.onRampToken.chainId;
    const sameToken = buyWithFiatStatus.quote.toToken.tokenAddress ===
        buyWithFiatStatus.quote.onRampToken.tokenAddress;
    return !(sameChain && sameToken);
}
//# sourceMappingURL=FiatDetailsScreen.js.map