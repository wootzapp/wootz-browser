"use strict";
"use client";
Object.defineProperty(exports, "__esModule", { value: true });
exports.WalletSelector = WalletSelector;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_icons_1 = require("@radix-ui/react-icons");
const react_1 = require("react");
const create_wallet_js_1 = require("../../../../wallets/create-wallet.js");
const mipdStore_js_1 = require("../../../../wallets/injected/mipdStore.js");
const CustomThemeProvider_js_1 = require("../../../core/design-system/CustomThemeProvider.js");
const index_js_1 = require("../../../core/design-system/index.js");
const walletIcon_js_1 = require("../../../core/utils/walletIcon.js");
const wallet_ui_states_provider_js_1 = require("../../providers/wallet-ui-states-provider.js");
const sortWallets_js_1 = require("../../utils/sortWallets.js");
const LoadingScreen_js_1 = require("../../wallets/shared/LoadingScreen.js");
const Img_js_1 = require("../components/Img.js");
const Spacer_js_1 = require("../components/Spacer.js");
const TextDivider_js_1 = require("../components/TextDivider.js");
const basic_js_1 = require("../components/basic.js");
const buttons_js_1 = require("../components/buttons.js");
const modalElements_js_1 = require("../components/modalElements.js");
const text_js_1 = require("../components/text.js");
const text_js_2 = require("../components/text.js");
const elements_js_1 = require("../design-system/elements.js");
const SmartWalletConnectUI_js_1 = require("./Modal/SmartWalletConnectUI.js");
const TOS_js_1 = require("./Modal/TOS.js");
const screen_js_1 = require("./Modal/screen.js");
const PoweredByTW_js_1 = require("./PoweredByTW.js");
const WalletEntryButton_js_1 = require("./WalletEntryButton.js");
const WalletTypeRowButton_js_1 = require("./WalletTypeRowButton.js");
const constants_js_1 = require("./constants.js");
const InAppWalletSelectionUI = /* @__PURE__ */ (0, react_1.lazy)(() => Promise.resolve().then(() => require("../../wallets/in-app/InAppWalletSelectionUI.js")));
// const localWalletId = "local";
const inAppWalletId = "inApp";
/**
 * @internal
 */
function WalletSelector(props) {
    const [personalWallet, setPersonalWallet] = (0, react_1.useState)(null);
    if (!props.accountAbstraction) {
        return (0, jsx_runtime_1.jsx)(WalletSelectorInner, { ...props });
    }
    if (personalWallet) {
        return ((0, jsx_runtime_1.jsx)(SmartWalletConnectUI_js_1.SmartConnectUI, { accountAbstraction: props.accountAbstraction, done: props.done, personalWallet: personalWallet, setModalVisibility: props.setModalVisibility, onBack: props.goBack, meta: props.meta, size: props.size, chain: props.chain, chains: props.chains, client: props.client, walletConnect: props.walletConnect, connectLocale: props.connectLocale }));
    }
    return ((0, jsx_runtime_1.jsx)(WalletSelectorInner, { ...props, done: (w) => {
            setPersonalWallet(w);
        } }));
}
/**
 * @internal
 */
const WalletSelectorInner = (props) => {
    const { walletIdsToHide } = props;
    const isCompact = props.size === "compact";
    const [isWalletGroupExpanded, setIsWalletGroupExpanded] = (0, react_1.useState)(false);
    // This is only used if requireApproval is true
    const [approvedTOS, setApprovedTOS] = (0, react_1.useState)(false);
    const installedWallets = getInstalledWallets();
    const propsWallets = props.wallets;
    let _wallets = [...propsWallets];
    for (const iW of installedWallets) {
        if (!propsWallets.find((w) => w.id === iW.id)) {
            _wallets.push(iW);
        }
    }
    if (walletIdsToHide) {
        _wallets = _wallets.filter((w) => !walletIdsToHide?.includes(w.id));
    }
    const localWalletConfig = false; // _wallets.find((w) => w.id === localWalletId);
    const nonLocalWalletConfigs = _wallets; // _wallets.filter((w) => w.id !== localWalletId);
    const socialWallets = nonLocalWalletConfigs.filter((w) => w.id === inAppWalletId);
    const eoaWallets = (0, sortWallets_js_1.sortWallets)(nonLocalWalletConfigs.filter((w) => w.id !== inAppWalletId), props.recommendedWallets);
    const continueAsGuest = localWalletConfig && ((0, jsx_runtime_1.jsx)(buttons_js_1.Button, { fullWidth: true, variant: isCompact ? "outline" : "link", style: !isCompact
            ? {
                textAlign: "left",
                justifyContent: "flex-start",
            }
            : undefined, onClick: () => {
            props.selectWallet(localWalletConfig);
        }, "data-test": "continue-as-guest-button", children: props.connectLocale.continueAsGuest }));
    // prevent accidental clicks on the TW icon when clicking on back icon from previous screen
    const enableTWIconLink = (0, react_1.useRef)(false);
    (0, react_1.useEffect)(() => {
        setTimeout(() => {
            enableTWIconLink.current = true;
        }, 1000);
    }, []);
    const twTitle = props.modalHeader ? ((0, jsx_runtime_1.jsx)(basic_js_1.ModalHeader, { title: props.modalHeader.title, onBack: props.modalHeader.onBack })) : ((0, jsx_runtime_1.jsxs)(basic_js_1.Container, { gap: "xxs", center: "y", flex: "row", children: [!props.meta.titleIconUrl ? null : ((0, jsx_runtime_1.jsx)(Img_js_1.Img, { src: props.meta.titleIconUrl, width: index_js_1.iconSize.md, height: index_js_1.iconSize.md, client: props.client })), (0, jsx_runtime_1.jsxs)(modalElements_js_1.ModalTitle, { children: [" ", props.title, " "] })] }));
    const handleSelect = async (wallet) => {
        // if (connectionStatus !== "disconnected") {
        //   await disconnect();
        // }
        props.selectWallet(wallet);
    };
    const connectAWallet = ((0, jsx_runtime_1.jsx)(WalletTypeRowButton_js_1.WalletTypeRowButton, { client: props.client, icon: walletIcon_js_1.genericWalletIcon, onClick: () => {
            setIsWalletGroupExpanded(true);
        }, title: props.connectLocale.connectAWallet }));
    const newToWallets = ((0, jsx_runtime_1.jsxs)(basic_js_1.Container, { flex: "row", style: {
            justifyContent: "space-between",
        }, children: [(0, jsx_runtime_1.jsx)(text_js_2.Text, { color: "secondaryText", size: "sm", weight: 500, children: props.connectLocale.newToWallets }), (0, jsx_runtime_1.jsx)(text_js_1.Link, { weight: 500, size: "sm", target: "_blank", href: "https://blog.thirdweb.com/web3-wallet/", children: props.connectLocale.getStarted })] }));
    const tos = props.meta.requireApproval ||
        props.meta.termsOfServiceUrl ||
        props.meta.privacyPolicyUrl ? ((0, jsx_runtime_1.jsx)(TOS_js_1.TOS, { termsOfServiceUrl: props.meta.termsOfServiceUrl, privacyPolicyUrl: props.meta.privacyPolicyUrl, locale: props.connectLocale.agreement, requireApproval: props.meta.requireApproval, isApproved: approvedTOS, onApprove: () => setApprovedTOS(!approvedTOS) })) : undefined;
    let topSection;
    let bottomSection;
    // wide modal
    if (!isCompact) {
        topSection = ((0, jsx_runtime_1.jsx)(WalletSelection, { wallets: nonLocalWalletConfigs, selectWallet: handleSelect, done: props.done, goBack: props.goBack, onShowAll: props.onShowAll, client: props.client, connectLocale: props.connectLocale, size: props.size, recommendedWallets: props.recommendedWallets, chain: props.chain, showAllWallets: props.showAllWallets, diableSelectionDataReset: props.disableSelectionDataReset, disabled: props.meta.requireApproval && !approvedTOS }));
        if (continueAsGuest) {
            bottomSection = ((0, jsx_runtime_1.jsx)(basic_js_1.ScreenBottomContainer, { children: continueAsGuest }));
        }
    }
    // compact
    else {
        // no social logins
        if (socialWallets.length === 0) {
            topSection = ((0, jsx_runtime_1.jsx)(WalletSelection, { wallets: nonLocalWalletConfigs, selectWallet: handleSelect, done: props.done, goBack: props.goBack, onShowAll: props.onShowAll, client: props.client, connectLocale: props.connectLocale, size: props.size, recommendedWallets: props.recommendedWallets, chain: props.chain, showAllWallets: props.showAllWallets, diableSelectionDataReset: props.disableSelectionDataReset, disabled: props.meta.requireApproval && !approvedTOS }));
            bottomSection = ((0, jsx_runtime_1.jsxs)(jsx_runtime_1.Fragment, { children: [(0, jsx_runtime_1.jsx)(basic_js_1.Line, {}), (0, jsx_runtime_1.jsxs)(basic_js_1.Container, { flex: "column", p: "md", gap: "md", children: [newToWallets, continueAsGuest] }), !continueAsGuest && (0, jsx_runtime_1.jsx)(basic_js_1.Line, {}), tos && ((0, jsx_runtime_1.jsx)(basic_js_1.Container, { px: "md", style: {
                            paddingBottom: index_js_1.spacing.md,
                            paddingTop: continueAsGuest ? 0 : index_js_1.spacing.md,
                        }, children: tos }))] }));
        }
        // social logins
        else {
            // not expanded state
            if (!isWalletGroupExpanded) {
                topSection = ((0, jsx_runtime_1.jsxs)(basic_js_1.Container, { px: "xs", children: [(0, jsx_runtime_1.jsx)(WalletSelection, { wallets: socialWallets, selectWallet: handleSelect, done: props.done, goBack: props.goBack, client: props.client, connectLocale: props.connectLocale, size: props.size, recommendedWallets: props.recommendedWallets, chain: props.chain, showAllWallets: props.showAllWallets, diableSelectionDataReset: props.disableSelectionDataReset, disabled: props.meta.requireApproval && !approvedTOS }), eoaWallets.length > 0 && ((0, jsx_runtime_1.jsxs)(jsx_runtime_1.Fragment, { children: [(0, jsx_runtime_1.jsx)(TextDivider_js_1.TextDivider, { text: props.connectLocale.or }), (0, jsx_runtime_1.jsx)(Spacer_js_1.Spacer, { y: "lg" })] }))] }));
                // only social login - no eoa wallets
                if (eoaWallets.length === 0) {
                    bottomSection =
                        tos || continueAsGuest ? ((0, jsx_runtime_1.jsxs)(jsx_runtime_1.Fragment, { children: [(0, jsx_runtime_1.jsx)(Spacer_js_1.Spacer, { y: "md" }), (0, jsx_runtime_1.jsx)(basic_js_1.Line, {}), continueAsGuest && ((0, jsx_runtime_1.jsxs)(basic_js_1.Container, { p: "lg", children: [" ", continueAsGuest] })), tos && (0, jsx_runtime_1.jsxs)(basic_js_1.Container, { p: "md", children: [" ", tos, " "] })] })) : ((0, jsx_runtime_1.jsx)(Spacer_js_1.Spacer, { y: "sm" }));
                }
                // social login + eoa wallets
                else {
                    // social login + More than 1 eoa wallets
                    if (eoaWallets.length > 1) {
                        bottomSection = ((0, jsx_runtime_1.jsxs)(basic_js_1.Container, { flex: "column", style: { position: "relative" }, gap: "sm", children: [(0, jsx_runtime_1.jsx)(GradientDiv, {}), (0, jsx_runtime_1.jsxs)(basic_js_1.Container, { px: "lg", flex: "column", gap: "md", children: [connectAWallet, continueAsGuest] }), tos ? ((0, jsx_runtime_1.jsxs)(basic_js_1.Container, { p: "md", children: [" ", tos, " "] })) : ((0, jsx_runtime_1.jsx)(Spacer_js_1.Spacer, { y: "xxs" }))] }));
                    }
                    // social login + single eoa wallet
                    else {
                        bottomSection = ((0, jsx_runtime_1.jsxs)(jsx_runtime_1.Fragment, { children: [(0, jsx_runtime_1.jsx)(basic_js_1.Container, { px: "lg", children: (0, jsx_runtime_1.jsx)(WalletSelection, { wallets: eoaWallets, selectWallet: handleSelect, done: props.done, goBack: props.goBack, onShowAll: props.onShowAll, client: props.client, connectLocale: props.connectLocale, size: props.size, recommendedWallets: props.recommendedWallets, chain: props.chain, showAllWallets: props.showAllWallets, diableSelectionDataReset: props.disableSelectionDataReset, disabled: props.meta.requireApproval && !approvedTOS }) }), continueAsGuest && ((0, jsx_runtime_1.jsx)(basic_js_1.Container, { flex: "column", px: "lg", gap: "lg", children: continueAsGuest })), tos ? ((0, jsx_runtime_1.jsxs)(jsx_runtime_1.Fragment, { children: [continueAsGuest ? (0, jsx_runtime_1.jsx)(Spacer_js_1.Spacer, { y: "md" }) : (0, jsx_runtime_1.jsx)(basic_js_1.Line, {}), (0, jsx_runtime_1.jsxs)(basic_js_1.Container, { p: "md", children: [" ", tos, " "] })] })) : ((0, jsx_runtime_1.jsx)(jsx_runtime_1.Fragment, { children: continueAsGuest && (0, jsx_runtime_1.jsx)(Spacer_js_1.Spacer, { y: "xl" }) }))] }));
                    }
                }
            }
            // expanded state
            else {
                topSection = ((0, jsx_runtime_1.jsx)(WalletSelection, { wallets: eoaWallets, selectWallet: handleSelect, done: props.done, goBack: props.goBack, onShowAll: props.onShowAll, client: props.client, connectLocale: props.connectLocale, size: props.size, recommendedWallets: props.recommendedWallets, chain: props.chain, showAllWallets: props.showAllWallets, diableSelectionDataReset: props.disableSelectionDataReset, disabled: props.meta.requireApproval && !approvedTOS }));
                bottomSection = ((0, jsx_runtime_1.jsx)(basic_js_1.ScreenBottomContainer, { children: newToWallets }));
            }
        }
    }
    // hide the header for embed - unless it's customized
    const showHeader = !props.hideHeader || props.modalHeader;
    return ((0, jsx_runtime_1.jsxs)(basic_js_1.Container, { scrollY: true, flex: "column", animate: "fadein", fullHeight: true, style: {
            maxHeight: props.size === "compact" ? constants_js_1.compactModalMaxHeight : undefined,
        }, children: [showHeader && ((0, jsx_runtime_1.jsx)(basic_js_1.Container, { p: "lg", children: isWalletGroupExpanded ? ((0, jsx_runtime_1.jsx)(basic_js_1.ModalHeader, { title: twTitle, onBack: () => {
                        setIsWalletGroupExpanded(false);
                    } })) : (twTitle) })), (0, jsx_runtime_1.jsxs)(basic_js_1.Container, { expand: true, scrollY: true, px: "md", style: !showHeader
                    ? {
                        paddingTop: index_js_1.spacing.lg,
                    }
                    : {
                        paddingTop: "2px",
                    }, children: [!showHeader && isWalletGroupExpanded && ((0, jsx_runtime_1.jsx)(basic_js_1.Container, { flex: "row", center: "y", style: {
                            padding: index_js_1.spacing.sm,
                            paddingTop: 0,
                        }, children: (0, jsx_runtime_1.jsxs)(buttons_js_1.IconButton, { onClick: () => {
                                setIsWalletGroupExpanded(false);
                            }, style: {
                                gap: index_js_1.spacing.xxs,
                                transform: `translateX(-${index_js_1.spacing.xs})`,
                                paddingBlock: index_js_1.spacing.xxs,
                                paddingRight: index_js_1.spacing.xs,
                            }, children: [(0, jsx_runtime_1.jsx)(react_icons_1.ChevronLeftIcon, { width: index_js_1.iconSize.sm, height: index_js_1.iconSize.sm }), props.connectLocale.goBackButton] }) })), topSection] }), bottomSection, isCompact && props.meta.showThirdwebBranding !== false && ((0, jsx_runtime_1.jsx)(basic_js_1.Container, { py: "md", children: (0, jsx_runtime_1.jsx)(PoweredByTW_js_1.PoweredByThirdweb, {}) }))] }));
};
let _installedWallets = [];
function getInstalledWallets() {
    if (_installedWallets.length === 0) {
        const providers = (0, mipdStore_js_1.getInstalledWalletProviders)();
        const walletIds = providers.map((provider) => provider.info.rdns);
        _installedWallets = walletIds.map((w) => (0, create_wallet_js_1.createWallet)(w));
    }
    return _installedWallets;
}
/**
 * @internal
 */
const WalletSelection = (props) => {
    const wallets = (0, sortWallets_js_1.sortWallets)(props.wallets, props.recommendedWallets);
    const { screen } = (0, screen_js_1.useScreenContext)();
    const setSelectionData = (0, wallet_ui_states_provider_js_1.useSetSelectionData)();
    return ((0, jsx_runtime_1.jsxs)(WalletList, { style: {
            minHeight: "100%",
            maxHeight: "370px",
        }, children: [wallets.map((wallet) => {
                const isActive = screen
                    ? typeof screen === "object" && screen.id === wallet.id
                    : false;
                return ((0, jsx_runtime_1.jsx)("li", { children: wallet.id === "inApp" && props.size === "compact" ? ((0, jsx_runtime_1.jsx)(react_1.Suspense, { fallback: (0, jsx_runtime_1.jsx)(LoadingScreen_js_1.LoadingScreen, { height: "195px" }), children: (0, jsx_runtime_1.jsx)(InAppWalletSelectionUI, { done: () => props.done(wallet), select: () => props.selectWallet(wallet), wallet: wallet, goBack: props.goBack, client: props.client, connectLocale: props.connectLocale, size: props.size, recommendedWallets: props.recommendedWallets, chain: props.chain, disabled: props.disabled }) })) : ((0, jsx_runtime_1.jsx)(WalletEntryButton_js_1.WalletEntryButton, { walletId: wallet.id, selectWallet: () => {
                            if (!props.diableSelectionDataReset) {
                                setSelectionData({});
                            }
                            props.selectWallet(wallet);
                        }, connectLocale: props.connectLocale, client: props.client, recommendedWallets: props.recommendedWallets, isActive: isActive, badge: undefined })) }, wallet.id));
            }), props.onShowAll && props.showAllWallets !== false && ((0, jsx_runtime_1.jsx)(ButtonContainer, { children: (0, jsx_runtime_1.jsxs)(WalletEntryButton_js_1.WalletButtonEl, { onClick: props.onShowAll, children: [(0, jsx_runtime_1.jsxs)(ShowAllWalletsIcon, { children: [(0, jsx_runtime_1.jsx)("div", { "data-dot": true }), (0, jsx_runtime_1.jsx)("div", { "data-dot": true }), (0, jsx_runtime_1.jsx)("div", { "data-dot": true }), (0, jsx_runtime_1.jsx)("div", { "data-dot": true })] }), (0, jsx_runtime_1.jsxs)(basic_js_1.Container, { flex: "row", gap: "xs", children: [(0, jsx_runtime_1.jsx)(text_js_2.Text, { color: "primaryText", children: "All Wallets" }), (0, jsx_runtime_1.jsx)(BadgeText, { children: " 350+ " })] })] }) }))] }));
};
const BadgeText = /* @__PURE__ */ (0, elements_js_1.StyledDiv)(() => {
    const theme = (0, CustomThemeProvider_js_1.useCustomTheme)();
    return {
        backgroundColor: theme.colors.secondaryButtonBg,
        paddingBlock: "3px",
        paddingInline: index_js_1.spacing.xxs,
        fontSize: index_js_1.fontSize.xs,
        borderRadius: index_js_1.radius.sm,
        color: theme.colors.secondaryText,
    };
});
const ButtonContainer = /* @__PURE__ */ (0, elements_js_1.StyledDiv)(() => {
    const theme = (0, CustomThemeProvider_js_1.useCustomTheme)();
    return {
        "&:hover [data-dot]": {
            background: theme.colors.primaryText,
        },
    };
});
const ShowAllWalletsIcon = /* @__PURE__ */ (0, elements_js_1.StyledDiv)(() => {
    const theme = (0, CustomThemeProvider_js_1.useCustomTheme)();
    return {
        width: `${index_js_1.iconSize.xl}px`,
        height: `${index_js_1.iconSize.xl}px`,
        backgroundColor: theme.colors.tertiaryBg,
        border: `2px solid ${theme.colors.borderColor}`,
        borderRadius: index_js_1.radius.md,
        display: "grid",
        gridTemplateColumns: "1fr 1fr",
        justifyItems: "center",
        alignItems: "center",
        padding: index_js_1.spacing.xs,
        "& div": {
            transition: "background 200ms ease",
            background: theme.colors.secondaryText,
            borderRadius: "50%",
            width: "10px",
            height: "10px",
        },
    };
});
const WalletList = /* @__PURE__ */ (0, elements_js_1.StyledUl)({
    all: "unset",
    listStyleType: "none",
    display: "flex",
    flexDirection: "column",
    gap: "2px",
    boxSizing: "border-box",
    overflowY: "auto",
    flex: 1,
    ...basic_js_1.noScrollBar,
    // to show the box-shadow of inputs that overflows
    padding: "2px",
    margin: "-2px",
    marginBottom: 0,
    paddingBottom: index_js_1.spacing.lg,
});
const GradientDiv = /* @__PURE__ */ (0, elements_js_1.StyledDiv)((_) => {
    const theme = (0, CustomThemeProvider_js_1.useCustomTheme)();
    theme.colors.modalBg;
    return {
        height: index_js_1.spacing.lg,
        position: "absolute",
        top: `-${index_js_1.spacing.lg}`,
        left: 0,
        width: "100%",
        background: `linear-gradient(to bottom, transparent 0%, ${theme.colors.modalBg} 80%)`,
        pointerEvents: "none",
    };
});
//# sourceMappingURL=WalletSelector.js.map