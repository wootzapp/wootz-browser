"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.serializeTransaction = serializeTransaction;
const viem_1 = require("viem");
/**
 * Serializes a legacy, EIP-1559, EIP-2930, EIP-4844, or EIP-7702 transaction object.
 *
 * @param options - The serialization options.
 * @param options.transaction - The transaction object to be serialized.
 * @param [options.signature] - The signature to include with the transaction, if necessary.
 * @returns The serialized transaction.
 * @throws An error if the provided transaction object is invalid.
 * @transaction
 * @example
 * ```ts
 * import { serializeTransaction } from "thirdweb";
 *
 * const serializedTransaction = serializeTransaction({ transaction: {
 *    to: "0x",
 *    value: 0n,
 *  }
 * });
 * ```
 */
function serializeTransaction(options) {
    const { transaction } = options;
    // This is to maintain compatibility with our old interface (including the signature in the transaction object)
    const signature = (() => {
        if (options.signature)
            return options.signature;
        if (transaction.v === undefined && transaction.yParity === undefined) {
            return undefined;
        }
        if (transaction.r === undefined || transaction.s === undefined) {
            throw new Error("Invalid signature provided with transaction");
        }
        return {
            v: transaction.v,
            r: transaction.r,
            s: transaction.s,
            yParity: transaction.yParity,
        };
    })();
    return (0, viem_1.serializeTransaction)(transaction, signature); // Trust the options type-checking did its job and that the converted signature mirrors that type
}
//# sourceMappingURL=serialize-transaction.js.map