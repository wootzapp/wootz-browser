"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.inAppWallet = inAppWallet;
const in_app_core_js_1 = require("../core/wallet/in-app-core.js");
/**
 * Creates an in-app wallet.
 * @param createOptions - configuration options
 * @returns The created in-app wallet.
 * @example
 * ```ts
 * import { inAppWallet } from "thirdweb/wallets";
 *
 * const wallet = inAppWallet();
 *
 * const account = await wallet.connect({
 *   client,
 *   chain,
 *   strategy: "google",
 * });
 * ```
 *
 * Enable smart accounts and sponsor gas for your users:
 * ```ts
 * import { inAppWallet } from "thirdweb/wallets";
 * const wallet = inAppWallet({
 *  smartAccount: {
 *   chain: sepolia,
 *   sponsorGas: true,
 * },
 * });
 * ```
 *
 * Specify a logo for your login page
 * ```ts
 * import { inAppWallet } from "thirdweb/wallets";
 * const wallet = inAppWallet({
 *  metadata: {
 *   image: {
 *    src: "https://example.com/logo.png",
 *    alt: "My logo",
 *    width: 100,
 *    height: 100,
 *   },
 *  },
 * });
 * ```
 *
 * Hide the ability to export the private key within the Connect Modal
 * ```ts
 * import { inAppWallet } from "thirdweb/wallets";
 * const wallet = inAppWallet({
 *  hidePrivateKeyExport: true
 * });
 * ```
 * @wallet
 */
function inAppWallet(createOptions) {
    return (0, in_app_core_js_1.createInAppWallet)({
        createOptions,
        connectorFactory: async (client) => {
            const { InAppNativeConnector } = await Promise.resolve().then(() => require("./native-connector.js"));
            return new InAppNativeConnector({
                client,
                passkeyDomain: createOptions?.auth?.passkeyDomain,
            });
        },
    });
}
//# sourceMappingURL=in-app.js.map