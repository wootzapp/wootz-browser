import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { NATIVE_TOKEN_ADDRESS } from "../../../../../../constants/addresses.js";
import { formatNumber } from "../../../../../../utils/formatNumber.js";
import { toTokens } from "../../../../../../utils/units.js";
import { useCustomTheme } from "../../../../../core/design-system/CustomThemeProvider.js";
import { iconSize, spacing } from "../../../../../core/design-system/index.js";
import { useChainMetadata } from "../../../../../core/hooks/others/useChainQuery.js";
import { useActiveWallet } from "../../../../../core/hooks/wallets/useActiveWallet.js";
import { hasSponsoredTransactionsEnabled } from "../../../../../core/utils/wallet.js";
import { LoadingScreen } from "../../../../wallets/shared/LoadingScreen.js";
import { ChainIcon } from "../../../components/ChainIcon.js";
import { Img } from "../../../components/Img.js";
import { Spacer } from "../../../components/Spacer.js";
import { TokenIcon } from "../../../components/TokenIcon.js";
import { WalletImage } from "../../../components/WalletImage.js";
import { Container, Line, ModalHeader } from "../../../components/basic.js";
import { Button } from "../../../components/buttons.js";
import { Text } from "../../../components/text.js";
import { ConnectButton } from "../../ConnectButton.js";
import { useTransactionCostAndData } from "./main/useBuyTxStates.js";
export function TransactionModeScreen(props) {
    const { payUiOptions, client, payerAccount, supportedDestinations, onContinue, } = props;
    const { data: chainData } = useChainMetadata(payUiOptions.transaction.chain);
    const metadata = payUiOptions.metadata;
    const { data: transactionCostAndData } = useTransactionCostAndData({
        transaction: payUiOptions.transaction,
        account: payerAccount,
        supportedDestinations,
    });
    const theme = useCustomTheme();
    const activeWallet = useActiveWallet();
    const sponsoredTransactionsEnabled = hasSponsoredTransactionsEnabled(activeWallet);
    if (!transactionCostAndData || !chainData) {
        return _jsx(LoadingScreen, {});
    }
    return (_jsxs(Container, { p: "lg", children: [_jsx(ModalHeader, { title: metadata?.name || "Transaction" }), _jsx(Spacer, { y: "lg" }), _jsxs(Container, { children: [metadata?.image ? (_jsx(Img, { client: client, src: metadata?.image, style: {
                            width: "100%",
                            borderRadius: spacing.md,
                            backgroundColor: theme.colors.tertiaryBg,
                        } })) : activeWallet ? (_jsxs(Container, { flex: "row", center: "both", style: {
                            padding: spacing.md,
                            marginBottom: spacing.md,
                            borderRadius: spacing.md,
                            backgroundColor: theme.colors.tertiaryBg,
                        }, children: [_jsx(WalletImage, { size: iconSize.xl, id: activeWallet.id, client: client }), _jsx("div", { style: {
                                    flexGrow: 1,
                                    borderBottom: "6px dotted",
                                    borderColor: theme.colors.secondaryIconColor,
                                    marginLeft: spacing.md,
                                    marginRight: spacing.md,
                                } }), _jsx(ChainIcon, { client: client, size: iconSize.xl, chainIconUrl: chainData.icon?.url })] })) : null, _jsx(Spacer, { y: "md" }), _jsxs(Container, { flex: "row", children: [_jsx(Container, { flex: "column", expand: true, children: _jsx(Text, { size: "md", color: "primaryText", weight: 700, children: "Price" }) }), _jsx(Container, { expand: true, children: _jsxs(Container, { flex: "row", gap: "xs", center: "y", style: { justifyContent: "right" }, children: [_jsx(TokenIcon, { chain: payUiOptions.transaction.chain, client: props.client, size: "sm", token: transactionCostAndData.token }), _jsxs(Text, { color: "primaryText", size: "md", weight: 700, children: [String(formatNumber(Number(toTokens(transactionCostAndData.transactionValueWei, transactionCostAndData.decimals)), 6)), " ", transactionCostAndData.token.symbol] })] }) })] }), _jsx(Spacer, { y: "md" }), _jsx(Line, {}), _jsx(Spacer, { y: "md" }), _jsxs(Container, { flex: "row", children: [_jsx(Container, { flex: "column", expand: true, children: _jsx(Text, { size: "xs", color: "secondaryText", children: "Gas Fees" }) }), _jsx(Container, { expand: true, children: _jsx(Container, { flex: "row", gap: "xs", center: "y", style: { justifyContent: "right" }, children: _jsx(Text, { color: sponsoredTransactionsEnabled ? "success" : "primaryText", size: "xs", children: sponsoredTransactionsEnabled
                                            ? "Sponsored"
                                            : `${String(formatNumber(Number(toTokens(transactionCostAndData.gasCostWei, chainData.nativeCurrency.decimals)), 6))} ${chainData.nativeCurrency.symbol}` }) }) })] }), _jsx(Spacer, { y: "sm" }), _jsxs(Container, { flex: "row", children: [_jsx(Container, { flex: "column", expand: true, children: _jsx(Text, { size: "xs", color: "secondaryText", children: "Network" }) }), _jsx(Container, { expand: true, children: _jsxs(Container, { flex: "row", gap: "xs", center: "y", style: { justifyContent: "right" }, children: [_jsx(ChainIcon, { chainIconUrl: chainData.icon?.url, size: "xs", client: props.client }), _jsx(Text, { size: "xs", color: "secondaryText", style: { textAlign: "right" }, children: chainData.name })] }) })] })] }), _jsx(Spacer, { y: "xl" }), payerAccount ? (_jsx(Button, { variant: "accent", fullWidth: true, onClick: () => {
                    let totalCostWei = transactionCostAndData.transactionValueWei;
                    if (transactionCostAndData.token.address === NATIVE_TOKEN_ADDRESS &&
                        !sponsoredTransactionsEnabled) {
                        totalCostWei += transactionCostAndData.gasCostWei;
                    }
                    onContinue(toTokens(totalCostWei, transactionCostAndData.decimals), payUiOptions.transaction.chain, transactionCostAndData.token);
                }, children: "Choose Payment Method" })) : (_jsx("div", { children: _jsx(ConnectButton, { ...props.connectOptions, client: client, theme: theme, connectButton: {
                        style: {
                            width: "100%",
                        },
                    } }) }))] }));
}
//# sourceMappingURL=TransactionModeScreen.js.map