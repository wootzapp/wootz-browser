"use strict";
"use client";
Object.defineProperty(exports, "__esModule", { value: true });
const jsx_runtime_1 = require("react/jsx-runtime");
const wallet_ui_states_provider_js_1 = require("../../providers/wallet-ui-states-provider.js");
const WalletAuth_js_1 = require("../in-app/WalletAuth.js");
const useInAppWalletLocale_js_1 = require("../in-app/useInAppWalletLocale.js");
const GuestLogin_js_1 = require("../shared/GuestLogin.js");
const LoadingScreen_js_1 = require("../shared/LoadingScreen.js");
const OTPLoginUI_js_1 = require("../shared/OTPLoginUI.js");
const PassKeyLogin_js_1 = require("../shared/PassKeyLogin.js");
const SocialLogin_js_1 = require("../shared/SocialLogin.js");
const EcosystemWalletFormUI_js_1 = require("./EcosystemWalletFormUI.js");
/**
 *
 * @internal
 */
function EcosystemWalletConnectUI(props) {
    const data = (0, wallet_ui_states_provider_js_1.useSelectionData)();
    const setSelectionData = (0, wallet_ui_states_provider_js_1.useSetSelectionData)();
    const state = data;
    const localeId = props.connectLocale.id;
    const locale = (0, useInAppWalletLocale_js_1.useInAppWalletLocale)(localeId);
    if (!locale) {
        return (0, jsx_runtime_1.jsx)(LoadingScreen_js_1.LoadingScreen, {});
    }
    const goBackToMain = () => {
        if (props.size === "compact") {
            props.goBack?.();
        }
        setSelectionData({});
    };
    const done = () => {
        props.done();
        setSelectionData({});
    };
    const otpUserInfo = state?.emailLogin
        ? { email: state.emailLogin }
        : state?.phoneLogin
            ? { phone: state.phoneLogin }
            : undefined;
    if (otpUserInfo) {
        return ((0, jsx_runtime_1.jsx)(OTPLoginUI_js_1.OTPLoginUI, { userInfo: otpUserInfo, locale: locale, done: done, goBack: goBackToMain, wallet: props.wallet, chain: props.chain, client: props.client, size: props.size, isLinking: props.isLinking }));
    }
    if (state?.passkeyLogin) {
        return ((0, jsx_runtime_1.jsx)(PassKeyLogin_js_1.PassKeyLogin, { locale: props.connectLocale, wallet: props.wallet, done: done, onBack: goBackToMain, chain: props.chain, client: props.client, size: props.size, isLinking: props.isLinking }));
    }
    if (state?.socialLogin) {
        return ((0, jsx_runtime_1.jsx)(SocialLogin_js_1.SocialLogin, { socialAuth: state.socialLogin.type, locale: locale, done: done, goBack: goBackToMain, wallet: props.wallet, state: state, chain: props.chain, client: props.client, size: props.size, connectLocale: props.connectLocale, isLinking: props.isLinking }));
    }
    if (state?.walletLogin) {
        return ((0, jsx_runtime_1.jsx)(WalletAuth_js_1.WalletAuth, { meta: props.meta, inAppLocale: locale, walletConnect: props.walletConnect, wallet: props.wallet, client: props.client, size: props.size, done: done, onBack: goBackToMain || (() => setSelectionData({})), locale: props.connectLocale }));
    }
    if (state?.guestLogin) {
        return ((0, jsx_runtime_1.jsx)(GuestLogin_js_1.GuestLogin, { locale: locale, done: done, goBack: goBackToMain, wallet: props.wallet, state: state, client: props.client, size: props.size, connectLocale: props.connectLocale }));
    }
    return ((0, jsx_runtime_1.jsx)(EcosystemWalletFormUI_js_1.EcosystemWalletFormUIScreen, { select: () => { }, locale: locale, done: done, goBack: props.goBack, wallet: props.wallet, chain: props.chain, client: props.client, size: props.size, connectLocale: props.connectLocale, meta: props.meta, isLinking: props.isLinking }));
}
exports.default = EcosystemWalletConnectUI;
//# sourceMappingURL=EcosystemWalletConnectUI.js.map