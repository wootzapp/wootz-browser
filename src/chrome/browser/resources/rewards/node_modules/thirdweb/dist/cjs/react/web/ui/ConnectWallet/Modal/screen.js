"use strict";
"use client";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ScreenSetupContext = void 0;
exports.useSetupScreen = useSetupScreen;
exports.useScreenContext = useScreenContext;
const react_1 = require("react");
const useActiveAccount_js_1 = require("../../../../core/hooks/wallets/useActiveAccount.js");
const constants_js_1 = require("../constants.js");
exports.ScreenSetupContext = (0, react_1.createContext)(undefined);
/**
 * @internal
 */
function useSetupScreen(props) {
    let initialScreen = constants_js_1.reservedScreens.main;
    const socialLogin = props.wallets.find((w) => w.id === "embedded" || w.id === "inApp");
    if (props.wallets.length === 1 && props.wallets[0]) {
        initialScreen = props.wallets[0];
    }
    else if (props.size === "wide" && !props.welcomeScreen && socialLogin) {
        initialScreen = socialLogin;
    }
    const [screen, setScreen] = (0, react_1.useState)(initialScreen);
    const prevInitialScreen = (0, react_1.useRef)(initialScreen);
    const activeAccount = (0, useActiveAccount_js_1.useActiveAccount)();
    // when the initial screen changes, reset the screen to the initial screen ( if the modal is closed )
    (0, react_1.useEffect)(() => {
        if (initialScreen !== prevInitialScreen.current) {
            prevInitialScreen.current = initialScreen;
            setScreen(initialScreen);
        }
    }, [initialScreen]);
    // if on signature screen and suddenly the wallet is disconnected, go back to the main screen
    (0, react_1.useEffect)(() => {
        if (!activeAccount && screen === constants_js_1.reservedScreens.signIn) {
            setScreen(constants_js_1.reservedScreens.main);
        }
    }, [activeAccount, screen]);
    return {
        screen,
        setScreen,
        initialScreen,
    };
}
/**
 * @internal
 */
function useScreenContext() {
    const ctx = (0, react_1.useContext)(exports.ScreenSetupContext);
    if (!ctx) {
        throw new Error("useScreenContext must be used within a <ScreenSetupContext.Provider />");
    }
    return ctx;
}
//# sourceMappingURL=screen.js.map