import { ClientScopedStorage } from "../../in-app/core/authentication/client-scoped-storage.js";
/**
 * @internal
 */
export let walletConnectSessions;
/**
 * @internal
 */
export async function getSessions() {
    if (!walletConnectSessions) {
        return [];
    }
    const stringifiedSessions = await walletConnectSessions.getWalletConnectSessions();
    return JSON.parse(stringifiedSessions ?? "[]");
}
/**
 * @internal
 */
export function initializeSessionStore(options) {
    if (!walletConnectSessions) {
        walletConnectSessions = new ClientScopedStorage({
            storage: null, // TODO: inject storage
            clientId: options.clientId,
        });
    }
}
/**
 * @internal
 */
export async function saveSession(session) {
    if (!walletConnectSessions) {
        return;
    }
    const stringifiedSessions = await walletConnectSessions.getWalletConnectSessions();
    const sessions = JSON.parse(stringifiedSessions ?? "[]");
    sessions.push(session);
    await walletConnectSessions.saveWalletConnectSessions(JSON.stringify(sessions));
}
/**
 * @internal
 */
export async function removeSession(session) {
    if (!walletConnectSessions) {
        return;
    }
    const stringifiedSessions = await walletConnectSessions.getWalletConnectSessions();
    const sessions = JSON.parse(stringifiedSessions ?? "[]");
    const newSessions = sessions.filter((s) => s.topic !== session.topic);
    await walletConnectSessions.saveWalletConnectSessions(JSON.stringify(newSessions));
}
/**
 * @internal FOR TESTING ONLY
 */
export function setWalletConnectSessions(storage) {
    walletConnectSessions = storage;
}
//# sourceMappingURL=session-store.js.map