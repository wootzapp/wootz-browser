"use client";
import { jsx as _jsx } from "react/jsx-runtime";
import { useSelectionData, useSetSelectionData, } from "../../providers/wallet-ui-states-provider.js";
import { useScreenContext } from "../../ui/ConnectWallet/Modal/screen.js";
import { GuestLogin } from "../shared/GuestLogin.js";
import { LoadingScreen } from "../shared/LoadingScreen.js";
import { OTPLoginUI } from "../shared/OTPLoginUI.js";
import { PassKeyLogin } from "../shared/PassKeyLogin.js";
import { SocialLogin } from "../shared/SocialLogin.js";
import { InAppWalletFormUIScreen } from "./InAppWalletFormUI.js";
import { WalletAuth } from "./WalletAuth.js";
import { useInAppWalletLocale } from "./useInAppWalletLocale.js";
/**
 *
 * @internal
 */
function InAppWalletConnectUI(props) {
    const data = useSelectionData();
    const setSelectionData = useSetSelectionData();
    const state = data;
    const localeId = props.connectLocale.id;
    const locale = useInAppWalletLocale(localeId);
    const { initialScreen } = useScreenContext();
    if (!locale) {
        return _jsx(LoadingScreen, {});
    }
    // if the the modal starts out with the wallet's connect ui instead of wallet selector - going back to main screen requires staying on the same component and clearing the selection data
    // otherwise, we go back to the wallet selector by calling props.goBack
    const goBackToMain = () => {
        if (initialScreen === props.wallet) {
            setSelectionData({});
        }
        else {
            props.goBack?.();
            setSelectionData({});
        }
    };
    const done = () => {
        props.done();
        setSelectionData({});
    };
    const otpUserInfo = state?.emailLogin
        ? { email: state.emailLogin }
        : state?.phoneLogin
            ? { phone: state.phoneLogin }
            : undefined;
    if (otpUserInfo) {
        return (_jsx(OTPLoginUI, { userInfo: otpUserInfo, locale: locale, done: done, goBack: goBackToMain, wallet: props.wallet, chain: props.chain, client: props.client, size: props.size, isLinking: props.isLinking }));
    }
    if (state?.passkeyLogin) {
        return (_jsx(PassKeyLogin, { locale: props.connectLocale, wallet: props.wallet, done: done, onBack: goBackToMain, chain: props.chain, client: props.client, size: props.size, isLinking: props.isLinking }));
    }
    if (state?.walletLogin) {
        return (_jsx(WalletAuth, { meta: props.meta, inAppLocale: locale, walletConnect: props.walletConnect, wallet: props.wallet, client: props.client, size: props.size, done: done, onBack: goBackToMain || (() => setSelectionData({})), locale: props.connectLocale }));
    }
    if (state?.socialLogin) {
        return (_jsx(SocialLogin, { socialAuth: state.socialLogin.type, locale: locale, done: done, goBack: goBackToMain, wallet: props.wallet, state: state, chain: props.chain, client: props.client, size: props.size, connectLocale: props.connectLocale, isLinking: props.isLinking }));
    }
    if (state?.guestLogin) {
        return (_jsx(GuestLogin, { locale: locale, done: done, goBack: goBackToMain, wallet: props.wallet, state: state, client: props.client, size: props.size, connectLocale: props.connectLocale }));
    }
    return (_jsx(InAppWalletFormUIScreen, { select: () => { }, connectLocale: props.connectLocale, inAppWalletLocale: locale, done: done, goBack: props.goBack, wallet: props.wallet, client: props.client, meta: props.meta, size: props.size, chain: props.chain, isLinking: props.isLinking }));
}
export default InAppWalletConnectUI;
//# sourceMappingURL=InAppWalletConnectUI.js.map