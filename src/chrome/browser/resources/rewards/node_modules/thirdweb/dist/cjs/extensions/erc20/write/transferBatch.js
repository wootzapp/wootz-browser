"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.transferBatch = transferBatch;
const units_js_1 = require("../../../utils/units.js");
const multicall_js_1 = require("../../common/__generated__/IMulticall/write/multicall.js");
const transfer_js_1 = require("../__generated__/IERC20/write/transfer.js");
/**
 * Transfers a batch of ERC20 tokens from the sender's address to the specified recipient address.
 * @param options - The options for the batch transfer transaction.
 * @returns A promise that resolves to the prepared transaction.
 * @extension ERC20
 * @example
 * ```ts
 * import { transferBatch } from "thirdweb/extensions/erc20";
 * import { sendTransaction } from "thirdweb";
 *
 * const transaction = transferBatch({
 *  contract,
 *  batch: [
 *    {
 *      to: "0x...",
 *      amount: 100,
 *    },
 *    {
 *      to: "0x...",
 *      amount: "0.1",
 *    },
 * ]);
 *
 * await sendTransaction({ transaction, account });
 * ```
 */
function transferBatch(options) {
    return (0, multicall_js_1.multicall)({
        contract: options.contract,
        asyncParams: async () => {
            return {
                data: await Promise.all(options.batch.map(async (transfer) => {
                    let amount;
                    if ("amount" in transfer) {
                        // if we need to parse the amount from ether to gwei then we pull in the decimals extension
                        const { decimals } = await Promise.resolve().then(() => require("../read/decimals.js"));
                        // it's OK to call this multiple times because the call is cached
                        // if this fails we fall back to `18` decimals
                        const d = await decimals(options).catch(() => 18);
                        // turn ether into gwei
                        amount = (0, units_js_1.toUnits)(transfer.amount.toString(), d);
                    }
                    else {
                        amount = transfer.amountWei;
                    }
                    return (0, transfer_js_1.encodeTransfer)({
                        to: transfer.to,
                        value: amount,
                        overrides: {
                            erc20Value: {
                                amountWei: amount,
                                tokenAddress: options.contract.address,
                            },
                        },
                    });
                })),
            };
        },
    });
}
//# sourceMappingURL=transferBatch.js.map