"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isGetNFTSupported = void 0;
exports.getNFT = getNFT;
const fetchTokenMetadata_js_1 = require("../../../utils/nft/fetchTokenMetadata.js");
const parseNft_js_1 = require("../../../utils/nft/parseNft.js");
const totalSupply_js_1 = require("../__generated__/IERC1155/read/totalSupply.js");
const uri_js_1 = require("../__generated__/IERC1155/read/uri.js");
var uri_js_2 = require("../__generated__/IERC1155/read/uri.js");
Object.defineProperty(exports, "isGetNFTSupported", { enumerable: true, get: function () { return uri_js_2.isUriSupported; } });
/**
 * Retrieves information about a specific ERC1155 non-fungible token (NFT).
 * @param options - The options for retrieving the NFT.
 * @returns A promise that resolves to the NFT object.
 * @extension ERC1155
 * @example
 * ```ts
 * import { getNFT } from "thirdweb/extensions/erc1155";
 * const nft = await getNFT({
 *  contract,
 *  tokenId: 1n,
 * });
 * ```
 */
async function getNFT(options) {
    const [tokenUri, supply] = await Promise.all([
        (0, uri_js_1.uri)({
            contract: options.contract,
            tokenId: options.tokenId,
        }),
        (0, totalSupply_js_1.totalSupply)({
            contract: options.contract,
            id: options.tokenId,
            // in cases where the supply is not available -> fall back to 0
        }).catch(() => 0n),
    ]);
    return (0, parseNft_js_1.parseNFT)(await (0, fetchTokenMetadata_js_1.fetchTokenMetadata)({
        client: options.contract.client,
        tokenId: options.tokenId,
        tokenUri,
    }).catch(() => ({
        id: options.tokenId,
        type: "ERC1155",
        uri: tokenUri,
    })), {
        tokenId: options.tokenId,
        tokenUri,
        type: "ERC1155",
        owner: null,
        supply,
    });
}
//# sourceMappingURL=getNFT.js.map