"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.mapOffer = mapOffer;
const contract_js_1 = require("../../../contract/contract.js");
const units_js_1 = require("../../../utils/units.js");
const getCurrencyMetadata_js_1 = require("../../erc20/read/getCurrencyMetadata.js");
const utils_js_1 = require("../utils.js");
/**
 * @internal
 */
async function mapOffer(options) {
    const { latestBlock, rawOffer } = options;
    // process the listing
    const status = (0, utils_js_1.computeStatus)({
        listingStatus: rawOffer.status,
        blockTimeStamp: latestBlock.timestamp,
        // startTimestamp is always 0 for offers (they only have an expiration time not a start time)
        startTimestamp: 0n,
        endTimestamp: rawOffer.expirationTimestamp,
    });
    const [currencyValuePerToken, nftAsset] = await Promise.all([
        (0, getCurrencyMetadata_js_1.getCurrencyMetadata)({
            contract: (0, contract_js_1.getContract)({
                ...options.contract,
                address: rawOffer.currency,
            }),
        }),
        (0, utils_js_1.getNFTAsset)({
            ...options,
            contract: (0, contract_js_1.getContract)({
                ...options.contract,
                address: rawOffer.assetContract,
            }),
            tokenId: rawOffer.tokenId,
        }),
    ]);
    return {
        id: rawOffer.offerId,
        offerorAddress: rawOffer.offeror,
        assetContractAddress: rawOffer.assetContract,
        tokenId: rawOffer.tokenId,
        quantity: rawOffer.quantity,
        currencyContractAddress: rawOffer.currency,
        currencyValue: {
            ...currencyValuePerToken,
            value: rawOffer.totalPrice,
            displayValue: (0, units_js_1.toTokens)(rawOffer.totalPrice, currencyValuePerToken.decimals),
        },
        totalPrice: rawOffer.totalPrice,
        asset: nftAsset,
        endTimeInSeconds: rawOffer.expirationTimestamp,
        status,
    };
}
//# sourceMappingURL=utils.js.map