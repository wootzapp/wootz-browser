import type { Chain } from "../../../../chains/types.js";
import type { ThirdwebClient } from "../../../../client/client.js";
import type { Wallet } from "../../../../wallets/interfaces/wallet.js";
import type { SmartWalletOptions } from "../../../../wallets/smart/types.js";
import type { WalletId } from "../../../../wallets/wallet-types.js";
import type { ConnectLocale } from "./locale/types.js";
type WalletSelectorProps = {
    wallets: Wallet[];
    selectWallet: (wallet: Wallet) => void;
    title: string;
    done: (wallet: Wallet) => void;
    goBack?: () => void;
    onShowAll: () => void;
    setModalVisibility: (value: boolean) => void;
    accountAbstraction?: SmartWalletOptions;
    size: "compact" | "wide";
    meta: {
        title?: string;
        titleIconUrl?: string;
        showThirdwebBranding?: boolean;
        termsOfServiceUrl?: string;
        privacyPolicyUrl?: string;
        requireApproval?: boolean;
    };
    client: ThirdwebClient;
    connectLocale: ConnectLocale;
    recommendedWallets: Wallet[] | undefined;
    hideHeader: boolean;
    chain: Chain | undefined;
    chains: Chain[] | undefined;
    showAllWallets: boolean | undefined;
    walletConnect: {
        projectId?: string;
    } | undefined;
    modalHeader: {
        title: string;
        onBack: () => void;
    } | undefined;
    walletIdsToHide: WalletId[] | undefined;
    disableSelectionDataReset?: boolean;
};
/**
 * @internal
 */
export declare function WalletSelector(props: WalletSelectorProps): import("react/jsx-runtime.js").JSX.Element;
export {};
//# sourceMappingURL=WalletSelector.d.ts.map