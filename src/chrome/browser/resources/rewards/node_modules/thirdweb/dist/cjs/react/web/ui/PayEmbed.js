"use strict";
"use client";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PayEmbed = PayEmbed;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
const CustomThemeProvider_js_1 = require("../../core/design-system/CustomThemeProvider.js");
const connection_manager_js_1 = require("../../core/providers/connection-manager.js");
const ConnectEmbed_js_1 = require("./ConnectWallet/Modal/ConnectEmbed.js");
const getConnectLocale_js_1 = require("./ConnectWallet/locale/getConnectLocale.js");
const BuyScreen_js_1 = require("./ConnectWallet/screens/Buy/BuyScreen.js");
const ExecutingScreen_js_1 = require("./TransactionButton/ExecutingScreen.js");
const DynamicHeight_js_1 = require("./components/DynamicHeight.js");
const Spinner_js_1 = require("./components/Spinner.js");
/**
 * Embed thirdweb Pay UI for Buy tokens using Crypto or Credit Card.
 *
 * PayEmbed also renders a "Connect" button if the user is not connected to a wallet. You can customize the options for "Connect" button using the `connectOptions` prop.
 *
 * @param props - Props of type [`PayEmbedProps`](https://portal.thirdweb.com/references/typescript/v5/PayEmbedProps) to configure the PayEmbed component.
 *
 * @example
 * ```tsx
 * <PayEmbed
 *   client={client}
 *   connectOptions={{
 *     connectModal: {
 *       size: 'compact',
 *     }
 *   }}
 *   payOptions={{
 *     buyWithCrypto: false,
 *   }}
 *  />
 * ```
 */
function PayEmbed(props) {
    const localeQuery = (0, getConnectLocale_js_1.useConnectLocale)(props.locale || "en_US");
    const [screen, setScreen] = (0, react_1.useState)("buy");
    const theme = props.theme || "dark";
    const connectionManager = (0, connection_manager_js_1.useConnectionManager)();
    // Add props.chain and props.chains to defined chains store
    (0, react_1.useEffect)(() => {
        if (props.connectOptions?.chain) {
            connectionManager.defineChains([props.connectOptions?.chain]);
        }
    }, [props.connectOptions?.chain, connectionManager]);
    (0, react_1.useEffect)(() => {
        if (props.connectOptions?.chains) {
            connectionManager.defineChains(props.connectOptions?.chains);
        }
    }, [props.connectOptions?.chains, connectionManager]);
    let content = null;
    const metadata = props.payOptions && "metadata" in props.payOptions
        ? props.payOptions.metadata
        : null;
    if (!localeQuery.data) {
        content = ((0, jsx_runtime_1.jsx)("div", { style: {
                minHeight: "350px",
                display: "flex",
                justifyContent: "center",
                alignItems: "center",
            }, children: (0, jsx_runtime_1.jsx)(Spinner_js_1.Spinner, { size: "xl", color: "secondaryText" }) }));
    }
    else {
        content = ((0, jsx_runtime_1.jsxs)(jsx_runtime_1.Fragment, { children: [screen === "buy" && ((0, jsx_runtime_1.jsx)(BuyScreen_js_1.default, { title: metadata?.name || "Buy", isEmbed: true, supportedTokens: props.supportedTokens, theme: theme, client: props.client, connectLocale: localeQuery.data, hiddenWallets: props.hiddenWallets, payOptions: props.payOptions || {
                        mode: "fund_wallet",
                    }, onDone: () => {
                        if (props.payOptions?.mode === "transaction") {
                            setScreen("execute-tx");
                        }
                    }, connectOptions: props.connectOptions, onBack: undefined })), screen === "execute-tx" &&
                    props.payOptions?.mode === "transaction" &&
                    props.payOptions.transaction && ((0, jsx_runtime_1.jsx)(ExecutingScreen_js_1.ExecutingTxScreen, { tx: props.payOptions.transaction, closeModal: () => {
                        setScreen("buy");
                    }, onBack: () => {
                        setScreen("buy");
                    }, onTxSent: () => { } }))] }));
    }
    return ((0, jsx_runtime_1.jsx)(CustomThemeProvider_js_1.CustomThemeProvider, { theme: theme, children: (0, jsx_runtime_1.jsx)(ConnectEmbed_js_1.EmbedContainer, { modalSize: "compact", style: props.style, className: props.className, children: (0, jsx_runtime_1.jsx)(DynamicHeight_js_1.DynamicHeight, { children: content }) }) }));
}
//# sourceMappingURL=PayEmbed.js.map