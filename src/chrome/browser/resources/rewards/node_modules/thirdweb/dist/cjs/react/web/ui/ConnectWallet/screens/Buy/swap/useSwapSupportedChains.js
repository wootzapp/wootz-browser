"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.fetchBuySupportedDestinations = fetchBuySupportedDestinations;
exports.useBuySupportedDestinations = useBuySupportedDestinations;
exports.useBuySupportedSources = useBuySupportedSources;
const react_query_1 = require("@tanstack/react-query");
const utils_js_1 = require("../../../../../../../chains/utils.js");
const definitions_js_1 = require("../../../../../../../pay/utils/definitions.js");
const fetch_js_1 = require("../../../../../../../utils/fetch.js");
const withCache_js_1 = require("../../../../../../../utils/promise/withCache.js");
async function fetchBuySupportedDestinations(client, isTestMode) {
    return (0, withCache_js_1.withCache)(async () => {
        const fetchWithHeaders = (0, fetch_js_1.getClientFetch)(client);
        const res = await fetchWithHeaders(`${(0, definitions_js_1.getPaySupportedDestinations)()}?isTestMode=${isTestMode}`);
        const data = (await res.json());
        return data.result.map((item) => ({
            chain: (0, utils_js_1.defineChain)({
                id: item.chainId,
            }),
            tokens: item.tokens,
        }));
    }, {
        cacheKey: "destination-tokens",
        cacheTime: 5 * 60 * 1000,
    });
}
/**
 * @internal
 */
function useBuySupportedDestinations(client, isTestMode) {
    return (0, react_query_1.useQuery)({
        queryKey: ["destination-tokens", client],
        queryFn: async () => {
            return fetchBuySupportedDestinations(client, isTestMode);
        },
    });
}
function useBuySupportedSources(options) {
    return (0, react_query_1.useQuery)({
        queryKey: ["source-tokens", options],
        queryFn: async () => {
            const fetchWithHeaders = (0, fetch_js_1.getClientFetch)(options.client);
            const baseUrl = (0, definitions_js_1.getPaySupportedSources)();
            const url = new URL(baseUrl);
            url.searchParams.append("destinationChainId", options.destinationChainId.toString());
            url.searchParams.append("destinationTokenAddress", options.destinationTokenAddress);
            const res = await fetchWithHeaders(url.toString());
            const data = (await res.json());
            return data.result.map((item) => ({
                chain: (0, utils_js_1.defineChain)({
                    id: item.chainId,
                }),
                tokens: item.tokens,
            }));
        },
    });
}
//# sourceMappingURL=useSwapSupportedChains.js.map