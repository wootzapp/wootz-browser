import type { ThirdwebContract } from "../../../contract/contract.js";
import type { BaseTransactionOptions } from "../../../transaction/types.js";
import type { Hex } from "../../../utils/encoding/hex.js";
import type { Account } from "../../../wallets/interfaces/wallet.js";
/**
 * Mints ERC20 tokens to a specified address with a signature via a MintableERC20 module.
 * @param options The options for minting tokens.
 * @returns A transaction to mint tokens.
 * @example
 * ```typescript
 * import { MintableERC20 } from "thirdweb/modules";
 *
 * // generate the payload and signature, this is typically done on the server
 * // requires to be generated with a wallet that has the MINTER_ROLE
 * const { payload, signature } = await MintableERC20.generateMintSignature({
 *   account,
 *   contract,
 *   mintRequest: {
 *     recipient: "0x...",
 *     quantity: "10",
 *   },
 * });
 *
 * // prepare the transaction, this is typically done on the client
 * // can be executed by any wallet
 * const transaction = MintableERC20.mintWithSignature({
 *   contract,
 *   payload,
 *   signature,
 * });
 *
 * // Send the transaction
 * await sendTransaction({ transaction, account });
 * ```
 * @modules MintableERC20
 */
export declare function mintWithSignature(options: BaseTransactionOptions<Awaited<ReturnType<typeof generateMintSignature>>>): import("../../../transaction/prepare-transaction.js").PreparedTransaction<any, import("abitype").AbiFunction, import("../../../transaction/prepare-transaction.js").PrepareTransactionOptions>;
export type GenerateMintSignatureOptions = {
    account: Account;
    contract: ThirdwebContract;
    mintRequest: GeneratePayloadInput;
};
/**
 * Generates a mint signature for a given mint request to be used with a MintableERC20 module.
 * @param options The options for minting tokens.
 * @returns A transaction to mint tokens.
 * @example
 * ```typescript
 * import { MintableERC20 } from "thirdweb/modules";
 *
 * // generate the payload and signature, this is typically done on the server
 * // requires to be generated with a wallet that has the MINTER_ROLE
 * const { payload, signature } = await MintableERC20.generateMintSignature({
 *   account,
 *   contract,
 *   mintRequest: {
 *     recipient: "0x...",
 *     quantity: "10",
 *   },
 * });
 *
 * // prepare the transaction, this is typically done on the client
 * // can be executed by any wallet
 * const transaction = MintableERC20.mintWithSignature({
 *   contract,
 *   payload,
 *   signature,
 * });
 *
 * // Send the transaction
 * await sendTransaction({ transaction, account });
 * ```
 * @modules MintableERC20
 */
export declare function generateMintSignature(options: GenerateMintSignatureOptions): Promise<{
    payload: {
        to: `0x${string}`;
        amount: bigint;
        data: `0x${string}`;
    };
    signature: `0x${string}`;
}>;
type GeneratePayloadInput = {
    validityStartTimestamp?: Date;
    validityEndTimestamp?: Date;
    recipient: string;
    currency?: string;
    pricePerUnit?: bigint;
    uid?: Hex;
} & ({
    quantity: string;
} | {
    quantityWei: bigint;
});
export {};
//# sourceMappingURL=mintWithSignature.d.ts.map