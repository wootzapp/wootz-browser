"use client";
import { jsx as _jsx, Fragment as _Fragment, jsxs as _jsxs } from "react/jsx-runtime";
import { useState } from "react";
import { getThirdwebDomains } from "../../../../../utils/domains.js";
import { isEcosystemWallet } from "../../../../../wallets/ecosystem/is-ecosystem-wallet.js";
import { Spacer } from "../../components/Spacer.js";
import { Spinner } from "../../components/Spinner.js";
import { Container, Line, ModalHeader } from "../../components/basic.js";
/**
 * @internal
 */
export function PrivateKey(props) {
    const [isLoading, setLoading] = useState(true);
    if (!props.wallet) {
        throw new Error("[PrivateKey] No wallet found");
    }
    const baseDomain = getThirdwebDomains().inAppWallet;
    const ecosystem = isEcosystemWallet(props.wallet)
        ? { id: props.wallet.id, partnerId: props.wallet.getConfig()?.partnerId }
        : undefined;
    return (_jsxs(Container, { style: {
            minHeight: "300px",
        }, children: [_jsx(Container, { p: "lg", children: _jsx(ModalHeader, { title: "Export Private Key", onBack: props.onBack }) }), _jsx(Line, {}), _jsxs(Container, { px: "sm", scrollY: true, style: {
                    maxHeight: "500px",
                }, children: [_jsx(Spacer, { y: "md" }), _jsxs(Container, { style: { position: "relative", height: "250px" }, children: [isLoading ? (_jsx(Container, { center: "both", flex: "column", style: { position: "absolute", width: "100%", height: "100%" }, children: _jsx(Spinner, { size: "lg", color: "primaryButtonBg" }) })) : (_jsx(_Fragment, {})), _jsx(Container, { style: {
                                    position: "absolute",
                                    height: "100%",
                                    width: "100%",
                                    zIndex: 11,
                                }, children: _jsx("iframe", { title: "Export In-App Wallet", style: {
                                        width: "100%",
                                        height: "250px",
                                        visibility: isLoading ? "hidden" : "unset",
                                    }, onLoad: () => {
                                        setLoading(false);
                                    }, allow: "clipboard-read; clipboard-write", src: `${baseDomain.includes("localhost") ? "http" : "https"}://${baseDomain}/sdk/2022-08-12/embedded-wallet/export-private-key?clientId=${props.client.clientId}&theme=${typeof props.theme === "string" ? props.theme : props.theme.type}${ecosystem ? `&ecosystemId=${ecosystem.id}` : ""}${ecosystem?.partnerId ? `&partnerId=${ecosystem.partnerId}` : ""}` }) })] }), _jsx(Spacer, { y: "lg" })] })] }));
}
//# sourceMappingURL=PrivateKey.js.map