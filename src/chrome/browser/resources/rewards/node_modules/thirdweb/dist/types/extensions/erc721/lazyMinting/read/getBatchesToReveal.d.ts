import type { BaseTransactionOptions } from "../../../../transaction/types.js";
import type { NFTMetadata } from "../../../../utils/nft/parseNft.js";
/**
 * @extension ERC721
 */
export interface BatchToReveal {
    batchId: bigint;
    batchUri: string;
    placeholderMetadata: NFTMetadata;
}
/**
 * Retrieves the batches available to reveal in an NFT contract.
 *
 * @param options {BaseTransactionOptions} - The transaction options.
 * @param options.contract {@link ThirdwebContract} - The NFT contract instance.
 * @returns A promise resolving to an array of unrevealed batches.
 *
 * @note Use the `batchId` and corresponding password for each batch to reveal it with `reveal`. {@see reveal}
 * @extension ERC721
 * @example
 * ```ts
 * import { getBatchesToReveal } from "thirdweb/extensions/erc721";
 *
 * const batches = await getBatchesToReveal({ contract: contract });
 *
 * const { transactionHash } = await sendTransaction({ transaction, account });
 * ```
 */
export declare function getBatchesToReveal(options: BaseTransactionOptions): Promise<BatchToReveal[]>;
/**
 * Checks if the `getBatchesToReveal` method is supported by the given contract.
 * @param availableSelectors An array of 4byte function selectors of the contract. You can get this in various ways, such as using "whatsabi" or if you have the ABI of the contract available you can use it to generate the selectors.
 * @returns A boolean indicating if the `getBatchesToReveal` method is supported.
 * @extension ERC721
 * @example
 * ```ts
 * import { isGetBatchesToRevealSupported } from "thirdweb/extensions/erc721";
 *
 * const supported = isGetBatchesToRevealSupported(["0x..."]);
 * ```
 */
export declare function isGetBatchesToRevealSupported(availableSelectors: string[]): boolean;
//# sourceMappingURL=getBatchesToReveal.d.ts.map