import type { ThirdwebClient } from "../../../../client/client.js";
import type { Prettify } from "../../../../utils/type-utils.js";
import type { Account } from "../../../interfaces/wallet.js";
import { ClientScopedStorage } from "../../core/authentication/client-scoped-storage.js";
import { type GetUser, type WalletAddressObjectType } from "../../core/authentication/types.js";
import type { Ecosystem } from "../types.js";
import type { IWebWallet, PostWalletSetup } from "./web-wallet.js";
export type UserStatus = {
    linkedAccounts: {
        type: string;
        details: {
            email: string;
            [key: string]: string;
        } | {
            phone: string;
            [key: string]: string;
        } | {
            address: string;
            [key: string]: string;
        } | {
            id: string;
            [key: string]: string;
        };
    }[];
    wallets: [
        {
            address: string;
            createdAt: string;
            type: "sharded" | "enclave";
        }
    ] | [];
    id: string;
};
export declare class EnclaveWallet implements IWebWallet {
    client: ThirdwebClient;
    ecosystem?: Ecosystem;
    address: string;
    protected localStorage: ClientScopedStorage;
    constructor({ client, ecosystem, address, }: Prettify<{
        client: ThirdwebClient;
        ecosystem?: Ecosystem;
        address: string;
    }>);
    /**
     * Store the auth token for use
     * @returns `{walletAddress: string }` The user's wallet details
     * @internal
     */
    postWalletSetUp({ walletAddress, authToken, }: PostWalletSetup): Promise<WalletAddressObjectType>;
    /**
     * Gets the current user's details
     * @internal
     */
    getUserWalletStatus(): Promise<GetUser>;
    /**
     * Returns an account to perform wallet operations
     * @internal
     */
    getAccount(): Promise<Account>;
}
//# sourceMappingURL=enclave-wallet.d.ts.map