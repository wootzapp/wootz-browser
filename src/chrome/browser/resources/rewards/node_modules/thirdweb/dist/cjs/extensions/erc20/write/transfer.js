"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.transfer = transfer;
const units_js_1 = require("../../../utils/units.js");
const transfer_js_1 = require("../__generated__/IERC20/write/transfer.js");
/**
 * Transfers ERC20 tokens from the sender's address to the specified recipient address.
 * @param options - The options for the transfer transaction.
 * @returns A promise that resolves to the prepared transaction.
 * @extension ERC20
 * @example
 * ```ts
 * import { transfer } from "thirdweb/extensions/erc20";
 * import { sendTransaction } from "thirdweb";
 *
 * const transaction = transfer({
 *  contract,
 *  to: "0x...",
 *  amount: 100,
 * });
 *
 * await sendTransaction({ transaction, account });
 * ```
 */
function transfer(options) {
    return (0, transfer_js_1.transfer)({
        contract: options.contract,
        asyncParams: async () => {
            let amount;
            if ("amount" in options) {
                // if we need to parse the amount from ether to gwei then we pull in the decimals extension
                const { decimals } = await Promise.resolve().then(() => require("../read/decimals.js"));
                // if this fails we fall back to `18` decimals
                const d = await decimals(options).catch(() => 18);
                // turn ether into gwei
                amount = (0, units_js_1.toUnits)(options.amount.toString(), d);
            }
            else {
                amount = options.amountWei;
            }
            return {
                to: options.to,
                value: amount,
                overrides: {
                    erc20Value: {
                        amountWei: amount,
                        tokenAddress: options.contract.address,
                    },
                },
            };
        },
    });
}
//# sourceMappingURL=transfer.js.map