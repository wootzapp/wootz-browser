import { getClientFetch } from "../../utils/fetch.js";
import { getPayBuyWithFiatHistoryEndpoint } from "../utils/definitions.js";
/**
 * Get the "Buy with fiat" transaction history for a given wallet address
 * @param params Object of type [`BuyWithFiatHistoryParams`](https://portal.thirdweb.com/references/typescript/v5/BuyWithFiatHistoryParams)
 * @example
 *
 * ```ts
 * import { createThirdwebClient } from "thirdweb";
 * import { getBuyWithFiatHistory } from "thirdweb/pay";
 *
 * const client = createThirdwebClient({ clientId: "..." });
 *
 * // get the 10 latest "Buy with fiat" transactions dony by the wallet
 * const history = await getBuyWithFiatHistory({
 *  client: client,
 *  walletAddress: '0x...',
 *  start: 0,
 *  count: 10,
 * })
 * ```
 * @returns Object of type [`BuyWithFiatHistoryData`](https://portal.thirdweb.com/references/typescript/v5/BuyWithFiatHistoryData)
 * @buyCrypto
 */
export async function getBuyWithFiatHistory(params) {
    try {
        const queryParams = new URLSearchParams();
        queryParams.append("walletAddress", params.walletAddress);
        queryParams.append("start", params.start.toString());
        queryParams.append("count", params.count.toString());
        const queryString = queryParams.toString();
        const url = `${getPayBuyWithFiatHistoryEndpoint()}?${queryString}`;
        const response = await getClientFetch(params.client)(url);
        // Assuming the response directly matches the BuyWithFiatStatus response interface
        if (!response.ok) {
            response.body?.cancel();
            throw new Error(`HTTP error! status: ${response.status}`);
        }
        const data = (await response.json()).result;
        return data;
    }
    catch (error) {
        throw new Error(`Fetch failed: ${error}`);
    }
}
//# sourceMappingURL=getHistory.js.map