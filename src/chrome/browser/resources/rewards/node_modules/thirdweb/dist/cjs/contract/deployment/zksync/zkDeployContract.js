"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.zkDeployContract = zkDeployContract;
const zksync_1 = require("viem/zksync");
const parse_logs_js_1 = require("../../../event/actions/parse-logs.js");
const ContractDeployed_js_1 = require("../../../extensions/zksync/__generated__/ContractDeployer/events/ContractDeployed.js");
const send_and_confirm_transaction_js_1 = require("../../../transaction/actions/send-and-confirm-transaction.js");
const prepare_transaction_js_1 = require("../../../transaction/prepare-transaction.js");
const normalizeFunctionParams_js_1 = require("../../../utils/abi/normalizeFunctionParams.js");
const constants_js_1 = require("../../../utils/any-evm/zksync/constants.js");
const zkDeployDeterministic_js_1 = require("./zkDeployDeterministic.js");
/**
 * @internal
 */
async function zkDeployContract(options) {
    if (options.salt !== undefined) {
        // if a salt is provided, use the deterministic deployer
        return (0, zkDeployDeterministic_js_1.zkDeployContractDeterministic)(options);
    }
    const data = (0, zksync_1.encodeDeployData)({
        abi: options.abi,
        bytecode: options.bytecode,
        deploymentType: "create",
        args: (0, normalizeFunctionParams_js_1.normalizeFunctionParams)(options.abi.find((abi) => abi.type === "constructor"), options.params),
    });
    const receipt = await (0, send_and_confirm_transaction_js_1.sendAndConfirmTransaction)({
        account: options.account,
        transaction: (0, prepare_transaction_js_1.prepareTransaction)({
            chain: options.chain,
            client: options.client,
            to: constants_js_1.CONTRACT_DEPLOYER_ADDRESS,
            data,
            eip712: {
                factoryDeps: [options.bytecode],
                // TODO (zksync): allow passing in a paymaster
            },
        }),
    });
    const events = (0, parse_logs_js_1.parseEventLogs)({
        logs: receipt.logs,
        events: [(0, ContractDeployed_js_1.contractDeployedEvent)()],
    });
    const contractAddress = events[0]?.args.contractAddress;
    if (!contractAddress) {
        throw new Error("Contract creation failed");
    }
    return contractAddress;
}
//# sourceMappingURL=zkDeployContract.js.map