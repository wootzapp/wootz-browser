import { getCachedChain } from "../../chains/utils.js";
import { getContract } from "../../contract/contract.js";
import { approve } from "../../extensions/erc20/write/approve.js";
import { getClientFetch } from "../../utils/fetch.js";
import { getPayBuyWithCryptoQuoteEndpoint } from "../utils/definitions.js";
/**
 * Get a quote of type [`BuyWithCryptoQuote`](https://portal.thirdweb.com/references/typescript/v5/BuyWithCryptoQuote) to buy any given token with crypto.
 * This quote contains the information about the swap such as token amounts, processing fees, estimated time etc.
 *
 * Once you have the quote, you can use `prepareTransaction` and prepare the transaction for submission.
 * @param params - object of type [`GetBuyWithCryptoQuoteParams`](https://portal.thirdweb.com/references/typescript/v5/GetBuyWithCryptoQuoteParams)
 * @returns Object of type [`BuyWithCryptoQuote`](https://portal.thirdweb.com/references/typescript/v5/BuyWithCryptoQuote) which contains the information about the quote such as processing fees, estimated time, converted token amounts, etc.
 * @example
 *
 * ```ts
 * import { getBuyWithCryptoQuote } from "thirdweb/pay";
 *
 * const quote = await getBuyWithCryptoQuote({
 *  client,
 *  fromAddress: "0x...", // wallet address
 *  fromChainId: 137, // chain id of the source token
 *  fromTokenAddress: "0x...", // token address of the source token
 *  fromAmount: "10", // amount of source token to swap
 *  // optionally, you can use `toAmount` instead if you only want a certain amount of destination token
 *  toChainId: 10, // chain id of the destination token
 *  toTokenAddress: "0x...", // token address of the destination token
 *  toAddress: "0x...", // optional: send the tokens to a different address
 *  maxSlippageBPS: 50, // optional: max 0.5% slippage
 * });
 * ```
 * @buyCrypto
 */
export async function getBuyWithCryptoQuote(params) {
    try {
        const clientFetch = getClientFetch(params.client);
        const response = await clientFetch(getPayBuyWithCryptoQuoteEndpoint(), {
            method: "POST",
            headers: {
                Accept: "application/json",
                "Content-Type": "application/json",
            },
            body: JSON.stringify({
                fromAddress: params.fromAddress,
                toAddress: params.toAddress,
                fromChainId: params.fromChainId.toString(),
                fromTokenAddress: params.fromTokenAddress,
                toChainId: params.toChainId.toString(),
                toTokenAddress: params.toTokenAddress,
                fromAmount: params.fromAmount,
                toAmount: params.toAmount,
                maxSlippageBPS: params.maxSlippageBPS,
                intentId: params.intentId,
                purchaseData: params.purchaseData,
            }),
        });
        // Assuming the response directly matches the SwapResponse interface
        if (!response.ok) {
            const errorObj = await response.json();
            if (errorObj && "error" in errorObj) {
                throw errorObj;
            }
            throw new Error(`HTTP error! status: ${response.status}`);
        }
        const data = (await response.json())
            .result;
        const swapRoute = {
            transactionRequest: {
                chain: getCachedChain(data.transactionRequest.chainId),
                client: params.client,
                data: data.transactionRequest.data,
                to: data.transactionRequest.to,
                value: BigInt(data.transactionRequest.value),
                gas: BigInt(data.transactionRequest.gasLimit),
                gasPrice: BigInt(data.transactionRequest.gasPrice),
            },
            approval: data.approval
                ? approve({
                    contract: getContract({
                        client: params.client,
                        address: data.approval.tokenAddress,
                        chain: getCachedChain(data.approval.chainId),
                    }),
                    spender: data.approval?.spenderAddress,
                    amountWei: BigInt(data.approval.amountWei),
                })
                : undefined,
            swapDetails: {
                fromAddress: data.fromAddress,
                toAddress: data.toAddress,
                fromToken: data.fromToken,
                toToken: data.toToken,
                fromAmount: data.fromAmount,
                fromAmountWei: data.fromAmountWei,
                toAmountMinWei: data.toAmountMinWei,
                toAmountMin: data.toAmountMin,
                toAmountWei: data.toAmountWei,
                toAmount: data.toAmount,
                estimated: data.estimated,
                maxSlippageBPS: data.maxSlippageBPS,
            },
            paymentTokens: data.paymentTokens,
            processingFees: data.processingFees,
            client: params.client,
        };
        return swapRoute;
    }
    catch (error) {
        console.error("Error getting buy with crypto quote", error);
        throw error;
    }
}
//# sourceMappingURL=getQuote.js.map