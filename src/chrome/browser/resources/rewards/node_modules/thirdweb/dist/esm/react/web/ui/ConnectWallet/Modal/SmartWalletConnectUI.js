"use client";
import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { ExclamationTriangleIcon } from "@radix-ui/react-icons";
import { useQuery } from "@tanstack/react-query";
import { useCallback, useEffect, useRef, useState } from "react";
import { fontSize, iconSize, spacing, } from "../../../../core/design-system/index.js";
import { useConnectionManager } from "../../../../core/providers/connection-manager.js";
import { useWalletInfo } from "../../../../core/utils/wallet.js";
import { LoadingScreen } from "../../../wallets/shared/LoadingScreen.js";
import { getSmartWalletLocale } from "../../../wallets/smartWallet/locale/getSmartWalletLocale.js";
import { Spacer } from "../../components/Spacer.js";
import { Spinner } from "../../components/Spinner.js";
import { Container, ModalHeader } from "../../components/basic.js";
import { Button } from "../../components/buttons.js";
import { Text } from "../../components/text.js";
import { AnyWalletConnectUI } from "./AnyWalletConnectUI.js";
/**
 * @internal
 */
export function SmartConnectUI(props) {
    const personalWalletInfo = useWalletInfo(props.personalWallet.id);
    const [keyConnected, setKeyConnected] = useState(false);
    if (!personalWalletInfo.data) {
        return _jsx(LoadingScreen, {});
    }
    // connect personal wallet
    if (!keyConnected) {
        return (_jsx(AnyWalletConnectUI, { wallet: props.personalWallet, done: () => {
                setKeyConnected(true);
            }, onBack: props.onBack, setModalVisibility: props.setModalVisibility, chain: props.chain, chains: props.chains, client: props.client, meta: props.meta, size: props.size, walletConnect: props.walletConnect, connectLocale: props.connectLocale }));
    }
    return (_jsx(SmartWalletConnecting, { done: props.done, personalWallet: props.personalWallet, accountAbstraction: props.accountAbstraction, onBack: props.onBack, personalWalletInfo: personalWalletInfo.data, localeId: props.connectLocale.id, size: props.size, client: props.client }));
}
function SmartWalletConnecting(props) {
    const localeQuery = useQuery({
        queryKey: ["getSmartWalletLocale", props.localeId],
        queryFn: () => getSmartWalletLocale(props.localeId),
    });
    const { chain: smartWalletChain } = props.accountAbstraction;
    const { personalWallet } = props;
    const { done } = props;
    const [personalWalletChainId, setPersonalWalletChainId] = useState(personalWallet.getChain()?.id);
    useEffect(() => {
        const unsubChainChanged = personalWallet.subscribe("chainChanged", (chain) => setPersonalWalletChainId(chain.id));
        return () => {
            unsubChainChanged();
        };
    }, [personalWallet]);
    const wrongNetwork = personalWalletChainId !== smartWalletChain.id;
    const [smartWalletConnectionStatus, setSmartWalletConnectionStatus] = useState("idle");
    const [personalWalletChainSwitchStatus, setPersonalWalletChainSwitchStatus] = useState("idle");
    const connectionManager = useConnectionManager();
    const handleConnect = useCallback(async () => {
        if (!personalWallet) {
            throw new Error("No personal wallet");
        }
        setSmartWalletConnectionStatus("connecting");
        try {
            const connected = await connectionManager.handleConnection(personalWallet, {
                accountAbstraction: props.accountAbstraction,
                client: props.client,
            });
            done(connected);
            setSmartWalletConnectionStatus("idle");
        }
        catch (e) {
            console.error(e);
            setSmartWalletConnectionStatus("connect-error");
        }
    }, [
        done,
        personalWallet,
        props.client,
        props.accountAbstraction,
        connectionManager,
    ]);
    const connectStarted = useRef(false);
    useEffect(() => {
        if (!wrongNetwork && !connectStarted.current) {
            handleConnect();
            connectStarted.current = true;
        }
    }, [handleConnect, wrongNetwork]);
    if (!localeQuery.data) {
        return _jsx(LoadingScreen, {});
    }
    if (wrongNetwork) {
        return (_jsxs(Container, { fullHeight: true, animate: "fadein", flex: "column", children: [_jsx(Container, { p: "lg", children: _jsx(ModalHeader, { title: props.personalWalletInfo.name, onBack: props.onBack }) }), props.size === "compact" && _jsx(Spacer, { y: "lg" }), _jsx(Container, { expand: true, flex: "column", center: "both", p: "lg", children: _jsxs(Container, { p: props.size === "wide" ? "lg" : undefined, children: [_jsx(Container, { flex: "row", center: "x", color: "danger", children: _jsx(ExclamationTriangleIcon, { width: iconSize.lg, height: iconSize.lg }) }), _jsx(Spacer, { y: "md" }), _jsx(Text, { size: "lg", color: "primaryText", center: true, weight: 500, children: localeQuery.data.wrongNetworkScreen.title }), _jsx(Spacer, { y: "lg" }), _jsx(Text, { multiline: true, center: true, children: localeQuery.data.wrongNetworkScreen.subtitle }), _jsx(Spacer, { y: "xl" }), _jsxs(Container, { flex: "column", gap: "md", children: [_jsxs(Button, { type: "button", fullWidth: true, variant: "accent", style: {
                                            display: "flex",
                                            alignItems: "center",
                                            gap: spacing.sm,
                                        }, onClick: async () => {
                                            if (!personalWallet.switchChain) {
                                                setPersonalWalletChainSwitchStatus("switch-error");
                                                throw new Error("No switchChain method");
                                            }
                                            try {
                                                setPersonalWalletChainSwitchStatus("switching");
                                                await personalWallet.switchChain(smartWalletChain);
                                                const newChain = personalWallet.getChain();
                                                if (newChain) {
                                                    setPersonalWalletChainId(newChain.id);
                                                }
                                                setPersonalWalletChainSwitchStatus("idle");
                                            }
                                            catch (e) {
                                                console.error(e);
                                                setPersonalWalletChainSwitchStatus("switch-error");
                                            }
                                        }, children: [personalWalletChainSwitchStatus === "switching"
                                                ? "Switching"
                                                : "Switch Network", personalWalletChainSwitchStatus === "switching" && (_jsx(Spinner, { size: "sm", color: "accentButtonText" }))] }), _jsxs(Container, { flex: "row", gap: "sm", center: "both", color: "danger", style: {
                                            textAlign: "center",
                                            fontSize: fontSize.sm,
                                            opacity: personalWalletChainSwitchStatus === "switch-error" ? 1 : 0,
                                            transition: "opacity 200ms ease",
                                        }, children: [_jsx(ExclamationTriangleIcon, { width: iconSize.sm, height: iconSize.sm }), _jsx("span", { children: localeQuery.data.wrongNetworkScreen.failedToSwitch })] })] })] }) })] }));
    }
    if (smartWalletConnectionStatus === "connect-error") {
        return (_jsx(Container, { fullHeight: true, animate: "fadein", flex: "column", center: "both", p: "lg", style: {
                minHeight: "300px",
            }, children: _jsx(Text, { color: "danger", children: localeQuery.data.failedToConnect }) }));
    }
    return (_jsxs(Container, { fullHeight: true, flex: "column", center: "both", style: {
            minHeight: "300px",
        }, children: [_jsx(Text, { color: "primaryText", multiline: true, center: true, children: localeQuery.data.connecting }), _jsx(Spacer, { y: "lg" }), _jsx(Spinner, { color: "accentText", size: "lg" })] }));
}
//# sourceMappingURL=SmartWalletConnectUI.js.map