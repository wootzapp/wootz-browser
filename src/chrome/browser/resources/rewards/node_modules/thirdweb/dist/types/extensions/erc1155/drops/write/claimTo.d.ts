import type { BaseTransactionOptions } from "../../../../transaction/types.js";
/**
 * @extension ERC1155
 */
export type ClaimToParams = {
    to: string;
    tokenId: bigint;
    quantity: bigint;
    from?: string;
};
/**
 * Claim ERC1155 NFTs to a specified address
 * @param options - The options for the transaction
 * @extension ERC1155
 * @example
 * ```ts
 * import { claimTo } from "thirdweb/extensions/erc1155";
 * import { sendTransaction } from "thirdweb";
 *
 * const transaction = claimTo({
 *   contract,
 *   to: "0x...",
 *   tokenId: 0n,
 *   quantity: 1n,
 * });
 *
 * await sendTransaction({ transaction, account });
 * ```
 * @throws If no claim condition is set
 * @returns The prepared transaction
 */
export declare function claimTo(options: BaseTransactionOptions<ClaimToParams>): import("../../../../transaction/prepare-transaction.js").PreparedTransaction<any, import("abitype").AbiFunction, import("../../../../transaction/prepare-transaction.js").PrepareTransactionOptions>;
/**
 * Checks if the `claimTo` method is supported by the given contract.
 * @param availableSelectors An array of 4byte function selectors of the contract. You can get this in various ways, such as using "whatsabi" or if you have the ABI of the contract available you can use it to generate the selectors.
 * @returns A boolean indicating if the `claimTo` method is supported.
 * @extension ERC1155
 * @example
 * ```ts
 * import { isClaimToSupported } from "thirdweb/extensions/erc1155";
 *
 * const supported = isClaimToSupported(["0x..."]);
 * ```
 */
export declare function isClaimToSupported(availableSelectors: string[]): boolean;
//# sourceMappingURL=claimTo.d.ts.map