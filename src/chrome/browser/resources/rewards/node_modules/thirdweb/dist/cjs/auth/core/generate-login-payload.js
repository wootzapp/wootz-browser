"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.generateLoginPayload = generateLoginPayload;
const constants_js_1 = require("./constants.js");
/**
 * Generates a login payload based on the provided options.
 * @param options - The authentication options.
 * @returns A function that accepts login payload parameters and returns a promise that resolves to a login payload.
 * @internal
 */
function generateLoginPayload(options) {
    return async ({ address, chainId, }) => {
        const now = Date.now();
        const expirationTime = (options.login?.payloadExpirationTimeSeconds ||
            constants_js_1.DEFAULT_LOGIN_PAYLOAD_EXPIRATION) * 1000;
        return {
            address,
            chain_id: chainId ? chainId.toString() : undefined,
            domain: options.domain,
            expiration_time: new Date(now + expirationTime).toISOString(),
            invalid_before: new Date(now - expirationTime).toISOString(),
            issued_at: new Date(now).toISOString(),
            // use the user passed nonce generator or fall back to generationg uuid
            nonce: await (options.login?.nonce?.generate ||
                (() => Promise.resolve().then(() => require("../../utils/random.js")).then(({ randomBytesHex }) => randomBytesHex())))(),
            statement: options.login?.statement || constants_js_1.DEFAULT_LOGIN_STATEMENT,
            version: options.login?.version || constants_js_1.DEFAULT_LOGIN_VERSION,
            resources: options.login?.resources,
            uri: options.login?.uri,
        };
    };
}
//# sourceMappingURL=generate-login-payload.js.map