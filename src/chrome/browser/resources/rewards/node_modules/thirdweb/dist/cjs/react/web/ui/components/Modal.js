"use strict";
"use client";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CrossContainer = exports.Modal = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("@emotion/react");
const Dialog = require("@radix-ui/react-dialog");
const react_focus_scope_1 = require("@radix-ui/react-focus-scope");
const react_icons_1 = require("@radix-ui/react-icons");
const react_2 = require("react");
const CustomThemeProvider_js_1 = require("../../../core/design-system/CustomThemeProvider.js");
const index_js_1 = require("../../../core/design-system/index.js");
const constants_js_1 = require("../ConnectWallet/constants.js");
const elements_js_1 = require("../design-system/elements.js");
const DynamicHeight_js_1 = require("./DynamicHeight.js");
const Overlay_js_1 = require("./Overlay.js");
const basic_js_1 = require("./basic.js");
const buttons_js_1 = require("./buttons.js");
/**
 * @internal
 */
const Modal = (props) => {
    const [open, setOpen] = (0, react_2.useState)(props.open);
    const contentRef = (0, react_2.useRef)(null);
    const overlayRef = (0, react_2.useRef)(null);
    (0, react_2.useEffect)(() => {
        if (!props.open) {
            if (contentRef.current) {
                const animationConfig = {
                    duration: constants_js_1.modalCloseFadeOutDuration,
                    fill: "forwards",
                    easing: "ease",
                };
                contentRef.current.animate([{ opacity: 0 }], {
                    ...animationConfig,
                }).onfinish = () => {
                    setOpen(false);
                };
                overlayRef.current?.animate([{ opacity: 0 }], {
                    ...animationConfig,
                    duration: constants_js_1.modalCloseFadeOutDuration + 100,
                });
            }
            else {
                setOpen(props.open);
            }
        }
        else {
            setOpen(props.open);
        }
    }, [props.open]);
    return ((0, jsx_runtime_1.jsxs)(Dialog.Root, { open: open, onOpenChange: props.setOpen, children: [props.trigger && ((0, jsx_runtime_1.jsx)(Dialog.Trigger, { asChild: true, children: props.trigger })), (0, jsx_runtime_1.jsxs)(Dialog.Portal, { children: [!props.hide && ((0, jsx_runtime_1.jsx)(Dialog.Overlay, { asChild: true, children: (0, jsx_runtime_1.jsx)(Overlay_js_1.Overlay, { ref: overlayRef }) })), (0, jsx_runtime_1.jsx)(react_focus_scope_1.FocusScope, { trapped: !props.hide, children: (0, jsx_runtime_1.jsx)(Dialog.Content, { asChild: true, "aria-describedby": undefined, children: (0, jsx_runtime_1.jsxs)(DialogContent, { ref: contentRef, style: props.hide
                                    ? { width: 0, height: 0, overflow: "hidden", opacity: 0 }
                                    : {
                                        height: props.size === "compact" ? "auto" : constants_js_1.wideModalMaxHeight,
                                        maxWidth: props.size === "compact"
                                            ? constants_js_1.modalMaxWidthCompact
                                            : constants_js_1.modalMaxWidthWide,
                                    }, children: [(0, jsx_runtime_1.jsx)(Dialog.Title, { style: {
                                            position: "absolute",
                                            width: "1px",
                                            height: "1px",
                                            padding: 0,
                                            margin: "-1px",
                                            overflow: "hidden",
                                            clip: "rect(0, 0, 0, 0)",
                                            whiteSpace: "nowrap",
                                            borderWidth: 0,
                                        }, children: "Connect Modal" }), props.size === "compact" ? ((0, jsx_runtime_1.jsx)(DynamicHeight_js_1.DynamicHeight, { maxHeight: constants_js_1.compactModalMaxHeight, children: props.children })) : (props.children), !props.hideCloseIcon && ((0, jsx_runtime_1.jsx)(exports.CrossContainer, { children: (0, jsx_runtime_1.jsx)(Dialog.Close, { asChild: true, children: (0, jsx_runtime_1.jsx)(buttons_js_1.IconButton, { autoFocus: true, type: "button", "aria-label": "Close", children: (0, jsx_runtime_1.jsx)(react_icons_1.Cross2Icon, { width: index_js_1.iconSize.md, height: index_js_1.iconSize.md, style: {
                                                        color: "inherit",
                                                    } }) }) }) }))] }) }) })] })] }));
};
exports.Modal = Modal;
exports.CrossContainer = (0, elements_js_1.StyledDiv)({
    position: "absolute",
    top: index_js_1.spacing.lg,
    right: index_js_1.spacing.lg,
    transform: "translateX(6px)",
});
const modalAnimationDesktop = (0, react_1.keyframes) `
  from {
    opacity: 0;
    transform: translate(-50%, -48%) scale(0.96);
  }
  to {
    opacity: 1;
    transform: translate(-50%, -50%) scale(1);
  }
`;
const modalAnimationMobile = (0, react_1.keyframes) `
  from {
    opacity: 0;
    transform: translate(0, 50%);
  }
  to {
    opacity: 1;
    transform: translate(0, 0);
  }
`;
const DialogContent = /* @__PURE__ */ (0, elements_js_1.StyledDiv)((_) => {
    const theme = (0, CustomThemeProvider_js_1.useCustomTheme)();
    return {
        zIndex: 10000,
        background: theme.colors.modalBg,
        "--bg": theme.colors.modalBg,
        color: theme.colors.primaryText,
        borderRadius: index_js_1.radius.lg,
        position: "fixed",
        top: "50%",
        left: "50%",
        transform: "translate(-50%, -50%)",
        width: "calc(100vw - 40px)",
        boxSizing: "border-box",
        animation: `${modalAnimationDesktop} 300ms ease`,
        boxShadow: index_js_1.shadow.lg,
        lineHeight: "normal",
        border: `1px solid ${theme.colors.borderColor}`,
        outline: "none",
        overflow: "hidden",
        fontFamily: theme.fontFamily,
        "& *": {
            boxSizing: "border-box",
        },
        [index_js_1.media.mobile]: {
            top: "auto",
            bottom: 0,
            left: 0,
            right: 0,
            transform: "none",
            width: "100vw",
            animation: `${modalAnimationMobile} 0.35s cubic-bezier(0.15, 1.15, 0.6, 1)`,
            borderRadius: index_js_1.radius.xl,
            borderBottomRightRadius: 0,
            borderBottomLeftRadius: 0,
            maxWidth: "none !important",
        },
        "& *::selection": {
            backgroundColor: theme.colors.selectedTextBg,
            color: theme.colors.selectedTextColor,
        },
        ...basic_js_1.noScrollBar,
    };
});
//# sourceMappingURL=Modal.js.map