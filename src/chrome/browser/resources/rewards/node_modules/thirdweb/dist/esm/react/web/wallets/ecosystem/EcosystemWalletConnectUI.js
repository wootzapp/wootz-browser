"use client";
import { jsx as _jsx } from "react/jsx-runtime";
import { useSelectionData, useSetSelectionData, } from "../../providers/wallet-ui-states-provider.js";
import { WalletAuth } from "../in-app/WalletAuth.js";
import { useInAppWalletLocale } from "../in-app/useInAppWalletLocale.js";
import { GuestLogin } from "../shared/GuestLogin.js";
import { LoadingScreen } from "../shared/LoadingScreen.js";
import { OTPLoginUI } from "../shared/OTPLoginUI.js";
import { PassKeyLogin } from "../shared/PassKeyLogin.js";
import { SocialLogin } from "../shared/SocialLogin.js";
import { EcosystemWalletFormUIScreen } from "./EcosystemWalletFormUI.js";
/**
 *
 * @internal
 */
function EcosystemWalletConnectUI(props) {
    const data = useSelectionData();
    const setSelectionData = useSetSelectionData();
    const state = data;
    const localeId = props.connectLocale.id;
    const locale = useInAppWalletLocale(localeId);
    if (!locale) {
        return _jsx(LoadingScreen, {});
    }
    const goBackToMain = () => {
        if (props.size === "compact") {
            props.goBack?.();
        }
        setSelectionData({});
    };
    const done = () => {
        props.done();
        setSelectionData({});
    };
    const otpUserInfo = state?.emailLogin
        ? { email: state.emailLogin }
        : state?.phoneLogin
            ? { phone: state.phoneLogin }
            : undefined;
    if (otpUserInfo) {
        return (_jsx(OTPLoginUI, { userInfo: otpUserInfo, locale: locale, done: done, goBack: goBackToMain, wallet: props.wallet, chain: props.chain, client: props.client, size: props.size, isLinking: props.isLinking }));
    }
    if (state?.passkeyLogin) {
        return (_jsx(PassKeyLogin, { locale: props.connectLocale, wallet: props.wallet, done: done, onBack: goBackToMain, chain: props.chain, client: props.client, size: props.size, isLinking: props.isLinking }));
    }
    if (state?.socialLogin) {
        return (_jsx(SocialLogin, { socialAuth: state.socialLogin.type, locale: locale, done: done, goBack: goBackToMain, wallet: props.wallet, state: state, chain: props.chain, client: props.client, size: props.size, connectLocale: props.connectLocale, isLinking: props.isLinking }));
    }
    if (state?.walletLogin) {
        return (_jsx(WalletAuth, { meta: props.meta, inAppLocale: locale, walletConnect: props.walletConnect, wallet: props.wallet, client: props.client, size: props.size, done: done, onBack: goBackToMain || (() => setSelectionData({})), locale: props.connectLocale }));
    }
    if (state?.guestLogin) {
        return (_jsx(GuestLogin, { locale: locale, done: done, goBack: goBackToMain, wallet: props.wallet, state: state, client: props.client, size: props.size, connectLocale: props.connectLocale }));
    }
    return (_jsx(EcosystemWalletFormUIScreen, { select: () => { }, locale: locale, done: done, goBack: props.goBack, wallet: props.wallet, chain: props.chain, client: props.client, size: props.size, connectLocale: props.connectLocale, meta: props.meta, isLinking: props.isLinking }));
}
export default EcosystemWalletConnectUI;
//# sourceMappingURL=EcosystemWalletConnectUI.js.map