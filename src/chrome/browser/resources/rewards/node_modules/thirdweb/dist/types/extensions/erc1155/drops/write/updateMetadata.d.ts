import type { BaseTransactionOptions } from "../../../../transaction/types.js";
import type { NFTInput } from "../../../../utils/nft/parseNft.js";
/**
 * @extension ERC1155
 */
export type UpdateMetadataParams = {
    targetTokenId: bigint;
    newMetadata: NFTInput;
};
/**
 * Update the metadata of the single token in an Edition Drop (DropERC1155) collection
 * For Edition contracts, use `setTokenURI`
 * @param options
 * @returns the prepared transaction
 * @extension ERC1155
 * @example
 * ```ts
 * import { updateMetadata } from "thirdweb/extensions/erc1155";
 * import { sendTransaction } from "thirdweb";
 *
 * const transaction = updateMetadata({
 *  contract,
 *  targetTokenId: 0n,
 *  client: thirdwebClient,
 *  newMetadata: {
 *    name: "this is the new nft name",
 *    description: "...",
 *    image: "new image uri"
 *    // ...
 *  },
 * });
 *
 * await sendTransaction({ transaction, account });
 * ```
 */
export declare function updateMetadata(options: BaseTransactionOptions<UpdateMetadataParams>): import("../../../../transaction/prepare-transaction.js").PreparedTransaction<any, import("abitype").AbiFunction, import("../../../../transaction/prepare-transaction.js").PrepareTransactionOptions>;
/**
 * Checks if the `updateMetadata` method is supported by the given contract.
 * @param availableSelectors An array of 4byte function selectors of the contract. You can get this in various ways, such as using "whatsabi" or if you have the ABI of the contract available you can use it to generate the selectors.
 * @returns A boolean indicating if the `updateMetadata` method is supported.
 * @extension ERC721
 * @example
 * ```ts
 * import { isUpdateMetadataSupported } from "thirdweb/extensions/erc721";
 *
 * const supported = isUpdateMetadataSupported(["0x..."]);
 * ```
 */
export declare function isUpdateMetadataSupported(availableSelectors: string[]): boolean;
//# sourceMappingURL=updateMetadata.d.ts.map