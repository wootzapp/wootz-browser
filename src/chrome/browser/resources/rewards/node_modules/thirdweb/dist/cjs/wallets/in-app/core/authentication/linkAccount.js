"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.linkAccount = linkAccount;
exports.getLinkedProfilesInternal = getLinkedProfilesInternal;
const domains_js_1 = require("../../../../utils/domains.js");
const fetch_js_1 = require("../../../../utils/fetch.js");
/**
 * @description
 * Links a new account to the current one using an auth token.
 * For the public-facing API, use `wallet.linkProfile` instead.
 *
 * @internal
 */
async function linkAccount({ client, ecosystem, tokenToLink, }) {
    const clientFetch = (0, fetch_js_1.getClientFetch)(client, ecosystem);
    const IN_APP_URL = (0, domains_js_1.getThirdwebBaseUrl)("inAppWallet");
    const currentAccountToken = localStorage.getItem(`walletToken-${client.clientId}${ecosystem?.id ? `-${ecosystem.id}` : ""}`);
    if (!currentAccountToken) {
        throw new Error("Failed to link account, no user logged in");
    }
    const headers = {
        Authorization: `Bearer iaw-auth-token:${currentAccountToken}`,
        "Content-Type": "application/json",
    };
    const linkedDetailsResp = await clientFetch(`${IN_APP_URL}/api/2024-05-05/account/connect`, {
        method: "POST",
        headers,
        body: JSON.stringify({
            accountAuthTokenToConnect: tokenToLink,
        }),
    });
    if (!linkedDetailsResp.ok) {
        const body = await linkedDetailsResp.json();
        throw new Error(body.message || "Failed to link account.");
    }
    const { linkedAccounts } = await linkedDetailsResp.json();
    return (linkedAccounts ?? []);
}
/**
 * @description
 * Gets the linked accounts for the current user.
 * For the public-facing API, use `wallet.getProfiles` instead.
 *
 * @internal
 */
async function getLinkedProfilesInternal({ client, ecosystem, }) {
    const clientFetch = (0, fetch_js_1.getClientFetch)(client, ecosystem);
    const IN_APP_URL = (0, domains_js_1.getThirdwebBaseUrl)("inAppWallet");
    const currentAccountToken = localStorage.getItem(`walletToken-${client.clientId}${ecosystem?.id ? `-${ecosystem.id}` : ""}`);
    const headers = {
        Authorization: `Bearer iaw-auth-token:${currentAccountToken}`,
        "Content-Type": "application/json",
    };
    if (!currentAccountToken) {
        throw new Error("Failed to get linked accounts, no user logged in");
    }
    const linkedAccountsResp = await clientFetch(`${IN_APP_URL}/api/2024-05-05/accounts`, {
        method: "GET",
        headers,
    });
    if (!linkedAccountsResp.ok) {
        const body = await linkedAccountsResp.json();
        throw new Error(body.message || "Failed to get linked accounts.");
    }
    const { linkedAccounts } = await linkedAccountsResp.json();
    return (linkedAccounts ?? []);
}
//# sourceMappingURL=linkAccount.js.map