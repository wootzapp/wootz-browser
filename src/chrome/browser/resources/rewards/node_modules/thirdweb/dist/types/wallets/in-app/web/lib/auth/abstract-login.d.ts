import type { ThirdwebClient } from "../../../../../client/client.js";
import type { AuthAndWalletRpcReturnType, AuthLoginReturnType, AuthProvider, SendEmailOtpReturnType } from "../../../core/authentication/types.js";
import type { ClientIdWithQuerierType, Ecosystem } from "../../types.js";
import type { InAppWalletIframeCommunicator } from "../../utils/iFrameCommunication/InAppWalletIframeCommunicator.js";
export type LoginQuerierTypes = {
    loginWithCustomAuthEndpoint: {
        payload: string;
        encryptionKey: string;
    };
    loginWithCustomJwt: {
        jwt: string;
        encryptionKey?: string;
    };
    loginWithThirdwebModal: undefined | {
        email: string;
    };
    sendThirdwebSmsLoginOtp: {
        phoneNumber: string;
    };
    sendThirdwebEmailLoginOtp: {
        email: string;
    };
    verifyThirdwebEmailLoginOtp: {
        email: string;
        otp: string;
        recoveryCode?: string;
    };
    verifyThirdwebSmsLoginOtp: {
        phoneNumber: string;
        otp: string;
        recoveryCode?: string;
    };
    injectDeveloperClientId: undefined;
    getHeadlessOauthLoginLink: {
        authProvider: AuthProvider;
    };
};
/**
 * @internal
 */
export declare abstract class AbstractLogin<MODAL = void, EMAIL_MODAL extends {
    email: string;
} = {
    email: string;
}, EMAIL_VERIFICATION extends {
    email: string;
    otp: string;
} = {
    email: string;
    otp: string;
    recoveryCode?: string;
}> {
    protected LoginQuerier: InAppWalletIframeCommunicator<LoginQuerierTypes>;
    protected preLogin: () => Promise<void>;
    protected postLogin: (authResults: AuthAndWalletRpcReturnType) => Promise<AuthLoginReturnType>;
    protected client: ThirdwebClient;
    protected baseUrl: string;
    protected ecosystem?: Ecosystem;
    /**
     * Used to manage the user's auth states. This should not be instantiated directly.
     * @internal
     */
    constructor({ baseUrl, querier, preLogin, postLogin, client, ecosystem, }: ClientIdWithQuerierType & {
        baseUrl: string;
        preLogin: () => Promise<void>;
        postLogin: (authDetails: AuthAndWalletRpcReturnType) => Promise<AuthLoginReturnType>;
        ecosystem?: Ecosystem;
    });
    abstract loginWithCustomJwt(args: {
        jwt: string;
        encryptionKey: string;
    }): Promise<AuthLoginReturnType>;
    abstract loginWithCustomAuthEndpoint(args: {
        payload: string;
        encryptionKey: string;
    }): Promise<AuthLoginReturnType>;
    abstract loginWithModal(args?: MODAL): Promise<AuthLoginReturnType>;
    abstract loginWithIframe(args: EMAIL_MODAL): Promise<AuthLoginReturnType>;
    /**
     * @internal
     */
    sendEmailLoginOtp({ email, }: LoginQuerierTypes["sendThirdwebEmailLoginOtp"]): Promise<SendEmailOtpReturnType>;
    /**
     *
     * @internal
     */
    sendSmsLoginOtp({ phoneNumber, }: LoginQuerierTypes["sendThirdwebSmsLoginOtp"]): Promise<SendEmailOtpReturnType>;
    abstract loginWithEmailOtp(args: EMAIL_VERIFICATION): Promise<AuthLoginReturnType>;
    abstract loginWithSmsOtp(args: {
        phoneNumber: string;
        otp: string;
        recoveryCode?: string;
    }): Promise<AuthLoginReturnType>;
}
//# sourceMappingURL=abstract-login.d.ts.map