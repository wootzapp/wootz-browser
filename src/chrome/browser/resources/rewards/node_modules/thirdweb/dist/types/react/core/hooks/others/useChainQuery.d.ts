import { type UseQueryResult } from "@tanstack/react-query";
import type { Chain, ChainMetadata } from "../../../../chains/types.js";
export declare function useChainName(chain?: Chain): {
    name: string | undefined;
    isLoading: boolean;
};
export declare function useChainIconUrl(chain?: Chain): {
    url: string | undefined;
    isLoading: boolean;
};
export declare function useChainFaucets(chain?: Chain): {
    faucets: string[];
    isLoading: boolean;
};
export declare function useChainSymbol(chain?: Chain): {
    symbol: string | undefined;
    isLoading: boolean;
};
export declare function useChainExplorers(chain?: Chain): {
    explorers: {
        name: string;
        url: string;
        apiUrl?: string;
    }[];
    isLoading: boolean;
};
/**
 * @description Retrieves metadata for a chain such as name, icon, available faucets, block explorers, etc.
 *
 * @param chain - Chain to retrieve metadata for, see [defineChain](https://portal.thirdweb.com/references/typescript/v5/defineChain) for how to create a chain from a chain ID.
 * @returns A React Query result containing the chain metadata, @see {@link ChainMetadata}.
 *
 * @example
 * ```jsx
 * import { useChainMetadata } from "thirdweb/react";
 *
 * const { data: chainMetadata } = useChainMetadata(defineChain(11155111));
 *
 * console.log("Name:", chainMetadata.name); // Sepolia
 * console.log("Faucets:", chainMetadata.faucets); // ["https://thirdweb.com/sepolia/faucet"]
 * console.log("Explorers:", chainMetadata.explorers); // ["https://sepolia.etherscan.io/"]
 * ```
 *
 * @chain
 */
export declare function useChainMetadata(chain?: Chain): UseQueryResult<ChainMetadata>;
/**
 * @param chains - array of `Chains`
 * @param maxConcurrency - maximum number of concurrent requests to make
 * @internal
 */
export declare function useChainsQuery(chains: Chain[], maxConcurrency: number): UseQueryResult<ChainMetadata, Error>[];
//# sourceMappingURL=useChainQuery.d.ts.map