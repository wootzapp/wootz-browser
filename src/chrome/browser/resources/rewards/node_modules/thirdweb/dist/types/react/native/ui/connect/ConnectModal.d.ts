import type { MultiStepAuthProviderType } from "../../../../wallets/in-app/core/authentication/types.js";
import type { InAppWalletAuth } from "../../../../wallets/in-app/core/wallet/types.js";
import type { Wallet } from "../../../../wallets/interfaces/wallet.js";
import type { Theme } from "../../../core/design-system/index.js";
import { useSiweAuth } from "../../../core/hooks/auth/useSiweAuth.js";
import type { ConnectButtonProps } from "../../../core/hooks/connection/ConnectButtonProps.js";
import type { ConnectEmbedProps } from "../../../core/hooks/connection/ConnectEmbedProps.js";
import { type ContainerType } from "../components/Header.js";
export type ModalState = {
    screen: "base";
} | {
    screen: "connecting";
    wallet: Wallet;
    authMethod?: InAppWalletAuth;
} | {
    screen: "error";
    error: string;
} | {
    screen: "otp";
    auth: MultiStepAuthProviderType;
    wallet: Wallet<"inApp">;
} | {
    screen: "passkey";
    wallet: Wallet<"inApp">;
} | {
    screen: "external_wallets";
} | {
    screen: "auth";
};
/**
 * A component that allows the user to connect their wallet.
 *
 * it renders the same UI as the [`ConnectButton`](https://portal.thirdweb.com/react/v4/components/ConnectButton) component's modal - but directly on the page instead of being in a modal.
 *
 * It only renders UI if wallet is not connected
 * @example
 * ```tsx
 * <ConnectEmbed
 *    client={client}
 * />
 * ```
 * @param props -
 * The props for the `ConnectEmbed` component.
 *
 * Refer to the [`ConnectEmbedProps`](https://portal.thirdweb.com/references/typescript/v5/ConnectEmbedProps) type for more details
 * @component
 */
export declare function ConnectEmbed(props: ConnectEmbedProps): import("react/jsx-runtime.js").JSX.Element | null;
export declare function ConnectModal(props: ConnectButtonProps & {
    theme: Theme;
    onClose?: () => void;
    containerType: ContainerType;
    siweAuth: ReturnType<typeof useSiweAuth>;
}): import("react/jsx-runtime.js").JSX.Element;
//# sourceMappingURL=ConnectModal.d.ts.map