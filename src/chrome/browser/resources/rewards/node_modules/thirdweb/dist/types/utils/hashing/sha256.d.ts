import { type Hex } from "../encoding/hex.js";
type To = "hex" | "bytes";
export type Sha256Hash<TTo extends To> = (TTo extends "bytes" ? Uint8Array : never) | (TTo extends "hex" ? Hex : never);
/**
 * Calculates the SHA256 hash of the given value.
 * @param value - The value to hash. It can be either a hexadecimal string or a Uint8Array.
 * @param to - (Optional) The desired output format of the hash. Defaults to 'hex'.
 * @returns The SHA256 hash of the value in the specified format.
 * @example
 * ```ts
 * import { sha256 } from "thirdweb/utils";
 * const hash = sha256("0x1234");
 * ```
 * @utils
 */
export declare function sha256<TTo extends To = "hex">(value: Hex | Uint8Array, to?: TTo): Sha256Hash<TTo>;
export {};
//# sourceMappingURL=sha256.d.ts.map