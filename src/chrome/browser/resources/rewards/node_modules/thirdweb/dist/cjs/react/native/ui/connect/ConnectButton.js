"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConnectButton = ConnectButton;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
const react_native_1 = require("react-native");
const CustomThemeProvider_js_1 = require("../../../core/design-system/CustomThemeProvider.js");
const useSiweAuth_js_1 = require("../../../core/hooks/auth/useSiweAuth.js");
const useActiveAccount_js_1 = require("../../../core/hooks/wallets/useActiveAccount.js");
const useActiveWallet_js_1 = require("../../../core/hooks/wallets/useActiveWallet.js");
const useActiveWalletConnectionStatus_js_1 = require("../../../core/hooks/wallets/useActiveWalletConnectionStatus.js");
const connection_manager_js_1 = require("../../../core/providers/connection-manager.js");
const useAutoConnect_js_1 = require("../../hooks/wallets/useAutoConnect.js");
const button_js_1 = require("../components/button.js");
const spinner_js_1 = require("../components/spinner.js");
const text_js_1 = require("../components/text.js");
const ConnectModal_js_1 = require("./ConnectModal.js");
const ConnectedButton_js_1 = require("./ConnectedButton.js");
const ConnectedModal_js_1 = require("./ConnectedModal.js");
/**
 * A component that allows the user to connect their wallet.
 * It renders a button which when clicked opens a modal to allow users to connect to wallets specified in `wallets` prop.
 * @example
 * ```tsx
 * <ConnectButton
 *    client={client}
 * />
 * ```
 * @param props
 * Props for the `ConnectButton` component
 *
 * Refer to [ConnectButtonProps](https://portal.thirdweb.com/references/typescript/v5/ConnectButtonProps) to see the available props.
 * @component
 */
function ConnectButton(props) {
    const theme = (0, CustomThemeProvider_js_1.parseTheme)(props.theme);
    const [visible, setVisible] = (0, react_1.useState)(false);
    const wallet = (0, useActiveWallet_js_1.useActiveWallet)();
    const account = (0, useActiveAccount_js_1.useActiveAccount)();
    const status = (0, useActiveWalletConnectionStatus_js_1.useActiveWalletConnectionStatus)();
    const connectionManager = (0, connection_manager_js_1.useConnectionManager)();
    const siweAuth = (0, useSiweAuth_js_1.useSiweAuth)(wallet, account, props.auth);
    (0, useAutoConnect_js_1.useAutoConnect)(props);
    const fadeAnim = (0, react_1.useRef)(new react_native_1.Animated.Value(0)); // For background opacity
    const slideAnim = (0, react_1.useRef)(new react_native_1.Animated.Value(screenHeight)); // For bottom sheet position
    const openModal = (0, react_1.useCallback)(() => {
        setVisible(true);
        react_native_1.Animated.parallel([
            react_native_1.Animated.timing(fadeAnim.current, {
                toValue: 1,
                duration: 300,
                useNativeDriver: true,
            }),
            react_native_1.Animated.timing(slideAnim.current, {
                toValue: 0,
                duration: 300,
                useNativeDriver: true,
                easing: react_native_1.Easing.out(react_native_1.Easing.exp),
            }),
        ]).start();
    }, []);
    // Add props.chain and props.chains to defined chains store
    (0, react_1.useEffect)(() => {
        if (props.chain) {
            connectionManager.defineChains([props.chain]);
        }
    }, [props.chain, connectionManager]);
    (0, react_1.useEffect)(() => {
        if (props.chains) {
            connectionManager.defineChains(props.chains);
        }
    }, [props.chains, connectionManager]);
    const closeModal = (0, react_1.useCallback)(() => {
        react_native_1.Animated.parallel([
            react_native_1.Animated.timing(fadeAnim.current, {
                toValue: 0,
                duration: 300,
                useNativeDriver: true,
            }),
            react_native_1.Animated.timing(slideAnim.current, {
                toValue: screenHeight,
                duration: 300,
                useNativeDriver: true,
                easing: react_native_1.Easing.in(react_native_1.Easing.exp),
            }),
        ]).start(() => {
            setVisible(false);
            fadeAnim.current.setValue(0);
            slideAnim.current.setValue(screenHeight);
        });
    }, []);
    const needsAuth = siweAuth.requiresAuth && !siweAuth.isLoggedIn;
    const isConnected = wallet && account;
    const isConnectedAndNotAuth = isConnected && needsAuth;
    const isConnectedAndAuth = isConnected && !needsAuth;
    return ((0, jsx_runtime_1.jsxs)(react_native_1.View, { children: [isConnectedAndAuth ? ((0, jsx_runtime_1.jsx)(ConnectedButton_js_1.ConnectedButton, { openModal: () => openModal(), onClose: closeModal, wallet: wallet, account: account, ...props })) : ((0, jsx_runtime_1.jsx)(button_js_1.ThemedButton, { theme: theme, onPress: () => openModal(), children: status === "connecting" ||
                    siweAuth.isLoggingIn ||
                    siweAuth.isLoading ||
                    siweAuth.isLoggingOut ? ((0, jsx_runtime_1.jsx)(jsx_runtime_1.Fragment, { children: (0, jsx_runtime_1.jsx)(spinner_js_1.ThemedSpinner, { color: theme.colors.primaryButtonText }) })) : ((0, jsx_runtime_1.jsx)(text_js_1.ThemedText, { theme: theme, type: "defaultSemiBold", style: { color: theme.colors.primaryButtonText }, children: isConnectedAndNotAuth
                        ? props.signInButton?.label || "Sign In"
                        : props.connectButton?.label || "Connect Wallet" })) })), (0, jsx_runtime_1.jsx)(react_native_1.Modal, { visible: visible, animationType: "none", transparent: true, onRequestClose: closeModal, children: (0, jsx_runtime_1.jsxs)(react_native_1.KeyboardAvoidingView, { behavior: "padding", style: { flex: 1 }, children: [(0, jsx_runtime_1.jsx)(react_native_1.Animated.View, { style: [styles.modalOverlay, { opacity: fadeAnim.current }] }), (0, jsx_runtime_1.jsxs)(react_native_1.Animated.View, { style: [
                                { flex: 1, transform: [{ translateY: slideAnim.current }] },
                            ], children: [(0, jsx_runtime_1.jsx)(react_native_1.Pressable, { style: styles.dismissArea, onPress: closeModal }), (0, jsx_runtime_1.jsx)(react_native_1.View, { style: styles.bottomSheetContainer, children: isConnectedAndAuth ? ((0, jsx_runtime_1.jsx)(ConnectedModal_js_1.ConnectedModal, { ...props, theme: theme, onClose: closeModal, containerType: "modal", wallet: wallet, account: account })) : ((0, jsx_runtime_1.jsx)(ConnectModal_js_1.ConnectModal, { ...props, theme: theme, onClose: closeModal, containerType: "modal", siweAuth: siweAuth })) })] })] }) })] }));
}
const screenHeight = react_native_1.Dimensions.get("window").height;
const modalHeight = 520;
const screenWidth = react_native_1.Dimensions.get("window").width;
const styles = react_native_1.StyleSheet.create({
    modalOverlay: {
        position: "absolute",
        width: screenWidth,
        height: screenHeight,
        backgroundColor: "rgba(0,0,0,0.8)",
    },
    dismissArea: {
        width: "100%",
        flex: 1,
    },
    bottomSheetContainer: {
        height: modalHeight,
        width: screenWidth,
        flexDirection: "column",
    },
});
//# sourceMappingURL=ConnectButton.js.map