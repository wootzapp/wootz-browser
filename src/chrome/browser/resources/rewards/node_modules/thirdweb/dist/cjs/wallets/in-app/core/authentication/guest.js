"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.guestAuthenticate = guestAuthenticate;
const fetch_js_1 = require("../../../../utils/fetch.js");
const random_js_1 = require("../../../../utils/random.js");
const client_scoped_storage_js_1 = require("./client-scoped-storage.js");
const getLoginPath_js_1 = require("./getLoginPath.js");
/**
 * Does no real authentication, just issues a temporary token for the user.
 * @internal
 */
async function guestAuthenticate(args) {
    const storage = new client_scoped_storage_js_1.ClientScopedStorage({
        storage: args.storage,
        clientId: args.client.clientId,
        ecosystemId: args.ecosystem?.id,
    });
    let sessionId = await storage.getGuestSessionId();
    if (!sessionId) {
        sessionId = (0, random_js_1.randomBytesHex)(32);
        storage.saveGuestSessionId(sessionId);
    }
    const clientFetch = (0, fetch_js_1.getClientFetch)(args.client, args.ecosystem);
    const authResult = await (async () => {
        const path = (0, getLoginPath_js_1.getLoginCallbackUrl)({
            authOption: "guest",
            client: args.client,
            ecosystem: args.ecosystem,
        });
        const res = await clientFetch(`${path}`, {
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            },
            body: JSON.stringify({
                sessionId,
            }),
        });
        if (!res.ok)
            throw new Error("Failed to generate guest account");
        return (await res.json());
    })();
    return authResult;
}
//# sourceMappingURL=guest.js.map