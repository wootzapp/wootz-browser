"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AirdropRequestERC20 = exports.AirdropContentERC20 = exports.airdropERC20WithSignature = void 0;
exports.generateAirdropSignatureERC20 = generateAirdropSignatureERC20;
const date_js_1 = require("../../../utils/date.js");
const random_js_1 = require("../../../utils/random.js");
const airdropERC20WithSignature_js_1 = require("../__generated__/Airdrop/write/airdropERC20WithSignature.js");
/**
 * Airdrops ERC20 tokens to a list of recipients, with the request signed by admin
 * @param options - The transaction options.
 * @example
 * ```ts
 * import { airdropERC20WithSignature, generateAirdropSignatureERC20 } from "thirdweb/extensions/airdrop";
 * import { sendTransaction } from "thirdweb";
 *
 * const { req, signature } = await generateAirdropSignatureERC20(...)
 *
 * const transaction = airdropERC20WithSignature({
 *   contract,
 *   req,
 *   signature,
 * });
 * await sendTransaction({ transaction, account });
 * ```
 * @extension Airdrop
 * @returns A promise that resolves to the transaction result.
 */
exports.airdropERC20WithSignature = airdropERC20WithSignature_js_1.airdropERC20WithSignature;
/**
 * Generates the req and signature for sending ERC20 airdrop.
 * @param options - The options for the airdrop.
 * @example
 * ```ts
 * import { airdropERC20WithSignature, generateAirdropSignatureERC20 } from "thirdweb/extensions/airdrop";
 *
 * // list of recipients and amounts to airdrop for each recipient
 * const contents = [
 *    { recipient: "0x...", amount: 10n }, // amount in wei
 *    { recipient: "0x...", amount: 15n }, // amount in wei
 *    { recipient: "0x...", amount: 20n }, // amount in wei
 *  ];
 *
 * const { req, signature } = await generateAirdropSignatureERC20({
 *   account,
 *   contract,
 *   airdropRequest: {
 *     tokenAddress: "0x...", // address of the ERC20 token to airdrop
 *     contents
 *   },
 * });
 *
 * const transaction = airdropERC20WithSignature({
 *   contract,
 *   req,
 *   signature,
 * });
 * await sendTransaction({ transaction, account });
 * ```
 * @extension Airdrop
 * @returns A promise that resolves to the req and signature.
 */
async function generateAirdropSignatureERC20(options) {
    const { airdropRequest, account, contract } = options;
    const tokenAddress = airdropRequest.tokenAddress;
    const contents = airdropRequest.contents;
    const uid = airdropRequest.uid || (await (0, random_js_1.randomBytesHex)());
    const endTime = airdropRequest.expirationTimestamp || (0, date_js_1.tenYearsFromNow)();
    const req = {
        uid,
        tokenAddress,
        expirationTimestamp: (0, date_js_1.dateToSeconds)(endTime),
        contents,
    };
    const signature = await account.signTypedData({
        domain: {
            name: "Airdrop",
            version: "1",
            chainId: contract.chain.id,
            verifyingContract: contract.address,
        },
        types: { AirdropRequestERC20: exports.AirdropRequestERC20, AirdropContentERC20: exports.AirdropContentERC20 },
        primaryType: "AirdropRequestERC20",
        message: req,
    });
    return { req, signature };
}
exports.AirdropContentERC20 = [
    { name: "recipient", type: "address" },
    { name: "amount", type: "uint256" },
];
exports.AirdropRequestERC20 = [
    { name: "uid", type: "bytes32" },
    { name: "tokenAddress", type: "address" },
    { name: "expirationTimestamp", type: "uint256" },
    { name: "contents", type: "AirdropContentERC20[]" },
];
//# sourceMappingURL=airdropERC20WithSignature.js.map