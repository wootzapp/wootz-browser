"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ViewNFTs = ViewNFTs;
exports.ViewNFTsContent = ViewNFTsContent;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_query_1 = require("@tanstack/react-query");
const react_1 = require("react");
const utils_js_1 = require("../../../../../chains/utils.js");
const contract_js_1 = require("../../../../../contract/contract.js");
const getOwnedNFTs_js_1 = require("../../../../../extensions/erc721/read/getOwnedNFTs.js");
const isERC721_js_1 = require("../../../../../extensions/erc721/read/isERC721.js");
const getOwnedNFTs_js_2 = require("../../../../../extensions/erc1155/read/getOwnedNFTs.js");
const isERC1155_js_1 = require("../../../../../extensions/erc1155/read/isERC1155.js");
const useActiveAccount_js_1 = require("../../../../core/hooks/wallets/useActiveAccount.js");
const useActiveWalletChain_js_1 = require("../../../../core/hooks/wallets/useActiveWalletChain.js");
const MediaRenderer_js_1 = require("../../MediaRenderer/MediaRenderer.js");
const Skeleton_js_1 = require("../../components/Skeleton.js");
const Spacer_js_1 = require("../../components/Spacer.js");
const basic_js_1 = require("../../components/basic.js");
const fetchNFTs = async (client, chain, nftAddress, owner) => {
    const contract = (0, contract_js_1.getContract)({
        address: nftAddress,
        chain,
        client,
    });
    const erc721 = await (0, isERC721_js_1.isERC721)({ contract }).catch(() => {
        throw new Error(`Failed to read contract bytecode for NFT ${nftAddress} on ${chain.name || chain.id}, is this NFT on the correct chain?`);
    });
    if (erc721) {
        const result = await (0, getOwnedNFTs_js_1.getOwnedNFTs)({
            contract,
            owner: owner,
        });
        return result.map((nft) => ({
            ...nft,
            quantityOwned: BigInt(1),
            address: contract.address,
            chain,
        }));
    }
    const erc1155 = await (0, isERC1155_js_1.isERC1155)({ contract }).catch(() => false);
    if (erc1155) {
        const result = await (0, getOwnedNFTs_js_2.getOwnedNFTs)({
            contract,
            address: owner,
        });
        return result.map((nft) => ({ ...nft, address: contract.address, chain }));
    }
    throw new Error(`NFT at ${nftAddress} on chain ${chain.id} is not ERC721 or ERC1155, or does not properly identify itself as supporting either interface`);
};
/**
 * @internal
 */
function ViewNFTs(props) {
    return ((0, jsx_runtime_1.jsxs)(basic_js_1.Container, { style: {
            minHeight: "300px",
        }, children: [(0, jsx_runtime_1.jsx)(basic_js_1.Container, { p: "lg", children: (0, jsx_runtime_1.jsx)(basic_js_1.ModalHeader, { title: props.connectLocale.viewFunds.viewNFTs, onBack: props.onBack }) }), (0, jsx_runtime_1.jsx)(basic_js_1.Line, {}), (0, jsx_runtime_1.jsxs)(basic_js_1.Container, { px: "sm", scrollY: true, style: {
                    maxHeight: "500px",
                }, children: [(0, jsx_runtime_1.jsx)(Spacer_js_1.Spacer, { y: "md" }), (0, jsx_runtime_1.jsx)(ViewNFTsContent, { ...props })] })] }));
}
function ViewNFTsContent(props) {
    const activeAccount = (0, useActiveAccount_js_1.useActiveAccount)();
    const activeChain = (0, useActiveWalletChain_js_1.useActiveWalletChain)();
    const nftList = (0, react_1.useMemo)(() => {
        const nfts = [];
        if (!props.supportedNFTs)
            return [];
        for (const chainId in props.supportedNFTs) {
            if (props.supportedNFTs[chainId]) {
                nfts.push(...props.supportedNFTs[chainId].map((address) => ({
                    address,
                    chain: (0, utils_js_1.getCachedChain)(Number.parseInt(chainId)),
                })));
            }
        }
        return nfts;
    }, [props.supportedNFTs]);
    const results = (0, react_query_1.useQueries)({
        queries: nftList.map((nft) => ({
            queryKey: ["readContract", nft.chain.id, nft.address],
            queryFn: () => {
                if (!activeAccount) {
                    throw new Error("No active account");
                }
                return fetchNFTs(props.client, nft.chain, nft.address, activeAccount.address);
            },
            enabled: !!activeAccount,
        })),
    });
    if (!activeChain?.id || !activeAccount?.address) {
        return null;
    }
    return ((0, jsx_runtime_1.jsxs)(jsx_runtime_1.Fragment, { children: [(0, jsx_runtime_1.jsx)(basic_js_1.Container, { style: {
                    display: "grid",
                    gridTemplateColumns: "1fr 1fr",
                    gap: "12px",
                }, children: results.map((result, index) => {
                    if (result.error) {
                        console.error(result.error);
                        return null;
                    }
                    return result.isLoading || !result.data ? ((0, jsx_runtime_1.jsx)(Skeleton_js_1.Skeleton, { height: "150px", width: "150px" }, `${nftList[index]?.chain?.id}:${nftList[index]?.address}`)) : (result.data.map((nft) => ((0, jsx_runtime_1.jsx)(NftCard, { ...nft, client: props.client, chain: nft.chain, theme: props.theme }, `${nft.chain.id}:${nft.address}:${nft.id}`))));
                }) }), (0, jsx_runtime_1.jsx)(Spacer_js_1.Spacer, { y: "lg" })] }));
}
function NftCard(props) {
    const theme = typeof props.theme === "string" ? props.theme : props.theme.type;
    const themeObject = typeof props.theme === "string" ? undefined : props.theme;
    const content = ((0, jsx_runtime_1.jsxs)("div", { style: {
            display: "flex",
            flexDirection: "column",
            gap: "4px",
            alignItems: "center",
        }, children: [(0, jsx_runtime_1.jsxs)("div", { style: {
                    position: "relative",
                    display: "flex",
                    flexShrink: 0,
                    alignItems: "center",
                    width: "150px",
                    height: "150px",
                    borderRadius: "8px",
                    overflow: "hidden",
                    background: theme === "light" ? "rgba(0, 0, 0, 0.10)" : "rgba(0, 0, 0, 0.20)",
                }, children: [props.metadata.image && ((0, jsx_runtime_1.jsx)(MediaRenderer_js_1.MediaRenderer, { src: props.metadata.image, style: {
                            width: "100%",
                            height: "100%",
                        }, client: props.client })), props.quantityOwned > 1 && ((0, jsx_runtime_1.jsx)("div", { style: {
                            position: "absolute",
                            bottom: "4px",
                            right: "4px",
                            background: themeObject?.colors?.modalBg ??
                                (theme === "light" ? "white" : "black"),
                            fontSize: "10px",
                            padding: "4px 4px",
                            width: "20px",
                            height: "20px",
                            display: "flex",
                            alignItems: "center",
                            justifyContent: "center",
                            borderRadius: "100%",
                        }, children: props.quantityOwned.toString() })), props.chain.icon && ((0, jsx_runtime_1.jsx)("img", { alt: props.chain.name, style: {
                            position: "absolute",
                            bottom: "4px",
                            left: "4px",
                            width: "20px",
                            height: "20px",
                        }, src: props.chain.icon.url }))] }), (0, jsx_runtime_1.jsx)("span", { style: { fontWeight: 600 }, children: props.metadata.name })] }));
    if (props.chain.name) {
        return ((0, jsx_runtime_1.jsx)("a", { href: `https://thirdweb.com/${props.chain.id}/${props.address}/nfts/${props.id}`, target: "_blank", rel: "noreferrer", children: content }));
    }
    return content;
}
//# sourceMappingURL=ViewNFTs.js.map