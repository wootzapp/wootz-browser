import type { PreparedTransaction } from "../prepare-transaction.js";
export type ToSerializableTransactionOptions = {
    /**
     * The transaction to convert to a serializable transaction.
     */
    transaction: PreparedTransaction<any>;
    /**
     * The from address to use for gas estimation.
     */
    from?: string;
};
/**
 * Converts a prepared transaction to a transaction with populated options.
 * @param options - The transaction and additional options for conversion
 * @returns A serializable transaction for inspection or submission to an account.
 *
 * @note For easier transaction sending, {@see sendTransaction}
 * @example
 * ```ts
 * import { prepareTransaction, toSerializableTransaction } from "thirdweb";
 *
 * const transaction = await prepareTransaction({
 *   transaction: {
 *     to: "0x...",
 *     value: 100,
 *   },
 * });
 * const finalTx = await toSerializableTransaction({
 *   transaction,
 * });
 *
 * account.sendTransaction(finalTx);
 * ```
 * @transaction
 */
export declare function toSerializableTransaction(options: ToSerializableTransactionOptions): Promise<{
    gasPrice?: never;
    maxFeePerGas?: bigint;
    maxPriorityFeePerGas?: bigint;
    to: string | undefined;
    chainId: number;
    data: `0x${string}`;
    gas: bigint;
    nonce: number | undefined;
    accessList: import("viem").AccessList | undefined;
    value: bigint | undefined;
} | {
    gasPrice?: bigint;
    maxFeePerGas?: never;
    maxPriorityFeePerGas?: never;
    to: string | undefined;
    chainId: number;
    data: `0x${string}`;
    gas: bigint;
    nonce: number | undefined;
    accessList: import("viem").AccessList | undefined;
    value: bigint | undefined;
}>;
//# sourceMappingURL=to-serializable-transaction.d.ts.map