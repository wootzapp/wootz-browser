import { jsx as _jsx, Fragment as _Fragment, jsxs as _jsxs } from "react/jsx-runtime";
import { useEffect, useState } from "react";
import { Linking, StyleSheet, TouchableOpacity, View } from "react-native";
import { getContract } from "../../../../contract/contract.js";
import { isContractDeployed } from "../../../../utils/bytecode/is-contract-deployed.js";
import { formatNumber } from "../../../../utils/formatNumber.js";
import { useSiweAuth } from "../../../core/hooks/auth/useSiweAuth.js";
import { useChainName } from "../../../core/hooks/others/useChainQuery.js";
import { useActiveAccount } from "../../../core/hooks/wallets/useActiveAccount.js";
import { useActiveWallet } from "../../../core/hooks/wallets/useActiveWallet.js";
import { useActiveWalletChain } from "../../../core/hooks/wallets/useActiveWalletChain.js";
import { useDisconnect } from "../../../core/hooks/wallets/useDisconnect.js";
import { hasSmartAccount } from "../../../core/utils/isSmartWallet.js";
import { useConnectedWalletDetails } from "../../../core/utils/wallet.js";
import { fontSize, radius, spacing } from "../../design-system/index.js";
import { Address } from "../components/Address.js";
import { ChainIcon } from "../components/ChainIcon.js";
import { Header } from "../components/Header.js";
import { RNImage } from "../components/RNImage.js";
import { Skeleton } from "../components/Skeleton.js";
import { WalletImage } from "../components/WalletImage.js";
import { ThemedButton } from "../components/button.js";
import { Spacer } from "../components/spacer.js";
import { ThemedText } from "../components/text.js";
import { ThemedView } from "../components/view.js";
import { CLOSE_ICON, COINS_ICON, EXIT_ICON, RECEIVE_ICON, SEND_ICON, SMART_WALLET_ICON, } from "../icons/svgs.js";
import { ReceiveScreen } from "./ReceiveScreen.js";
import { SendScreen } from "./SendScreen.js";
import { TokenListScreen } from "./TokenListScreen.js";
export function ConnectedModal(props) {
    const { theme, containerType, client } = props;
    const [modalState, setModalState] = useState({
        screen: "account",
    });
    let content;
    switch (modalState.screen) {
        case "send": {
            content = (_jsx(SendScreen, { theme: theme, client: client, onClose: props.onClose, onBack: () => setModalState({ screen: "account" }), containerType: containerType, supportedTokens: props.supportedTokens }));
            break;
        }
        case "receive": {
            content = (_jsx(ReceiveScreen, { account: props.account, wallet: props.wallet, theme: theme, containerType: props.containerType, onBack: () => setModalState({ screen: "account" }), onClose: props.onClose }));
            break;
        }
        case "view_funds": {
            content = (_jsxs(_Fragment, { children: [_jsx(Header, { theme: theme, onClose: props.onClose, onBack: () => setModalState({ screen: "account" }), containerType: containerType, title: "View Funds" }), _jsx(Spacer, { size: "xl" }), _jsx(TokenListScreen, { client: client, theme: theme, supportedTokens: props.supportedTokens })] }));
            break;
        }
        default: {
            content = (_jsxs(_Fragment, { children: [props.onClose && (_jsx(TouchableOpacity, { onPress: props.onClose, style: {
                            padding: spacing.lg,
                            position: "absolute",
                            right: 0,
                            top: 0,
                            zIndex: 1,
                        }, children: _jsx(RNImage, { theme: theme, data: CLOSE_ICON, size: 24, color: theme.colors.secondaryIconColor }) })), _jsx(Spacer, { size: "xl" }), _jsx(AccountHeader, { ...props }), _jsx(Spacer, { size: "lg" }), _jsx(WalletActionsRow, { ...props, setModalState: setModalState }), _jsx(Spacer, { size: "lg" }), _jsx(WalletMenu, { ...props, setModalState: setModalState })] }));
        }
    }
    return (_jsx(ThemedView, { theme: theme, style: containerType === "modal"
            ? styles.modalContainer
            : styles.embedContainer, children: content }));
}
const AccountHeader = (props) => {
    const { account, wallet, theme } = props;
    const walletChain = useActiveWalletChain();
    const { pfp, name, balanceQuery } = useConnectedWalletDetails(props.client, walletChain, account, props.detailsButton?.displayBalanceToken);
    return (_jsxs(View, { style: styles.accountHeaderContainer, children: [_jsx(WalletImage, { theme: theme, size: 70, wallet: wallet, avatar: pfp }), _jsx(SmartAccountBadge, { client: props.client, theme: theme }), _jsx(Spacer, { size: "smd" }), _jsx(Address, { account: account, theme: theme, addressOrENS: name }), _jsx(Spacer, { size: "xxs" }), balanceQuery.data ? (_jsxs(ThemedText, { theme: theme, type: "subtext", style: {
                    fontSize: fontSize.sm,
                }, children: [formatNumber(Number(balanceQuery.data.displayValue), 5), " ", balanceQuery.data?.symbol] })) : (_jsx(Skeleton, { theme: theme, style: { width: 80, height: 16 } }))] }));
};
const WalletActionsRow = (props) => {
    const { theme, setModalState } = props;
    return (_jsxs(View, { style: styles.walletActionRowContainer, children: [_jsxs(ThemedButton, { theme: theme, variant: "secondary", style: styles.walletActionButton, onPress: () => setModalState({ screen: "send" }), children: [_jsx(RNImage, { theme: theme, size: 24, data: SEND_ICON, color: theme.colors.secondaryIconColor }), _jsx(ThemedText, { theme: theme, type: "defaultSemiBold", children: "Send" })] }), _jsxs(ThemedButton, { theme: theme, variant: "secondary", style: styles.walletActionButton, onPress: () => setModalState({ screen: "receive" }), children: [_jsx(RNImage, { theme: theme, size: 24, data: RECEIVE_ICON, color: theme.colors.secondaryIconColor }), _jsx(ThemedText, { theme: theme, type: "defaultSemiBold", children: "Receive" })] })] }));
};
const WalletMenu = (props) => {
    return (_jsxs(View, { style: styles.walletMenuContainer, children: [_jsx(ChainSwitcher, { ...props }), _jsx(ViewFunds, { ...props }), _jsx(DisconnectWallet, { ...props })] }));
};
const ChainSwitcher = (props) => {
    const { client, wallet, theme } = props;
    const chain = wallet.getChain();
    const { name } = useChainName(chain);
    return (_jsxs(TouchableOpacity, { style: styles.walletMenuRow, children: [_jsx(ChainIcon, { client: client, size: 32, chain: chain, theme: theme }), name ? (_jsx(ThemedText, { theme: theme, type: "defaultSemiBold", children: name })) : (_jsx(Skeleton, { theme: theme, style: { width: 80, height: 16 } }))] }));
};
/** TODO (rn) implement transactions screen
const Transactions = (props: ConnectedModalPropsInner) => {
  const { client, wallet, theme } = props;
  return (
    <TouchableOpacity style={styles.walletMenuRow} onPress={() => {}}>
      <RNImage
        theme={theme}
        size={32}
        data={TRANSACTIONS_ICON}
        color={theme.colors.secondaryIconColor}
      />
      <ThemedText theme={theme} type="defaultSemiBold">
        Transactions
      </ThemedText>
    </TouchableOpacity>
  );
};
*/
const ViewFunds = (props) => {
    const { theme, setModalState } = props;
    return (_jsxs(TouchableOpacity, { style: styles.walletMenuRow, onPress: () => setModalState({ screen: "view_funds" }), children: [_jsx(RNImage, { theme: theme, size: 32, data: COINS_ICON, color: theme.colors.secondaryIconColor }), _jsx(ThemedText, { theme: theme, type: "defaultSemiBold", children: "View Funds" })] }));
};
const DisconnectWallet = (props) => {
    const { wallet, account, theme, onClose } = props;
    const { disconnect } = useDisconnect();
    const siweAuth = useSiweAuth(wallet, account, props.auth);
    return (_jsxs(TouchableOpacity, { style: styles.walletMenuRow, onPress: () => {
            onClose?.();
            disconnect(wallet);
            if (siweAuth.isLoggedIn) {
                siweAuth.doLogout();
            }
        }, children: [_jsx(RNImage, { theme: theme, size: 32, data: EXIT_ICON, color: theme.colors.secondaryIconColor }), _jsx(ThemedText, { theme: theme, type: "defaultSemiBold", children: "Disconnect Wallet" })] }));
};
function SmartAccountBadge(props) {
    const activeAccount = useActiveAccount();
    const activeWallet = useActiveWallet();
    const isSmartWallet = hasSmartAccount(activeWallet);
    const chain = useActiveWalletChain();
    const { client, theme } = props;
    const [isSmartWalletDeployed, setIsSmartWalletDeployed] = useState(false);
    useEffect(() => {
        if (activeAccount && isSmartWallet && activeAccount.address && chain) {
            const contract = getContract({
                address: activeAccount.address,
                chain,
                client,
            });
            isContractDeployed(contract).then((isDeployed) => {
                setIsSmartWalletDeployed(isDeployed);
            });
        }
        else {
            setIsSmartWalletDeployed(false);
        }
    }, [activeAccount, chain, client, isSmartWallet]);
    const content = (_jsxs(View, { style: {
            flexDirection: "row",
            alignItems: "center",
            justifyContent: "center",
            gap: spacing.xs,
            backgroundColor: theme.colors.secondaryButtonBg,
            borderRadius: radius.md,
            paddingVertical: spacing.xs,
            paddingLeft: spacing.sm,
            paddingRight: spacing.smd,
        }, children: [_jsx(RNImage, { theme: theme, data: SMART_WALLET_ICON, size: 14, color: theme.colors.accentButtonBg }), _jsx(ThemedText, { theme: theme, style: { color: theme.colors.primaryText, fontSize: fontSize.xs }, children: "Smart Account" })] }));
    if (chain && activeAccount && isSmartWallet) {
        return (_jsxs(_Fragment, { children: [_jsx(Spacer, { size: "smd" }), isSmartWalletDeployed ? (_jsx(TouchableOpacity, { onPress: () => Linking.openURL(`https://thirdweb.com/${chain.id}/${activeAccount.address}/account`), children: content })) : (_jsx(View, { children: content }))] }));
    }
    return null;
}
const styles = StyleSheet.create({
    modalContainer: {
        flex: 1,
        width: "100%",
        flexDirection: "column",
        borderTopLeftRadius: radius.lg,
        borderTopRightRadius: radius.lg,
    },
    embedContainer: {
        flex: 1,
        width: "100%",
        flexDirection: "column",
        backgroundColor: "transparent",
    },
    accountHeaderContainer: {
        flexDirection: "column",
        justifyContent: "center",
        alignItems: "center",
        paddingHorizontal: spacing.lg,
    },
    walletActionRowContainer: {
        flexDirection: "row",
        justifyContent: "space-evenly",
        alignItems: "center",
        gap: spacing.md,
        paddingHorizontal: spacing.lg,
    },
    walletActionButton: { flex: 1, padding: spacing.smd, gap: spacing.smd },
    walletMenuContainer: {
        flexDirection: "column",
        gap: spacing.lg,
        paddingHorizontal: spacing.lg,
    },
    walletMenuRow: {
        flexDirection: "row",
        justifyContent: "flex-start",
        alignItems: "center",
        gap: spacing.md,
    },
});
//# sourceMappingURL=ConnectedModal.js.map