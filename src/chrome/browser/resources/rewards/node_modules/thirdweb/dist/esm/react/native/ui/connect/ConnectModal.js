import { jsx as _jsx, Fragment as _Fragment, jsxs as _jsxs } from "react/jsx-runtime";
import { useCallback, useState } from "react";
import { Platform, StyleSheet, View } from "react-native";
import { SvgXml } from "react-native-svg";
import { parseTheme } from "../../../core/design-system/CustomThemeProvider.js";
import { useSiweAuth } from "../../../core/hooks/auth/useSiweAuth.js";
import { useActiveAccount } from "../../../core/hooks/wallets/useActiveAccount.js";
import { useActiveWallet } from "../../../core/hooks/wallets/useActiveWallet.js";
import { useDisconnect } from "../../../core/hooks/wallets/useDisconnect.js";
import { useConnectionManager } from "../../../core/providers/connection-manager.js";
import { useWalletInfo } from "../../../core/utils/wallet.js";
import { radius, spacing } from "../../design-system/index.js";
import { getDefaultWallets } from "../../wallets/defaultWallets.js";
import { Header } from "../components/Header.js";
import { RNImage } from "../components/RNImage.js";
import { WalletImage, getAuthProviderImage, } from "../components/WalletImage.js";
import { ThemedButton, ThemedButtonWithIcon } from "../components/button.js";
import { Spacer } from "../components/spacer.js";
import { ThemedText } from "../components/text.js";
import { ThemedView } from "../components/view.js";
import { TW_ICON, WALLET_ICON } from "../icons/svgs.js";
import { ErrorView } from "./ErrorView.js";
import { ExternalWalletsList } from "./ExternalWalletsList.js";
import { InAppWalletUI, OtpLogin, PasskeyView } from "./InAppWalletUI.js";
import WalletLoadingThumbnail from "./WalletLoadingThumbnail.js";
/**
 * A component that allows the user to connect their wallet.
 *
 * it renders the same UI as the [`ConnectButton`](https://portal.thirdweb.com/react/v4/components/ConnectButton) component's modal - but directly on the page instead of being in a modal.
 *
 * It only renders UI if wallet is not connected
 * @example
 * ```tsx
 * <ConnectEmbed
 *    client={client}
 * />
 * ```
 * @param props -
 * The props for the `ConnectEmbed` component.
 *
 * Refer to the [`ConnectEmbedProps`](https://portal.thirdweb.com/references/typescript/v5/ConnectEmbedProps) type for more details
 * @component
 */
export function ConnectEmbed(props) {
    const theme = parseTheme(props.theme);
    const wallet = useActiveWallet();
    const account = useActiveAccount();
    const siweAuth = useSiweAuth(wallet, account, props.auth);
    const needsAuth = siweAuth.requiresAuth && !siweAuth.isLoggedIn;
    const isConnected = wallet && !needsAuth;
    const adaptedProps = {
        ...props,
        connectModal: { ...props },
    };
    return isConnected ? null : (_jsx(ConnectModal, { ...adaptedProps, theme: theme, containerType: "embed", siweAuth: siweAuth }));
}
export function ConnectModal(props) {
    const { theme, client, containerType, accountAbstraction, onConnect, onClose, siweAuth, } = props;
    const wallet = useActiveWallet();
    const needsAuth = wallet && siweAuth.requiresAuth && !siweAuth.isLoggedIn;
    const [modalState, setModalState] = useState(needsAuth ? { screen: "auth" } : { screen: "base" });
    const wallets = props.wallets || getDefaultWallets(props);
    const inAppWallet = wallets.find((wallet) => wallet.id === "inApp");
    const externalWallets = wallets.filter((wallet) => wallet.id !== "inApp");
    const showBranding = props.connectModal?.showThirdwebBranding !== false;
    const connectionManager = useConnectionManager();
    const connector = useCallback(async (args) => {
        setModalState({
            screen: "connecting",
            wallet: args.wallet,
            authMethod: args.authMethod,
        });
        try {
            const w = await args.connectFn(props.chain);
            await connectionManager.connect(w, {
                client,
                accountAbstraction,
                onConnect,
            });
            if (siweAuth.requiresAuth && !siweAuth.isLoggedIn) {
                // if in-app wallet, signin headlessly
                // TODO (rn) handle signless smart wallets as well
                if (w.id === "inApp") {
                    await siweAuth.doLogin();
                    onClose?.();
                }
                else {
                    setModalState({
                        screen: "auth",
                    });
                }
            }
            else {
                onClose?.();
            }
        }
        catch (error) {
            setModalState({
                screen: "error",
                error: error?.message || "Unknown error",
            });
        }
    }, [
        client,
        accountAbstraction,
        onConnect,
        onClose,
        siweAuth,
        connectionManager,
        props.chain,
    ]);
    let content;
    switch (modalState.screen) {
        case "otp": {
            content = (_jsxs(_Fragment, { children: [_jsx(Header, { theme: theme, onClose: props.onClose, containerType: containerType, onBack: () => setModalState({ screen: "base" }), title: props.connectModal?.title || "Sign in" }), _jsx(Spacer, { size: "xl" }), _jsx(View, { style: {
                            flexDirection: "column",
                            gap: spacing.md,
                            paddingHorizontal: containerType === "modal" ? spacing.lg : 0,
                        }, children: _jsx(OtpLogin, { auth: modalState.auth, wallet: modalState.wallet, client: client, setScreen: setModalState, theme: theme, connector: connector }) }), containerType === "modal" ? (_jsx(View, { style: { flex: 1 } })) : (_jsx(Spacer, { size: "md" }))] }));
            break;
        }
        case "external_wallets": {
            content = (_jsxs(_Fragment, { children: [_jsx(Header, { theme: theme, onClose: props.onClose, containerType: containerType, onBack: () => setModalState({ screen: "base" }), title: props.connectModal?.title || "Sign in" }), _jsx(Spacer, { size: "lg" }), _jsx(ExternalWalletsList, { theme: theme, externalWallets: externalWallets, client: client, connector: connector, containerType: containerType })] }));
            break;
        }
        case "connecting": {
            content = (_jsxs(_Fragment, { children: [_jsx(Header, { theme: theme, onClose: props.onClose, containerType: containerType, onBack: () => setModalState({ screen: "base" }), title: props.connectModal?.title || "Sign in" }), containerType === "modal" ? (_jsx(View, { style: { flex: 1 } })) : (_jsx(Spacer, { size: "lg" })), _jsx(WalletLoadingView, { theme: theme, wallet: modalState.wallet, authProvider: modalState.authMethod }), containerType === "modal" ? (_jsx(View, { style: { flex: 1 } })) : (_jsx(Spacer, { size: "md" }))] }));
            break;
        }
        case "passkey": {
            content = (_jsxs(_Fragment, { children: [_jsx(Header, { theme: theme, onClose: props.onClose, containerType: containerType, onBack: () => setModalState({ screen: "base" }), title: props.connectModal?.title || "Sign in" }), containerType === "modal" ? (_jsx(View, { style: { flex: 1 } })) : (_jsx(Spacer, { size: "lg" })), _jsx(PasskeyView, { wallet: modalState.wallet, client: client, setScreen: setModalState, theme: theme, connector: connector }), containerType === "modal" ? (_jsx(View, { style: { flex: 1 } })) : (_jsx(Spacer, { size: "md" }))] }));
            break;
        }
        case "auth": {
            content = (_jsxs(_Fragment, { children: [_jsx(Header, { theme: theme, onClose: props.onClose, containerType: containerType, onBack: props.onClose, title: props.connectModal?.title || "Sign in" }), containerType === "modal" ? (_jsx(View, { style: { flex: 1 } })) : (_jsx(Spacer, { size: "lg" })), _jsx(SignInView, { theme: theme, siweAuth: siweAuth, onSignIn: () => props.onClose?.(), onError: (error) => setModalState({ screen: "error", error }), onDisconnect: () => setModalState({ screen: "base" }) }), containerType === "modal" ? (_jsx(View, { style: { flex: 1 } })) : (_jsx(Spacer, { size: "md" }))] }));
            break;
        }
        case "error": {
            content = (_jsxs(_Fragment, { children: [_jsx(Header, { theme: theme, onClose: props.onClose, containerType: containerType, onBack: () => setModalState({ screen: "base" }), title: props.connectModal?.title || "Sign in" }), containerType === "modal" ? (_jsx(View, { style: { flex: 1 } })) : (_jsx(Spacer, { size: "lg" })), _jsx(ErrorView, { theme: theme, title: modalState.error }), containerType === "modal" ? (_jsx(View, { style: { flex: 1 } })) : (_jsx(Spacer, { size: "md" }))] }));
            break;
        }
        default: {
            content = (_jsxs(_Fragment, { children: [_jsx(Header, { theme: theme, onClose: props.onClose, containerType: containerType, title: props.connectModal?.title || "Sign in" }), inAppWallet ? (_jsxs(_Fragment, { children: [containerType === "modal" ? (_jsx(View, { style: { flex: 1 } })) : (_jsx(Spacer, { size: "lg" })), _jsxs(View, { style: {
                                    flexDirection: "column",
                                    gap: spacing.md,
                                    paddingHorizontal: containerType === "modal" ? spacing.lg : 0,
                                }, children: [_jsx(InAppWalletUI, { wallet: inAppWallet, setScreen: setModalState, client: client, theme: theme, connector: connector }), externalWallets.length > 0 ? (_jsxs(_Fragment, { children: [_jsx(OrDivider, { theme: theme }), _jsx(ThemedButtonWithIcon, { theme: theme, icon: WALLET_ICON, title: "Connect a wallet", onPress: () => setModalState({ screen: "external_wallets" }) })] })) : null] }), containerType === "modal" ? (_jsx(View, { style: { flex: 1 } })) : (_jsx(Spacer, { size: "md" }))] })) : externalWallets.length > 0 ? (_jsxs(_Fragment, { children: [_jsx(Spacer, { size: "xl" }), _jsx(View, { style: {
                                    flex: 1,
                                }, children: _jsx(ExternalWalletsList, { theme: theme, externalWallets: externalWallets, client: client, connector: connector, containerType: containerType }) })] })) : null] }));
        }
    }
    return (_jsxs(ThemedView, { theme: theme, style: containerType === "modal"
            ? styles.modalContainer
            : styles.embedContainer, children: [content, showBranding && _jsx(PoweredByThirdweb, { theme: theme })] }));
}
function WalletLoadingView({ theme, wallet, authProvider, }) {
    const walletInfo = useWalletInfo(wallet.id);
    return (_jsxs(View, { style: {
            flexDirection: "column",
            flex: 1,
            alignItems: "center",
            justifyContent: "center",
            paddingVertical: spacing.xl,
        }, children: [_jsx(WalletLoadingThumbnail, { theme: theme, imageSize: 100, animate: true, roundLoader: authProvider === "passkey", children: authProvider ? (_jsx(View, { style: {
                        borderRadius: spacing.md,
                        padding: spacing.sm,
                    }, children: _jsx(RNImage, { theme: theme, size: 80, data: getAuthProviderImage(authProvider), color: theme.colors.accentButtonBg }) })) : (_jsx(WalletImage, { theme: theme, size: 90, wallet: wallet })) }), _jsx(Spacer, { size: "xl" }), _jsx(ThemedText, { theme: theme, type: "subtitle", children: authProvider
                    ? `Connecting with ${capitalizeFirstLetter(authProvider)}`
                    : "Awaiting confirmation" }), _jsx(Spacer, { size: "sm" }), _jsx(ThemedText, { theme: theme, type: "subtext", children: authProvider
                    ? `Signing into your ${capitalizeFirstLetter(authProvider)} account`
                    : `Accept the connection request in ${walletInfo.data?.name}` })] }));
}
function SignInView({ theme, siweAuth, onSignIn, onError, onDisconnect, }) {
    const wallet = useActiveWallet();
    const walletInfo = useWalletInfo(wallet?.id);
    const { disconnect } = useDisconnect();
    const isSigningIn = siweAuth.isLoggingIn || siweAuth.isLoading;
    return (wallet && (_jsxs(View, { style: {
            flexDirection: "column",
            flex: 1,
            alignItems: "center",
            justifyContent: "center",
            padding: spacing.xl,
        }, children: [_jsx(WalletLoadingThumbnail, { theme: theme, imageSize: 100, animate: isSigningIn, children: _jsx(WalletImage, { theme: theme, size: 90, wallet: wallet }) }), _jsx(Spacer, { size: "xl" }), _jsx(ThemedText, { theme: theme, type: "subtitle", children: "Complete sign in" }), _jsx(Spacer, { size: "xs" }), _jsxs(ThemedText, { theme: theme, type: "subtext", children: ["Sign login request in ", walletInfo.data?.name, " to continue"] }), _jsx(Spacer, { size: "xl" }), _jsx(ThemedButton, { theme: theme, variant: "accent", disabled: isSigningIn, style: { width: "100%" }, onPress: async () => {
                    try {
                        await siweAuth.doLogin();
                        onSignIn();
                    }
                    catch (e) {
                        onError(e?.message || "Unknown error");
                    }
                }, children: _jsx(ThemedText, { theme: theme, type: "defaultSemiBold", style: {
                        color: theme.colors.accentButtonText,
                    }, children: "Sign login request" }) }), _jsx(Spacer, { size: "md" }), _jsx(ThemedButton, { theme: theme, variant: "secondary", disabled: isSigningIn, style: { width: "100%" }, onPress: async () => {
                    disconnect(wallet);
                    siweAuth.doLogout();
                    onDisconnect();
                }, children: _jsx(ThemedText, { theme: theme, type: "defaultSemiBold", style: {
                        color: theme.colors.secondaryButtonText,
                    }, children: "Disconnect" }) })] })));
}
function OrDivider({ theme }) {
    return (_jsxs(View, { style: {
            flexDirection: "row",
            alignItems: "center",
            justifyContent: "center",
            gap: spacing.lg,
        }, children: [_jsx(View, { style: {
                    flex: 1,
                    height: 1,
                    backgroundColor: theme.colors.borderColor,
                } }), _jsx(ThemedText, { theme: theme, style: { color: theme.colors.secondaryText }, children: "OR" }), _jsx(View, { style: {
                    flex: 1,
                    height: 1,
                    backgroundColor: theme.colors.borderColor,
                } })] }));
}
function PoweredByThirdweb({ theme }) {
    return (_jsxs(View, { style: {
            flexDirection: "row",
            justifyContent: "center",
            alignItems: "center",
            gap: spacing.xs,
            paddingBottom: Platform.OS === "android" ? spacing.md : spacing.lg,
        }, children: [_jsx(ThemedText, { theme: theme, type: "subtext", children: "Powered by" }), _jsx(SvgXml, { xml: TW_ICON, width: 22, height: 22, style: { marginBottom: -2 }, color: theme.colors.secondaryText }), _jsx(ThemedText, { theme: theme, type: "subtext", style: { fontWeight: "600" }, children: "thirdweb" })] }));
}
function capitalizeFirstLetter(str) {
    if (!str)
        return str;
    return str.charAt(0).toUpperCase() + str.slice(1);
}
const styles = StyleSheet.create({
    modalContainer: {
        flex: 1,
        width: "100%",
        flexDirection: "column",
        borderTopLeftRadius: radius.lg,
        borderTopRightRadius: radius.lg,
    },
    embedContainer: {
        flex: 1,
        width: "100%",
        flexDirection: "column",
        backgroundColor: "transparent",
    },
});
//# sourceMappingURL=ConnectModal.js.map