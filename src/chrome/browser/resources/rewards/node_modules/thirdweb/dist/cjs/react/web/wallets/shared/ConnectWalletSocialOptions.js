"use strict";
"use client";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConnectWalletSocialOptions = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const styled_1 = require("@emotion/styled");
const react_query_1 = require("@tanstack/react-query");
const react_1 = require("react");
const webStorage_js_1 = require("../../../../utils/storage/webStorage.js");
const get_ecosystem_wallet_auth_options_js_1 = require("../../../../wallets/ecosystem/get-ecosystem-wallet-auth-options.js");
const is_ecosystem_wallet_js_1 = require("../../../../wallets/ecosystem/is-ecosystem-wallet.js");
const profiles_js_1 = require("../../../../wallets/in-app/core/wallet/profiles.js");
const oauth_js_1 = require("../../../../wallets/in-app/web/lib/auth/oauth.js");
const types_js_1 = require("../../../../wallets/types.js");
const CustomThemeProvider_js_1 = require("../../../core/design-system/CustomThemeProvider.js");
const index_js_1 = require("../../../core/design-system/index.js");
const storage_js_1 = require("../../../core/utils/storage.js");
const walletIcon_js_1 = require("../../../core/utils/walletIcon.js");
const wallet_ui_states_provider_js_1 = require("../../providers/wallet-ui-states-provider.js");
const WalletTypeRowButton_js_1 = require("../../ui/ConnectWallet/WalletTypeRowButton.js");
const Img_js_1 = require("../../ui/components/Img.js");
const Spacer_js_1 = require("../../ui/components/Spacer.js");
const TextDivider_js_1 = require("../../ui/components/TextDivider.js");
const basic_js_1 = require("../../ui/components/basic.js");
const buttons_js_1 = require("../../ui/components/buttons.js");
const InputSelectionUI_js_1 = require("../in-app/InputSelectionUI.js");
const validateEmail_js_1 = require("../in-app/validateEmail.js");
const LoadingScreen_js_1 = require("./LoadingScreen.js");
const oauthSignIn_js_1 = require("./oauthSignIn.js");
const defaultAuthOptions = [
    "email",
    "phone",
    "google",
    "apple",
    "facebook",
    "passkey",
];
/**
 * @internal
 */
const ConnectWalletSocialOptions = (props) => {
    const locale = props.locale;
    const { wallet } = props;
    const setData = (0, wallet_ui_states_provider_js_1.useSetSelectionData)();
    const themeObj = (0, CustomThemeProvider_js_1.useCustomTheme)();
    const optionalImageMetadata = (0, react_1.useMemo)(() => props.wallet.id === "inApp"
        ? props.wallet.getConfig()?.metadata?.image
        : undefined, [props.wallet]);
    const loginMethodsLabel = {
        google: locale.signInWithGoogle,
        facebook: locale.signInWithFacebook,
        apple: locale.signInWithApple,
        discord: locale.signInWithDiscord,
        line: "LINE",
        x: "X",
        coinbase: "Coinbase",
        farcaster: "Farcaster",
        telegram: "Telegram",
    };
    const { data: ecosystemAuthOptions, isLoading } = (0, react_query_1.useQuery)({
        queryKey: ["auth-options", wallet.id],
        queryFn: async () => {
            if ((0, is_ecosystem_wallet_js_1.isEcosystemWallet)(wallet)) {
                return (0, get_ecosystem_wallet_auth_options_js_1.getEcosystemWalletAuthOptions)(wallet.id);
            }
            return null;
        },
        enabled: (0, is_ecosystem_wallet_js_1.isEcosystemWallet)(wallet),
        retry: false,
    });
    const authOptions = (0, is_ecosystem_wallet_js_1.isEcosystemWallet)(wallet)
        ? (ecosystemAuthOptions ?? defaultAuthOptions)
        : (wallet.getConfig()?.auth?.options ?? defaultAuthOptions);
    const emailIndex = authOptions.indexOf("email");
    const isEmailEnabled = emailIndex !== -1;
    const phoneIndex = authOptions.indexOf("phone");
    const isPhoneEnabled = phoneIndex !== -1;
    const socialLogins = authOptions.filter((o) => types_js_1.socialAuthOptions.includes(o));
    const columnCount = (0, react_1.useMemo)(() => {
        switch (socialLogins.length) {
            case 7:
                return 4;
            case 6:
                return 4;
            default:
                return 5;
        }
    }, [socialLogins.length]);
    const socialLoginColumns = (0, react_1.useMemo)(() => {
        return Array.from({ length: Math.ceil(socialLogins.length / columnCount) }, (_, i) => socialLogins.slice(i * columnCount, (i + 1) * columnCount));
    }, [socialLogins, columnCount]);
    const [manualInputMode, setManualInputMode] = (0, react_1.useState)(null);
    const inputMode = (0, react_1.useMemo)(() => {
        if (manualInputMode) {
            return manualInputMode;
        }
        if (isEmailEnabled && isPhoneEnabled) {
            return emailIndex < phoneIndex ? "email" : "phone";
        }
        if (isEmailEnabled) {
            return "email";
        }
        if (isPhoneEnabled) {
            return "phone";
        }
        return "none";
    }, [isEmailEnabled, isPhoneEnabled, emailIndex, phoneIndex, manualInputMode]);
    if ((0, is_ecosystem_wallet_js_1.isEcosystemWallet)(wallet) && isLoading) {
        return (0, jsx_runtime_1.jsx)(LoadingScreen_js_1.LoadingScreen, {});
    }
    const passKeyEnabled = authOptions.includes("passkey");
    const guestEnabled = authOptions.includes("guest");
    const placeholder = inputMode === "email" ? locale.emailPlaceholder : locale.phonePlaceholder;
    const emptyErrorMessage = inputMode === "email" ? locale.emailRequired : locale.phoneRequired;
    let type = "text";
    if (inputMode === "email") {
        type = "email";
    }
    else if (inputMode === "phone") {
        type = "tel";
    }
    const hasSocialLogins = socialLogins.length > 0;
    const ecosystemInfo = (0, is_ecosystem_wallet_js_1.isEcosystemWallet)(wallet)
        ? {
            id: wallet.id,
            partnerId: wallet.getConfig()?.partnerId,
        }
        : undefined;
    const handleGuestLogin = async () => {
        const connectOptions = {
            client: props.client,
            ecosystem: ecosystemInfo,
            strategy: "guest",
        };
        const connectPromise = (async () => {
            const result = await wallet.connect(connectOptions);
            (0, storage_js_1.setLastAuthProvider)("guest", webStorage_js_1.webLocalStorage);
            return result;
        })();
        setData({
            guestLogin: {
                connectionPromise: connectPromise,
            },
        });
        props.select(); // show Connect UI
    };
    // Need to trigger login on button click to avoid popup from being blocked
    const handleSocialLogin = async (strategy) => {
        const walletConfig = wallet.getConfig();
        const authMode = walletConfig?.auth?.mode ?? "popup";
        if (walletConfig &&
            "auth" in walletConfig &&
            authMode !== "popup" &&
            !props.isLinking // We do not support redirects for linking
        ) {
            return (0, oauth_js_1.loginWithOauthRedirect)({
                authOption: strategy,
                client: props.client,
                ecosystem: ecosystemInfo,
                redirectUrl: walletConfig?.auth?.redirectUrl,
                mode: authMode,
            });
        }
        try {
            const socialLoginWindow = (0, oauthSignIn_js_1.openOauthSignInWindow)({
                authOption: strategy,
                themeObj,
                client: props.client,
                ecosystem: ecosystemInfo,
            });
            if (!socialLoginWindow) {
                throw new Error("Failed to open login window");
            }
            const connectOptions = {
                chain: props.chain,
                client: props.client,
                strategy,
                openedWindow: socialLoginWindow,
                closeOpenedWindow: (openedWindow) => {
                    openedWindow.close();
                },
            };
            const connectPromise = (() => {
                if (props.isLinking) {
                    if (wallet.id !== "inApp" && !(0, is_ecosystem_wallet_js_1.isEcosystemWallet)(wallet)) {
                        throw new Error("Only in-app wallets support multi-auth");
                    }
                    return (0, profiles_js_1.linkProfile)(wallet, connectOptions);
                }
                const connectPromise = wallet.connect(connectOptions);
                (0, storage_js_1.setLastAuthProvider)(strategy, webStorage_js_1.webLocalStorage);
                return connectPromise;
            })();
            setData({
                socialLogin: {
                    type: strategy,
                    connectionPromise: connectPromise,
                },
            });
            props.select(); // show Connect UI
            // Note: do not call done() here, it will be called SocialLogin component
            // we simply trigger the connect and save promise here - its resolution is handled in SocialLogin
        }
        catch (e) {
            console.error(`Error signing in with ${strategy}`, e);
        }
    };
    function handlePassKeyLogin() {
        setData({
            passkeyLogin: true,
        });
        props.select();
    }
    function handleWalletLogin() {
        setData({
            walletLogin: true,
        });
        props.select();
    }
    const showOnlyIcons = socialLogins.length > 2;
    return ((0, jsx_runtime_1.jsxs)(basic_js_1.Container, { flex: "column", gap: "md", style: {
            position: "relative",
        }, children: [optionalImageMetadata && ((0, jsx_runtime_1.jsxs)(jsx_runtime_1.Fragment, { children: [(0, jsx_runtime_1.jsx)(Img_js_1.Img, { client: props.client, src: optionalImageMetadata.src, alt: optionalImageMetadata.alt, width: `${optionalImageMetadata.width}`, height: `${optionalImageMetadata.height}`, style: { margin: "auto" } }), (0, jsx_runtime_1.jsx)(Spacer_js_1.Spacer, { y: "xxs" })] })), hasSocialLogins && ((0, jsx_runtime_1.jsx)(basic_js_1.Container, { flex: "column", gap: socialLogins.length > 4 ? "xs" : "sm", children: socialLoginColumns.map((column) => ((0, jsx_runtime_1.jsx)(SocialButtonRow, { children: column.map((loginMethod) => {
                        const imgIconSize = (() => {
                            if (!showOnlyIcons) {
                                return index_js_1.iconSize.md;
                            }
                            if (socialLogins.length > 4) {
                                return index_js_1.iconSize.md;
                            }
                            return index_js_1.iconSize.lg;
                        })();
                        return ((0, jsx_runtime_1.jsxs)(SocialButton, { "aria-label": `Login with ${loginMethod}`, "data-variant": showOnlyIcons ? "icon" : "full", variant: "outline", disabled: props.disabled, onClick: () => {
                                handleSocialLogin(loginMethod);
                            }, style: {
                                flexGrow: socialLogins.length < 7 ? 1 : 0,
                            }, children: [(0, jsx_runtime_1.jsx)(Img_js_1.Img, { src: walletIcon_js_1.socialIcons[loginMethod], width: imgIconSize, height: imgIconSize, client: props.client }), !showOnlyIcons &&
                                    `${socialLogins.length === 1 ? "Continue with " : ""}${loginMethodsLabel[loginMethod]}`] }, loginMethod));
                    }) }, column[0]))) })), props.size === "wide" &&
                hasSocialLogins &&
                (isEmailEnabled || isPhoneEnabled) && (0, jsx_runtime_1.jsx)(TextDivider_js_1.TextDivider, { text: locale.or }), isEmailEnabled &&
                (inputMode === "email" ? ((0, jsx_runtime_1.jsx)(InputSelectionUI_js_1.InputSelectionUI, { type: type, onSelect: (value) => {
                        setData({ emailLogin: value });
                        props.select();
                    }, placeholder: placeholder, name: "email", errorMessage: (input) => {
                        const isValidEmail = (0, validateEmail_js_1.validateEmail)(input.toLowerCase());
                        if (!isValidEmail) {
                            return locale.invalidEmail;
                        }
                        return undefined;
                    }, disabled: props.disabled, emptyErrorMessage: emptyErrorMessage, submitButtonText: locale.submitEmail })) : ((0, jsx_runtime_1.jsx)(WalletTypeRowButton_js_1.WalletTypeRowButton, { client: props.client, icon: walletIcon_js_1.emailIcon, onClick: () => {
                        setManualInputMode("email");
                    }, title: locale.emailPlaceholder, disabled: props.disabled }))), isPhoneEnabled &&
                (inputMode === "phone" ? ((0, jsx_runtime_1.jsx)(InputSelectionUI_js_1.InputSelectionUI, { format: "phone", type: type, onSelect: (value) => {
                        // removes white spaces and special characters
                        setData({ phoneLogin: value.replace(/[-\(\) ]/g, "") });
                        props.select();
                    }, placeholder: placeholder, name: "phone", errorMessage: (_input) => {
                        // removes white spaces and special characters
                        const input = _input.replace(/[-\(\) ]/g, "");
                        const isPhone = /^[0-9]+$/.test(input);
                        if (!isPhone && isPhoneEnabled) {
                            return locale.invalidPhone;
                        }
                        return undefined;
                    }, disabled: props.disabled, emptyErrorMessage: emptyErrorMessage, submitButtonText: locale.submitEmail })) : ((0, jsx_runtime_1.jsx)(WalletTypeRowButton_js_1.WalletTypeRowButton, { client: props.client, icon: walletIcon_js_1.phoneIcon, onClick: () => {
                        setManualInputMode("phone");
                    }, title: locale.phonePlaceholder, disabled: props.disabled }))), passKeyEnabled && ((0, jsx_runtime_1.jsx)(WalletTypeRowButton_js_1.WalletTypeRowButton, { client: props.client, icon: walletIcon_js_1.passkeyIcon, onClick: () => {
                    handlePassKeyLogin();
                }, title: locale.passkey, disabled: props.disabled })), guestEnabled && ((0, jsx_runtime_1.jsx)(WalletTypeRowButton_js_1.WalletTypeRowButton, { client: props.client, icon: (0, walletIcon_js_1.getWalletIcon)("guest"), onClick: () => {
                    handleGuestLogin();
                }, title: locale.loginAsGuest, disabled: props.disabled })), props.isLinking && ((0, jsx_runtime_1.jsx)(WalletTypeRowButton_js_1.WalletTypeRowButton, { client: props.client, icon: (0, walletIcon_js_1.getWalletIcon)(""), onClick: () => {
                    handleWalletLogin();
                }, title: locale.linkWallet }))] }));
};
exports.ConnectWalletSocialOptions = ConnectWalletSocialOptions;
const SocialButtonRow = (props) => ((0, jsx_runtime_1.jsx)(basic_js_1.Container, { flex: "row", center: "x", gap: props.children.length > 4 ? "xs" : "sm", style: {
        justifyContent: "center",
        display: "flex",
        ...{
            "& > *": {
                flexBasis: `${100 / props.children.length}%`,
                maxWidth: `${100 / props.children.length}%`,
            },
        },
    }, children: props.children }));
const SocialButton = /* @__PURE__ */ (0, styled_1.default)(buttons_js_1.Button)({
    "&[data-variant='full']": {
        display: "flex",
        justifyContent: "flex-start",
        padding: index_js_1.spacing.md,
        gap: index_js_1.spacing.sm,
        fontSize: index_js_1.fontSize.md,
        fontWeight: 500,
        transition: "background-color 0.2s ease",
        "&:active": {
            boxShadow: "none",
        },
    },
    "&[data-variant='icon']": {
        padding: index_js_1.spacing.sm,
    },
});
//# sourceMappingURL=ConnectWalletSocialOptions.js.map