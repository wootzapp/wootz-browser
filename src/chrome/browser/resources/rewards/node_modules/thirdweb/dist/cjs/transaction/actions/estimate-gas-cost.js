"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.estimateGasCost = estimateGasCost;
const constants_js_1 = require("../../chains/constants.js");
const get_gas_price_js_1 = require("../../gas/get-gas-price.js");
const resolve_promised_value_js_1 = require("../../utils/promise/resolve-promised-value.js");
const units_js_1 = require("../../utils/units.js");
const estimate_gas_js_1 = require("./estimate-gas.js");
/**
 * Estimate the gas cost of a transaction in ether and wei.
 * @example
 * ```ts
 * import { estimateGasCost } from "thirdweb";
 *
 * const gasCost = await estimateGasCost({ transaction });
 * ```
 * @transaction
 */
async function estimateGasCost(options) {
    const { transaction } = options;
    const from = options.from ?? options.account?.address ?? undefined;
    const gasLimit = (await (0, resolve_promised_value_js_1.resolvePromisedValue)(transaction.gas)) ||
        (await (0, estimate_gas_js_1.estimateGas)({ transaction, from }));
    const gasPrice = await (0, get_gas_price_js_1.getGasPrice)({
        client: transaction.client,
        chain: transaction.chain,
    });
    let l1Fee;
    if ((0, constants_js_1.isOpStackChain)(transaction.chain)) {
        const { estimateL1Fee } = await Promise.resolve().then(() => require("../../gas/estimate-l1-fee.js"));
        l1Fee = await estimateL1Fee({
            transaction,
        });
    }
    else {
        l1Fee = 0n;
    }
    const wei = gasLimit * gasPrice + l1Fee;
    return {
        ether: (0, units_js_1.toEther)(wei),
        wei,
    };
}
//# sourceMappingURL=estimate-gas-cost.js.map