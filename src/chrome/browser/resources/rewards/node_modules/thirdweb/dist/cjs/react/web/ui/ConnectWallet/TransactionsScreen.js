"use strict";
"use client";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TransactionsScreen = TransactionsScreen;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_icons_1 = require("@radix-ui/react-icons");
const react_1 = require("react");
const index_js_1 = require("../../../core/design-system/index.js");
const useChainQuery_js_1 = require("../../../core/hooks/others/useChainQuery.js");
const useActiveAccount_js_1 = require("../../../core/hooks/wallets/useActiveAccount.js");
const useActiveWallet_js_1 = require("../../../core/hooks/wallets/useActiveWallet.js");
const useActiveWalletChain_js_1 = require("../../../core/hooks/wallets/useActiveWalletChain.js");
const LoadingScreen_js_1 = require("../../wallets/shared/LoadingScreen.js");
const Spacer_js_1 = require("../components/Spacer.js");
const Tabs_js_1 = require("../components/Tabs.js");
const basic_js_1 = require("../components/basic.js");
const buttons_js_1 = require("../components/buttons.js");
const CoinsIcon_js_1 = require("./icons/CoinsIcon.js");
const FundsIcon_js_1 = require("./icons/FundsIcon.js");
const BuyTxHistory_js_1 = require("./screens/Buy/pay-transactions/BuyTxHistory.js");
const TxDetailsScreen_js_1 = require("./screens/Buy/pay-transactions/TxDetailsScreen.js");
const WalletTransactionHistory_js_1 = require("./screens/WalletTransactionHistory.js");
//
/**
 * @internal
 */
function TransactionsScreen(props) {
    const [activeTab, setActiveTab] = (0, react_1.useState)("Transactions");
    // For now, you can only select pay transactions (purcahses)
    const [selectedTx, setSelectedTx] = (0, react_1.useState)(null);
    const activeChain = (0, useActiveWalletChain_js_1.useActiveWalletChain)();
    const activeWallet = (0, useActiveWallet_js_1.useActiveWallet)();
    const activeAccount = (0, useActiveAccount_js_1.useActiveAccount)();
    const chainExplorers = (0, useChainQuery_js_1.useChainExplorers)(activeChain);
    const payer = activeChain && activeAccount && activeWallet
        ? { chain: activeChain, account: activeAccount, wallet: activeWallet }
        : undefined;
    if (!payer) {
        return (0, jsx_runtime_1.jsx)(LoadingScreen_js_1.LoadingScreen, {});
    }
    if (selectedTx) {
        return ((0, jsx_runtime_1.jsx)(TxDetailsScreen_js_1.TxDetailsScreen, { title: props.title, client: props.client, statusInfo: selectedTx, onBack: () => setSelectedTx(null), onDone: () => setSelectedTx(null), payer: payer, transactionMode: false, isEmbed: false }));
    }
    return ((0, jsx_runtime_1.jsxs)(basic_js_1.Container, { animate: "fadein", children: [(0, jsx_runtime_1.jsx)(basic_js_1.Container, { p: "lg", children: (0, jsx_runtime_1.jsx)(basic_js_1.ModalHeader, { title: props.locale.transactions, onBack: props.onBack }) }), (0, jsx_runtime_1.jsx)(basic_js_1.Line, {}), (0, jsx_runtime_1.jsxs)(basic_js_1.Container, { px: "lg", scrollY: true, style: {
                    minHeight: "330px",
                }, children: [(0, jsx_runtime_1.jsx)(Spacer_js_1.Spacer, { y: "md" }), (0, jsx_runtime_1.jsxs)(Tabs_js_1.default, { options: [
                            {
                                label: ((0, jsx_runtime_1.jsxs)("span", { className: "flex gap-2", children: [(0, jsx_runtime_1.jsx)(CoinsIcon_js_1.CoinsIcon, { size: index_js_1.iconSize.sm }), " Transactions"] })),
                                value: "Transactions",
                            },
                            {
                                label: ((0, jsx_runtime_1.jsxs)("span", { className: "flex gap-2", children: [(0, jsx_runtime_1.jsx)(FundsIcon_js_1.FundsIcon, { size: index_js_1.iconSize.sm }), " Purchases"] })),
                                value: "Purchases",
                            },
                        ], selected: activeTab, onSelect: setActiveTab, children: [activeTab === "Purchases" && ((0, jsx_runtime_1.jsx)(BuyTxHistory_js_1.PayTxHistoryList, { client: props.client, onSelectTx: setSelectedTx })), activeTab === "Transactions" && ((0, jsx_runtime_1.jsx)(WalletTransactionHistory_js_1.WalletTransactionHistory, { locale: props.locale, client: props.client, address: payer.account.address }))] })] }), (0, jsx_runtime_1.jsx)(basic_js_1.Line, {}), (0, jsx_runtime_1.jsx)(basic_js_1.Container, { p: "lg", children: (0, jsx_runtime_1.jsxs)(buttons_js_1.ButtonLink, { fullWidth: true, variant: "outline", href: `${chainExplorers.explorers[0]?.url}/address/${activeAccount?.address}`, target: "_blank", as: "a", gap: "xs", style: {
                        textDecoration: "none",
                        color: "inherit",
                    }, children: ["View on Explorer", (0, jsx_runtime_1.jsx)(react_icons_1.ExternalLinkIcon, { width: index_js_1.iconSize.sm, height: index_js_1.iconSize.sm })] }) })] }));
}
//# sourceMappingURL=TransactionsScreen.js.map