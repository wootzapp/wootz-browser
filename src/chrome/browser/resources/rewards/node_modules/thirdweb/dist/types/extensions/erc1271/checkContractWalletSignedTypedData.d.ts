import { type TypedData, type TypedDataDefinition } from "viem";
import type { ThirdwebContract } from "../../contract/contract.js";
/**
 * @extension ERC1271
 */
export type CheckContractWalletSignTypedDataOptions<typedData extends TypedData | Record<string, unknown>, primaryType extends keyof typedData | "EIP712Domain" = keyof typedData> = {
    contract: ThirdwebContract;
    data: TypedDataDefinition<typedData, primaryType>;
    signature: string;
};
/**
 * Checks if a contract wallet signature is valid.
 * @deprecated Use `verifyTypedData` instead
 * @param options - The options for the checkContractWalletSignature function.
 * @param options.contract - The contract to check the signature against.
 * @param options.message - The message to check the signature against.
 * @param options.signature - The signature to check.
 * @extension ERC1271
 * @example
 * ```ts
 * import { checkContractWalletSignedTypedData } from "thirdweb/extensions/erc1271";
 * const isValid = await checkContractWalletSignedTypedData({
 *  contract: myContract,
 *  data: {
 *   primaryType: "EIP712Domain",
 *   domain: {
 *     name: "Example",
 *     version: "1",
 *     chainId: 1,
 *     verifyingContract: myContract.address,
 *   },
 * });
 * ```
 * @returns A promise that resolves with a boolean indicating if the signature is valid.
 */
export declare function checkContractWalletSignedTypedData<typedData extends TypedData | Record<string, unknown>, primaryType extends keyof typedData | "EIP712Domain" = keyof typedData>(options: CheckContractWalletSignTypedDataOptions<typedData, primaryType>): Promise<boolean>;
//# sourceMappingURL=checkContractWalletSignedTypedData.d.ts.map