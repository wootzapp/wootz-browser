import { getThirdwebBaseUrl } from "../../../../utils/domains.js";
/**
 * @description
 * Links a new account to the current one using an auth token.
 * For the public-facing API, use `wallet.linkProfile` instead.
 *
 * @internal
 */
export async function linkAccount({ client, tokenToLink, }) {
    const IN_APP_URL = getThirdwebBaseUrl("inAppWallet");
    const currentAccountToken = localStorage.getItem(`walletToken-${client.clientId}`);
    if (!currentAccountToken) {
        throw new Error("Failed to link account, no user logged in");
    }
    const headers = {
        "Content-Type": "application/json",
        Authorization: `Bearer iaw-auth-token:${currentAccountToken}`,
        "x-thirdweb-client-id": client.clientId,
    };
    const linkedDetailsResp = await fetch(`${IN_APP_URL}/api/2024-05-05/account/connect`, {
        method: "POST",
        headers,
        body: JSON.stringify({
            accountAuthTokenToConnect: tokenToLink,
        }),
    });
    if (!linkedDetailsResp.ok) {
        const body = await linkedDetailsResp.json();
        throw new Error(body.message || "Failed to link account.");
    }
    const { linkedAccounts } = await linkedDetailsResp.json();
    return (linkedAccounts ?? []);
}
/**
 * @description
 * Gets the linked accounts for the current user.
 * For the public-facing API, use `wallet.getProfiles` instead.
 *
 * @internal
 */
export async function getLinkedProfilesInternal({ client, }) {
    const IN_APP_URL = getThirdwebBaseUrl("inAppWallet");
    const currentAccountToken = localStorage.getItem(`walletToken-${client.clientId}`);
    if (!currentAccountToken) {
        throw new Error("Failed to get linked accounts, no user logged in");
    }
    const headers = {
        "Content-Type": "application/json",
        Authorization: `Bearer iaw-auth-token:${currentAccountToken}`,
        "x-thirdweb-client-id": client.clientId,
    };
    const linkedAccountsResp = await fetch(`${IN_APP_URL}/api/2024-05-05/accounts`, {
        method: "GET",
        headers,
    });
    if (!linkedAccountsResp.ok) {
        const body = await linkedAccountsResp.json();
        throw new Error(body.message || "Failed to get linked accounts.");
    }
    const { linkedAccounts } = await linkedAccountsResp.json();
    return (linkedAccounts ?? []);
}
//# sourceMappingURL=linkAccount.js.map