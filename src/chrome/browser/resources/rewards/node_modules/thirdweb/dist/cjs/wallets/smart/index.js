"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isSmartWallet = isSmartWallet;
exports.connectSmartWallet = connectSmartWallet;
exports.disconnectSmartWallet = disconnectSmartWallet;
const viem_1 = require("viem");
const utils_js_1 = require("../../chains/utils.js");
const contract_js_1 = require("../../contract/contract.js");
const allowance_js_1 = require("../../extensions/erc20/__generated__/IERC20/read/allowance.js");
const approve_js_1 = require("../../extensions/erc20/write/approve.js");
const to_serializable_transaction_js_1 = require("../../transaction/actions/to-serializable-transaction.js");
const send_eip712_transaction_js_1 = require("../../transaction/actions/zksync/send-eip712-transaction.js");
const address_js_1 = require("../../utils/address.js");
const isZkSyncChain_js_1 = require("../../utils/any-evm/zksync/isZkSyncChain.js");
const concat_hex_js_1 = require("../../utils/encoding/helpers/concat-hex.js");
const parseTypedData_js_1 = require("../../utils/signatures/helpers/parseTypedData.js");
const bundler_js_1 = require("./lib/bundler.js");
const calls_js_1 = require("./lib/calls.js");
const constants_js_1 = require("./lib/constants.js");
const userop_js_1 = require("./lib/userop.js");
/**
 * Checks if the provided wallet is a smart wallet.
 *
 * @param wallet - The wallet to check.
 * @returns True if the wallet is a smart wallet, false otherwise.
 */
function isSmartWallet(wallet) {
    return wallet.id === "smart";
}
/**
 * We can get the personal account for given smart account but not the other way around - this map gives us the reverse lookup
 * @internal
 */
const personalAccountToSmartAccountMap = new WeakMap();
const smartWalletToPersonalAccountMap = new WeakMap();
/**
 * @internal
 */
async function connectSmartWallet(wallet, connectionOptions, creationOptions) {
    const { personalAccount, client, chain: connectChain } = connectionOptions;
    if (!personalAccount) {
        throw new Error("Personal wallet does not have an account");
    }
    const options = creationOptions;
    const factoryAddress = options.factoryAddress ??
        (0, constants_js_1.getDefaultAccountFactory)(creationOptions.overrides?.entrypointAddress);
    const chain = connectChain ?? options.chain;
    const sponsorGas = "gasless" in options ? options.gasless : options.sponsorGas;
    if ((0, isZkSyncChain_js_1.isZkSyncChain)(chain)) {
        return [
            createZkSyncAccount({
                creationOptions,
                connectionOptions,
                chain,
                sponsorGas,
            }),
            chain,
        ];
    }
    const factoryContract = (0, contract_js_1.getContract)({
        client: client,
        address: factoryAddress,
        chain: chain,
    });
    // TODO: listen for chainChanged event on the personal wallet and emit the disconnect event on the smart wallet
    const accountAddress = await (0, calls_js_1.predictAddress)({
        factoryContract,
        adminAddress: personalAccount.address,
        predictAddressOverride: options.overrides?.predictAddress,
        accountSalt: options.overrides?.accountSalt,
        accountAddress: options.overrides?.accountAddress,
    })
        .then((address) => address)
        .catch((err) => {
        throw new Error(`Failed to get account address with factory contract ${factoryContract.address} on chain ID ${chain.id}: ${err?.message || "unknown error"}`, { cause: err });
    });
    const accountContract = (0, contract_js_1.getContract)({
        client,
        address: accountAddress,
        chain,
    });
    const account = await createSmartAccount({
        ...options,
        chain,
        sponsorGas,
        personalAccount,
        accountContract,
        factoryContract,
        client,
    });
    personalAccountToSmartAccountMap.set(personalAccount, wallet);
    smartWalletToPersonalAccountMap.set(wallet, personalAccount);
    return [account, chain];
}
/**
 * @internal
 */
async function disconnectSmartWallet(wallet) {
    // look up the personalAccount for the smart wallet
    const personalAccount = smartWalletToPersonalAccountMap.get(wallet);
    if (personalAccount) {
        // remove the mappings
        personalAccountToSmartAccountMap.delete(personalAccount);
        smartWalletToPersonalAccountMap.delete(wallet);
    }
}
async function createSmartAccount(options) {
    const { accountContract } = options;
    const account = {
        address: (0, address_js_1.getAddress)(accountContract.address),
        async sendTransaction(transaction) {
            // if erc20 paymaster - check allowance and approve if needed
            const erc20Paymaster = options.overrides?.erc20Paymaster;
            let paymasterOverride = undefined;
            if (erc20Paymaster) {
                await approveERC20({
                    accountContract,
                    erc20Paymaster,
                    options,
                });
                const paymasterCallback = async () => {
                    return {
                        paymasterAndData: (0, concat_hex_js_1.concatHex)([
                            erc20Paymaster.address,
                            erc20Paymaster?.token,
                        ]),
                        // for 0.7 compatibility
                        paymaster: erc20Paymaster.address,
                        paymasterData: "0x",
                    };
                };
                paymasterOverride = options.overrides?.paymaster || paymasterCallback;
            }
            const executeTx = (0, calls_js_1.prepareExecute)({
                accountContract,
                transaction,
                executeOverride: options.overrides?.execute,
            });
            return _sendUserOp({
                executeTx,
                options: {
                    ...options,
                    overrides: {
                        ...options.overrides,
                        paymaster: paymasterOverride,
                    },
                },
            });
        },
        async sendBatchTransaction(transactions) {
            const executeTx = (0, calls_js_1.prepareBatchExecute)({
                accountContract,
                transactions,
                executeBatchOverride: options.overrides?.executeBatch,
            });
            return _sendUserOp({
                executeTx,
                options,
            });
        },
        async signMessage({ message }) {
            const [{ isContractDeployed }, { readContract }, { encodeAbiParameters }, { hashMessage }, { checkContractWalletSignature },] = await Promise.all([
                Promise.resolve().then(() => require("../../utils/bytecode/is-contract-deployed.js")),
                Promise.resolve().then(() => require("../../transaction/read-contract.js")),
                Promise.resolve().then(() => require("../../utils/abi/encodeAbiParameters.js")),
                Promise.resolve().then(() => require("../../utils/hashing/hashMessage.js")),
                Promise.resolve().then(() => require("../../extensions/erc1271/checkContractWalletSignature.js")),
            ]);
            const isDeployed = await isContractDeployed(accountContract);
            if (!isDeployed) {
                await _deployAccount({
                    options,
                    account,
                    accountContract,
                });
            }
            const originalMsgHash = hashMessage(message);
            // check if the account contract supports EIP721 domain separator based signing
            let factorySupports712 = false;
            try {
                // this will throw if the contract does not support it (old factories)
                await readContract({
                    contract: accountContract,
                    method: "function getMessageHash(bytes32 _hash) public view returns (bytes32)",
                    params: [originalMsgHash],
                });
                factorySupports712 = true;
            }
            catch {
                // ignore
            }
            let sig;
            if (factorySupports712) {
                const wrappedMessageHash = encodeAbiParameters([{ type: "bytes32" }], [originalMsgHash]);
                sig = await options.personalAccount.signTypedData({
                    domain: {
                        name: "Account",
                        version: "1",
                        chainId: options.chain.id,
                        verifyingContract: accountContract.address,
                    },
                    primaryType: "AccountMessage",
                    types: { AccountMessage: [{ name: "message", type: "bytes" }] },
                    message: { message: wrappedMessageHash },
                });
            }
            else {
                sig = await options.personalAccount.signMessage({ message });
            }
            const isValid = await checkContractWalletSignature({
                contract: accountContract,
                message,
                signature: sig,
            });
            if (isValid) {
                return sig;
            }
            throw new Error("Unable to verify signature on smart account, please make sure the smart account is deployed and the signature is valid.");
        },
        async signTypedData(_typedData) {
            const typedData = (0, parseTypedData_js_1.parseTypedData)(_typedData);
            const [{ isContractDeployed }, { readContract }, { encodeAbiParameters }, { checkContractWalletSignedTypedData },] = await Promise.all([
                Promise.resolve().then(() => require("../../utils/bytecode/is-contract-deployed.js")),
                Promise.resolve().then(() => require("../../transaction/read-contract.js")),
                Promise.resolve().then(() => require("../../utils/abi/encodeAbiParameters.js")),
                Promise.resolve().then(() => require("../../extensions/erc1271/checkContractWalletSignedTypedData.js")),
            ]);
            const isSelfVerifyingContract = typedData.domain?.verifyingContract?.toLowerCase() ===
                accountContract.address?.toLowerCase();
            if (isSelfVerifyingContract) {
                // if the contract is self-verifying, we can just sign the message with the EOA (ie. adding a session key)
                return options.personalAccount.signTypedData(typedData);
            }
            const isDeployed = await isContractDeployed(accountContract);
            if (!isDeployed) {
                await _deployAccount({
                    options,
                    account,
                    accountContract,
                });
            }
            const originalMsgHash = (0, viem_1.hashTypedData)(typedData);
            // check if the account contract supports EIP721 domain separator based signing
            let factorySupports712 = false;
            try {
                // this will throw if the contract does not support it (old factories)
                await readContract({
                    contract: accountContract,
                    method: "function getMessageHash(bytes32 _hash) public view returns (bytes32)",
                    params: [originalMsgHash],
                });
                factorySupports712 = true;
            }
            catch {
                // ignore
            }
            let sig;
            if (factorySupports712) {
                const wrappedMessageHash = encodeAbiParameters([{ type: "bytes32" }], [originalMsgHash]);
                sig = await options.personalAccount.signTypedData({
                    domain: {
                        name: "Account",
                        version: "1",
                        chainId: options.chain.id,
                        verifyingContract: accountContract.address,
                    },
                    primaryType: "AccountMessage",
                    types: { AccountMessage: [{ name: "message", type: "bytes" }] },
                    message: { message: wrappedMessageHash },
                });
            }
            else {
                sig = await options.personalAccount.signTypedData(typedData);
            }
            const isValid = await checkContractWalletSignedTypedData({
                contract: accountContract,
                data: typedData,
                signature: sig,
            });
            if (isValid) {
                return sig;
            }
            throw new Error("Unable to verify signature on smart account, please make sure the smart account is deployed and the signature is valid.");
        },
        async onTransactionRequested(transaction) {
            return options.personalAccount.onTransactionRequested?.(transaction);
        },
    };
    return account;
}
async function approveERC20(args) {
    const { accountContract, erc20Paymaster, options } = args;
    const tokenAddress = erc20Paymaster.token;
    const tokenContract = (0, contract_js_1.getContract)({
        address: tokenAddress,
        chain: accountContract.chain,
        client: accountContract.client,
    });
    const accountAllowance = await (0, allowance_js_1.allowance)({
        contract: tokenContract,
        owner: accountContract.address,
        spender: erc20Paymaster.address,
    });
    if (accountAllowance > 0n) {
        return;
    }
    const approveTx = (0, approve_js_1.approve)({
        contract: tokenContract,
        spender: erc20Paymaster.address,
        amountWei: viem_1.maxUint96 - 1n,
    });
    const transaction = await (0, to_serializable_transaction_js_1.toSerializableTransaction)({
        transaction: approveTx,
        from: accountContract.address,
    });
    const executeTx = (0, calls_js_1.prepareExecute)({
        accountContract,
        transaction,
        executeOverride: options.overrides?.execute,
    });
    await _sendUserOp({
        executeTx,
        options: {
            ...options,
            overrides: {
                ...options.overrides,
                erc20Paymaster: undefined,
            },
        },
    });
}
function createZkSyncAccount(args) {
    const { creationOptions, connectionOptions, chain } = args;
    const account = {
        address: connectionOptions.personalAccount.address,
        async sendTransaction(transaction) {
            // override passed tx, we have to refetch gas and fees always
            const prepTx = {
                data: transaction.data,
                to: transaction.to ?? undefined,
                value: transaction.value ?? 0n,
                chain: (0, utils_js_1.getCachedChain)(transaction.chainId),
                client: connectionOptions.client,
            };
            let serializableTransaction = await (0, send_eip712_transaction_js_1.populateEip712Transaction)({
                account,
                transaction: prepTx,
            });
            if (args.sponsorGas) {
                // get paymaster input
                const pmData = await (0, bundler_js_1.getZkPaymasterData)({
                    options: {
                        client: connectionOptions.client,
                        chain,
                        bundlerUrl: creationOptions.overrides?.bundlerUrl,
                        entrypointAddress: creationOptions.overrides?.entrypointAddress,
                    },
                    transaction: serializableTransaction,
                });
                serializableTransaction = {
                    ...serializableTransaction,
                    ...pmData,
                };
            }
            // sign
            const signedTransaction = await (0, send_eip712_transaction_js_1.signEip712Transaction)({
                account,
                chainId: chain.id,
                eip712Transaction: serializableTransaction,
            });
            // broadcast via bundler
            const txHash = await (0, bundler_js_1.broadcastZkTransaction)({
                options: {
                    client: connectionOptions.client,
                    chain,
                    bundlerUrl: creationOptions.overrides?.bundlerUrl,
                    entrypointAddress: creationOptions.overrides?.entrypointAddress,
                },
                transaction: serializableTransaction,
                signedTransaction,
            });
            return {
                transactionHash: txHash.transactionHash,
                client: connectionOptions.client,
                chain: chain,
            };
        },
        async signMessage({ message }) {
            return connectionOptions.personalAccount.signMessage({ message });
        },
        async signTypedData(_typedData) {
            const typedData = (0, parseTypedData_js_1.parseTypedData)(_typedData);
            return connectionOptions.personalAccount.signTypedData(typedData);
        },
        async onTransactionRequested(transaction) {
            return connectionOptions.personalAccount.onTransactionRequested?.(transaction);
        },
    };
    return account;
}
async function _deployAccount(args) {
    const { options, account, accountContract } = args;
    const [{ sendTransaction }, { prepareTransaction }] = await Promise.all([
        Promise.resolve().then(() => require("../../transaction/actions/send-transaction.js")),
        Promise.resolve().then(() => require("../../transaction/prepare-transaction.js")),
    ]);
    const dummyTx = prepareTransaction({
        client: options.client,
        chain: options.chain,
        to: accountContract.address,
        value: 0n,
        gas: 50000n, // force gas to avoid simulation error
    });
    const deployResult = await sendTransaction({
        transaction: dummyTx,
        account,
    });
    return deployResult;
}
async function _sendUserOp(args) {
    const { executeTx, options } = args;
    const unsignedUserOp = await (0, userop_js_1.createUnsignedUserOp)({
        transaction: executeTx,
        factoryContract: options.factoryContract,
        accountContract: options.accountContract,
        adminAddress: options.personalAccount.address,
        sponsorGas: options.sponsorGas,
        overrides: options.overrides,
    });
    const signedUserOp = await (0, userop_js_1.signUserOp)({
        client: options.client,
        chain: options.chain,
        adminAccount: options.personalAccount,
        entrypointAddress: options.overrides?.entrypointAddress,
        userOp: unsignedUserOp,
    });
    const bundlerOptions = {
        chain: options.chain,
        client: options.client,
        bundlerUrl: options.overrides?.bundlerUrl,
        entrypointAddress: options.overrides?.entrypointAddress,
    };
    const userOpHash = await (0, bundler_js_1.bundleUserOp)({
        options: bundlerOptions,
        userOp: signedUserOp,
    });
    // wait for tx receipt rather than return the userOp hash
    const receipt = await (0, userop_js_1.waitForUserOpReceipt)({
        ...options,
        userOpHash,
    });
    // reset the isDeploying flag after every transaction
    (0, userop_js_1.clearAccountDeploying)(options.accountContract);
    return {
        client: options.client,
        chain: options.chain,
        transactionHash: receipt.transactionHash,
    };
}
//# sourceMappingURL=index.js.map