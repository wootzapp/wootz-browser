import type { ThirdwebClient } from "../../../../../client/client.js";
import { ClientScopedStorage } from "../../../core/authentication/client-scoped-storage.js";
import type { AuthAndWalletRpcReturnType, AuthLoginReturnType, AuthStoredTokenWithCookieReturnType, LogoutReturnType, SendEmailOtpReturnType } from "../../../core/authentication/types.js";
import type { ClientIdWithQuerierType, Ecosystem } from "../../types.js";
import type { InAppWalletIframeCommunicator } from "../../utils/iFrameCommunication/InAppWalletIframeCommunicator.js";
import { BaseLogin } from "./base-login.js";
export type AuthQuerierTypes = {
    logout: undefined;
    initIframe: {
        partnerId?: string;
        ecosystemId?: string;
        clientId: string;
        authCookie: string;
        walletUserId: string;
        deviceShareStored: string | null;
    };
    loginWithStoredTokenDetails: {
        storedToken: AuthStoredTokenWithCookieReturnType["storedToken"];
        recoveryCode?: string;
    };
    migrateFromShardToEnclave: {
        storedToken: AuthStoredTokenWithCookieReturnType["storedToken"];
    };
};
/**
 *
 */
export declare class Auth {
    protected client: ThirdwebClient;
    protected ecosystem?: Ecosystem;
    protected AuthQuerier: InAppWalletIframeCommunicator<AuthQuerierTypes>;
    protected localStorage: ClientScopedStorage;
    protected onAuthSuccess: (authResults: AuthAndWalletRpcReturnType) => Promise<AuthLoginReturnType>;
    private BaseLogin;
    /**
     * Used to manage the user's auth states. This should not be instantiated directly.
     * @internal
     */
    constructor({ client, querier, onAuthSuccess, ecosystem, baseUrl, }: ClientIdWithQuerierType & {
        baseUrl: string;
        ecosystem?: Ecosystem;
        onAuthSuccess: (authDetails: AuthAndWalletRpcReturnType) => Promise<AuthLoginReturnType>;
    });
    private preLogin;
    private postLogin;
    loginWithAuthToken(authToken: AuthStoredTokenWithCookieReturnType, recoveryCode?: string): Promise<AuthLoginReturnType>;
    /**
     * Used to log the user into their thirdweb wallet on your platform via a myriad of auth providers
     * @example
     * ```typescript
     * const thirdwebInAppWallet = new InAppWalletSdk({clientId: "YOUR_CLIENT_ID", chain: "Polygon"})
     * try {
     *   const user = await thirdwebInAppWallet.auth.loginWithModal();
     *   // user is now logged in
     * } catch (e) {
     *   // User closed modal or something else went wrong during the authentication process
     *   console.error(e)
     * }
     * ```
     * @returns `{{user: InitializedUser}}` An InitializedUser object.
     */
    loginWithModal(): Promise<AuthLoginReturnType>;
    authenticateWithModal(): Promise<AuthAndWalletRpcReturnType>;
    /**
     * Used to log the user into their thirdweb wallet using email OTP
     * @example
     * ```typescript
     *  // Basic Flow
     *  const thirdwebInAppWallet = new InAppWalletSdk({clientId: "", chain: "Polygon"});
     *  try {
     *    // prompts user to enter the code they received
     *    const user = await thirdwebInAppWallet.auth.loginWithThirdwebEmailOtp({ email : "you@example.com" });
     *    // user is now logged in
     *  } catch (e) {
     *    // User closed the OTP modal or something else went wrong during the authentication process
     *    console.error(e)
     *  }
     * ```
     * @param args - args.email: We will send the email an OTP that needs to be entered in order for them to be logged in.
     * @returns `{{user: InitializedUser}}` An InitializedUser object. See {@link InAppWalletSdk.getUser} for more
     */
    loginWithIframe(args: Parameters<BaseLogin["loginWithIframe"]>[0]): Promise<AuthLoginReturnType>;
    authenticateWithIframe(args: Parameters<BaseLogin["authenticateWithIframe"]>[0]): Promise<AuthAndWalletRpcReturnType>;
    /**
     * @internal
     */
    loginWithCustomJwt(args: Parameters<BaseLogin["loginWithCustomJwt"]>[0]): Promise<AuthLoginReturnType>;
    authenticateWithCustomJwt(args: Parameters<BaseLogin["authenticateWithCustomJwt"]>[0]): Promise<AuthAndWalletRpcReturnType>;
    /**
     * @internal
     */
    loginWithCustomAuthEndpoint(args: Parameters<BaseLogin["loginWithCustomAuthEndpoint"]>[0]): Promise<AuthLoginReturnType>;
    authenticateWithCustomAuthEndpoint(args: Parameters<BaseLogin["authenticateWithCustomAuthEndpoint"]>[0]): Promise<AuthAndWalletRpcReturnType>;
    /**
     * A headless way to send the users at the passed email an OTP code.
     * You need to then call {@link Auth.loginWithEmailOtp} in order to complete the login process
     * @example
     * @param param0.email
     * ```typescript
     *  const thirdwebInAppWallet = new InAppWalletSdk({clientId: "", chain: "Polygon"});
     *  // sends user an OTP code
     * try {
     *    await thirdwebInAppWallet.auth.sendEmailLoginOtp({ email : "you@example.com" });
     * } catch(e) {
     *    // Error Sending user's email an OTP code
     *    console.error(e);
     * }
     *
     * // Then when your user is ready to verify their OTP
     * try {
     *    const user = await thirdwebInAppWallet.auth.verifyEmailLoginOtp({ email: "you@example.com", otp: "6-DIGIT_CODE_HERE" });
     * } catch(e) {
     *    // Error verifying the OTP code
     *    console.error(e)
     * }
     * ```
     * @param param0 - param0.email We will send the email an OTP that needs to be entered in order for them to be logged in.
     * @returns `{{ isNewUser: boolean }}` IsNewUser indicates if the user is a new user to your platform
     * @internal
     */
    sendEmailLoginOtp({ email, }: Parameters<BaseLogin["sendEmailLoginOtp"]>[0]): Promise<SendEmailOtpReturnType>;
    /**
     * @internal
     */
    sendSmsLoginOtp({ phoneNumber, }: Parameters<BaseLogin["sendSmsLoginOtp"]>[0]): Promise<SendEmailOtpReturnType>;
    /**
     * Used to verify the otp that the user receives from thirdweb
     *
     * See {@link Auth.sendEmailLoginOtp} for how the headless call flow looks like. Simply swap out the calls to `loginWithThirdwebEmailOtp` with `verifyThirdwebEmailLoginOtp`
     * @param args - props.email We will send the email an OTP that needs to be entered in order for them to be logged in.
     * props.otp The code that the user received in their email
     * @returns `{{user: InitializedUser}}` An InitializedUser object containing the user's status, wallet, authDetails, and more
     * @internal
     */
    loginWithEmailOtp(args: Parameters<BaseLogin["loginWithEmailOtp"]>[0]): Promise<AuthLoginReturnType>;
    authenticateWithEmailOtp(args: Parameters<BaseLogin["authenticateWithEmailOtp"]>[0]): Promise<AuthAndWalletRpcReturnType>;
    /**
     * @internal
     */
    loginWithSmsOtp(args: Parameters<BaseLogin["loginWithSmsOtp"]>[0]): Promise<AuthLoginReturnType>;
    authenticateWithSmsOtp(args: Parameters<BaseLogin["authenticateWithSmsOtp"]>[0]): Promise<AuthAndWalletRpcReturnType>;
    /**
     * Logs any existing user out of their wallet.
     * @returns `{{success: boolean}}` true if a user is successfully logged out. false if there's no user currently logged in.
     * @internal
     */
    logout(): Promise<LogoutReturnType>;
}
//# sourceMappingURL=iframe-auth.d.ts.map