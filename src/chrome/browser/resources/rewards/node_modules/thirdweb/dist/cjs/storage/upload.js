"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.upload = upload;
const detect_platform_js_1 = require("../utils/detect-platform.js");
const json_js_1 = require("../utils/json.js");
const helpers_js_1 = require("./upload/helpers.js");
/**
 * Uploads files based on the provided options.
 * @param options - The upload options.
 * @returns A promise that resolves to the uploaded file URI or URIs (when passing multiple files).
 * @throws An error if the upload fails.
 * @example
 * ```ts
 * import { upload } from "thirdweb/storage";
 * const uri = await upload({
 *  client,
 *  files: [
 *    new File(["hello world"], "hello.txt"),
 *  ],
 * });
 * ```
 * @storage
 */
async function upload(options) {
    // deal with the differnt file types
    // if there are no files, return an empty array immediately
    if (options.files.length === 0) {
        return null;
    }
    // handle file arrays
    const isFileArray = options.files
        .map((item) => (0, helpers_js_1.isFileOrUint8Array)(item) || typeof item === "string")
        .every((item) => !!item);
    let uris;
    if (isFileArray) {
        // if we already have an array of files, we can just pass it through
        uris = options.files;
    }
    else {
        // otherwise we have to process them first
        let cleaned = options.files;
        // Replace any gateway URLs with their hashes
        cleaned = (0, helpers_js_1.replaceObjectGatewayUrlsWithSchemes)(cleaned);
        // Recurse through data and extract files to upload
        const files = (0, helpers_js_1.extractObjectFiles)(cleaned);
        if (files.length) {
            // Upload all files that came from the object
            const uris_ = await upload({ ...options, files });
            // Recurse through data and replace files with hashes
            cleaned = (0, helpers_js_1.replaceObjectFilesWithUris)(cleaned, 
            // always pass an array even if the underlying upload returns a single uri
            Array.isArray(uris_) ? uris_ : [uris_]);
        }
        uris = cleaned.map((item) => {
            if (typeof item === "string") {
                return item;
            }
            return (0, json_js_1.stringify)(item);
        });
    }
    // end deal with the differnt file types
    const form_ = new FormData();
    const { fileNames, form } = (0, helpers_js_1.buildFormData)(form_, uris, options);
    const platform = (0, detect_platform_js_1.detectPlatform)();
    if (platform === "browser" || platform === "node") {
        const { uploadBatch } = await Promise.resolve().then(() => require("./upload/web-node.js"));
        const uris = await uploadBatch(options.client, form, fileNames, options);
        // if we only passed a single file, return its URI directly
        if (options.files.length === 1) {
            return uris[0];
        }
        return uris;
    }
    throw new Error("Please, use the uploadMobile function in mobile environments.");
}
//# sourceMappingURL=upload.js.map