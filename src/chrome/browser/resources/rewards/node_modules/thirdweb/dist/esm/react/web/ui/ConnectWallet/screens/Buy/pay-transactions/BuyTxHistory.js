"use client";
import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from "react/jsx-runtime";
import { ArrowRightIcon, CrossCircledIcon, ExternalLinkIcon, } from "@radix-ui/react-icons";
import { useState } from "react";
import { fontSize, iconSize, spacing, } from "../../../../../../core/design-system/index.js";
import { useChainExplorers } from "../../../../../../core/hooks/others/useChainQuery.js";
import { useActiveAccount } from "../../../../../../core/hooks/wallets/useActiveAccount.js";
import { useActiveWallet } from "../../../../../../core/hooks/wallets/useActiveWallet.js";
import { useActiveWalletChain } from "../../../../../../core/hooks/wallets/useActiveWalletChain.js";
import { LoadingScreen } from "../../../../../wallets/shared/LoadingScreen.js";
import { Skeleton } from "../../../../components/Skeleton.js";
import { Spinner } from "../../../../components/Spinner.js";
import { Container, Line, ModalHeader } from "../../../../components/basic.js";
import { Button, ButtonLink } from "../../../../components/buttons.js";
import { Text } from "../../../../components/text.js";
import { BuyTxHistoryButton, BuyTxHistoryButtonHeight, } from "./BuyTxHistoryButton.js";
import { TxDetailsScreen } from "./TxDetailsScreen.js";
import { useBuyTransactionsToShow, } from "./useBuyTransactionsToShow.js";
/**
 * @internal
 */
export function PayTxHistoryScreen(props) {
    const [selectedTx, setSelectedTx] = useState(null);
    const activeChain = useActiveWalletChain();
    const activeWallet = useActiveWallet();
    const activeAccount = useActiveAccount();
    const chainExplorers = useChainExplorers(activeChain);
    const payer = activeChain && activeAccount && activeWallet
        ? { chain: activeChain, account: activeAccount, wallet: activeWallet }
        : undefined;
    if (!payer) {
        return _jsx(LoadingScreen, {});
    }
    if (selectedTx) {
        return (_jsx(TxDetailsScreen, { title: props.title, client: props.client, statusInfo: selectedTx, onBack: () => setSelectedTx(null), onDone: props.onDone, transactionMode: props.transactionMode, isEmbed: props.isEmbed, payer: payer }));
    }
    return (_jsxs(Container, { animate: "fadein", children: [_jsx(Container, { p: "lg", children: _jsx(ModalHeader, { title: "Transactions", onBack: props.onBack }) }), _jsx(PayTxHistoryList, { ...props, onSelectTx: setSelectedTx }), _jsx(Line, {}), _jsx(Container, { p: "lg", children: _jsxs(ButtonLink, { fullWidth: true, variant: "outline", href: `${chainExplorers.explorers[0]?.url}/address/${activeAccount?.address}`, target: "_blank", as: "a", gap: "xs", style: {
                        textDecoration: "none",
                        color: "inherit",
                    }, children: ["View on Explorer", " ", _jsx(ExternalLinkIcon, { width: iconSize.sm, height: iconSize.sm })] }) })] }));
}
/**
 * @internal
 */
export function PayTxHistoryList(props) {
    const { pageIndex, setPageIndex, txInfosToShow, hidePagination, isLoading, pagination, } = useBuyTransactionsToShow(props.client);
    const noTransactions = txInfosToShow.length === 0;
    return (_jsxs(Container, { scrollY: true, flex: "column", fullHeight: true, style: {
            width: "100%",
            minHeight: "250px",
            maxHeight: "370px",
            paddingBottom: spacing.lg,
        }, children: [_jsxs(Container, { flex: "column", gap: "xs", expand: true, children: [noTransactions && !isLoading && (_jsxs(Container, { flex: "column", gap: "md", center: "both", color: "secondaryText", style: {
                            minHeight: "250px",
                        }, children: [_jsx(CrossCircledIcon, { width: iconSize.xl, height: iconSize.xl }), _jsx(Text, { children: "No Transactions" })] })), noTransactions && isLoading && (_jsx(Container, { flex: "row", center: "both", style: {
                            minHeight: "250px",
                        }, children: _jsx(Spinner, { size: "xl", color: "accentText" }) })), txInfosToShow.length > 0 && (_jsx(Container, { animate: "fadein", flex: "column", gap: "xs", children: txInfosToShow.map((txInfo) => {
                            return (_jsx(BuyTxHistoryButton, { txInfo: txInfo, client: props.client, onClick: () => {
                                    props.onSelectTx(txInfo);
                                } }, txInfo.type === "swap"
                                ? txInfo.status.source?.transactionHash
                                : txInfo.status.intentId));
                        }) })), isLoading && txInfosToShow.length > 0 && (_jsxs(_Fragment, { children: [_jsx(Skeleton, { width: "100%", height: BuyTxHistoryButtonHeight }), _jsx(Skeleton, { width: "100%", height: BuyTxHistoryButtonHeight }), _jsx(Skeleton, { width: "100%", height: BuyTxHistoryButtonHeight })] }))] }), pagination && !hidePagination && (_jsx(Container, { py: "md", children: _jsxs("div", { style: {
                        display: "grid",
                        gridTemplateColumns: "1fr 1fr",
                        gap: spacing.sm,
                    }, children: [_jsxs(Button, { variant: "outline", gap: "xs", disabled: pageIndex === 0, "data-disabled": pageIndex === 0, style: {
                                fontSize: fontSize.sm,
                                paddingBlock: spacing.sm,
                            }, onClick: () => {
                                setPageIndex((prev) => prev - 1);
                            }, children: [_jsx(ArrowRightIcon, { width: iconSize.sm, height: iconSize.sm, style: {
                                        transform: "rotate(180deg)",
                                    } }), "Prev"] }), _jsxs(Button, { variant: "outline", gap: "xs", disabled: !pagination.hasNextPage, "data-disabled": !pagination.hasNextPage, style: {
                                fontSize: fontSize.sm,
                                paddingBlock: spacing.sm,
                            }, onClick: () => {
                                setPageIndex((prev) => prev + 1);
                            }, children: ["Next", _jsx(ArrowRightIcon, { width: iconSize.sm, height: iconSize.sm })] })] }) }))] }));
}
//# sourceMappingURL=BuyTxHistory.js.map