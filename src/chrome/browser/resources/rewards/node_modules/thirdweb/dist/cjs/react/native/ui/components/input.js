"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ThemedInput = ThemedInput;
exports.ThemedInputWithSubmit = ThemedInputWithSubmit;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
const react_native_1 = require("react-native");
const react_native_svg_1 = require("react-native-svg");
const index_js_1 = require("../../design-system/index.js");
const svgs_js_1 = require("../icons/svgs.js");
const spinner_js_1 = require("./spinner.js");
function ThemedInput(props) {
    const { theme, rightView } = props;
    const [isFocused, setIsFocused] = (0, react_1.useState)(false);
    return ((0, jsx_runtime_1.jsxs)(react_native_1.View, { style: [
            styles.container,
            {
                borderColor: isFocused
                    ? theme.colors.accentButtonBg
                    : theme.colors.borderColor,
            },
        ], children: [(0, jsx_runtime_1.jsx)(react_native_1.TextInput, { placeholderTextColor: theme.colors.secondaryText, style: [styles.input, { color: theme.colors.primaryText }], onFocus: () => setIsFocused(true), onBlur: () => setIsFocused(false), ...props }), rightView && ((0, jsx_runtime_1.jsxs)(jsx_runtime_1.Fragment, { children: [(0, jsx_runtime_1.jsx)(react_native_1.View, { style: { flex: 1 } }), rightView] }))] }));
}
function ThemedInputWithSubmit(props) {
    const { theme, onSubmit } = props;
    const [isFocused, setIsFocused] = (0, react_1.useState)(false);
    const [val, setVal] = (0, react_1.useState)("");
    return ((0, jsx_runtime_1.jsxs)(react_native_1.View, { style: [
            styles.container,
            {
                borderColor: isFocused
                    ? theme.colors.accentButtonBg
                    : theme.colors.borderColor,
            },
        ], children: [(0, jsx_runtime_1.jsx)(react_native_1.TextInput, { placeholderTextColor: theme.colors.secondaryText, style: [
                    styles.input,
                    {
                        color: theme.colors.primaryText,
                    },
                ], value: val, onChangeText: setVal, onFocus: () => setIsFocused(true), onBlur: () => setIsFocused(false), ...props }), onSubmit && ((0, jsx_runtime_1.jsx)(react_native_1.TouchableOpacity, { onPress: () => onSubmit(val), disabled: props.isSubmitting, style: {
                    paddingHorizontal: index_js_1.spacing.lg,
                }, children: props.isSubmitting ? ((0, jsx_runtime_1.jsx)(spinner_js_1.ThemedSpinner, { size: 24, color: theme.colors.secondaryIconColor })) : ((0, jsx_runtime_1.jsx)(react_native_svg_1.SvgXml, { width: 24, height: 24, xml: svgs_js_1.RIGHT_ARROW, color: theme.colors.secondaryIconColor })) }))] }));
}
const styles = react_native_1.StyleSheet.create({
    container: {
        flexDirection: "row",
        alignItems: "center",
        borderRadius: index_js_1.radius.lg,
        borderWidth: 1,
        borderStyle: "solid",
    },
    input: {
        flex: 1,
        flexDirection: "row",
        fontSize: 16,
        height: 56,
        gap: index_js_1.spacing.md,
        paddingLeft: index_js_1.spacing.lg,
        paddingVertical: index_js_1.spacing.md,
        justifyContent: "center",
        alignItems: "center",
    },
});
//# sourceMappingURL=input.js.map