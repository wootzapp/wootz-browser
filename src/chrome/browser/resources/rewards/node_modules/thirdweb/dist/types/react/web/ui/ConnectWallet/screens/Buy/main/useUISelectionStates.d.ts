import type { Chain } from "../../../../../../../chains/types.js";
import type { PayUIOptions } from "../../../../../../core/hooks/connection/ConnectButtonProps.js";
import { type ERC20OrNativeToken } from "../../nativeToken.js";
import { type CurrencyMeta } from "../fiat/currencies.js";
import type { SupportedChainAndTokens } from "../swap/useSwapSupportedChains.js";
type SupportedSourcesInputData = {
    chain: Chain;
    tokens: {
        address: string;
        buyWithCryptoEnabled: boolean;
        buyWithFiatEnabled: boolean;
        name: string;
        symbol: string;
    }[];
};
export declare function useToTokenSelectionStates(options: {
    payOptions: PayUIOptions;
    supportedDestinations: SupportedChainAndTokens;
}): {
    toChain: Readonly<import("../../../../../../../chains/types.js").ChainOptions & {
        rpc: string;
    }>;
    setToChain: import("react").Dispatch<import("react").SetStateAction<Readonly<import("../../../../../../../chains/types.js").ChainOptions & {
        rpc: string;
    }>>>;
    toToken: ERC20OrNativeToken;
    setToToken: import("react").Dispatch<import("react").SetStateAction<ERC20OrNativeToken>>;
    tokenAmount: string;
    setTokenAmount: import("react").Dispatch<import("react").SetStateAction<string>>;
    deferredTokenAmount: string;
};
export declare function useFromTokenSelectionStates(options: {
    payOptions: PayUIOptions;
    supportedSources: SupportedSourcesInputData[];
}): {
    fromChain: Readonly<import("../../../../../../../chains/types.js").ChainOptions & {
        rpc: string;
    }>;
    setFromChain: import("react").Dispatch<import("react").SetStateAction<Readonly<import("../../../../../../../chains/types.js").ChainOptions & {
        rpc: string;
    }> | undefined>>;
    fromToken: ERC20OrNativeToken;
    setFromToken: import("react").Dispatch<import("react").SetStateAction<ERC20OrNativeToken | undefined>>;
};
export declare function useFiatCurrencySelectionStates(options: {
    payOptions: PayUIOptions;
}): {
    selectedCurrency: CurrencyMeta;
    setSelectedCurrency: import("react").Dispatch<import("react").SetStateAction<CurrencyMeta>>;
};
export {};
//# sourceMappingURL=useUISelectionStates.d.ts.map