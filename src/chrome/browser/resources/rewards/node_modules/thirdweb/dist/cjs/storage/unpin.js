"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.unpin = unpin;
const domains_js_1 = require("../utils/domains.js");
const fetch_js_1 = require("../utils/fetch.js");
/**
 * Unpins a file from IPFS.
 * @note For security purposes, this method requires a secret key to be set in the ThirdwebClient instance.
 * @param options - The options for unpinning the file.
 * @param options.client - The Thirdweb client instance.
 * @param options.cid - The content identifier (CID) of the file to unpin.
 * @throws Will throw an error if the client does not have a secret key or if the unpinning fails.
 * @example
 * ```ts
 * import { unpin } from "thirdweb";
 *
 * const result = await unpin({
 *   client: thirdwebClient,
 *   cid: "QmTzQ1N1z1Q1N1z1Q1N1z1Q1N1z1Q1N1z1Q1N1z1Q1N1z1",
 * });
 * ```
 * @storage
 */
async function unpin(options) {
    if (!options.client.secretKey) {
        throw new Error("Unauthorized - Your client must have a secret key to unpin files.");
    }
    const res = await (0, fetch_js_1.getClientFetch)(options.client)(`https://${(0, domains_js_1.getThirdwebDomains)().storage}/ipfs/pinned/${options.cid}`, {
        method: "DELETE",
    });
    if (!res.ok) {
        res.body?.cancel();
        if (res.status === 401) {
            throw new Error("Unauthorized - You don't have permission to use this service.");
        }
        throw new Error(`Failed to unpin file - ${res.status} - ${res.statusText}`);
    }
}
//# sourceMappingURL=unpin.js.map