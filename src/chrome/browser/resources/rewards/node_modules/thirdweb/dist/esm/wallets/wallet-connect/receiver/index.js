import { SignClient } from "@walletconnect/sign-client";
import { getDefaultAppMetadata } from "../../utils/defaultDappMetadata.js";
import { DEFAULT_PROJECT_ID } from "../constants.js";
import { handleSendRawTransactionRequest } from "./request-handlers/send-raw-transaction.js";
import { handleSendTransactionRequest } from "./request-handlers/send-transaction.js";
import { handleSignTransactionRequest } from "./request-handlers/sign-transaction.js";
import { handleSignTypedDataRequest } from "./request-handlers/sign-typed-data.js";
import { handleSignRequest } from "./request-handlers/sign.js";
import { handleSwitchChain } from "./request-handlers/switch-chain.js";
import { getSessions, initializeSessionStore, removeSession, } from "./session-store.js";
let walletConnectClientCache = new WeakMap();
/*
 * @internal
 */
export const clearWalletConnectClientCache = () => {
    walletConnectClientCache = new WeakMap();
};
/**
 * Default request handlers for WalletConnect requests.
 */
export const DefaultWalletConnectRequestHandlers = {
    personal_sign: handleSignRequest,
    eth_sign: handleSignRequest,
    eth_signTypedData: handleSignTypedDataRequest,
    eth_signTypedData_v4: handleSignTypedDataRequest,
    eth_signTransaction: handleSignTransactionRequest,
    eth_sendTransaction: handleSendTransactionRequest,
    eth_sendRawTransaction: handleSendRawTransactionRequest,
    wallet_addEthereumChain: (_) => {
        throw new Error("Unsupported request method: wallet_addEthereumChain");
    },
    wallet_switchEthereumChain: handleSwitchChain,
};
/**
 * Creates a new WalletConnect client for interacting with another application.
 * @param options - The options to use to create the WalletConnect client.
 *
 * @returns The WalletConnect client. Use this client to connect to a WalletConnect URI with {@link createWalletConnectSession}.
 * @example
 * ```ts
 * import { createWalletConnectClient } from "thirdweb/wallets";
 *
 * const client = await createWalletConnectClient({
 *   wallet: wallet,
 *   client: client,
 * });
 * ```
 * Pass custom handlers:
 * ```ts
 * import { createWalletConnectClient } from "thirdweb/wallets";
 *
 * const client = await createWalletConnectClient({
 *   wallet: wallet,
 *   client: client,
 *   requestHandlers: {
 *     eth_signTransaction: ({ account, chainId, params }) => {
 *       // handle transaction signing
 *     },
 *   },
 * });
 * ```
 * Pass connect and disconnect callbacks:
 * ```ts
 * import { createWalletConnectClient } from "thirdweb/wallets";
 *
 * const client = await createWalletConnectClient({
 *   wallet: wallet,
 *   client: client,
 *   onConnect: (session) => {
 *     console.log("Connected to WalletConnect", session);
 *   },
 *   onDisconnect: (session) => {
 *     console.log("Disconnected from WalletConnect", session);
 *   },
 * });
 * ```
 * @wallet
 */
export async function createWalletConnectClient(options) {
    const { wallet, requestHandlers, chains, onConnect, onDisconnect, client: thirdwebClient, } = options;
    if (walletConnectClientCache.has(thirdwebClient)) {
        return walletConnectClientCache.get(thirdwebClient);
    }
    initializeSessionStore({ clientId: options.client.clientId });
    const defaults = getDefaultAppMetadata();
    const walletConnectClient = await SignClient.init({
        projectId: options.projectId ?? DEFAULT_PROJECT_ID,
        metadata: {
            name: options.appMetadata?.name ?? defaults.name,
            url: options.appMetadata?.url ?? defaults.url,
            description: options.appMetadata?.description ?? defaults.description,
            icons: [options.appMetadata?.logoUrl ?? defaults.logoUrl],
        },
    });
    walletConnectClient.on("session_proposal", async (event) => {
        const { onSessionProposal } = await import("./session-proposal.js");
        await onSessionProposal({
            wallet,
            walletConnectClient,
            event,
            chains,
            onConnect,
        }).catch((error) => {
            if (options.onError) {
                options.onError(error);
            }
            else {
                throw error;
            }
        });
    });
    walletConnectClient.on("session_request", async (event) => {
        const { fulfillRequest } = await import("./session-request.js");
        await fulfillRequest({
            wallet,
            walletConnectClient,
            event,
            handlers: requestHandlers,
            thirdwebClient,
        }).catch((error) => {
            if (options.onError) {
                options.onError(error);
            }
            else {
                throw error;
            }
        });
    });
    walletConnectClient.on("session_event", async (_event) => {
        // TODO (accountsChanged, chainChanged)
    });
    walletConnectClient.on("session_ping", (_event) => {
        // TODO
    });
    walletConnectClient.on("session_delete", async (event) => {
        await disconnectWalletConnectSession({
            session: { topic: event.topic },
            walletConnectClient,
        }).catch((error) => {
            if (options.onError) {
                options.onError(error);
            }
            else {
                throw error;
            }
        });
    });
    // Disconnects can come from the user or the connected app, so we inject the callback to ensure its always triggered
    const _disconnect = walletConnectClient.disconnect;
    walletConnectClient.disconnect = async (args) => {
        const result = await _disconnect(args).catch(() => {
            // no-op if already disconnected
        });
        if (onDisconnect) {
            disconnectHook({ topic: args.topic, onDisconnect });
        }
        return result;
    };
    walletConnectClientCache.set(options.client, walletConnectClient);
    return walletConnectClient;
}
/**
 * Initiates a new WalletConnect session for interacting with another application.
 * @param options - The options to use to create the WalletConnect session.
 * @example
 * ```ts
 * import { createWalletConnectClient, createWalletConnectSession } from "thirdweb/wallets";
 *
 * const client = await createWalletConnectClient({
 *   wallet: wallet,
 *   client: client,
 * });
 *
 * const session = await createWalletConnectSession({
 *   walletConnectClient: client,
 *   uri: "wc:...",
 * });
 * ```
 * @wallet
 */
export function createWalletConnectSession(options) {
    const { uri, walletConnectClient } = options;
    walletConnectClient.core.pairing.pair({ uri });
}
/**
 * Retrieves all active WalletConnect sessions.
 * @returns All active WalletConnect sessions.
 * @example
 * ```ts
 * import { getActiveWalletConnectSessions } from "thirdweb/wallets";
 *
 * const sessions = await getActiveWalletConnectSessions();
 * ```
 * @wallet
 */
export async function getActiveWalletConnectSessions() {
    return getSessions();
}
/**
 * Disconnects a WalletConnect session.
 * @param options - The options to use to disconnect the WalletConnect session.
 * @example
 * ```ts
 * import { disconnectWalletConnectSession } from "thirdweb/wallets";
 *
 * await disconnectWalletConnectSession({
 *   session: mySession,
 *   walletConnectClient: wcClient,
 * });
 * ```
 * @wallet
 */
export async function disconnectWalletConnectSession(options) {
    removeSession(options.session);
    try {
        await options.walletConnectClient.disconnect({
            topic: options.session.topic,
            reason: {
                code: 6000,
                message: "Disconnected",
            },
        });
    }
    catch {
        // ignore, the session doesn't exist already
    }
}
/**
 * @internal
 */
async function disconnectHook(options) {
    const { topic, onDisconnect } = options;
    const sessions = await getSessions();
    onDisconnect(sessions.find((s) => s.topic === topic) ?? {
        topic,
    });
}
//# sourceMappingURL=index.js.map