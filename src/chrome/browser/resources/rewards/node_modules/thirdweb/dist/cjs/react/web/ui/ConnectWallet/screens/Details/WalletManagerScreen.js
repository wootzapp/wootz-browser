"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.WalletManagerScreen = WalletManagerScreen;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_icons_1 = require("@radix-ui/react-icons");
const react_1 = require("react");
const address_js_1 = require("../../../../../../utils/address.js");
const CustomThemeProvider_js_1 = require("../../../../../core/design-system/CustomThemeProvider.js");
const index_js_1 = require("../../../../../core/design-system/index.js");
const useWalletBalance_js_1 = require("../../../../../core/hooks/others/useWalletBalance.js");
const useActiveWallet_js_1 = require("../../../../../core/hooks/wallets/useActiveWallet.js");
const useConnectedWallets_js_1 = require("../../../../../core/hooks/wallets/useConnectedWallets.js");
const useDisconnect_js_1 = require("../../../../../core/hooks/wallets/useDisconnect.js");
const useSetActiveWallet_js_1 = require("../../../../../core/hooks/wallets/useSetActiveWallet.js");
const Skeleton_js_1 = require("../../../components/Skeleton.js");
const Spacer_js_1 = require("../../../components/Spacer.js");
const Tooltip_js_1 = require("../../../components/Tooltip.js");
const WalletImage_js_1 = require("../../../components/WalletImage.js");
const basic_js_1 = require("../../../components/basic.js");
const buttons_js_1 = require("../../../components/buttons.js");
const text_js_1 = require("../../../components/text.js");
const WalletEntryButton_js_1 = require("../../WalletEntryButton.js");
const WalletSwitcherConnectionScreen_js_1 = require("../WalletSwitcherConnectionScreen.js");
const formatTokenBalance_js_1 = require("../formatTokenBalance.js");
function WalletManagerScreen(props) {
    const [screen, setScreen] = (0, react_1.useState)("wallets");
    const connectedWallets = (0, useConnectedWallets_js_1.useConnectedWallets)();
    const setActive = (0, useSetActiveWallet_js_1.useSetActiveWallet)();
    // if all wallets are connected and showAll wallets is disabled, hide the connect button
    const hideConnectButton = !props.showAllWallets &&
        props.wallets?.every((w) => connectedWallets.includes(w));
    if (screen === "connect") {
        return ((0, jsx_runtime_1.jsx)(WalletSwitcherConnectionScreen_js_1.WalletSwitcherConnectionScreen, { ...props, isEmbed: false, onSelect: (w) => {
                setActive(w);
                props.onBack();
            } }));
    }
    return ((0, jsx_runtime_1.jsxs)(basic_js_1.Container, { children: [(0, jsx_runtime_1.jsx)(basic_js_1.Container, { p: "lg", children: (0, jsx_runtime_1.jsx)(basic_js_1.ModalHeader, { title: "Wallets", onBack: props.onBack }) }), (0, jsx_runtime_1.jsx)(basic_js_1.Line, {}), (0, jsx_runtime_1.jsx)(Spacer_js_1.Spacer, { y: "md" }), (0, jsx_runtime_1.jsx)(basic_js_1.Container, { px: "md", style: {
                    minHeight: "150px",
                }, children: (0, jsx_runtime_1.jsx)(basic_js_1.Container, { flex: "column", gap: "xs", children: connectedWallets
                        .filter((w) => !props.hiddenWallets?.includes(w.id))
                        .map((w) => {
                        return ((0, jsx_runtime_1.jsx)(WalletManangerButton, { client: props.client, 
                            // address={address || ""}
                            onClick: () => {
                                setActive(w);
                                props.onBack();
                            }, chain: props.activeChain, wallet: w }, w.id));
                    }) }) }), (0, jsx_runtime_1.jsx)(Spacer_js_1.Spacer, { y: "xxl" }), (0, jsx_runtime_1.jsx)(basic_js_1.Container, { p: "lg", children: !hideConnectButton && ((0, jsx_runtime_1.jsxs)(buttons_js_1.Button, { variant: "accent", fullWidth: true, onClick: () => {
                        setScreen("connect");
                    }, gap: "xs", children: [(0, jsx_runtime_1.jsx)(react_icons_1.PlusIcon, { width: index_js_1.iconSize.sm, height: index_js_1.iconSize.sm }), "Connect Wallet"] })) })] }));
}
function WalletManangerButton(props) {
    const theme = (0, CustomThemeProvider_js_1.useCustomTheme)();
    const activeWallet = (0, useActiveWallet_js_1.useActiveWallet)();
    const { disconnect } = (0, useDisconnect_js_1.useDisconnect)();
    const walletId = props.wallet.id;
    const address = props.wallet.getAccount()?.address;
    const balanceQuery = (0, useWalletBalance_js_1.useWalletBalance)({
        address: address,
        chain: props.chain,
        client: props.client,
    });
    return ((0, jsx_runtime_1.jsxs)("div", { style: {
            position: "relative",
        }, children: [(0, jsx_runtime_1.jsx)(WalletEntryButton_js_1.WalletButtonEl, { onClick: props.onClick, style: {
                    justifyContent: "space-between",
                }, children: (0, jsx_runtime_1.jsxs)(basic_js_1.Container, { flex: "row", gap: "md", center: "y", children: [(0, jsx_runtime_1.jsx)(WalletImage_js_1.WalletImage, { client: props.client, id: walletId, size: index_js_1.iconSize.lg }), (0, jsx_runtime_1.jsxs)(basic_js_1.Container, { flex: "column", gap: "4xs", children: [(0, jsx_runtime_1.jsx)(text_js_1.Text, { color: "primaryText", children: (0, address_js_1.shortenAddress)(address || "") }), balanceQuery.data ? ((0, jsx_runtime_1.jsx)(text_js_1.Text, { size: "xs", color: "secondaryText", weight: 400, children: (0, formatTokenBalance_js_1.formatTokenBalance)(balanceQuery.data) })) : ((0, jsx_runtime_1.jsx)(Skeleton_js_1.Skeleton, { width: "100px", height: index_js_1.fontSize.sm }))] })] }) }), (0, jsx_runtime_1.jsx)("div", { style: {
                    position: "absolute",
                    zIndex: 1,
                    right: index_js_1.spacing.xxs,
                    top: "50%",
                    transform: "translateY(-50%)",
                }, children: activeWallet?.id === props.wallet.id ? ((0, jsx_runtime_1.jsx)(Tooltip_js_1.ToolTip, { tip: "Active Wallet", children: (0, jsx_runtime_1.jsx)(buttons_js_1.IconButton, { children: (0, jsx_runtime_1.jsx)(react_icons_1.CheckIcon, { width: index_js_1.iconSize.md, height: index_js_1.iconSize.md }) }) })) : ((0, jsx_runtime_1.jsx)(Tooltip_js_1.ToolTip, { tip: "Disconnect", children: (0, jsx_runtime_1.jsx)(buttons_js_1.IconButton, { onClick: () => {
                            disconnect(props.wallet);
                        }, children: (0, jsx_runtime_1.jsx)(react_icons_1.MinusIcon, { width: index_js_1.iconSize.md, height: index_js_1.iconSize.md, style: {
                                color: theme.colors.secondaryText,
                            } }) }) })) })] }));
}
//# sourceMappingURL=WalletManagerScreen.js.map