"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isRevealSupported = void 0;
exports.reveal = reveal;
const reveal_js_1 = require("../../__generated__/IDelayedReveal/write/reveal.js");
const hashDelayedRevealBatch_js_1 = require("../helpers/hashDelayedRevealBatch.js");
var reveal_js_2 = require("../../__generated__/IDelayedReveal/write/reveal.js");
Object.defineProperty(exports, "isRevealSupported", { enumerable: true, get: function () { return reveal_js_2.isRevealSupported; } });
/**
 * Reveals a previously lazy minted batch of NFTs.
 *
 * @param options {RevealParams} - The reveal parameters.
 * @param options.batchId {number} - The ID of the batch to reveal. Get this by calling `getBatchesToReveal`. {@see getBatchesToReveal}
 * @param options.password {string} - The password for the reveal, set when the batch was created. {@see createDelayedRevealBatch}
 * @param options.contract {@link ThirdwebContract} - The NFT contract instance.
 *
 * @returns The prepared transaction to send.
 *
 * @extension ERC721
 * @example
 * ```ts
 * import { reveal } from "thirdweb/extensions/erc721";
 *
 * const transaction = await reveal({ contract: contract, batchId: 0, password: "password" });
 *
 * const { transactionHash } = await sendTransaction({ transaction, account });
 * ```
 */
function reveal(options) {
    if (!options.password) {
        throw new Error("Password is required");
    }
    return (0, reveal_js_1.reveal)({
        contract: options.contract,
        asyncParams: async () => {
            const key = await (0, hashDelayedRevealBatch_js_1.hashDelayedRevealPassword)(options.batchId, options.password, options.contract);
            return {
                identifier: options.batchId,
                key,
            };
        },
    });
}
//# sourceMappingURL=reveal.js.map