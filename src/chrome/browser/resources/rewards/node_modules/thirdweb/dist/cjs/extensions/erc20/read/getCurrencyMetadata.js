"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getCurrencyMetadata = getCurrencyMetadata;
const addresses_js_1 = require("../../../constants/addresses.js");
const name_js_1 = require("../../common/read/name.js");
const symbol_js_1 = require("../../common/read/symbol.js");
const decimals_js_1 = require("../__generated__/IERC20/read/decimals.js");
/**
 * Retrieves the metadata of a currency.
 * @param options - The options for the transaction.
 * @returns A promise that resolves to an object containing the currency metadata.
 * @extension ERC20
 * @example
 * ```ts
 * import { getCurrencyMetadata } from "thirdweb/extensions/erc20";
 *
 * const currencyMetadata = await getCurrencyMetadata({ contract });
 * ```
 */
async function getCurrencyMetadata(options) {
    // if the contract is the native token, return the native currency metadata
    if ((0, addresses_js_1.isNativeTokenAddress)(options.contract.address)) {
        return {
            name: "Ether",
            symbol: "ETH",
            decimals: 18,
            // overwrite with native currency of the chain if available
            ...options.contract.chain.nativeCurrency,
        };
    }
    try {
        const [name_, symbol_, decimals_] = await Promise.all([
            (0, name_js_1.name)(options).catch(() => ""),
            (0, symbol_js_1.symbol)(options),
            (0, decimals_js_1.decimals)(options),
        ]);
        return {
            name: name_,
            symbol: symbol_,
            decimals: decimals_,
        };
    }
    catch {
        throw new Error("Invalid currency token");
    }
}
//# sourceMappingURL=getCurrencyMetadata.js.map