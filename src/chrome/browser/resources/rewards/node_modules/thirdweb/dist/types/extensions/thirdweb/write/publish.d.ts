import type { ThirdwebClient } from "../../../client/client.js";
import type { BaseTransactionOptions } from "../../../transaction/types.js";
import type { FetchDeployMetadataResult } from "../../../utils/any-evm/deploy-metadata.js";
import type { Account } from "../../../wallets/interfaces/wallet.js";
export type PublishContractParams = {
    account: Account;
    metadata: FetchDeployMetadataResult & {
        version: string;
    };
    previousMetadata?: FetchDeployMetadataResult;
};
/**
 * Publish a contract to the contract publisher.
 *
 * @param options - The options for publishing the contract.
 * @returns The transaction to publish the contract.
 * @example
 * ```ts
 * const tx = publishContract({
 *   contract,
 *   account,
 *   metadata,
 * });
 * ```
 * @extension thirdweb
 */
export declare function publishContract(options: BaseTransactionOptions<PublishContractParams>): import("../../../transaction/prepare-transaction.js").PreparedTransaction<any, import("abitype").AbiFunction, import("../../../transaction/prepare-transaction.js").PrepareTransactionOptions>;
export declare function getContractPublisher(client: ThirdwebClient): Readonly<import("../../../contract/contract.js").ContractOptions<[]>>;
//# sourceMappingURL=publish.d.ts.map