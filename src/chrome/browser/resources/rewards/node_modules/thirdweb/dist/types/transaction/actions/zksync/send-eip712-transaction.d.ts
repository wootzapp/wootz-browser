import { type Hex } from "../../../utils/encoding/hex.js";
import type { Account } from "../../../wallets/interfaces/wallet.js";
import type { PreparedTransaction } from "../../prepare-transaction.js";
import type { WaitForReceiptOptions } from "../wait-for-tx-receipt.js";
import { type EIP721TransactionSerializable } from "./getEip721Domain.js";
type SendEip712TransactionOptions = {
    account: Account;
    transaction: PreparedTransaction<any>;
};
/**
 * Sends a transaction using the provided wallet.
 * @param options - The options for sending the transaction.
 * @returns A promise that resolves to the transaction hash.
 * @throws An error if the wallet is not connected.
 * @transaction
 * @example
 * ```ts
 * import { sendTransaction } from "thirdweb";
 *
 * const { transactionHash } = await sendTransaction({
 *  account,
 *  transaction
 * });
 * ```
 */
export declare function sendEip712Transaction(options: SendEip712TransactionOptions): Promise<WaitForReceiptOptions>;
export declare function signEip712Transaction(options: {
    account: Account;
    eip712Transaction: EIP721TransactionSerializable;
    chainId: number;
}): Promise<Hex>;
export declare function populateEip712Transaction(options: SendEip712TransactionOptions): Promise<EIP721TransactionSerializable>;
export {};
//# sourceMappingURL=send-eip712-transaction.d.ts.map