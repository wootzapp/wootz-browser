"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SendScreen = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
const react_native_1 = require("react-native");
const useChainQuery_js_1 = require("../../../core/hooks/others/useChainQuery.js");
const useActiveAccount_js_1 = require("../../../core/hooks/wallets/useActiveAccount.js");
const useActiveWalletChain_js_1 = require("../../../core/hooks/wallets/useActiveWalletChain.js");
const useSendToken_js_1 = require("../../../core/hooks/wallets/useSendToken.js");
const index_js_1 = require("../../design-system/index.js");
const Header_js_1 = require("../components/Header.js");
const button_js_1 = require("../components/button.js");
const input_js_1 = require("../components/input.js");
const spacer_js_1 = require("../components/spacer.js");
const spinner_js_1 = require("../components/spinner.js");
const text_js_1 = require("../components/text.js");
const ErrorView_js_1 = require("./ErrorView.js");
const SuccessView_js_1 = require("./SuccessView.js");
const TokenListScreen_js_1 = require("./TokenListScreen.js");
const SendScreen = (props) => {
    const { theme, client, onClose, onBack, containerType, supportedTokens } = props;
    const [receiverAddress, setReceiverAddress] = (0, react_1.useState)("");
    const [amount, setAmount] = (0, react_1.useState)("0");
    const [selectedToken, setSelectedToken] = (0, react_1.useState)();
    const account = (0, useActiveAccount_js_1.useActiveAccount)();
    const chain = (0, useActiveWalletChain_js_1.useActiveWalletChain)();
    const { symbol } = (0, useChainQuery_js_1.useChainSymbol)(chain);
    const sendMutation = (0, useSendToken_js_1.useSendToken)(client);
    const [screen, setScreen] = (0, react_1.useState)("base");
    const handleTokenClicked = () => {
        setScreen("tokenList");
    };
    const handleSend = async () => {
        sendMutation.mutate({
            amount,
            receiverAddress,
            tokenAddress: selectedToken?.address,
        }, {
            onSuccess() {
                setScreen("success");
            },
            onError() {
                setScreen("error");
            },
        });
    };
    if (screen === "success") {
        return ((0, jsx_runtime_1.jsxs)(jsx_runtime_1.Fragment, { children: [(0, jsx_runtime_1.jsx)(Header_js_1.Header, { theme: theme, onClose: onClose, onBack: () => setScreen("base"), containerType: containerType, title: "Funds Sent" }), (0, jsx_runtime_1.jsx)(spacer_js_1.Spacer, { size: "xl" }), (0, jsx_runtime_1.jsx)(react_native_1.View, { style: { flex: 1 }, children: (0, jsx_runtime_1.jsx)(SuccessView_js_1.SuccessView, { theme: theme, title: "Transaction Successful" }) })] }));
    }
    if (screen === "error") {
        return ((0, jsx_runtime_1.jsxs)(jsx_runtime_1.Fragment, { children: [(0, jsx_runtime_1.jsx)(Header_js_1.Header, { theme: theme, onClose: onClose, onBack: () => setScreen("base"), containerType: containerType, title: "Error Sending Funds" }), (0, jsx_runtime_1.jsx)(spacer_js_1.Spacer, { size: "xl" }), (0, jsx_runtime_1.jsx)(react_native_1.View, { style: { flex: 1 }, children: (0, jsx_runtime_1.jsx)(ErrorView_js_1.ErrorView, { theme: theme, title: sendMutation.error?.message || "Unknown error" }) })] }));
    }
    if (screen === "tokenList") {
        return ((0, jsx_runtime_1.jsxs)(jsx_runtime_1.Fragment, { children: [(0, jsx_runtime_1.jsx)(Header_js_1.Header, { theme: theme, onClose: onClose, onBack: () => setScreen("base"), containerType: containerType, title: "Token to Send" }), (0, jsx_runtime_1.jsx)(spacer_js_1.Spacer, { size: "xl" }), (0, jsx_runtime_1.jsx)(react_native_1.View, { style: { flex: 1 }, children: (0, jsx_runtime_1.jsx)(TokenListScreen_js_1.TokenListScreen, { theme: theme, client: client, supportedTokens: supportedTokens, onTokenSelected: (t) => {
                            setSelectedToken(t);
                            setScreen("base");
                        } }) })] }));
    }
    return ((0, jsx_runtime_1.jsxs)(jsx_runtime_1.Fragment, { children: [(0, jsx_runtime_1.jsx)(Header_js_1.Header, { theme: theme, onClose: onClose, onBack: onBack, containerType: containerType, title: "Send Funds" }), (0, jsx_runtime_1.jsxs)(react_native_1.View, { style: styles.container, children: [(0, jsx_runtime_1.jsxs)(react_native_1.View, { style: styles.inputContainer, children: [(0, jsx_runtime_1.jsx)(text_js_1.ThemedText, { theme: theme, type: "subtext", children: "Token" }), (0, jsx_runtime_1.jsx)(react_native_1.View, { style: {
                                    borderColor: theme.colors.borderColor,
                                    borderWidth: 1,
                                    paddingHorizontal: index_js_1.spacing.md,
                                    paddingVertical: index_js_1.spacing.smd,
                                    borderRadius: index_js_1.radius.lg,
                                }, children: (0, jsx_runtime_1.jsx)(TokenListScreen_js_1.TokenRow, { theme: theme, client: client, address: account?.address, chain: chain, token: selectedToken, onTokenSelected: handleTokenClicked }) })] }), (0, jsx_runtime_1.jsxs)(react_native_1.View, { style: styles.inputContainer, children: [(0, jsx_runtime_1.jsx)(text_js_1.ThemedText, { theme: theme, type: "subtext", children: "Send to" }), (0, jsx_runtime_1.jsx)(input_js_1.ThemedInput, { theme: theme, onChangeText: setReceiverAddress, value: receiverAddress, placeholder: "0x... / ENS name", textContentType: "URL", keyboardType: "url", autoCapitalize: "none" })] }), (0, jsx_runtime_1.jsxs)(react_native_1.View, { style: styles.inputContainer, children: [(0, jsx_runtime_1.jsx)(text_js_1.ThemedText, { theme: theme, type: "subtext", children: "Amount" }), (0, jsx_runtime_1.jsx)(input_js_1.ThemedInput, { theme: theme, onChangeText: setAmount, value: amount, inputMode: "numeric", rightView: (0, jsx_runtime_1.jsx)(text_js_1.ThemedText, { theme: theme, type: "subtext", style: { marginRight: index_js_1.spacing.md }, children: selectedToken?.symbol || symbol }) })] }), (0, jsx_runtime_1.jsx)(react_native_1.View, { style: styles.inputContainer, children: (0, jsx_runtime_1.jsx)(button_js_1.ThemedButton, { theme: theme, variant: "accent", onPress: handleSend, disabled: sendMutation.isPending, children: sendMutation.isPending ? ((0, jsx_runtime_1.jsx)(spinner_js_1.ThemedSpinner, { color: theme.colors.accentButtonText })) : ((0, jsx_runtime_1.jsx)(text_js_1.ThemedText, { theme: theme, type: "defaultSemiBold", style: {
                                    color: theme.colors.accentButtonText,
                                }, children: "Send" })) }) })] })] }));
};
exports.SendScreen = SendScreen;
const styles = react_native_1.StyleSheet.create({
    container: {
        paddingHorizontal: index_js_1.spacing.lg,
        paddingVertical: index_js_1.spacing.lg,
        flexDirection: "column",
        gap: index_js_1.spacing.md,
    },
    inputContainer: {
        gap: index_js_1.spacing.sm,
    },
});
//# sourceMappingURL=SendScreen.js.map