import { getClientFetch } from "../../utils/fetch.js";
import { getPayBuyWithCryptoHistoryEndpoint } from "../utils/definitions.js";
/**
 * Gets the History of purchases for a given wallet address
 * @param params Object of type [`BuyWithCryptoHistoryParams`](https://portal.thirdweb.com/references/typescript/v5/BuyWithCryptoHistoryParams)
 * @example
 *
 * ```ts
 * import { createThirdwebClient } from "thirdweb";
 * import { BuyWithCryptoHistoryData } from "thirdweb/pay";
 *
 * const client = createThirdwebClient({ clientId: "..." });
 * const walletAddress = "0x...";
 * const params = {
 *  client,
 *  walletAddress,
 * };
 *
 * // grabs the history of purchase transactions for the wallet address
 * const status = await getBuyWithCryptoHistory(params)
 * ```
 * @returns Object of type [`BuyWithCryptoHistoryData`](https://portal.thirdweb.com/references/typescript/v5/BuyWithCryptoHistoryData)
 * @buyCrypto
 */
export async function getBuyWithCryptoHistory(params) {
    try {
        const queryParams = new URLSearchParams();
        queryParams.append("walletAddress", params.walletAddress);
        queryParams.append("start", params.start.toString());
        queryParams.append("count", params.count.toString());
        const queryString = queryParams.toString();
        const url = `${getPayBuyWithCryptoHistoryEndpoint()}?${queryString}`;
        const response = await getClientFetch(params.client)(url);
        // Assuming the response directly matches the SwapResponse interface
        if (!response.ok) {
            response.body?.cancel();
            throw new Error(`HTTP error! status: ${response.status}`);
        }
        const data = (await response.json()).result;
        return data;
    }
    catch (error) {
        throw new Error(`Fetch failed: ${error}`);
    }
}
//# sourceMappingURL=getHistory.js.map