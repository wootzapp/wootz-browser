"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.usePreloadWalletProviders = usePreloadWalletProviders;
const react_query_1 = require("@tanstack/react-query");
const constants_js_1 = require("../../../wallets/constants.js");
const is_ecosystem_wallet_js_1 = require("../../../wallets/ecosystem/is-ecosystem-wallet.js");
function usePreloadWalletProviders({ client, wallets, }) {
    (0, react_query_1.useQueries)({
        queries: wallets
            .filter((w) => w.id === constants_js_1.COINBASE || w.id === "inApp" || (0, is_ecosystem_wallet_js_1.isEcosystemWallet)(w.id))
            .map((w) => ({
            queryKey: ["preload-wallet", w.id],
            queryFn: async () => {
                switch (true) {
                    case constants_js_1.COINBASE === w.id: {
                        const { getCoinbaseWebProvider } = await Promise.resolve().then(() => require("../../../wallets/coinbase/coinbaseWebSDK.js"));
                        await getCoinbaseWebProvider(w.getConfig());
                        // return _something_
                        return true;
                    }
                    case "inApp" === w.id: {
                        const [{ InAppWebConnector }, { getOrCreateInAppWalletConnector },] = await Promise.all([
                            Promise.resolve().then(() => require("../../../wallets/in-app/web/lib/web-connector.js")),
                            Promise.resolve().then(() => require("../../../wallets/in-app/core/wallet/in-app-core.js")),
                        ]);
                        await getOrCreateInAppWalletConnector(client, async (client) => {
                            return new InAppWebConnector({
                                client,
                            });
                        });
                        // return _something_
                        return true;
                    }
                    case (0, is_ecosystem_wallet_js_1.isEcosystemWallet)(w.id): {
                        const [{ InAppWebConnector }, { getOrCreateInAppWalletConnector },] = await Promise.all([
                            Promise.resolve().then(() => require("../../../wallets/in-app/web/lib/web-connector.js")),
                            Promise.resolve().then(() => require("../../../wallets/in-app/core/wallet/in-app-core.js")),
                        ]);
                        const ecosystemWallet = w; // we know this is an ecosystem wallet
                        await getOrCreateInAppWalletConnector(client, async (client) => {
                            return new InAppWebConnector({
                                client,
                                ecosystem: {
                                    id: ecosystemWallet.id,
                                    partnerId: ecosystemWallet.getConfig()?.partnerId,
                                },
                            });
                        }, {
                            id: ecosystemWallet.id,
                            partnerId: ecosystemWallet.getConfig()?.partnerId,
                        });
                        return true;
                    }
                    // potentially add more wallets here
                    default: {
                        return false;
                    }
                }
            },
        })),
    });
}
//# sourceMappingURL=usePreloadWalletProviders.js.map