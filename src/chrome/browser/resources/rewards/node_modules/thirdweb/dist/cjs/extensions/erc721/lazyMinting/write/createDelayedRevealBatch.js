"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createDelayedRevealBatch = createDelayedRevealBatch;
const utils_1 = require("viem/utils");
const upload_js_1 = require("../../../../storage/upload.js");
const encodeAbiParameters_js_1 = require("../../../../utils/abi/encodeAbiParameters.js");
const hex_js_1 = require("../../../../utils/encoding/hex.js");
const keccak256_js_1 = require("../../../../utils/hashing/keccak256.js");
const ipfs_js_1 = require("../../../../utils/ipfs.js");
const getBaseURICount_js_1 = require("../../__generated__/IBatchMintMetadata/read/getBaseURICount.js");
const encryptDecrypt_js_1 = require("../../__generated__/IDelayedReveal/read/encryptDecrypt.js");
const lazyMint_js_1 = require("../../__generated__/ILazyMint/write/lazyMint.js");
const hashDelayedRevealBatch_js_1 = require("../helpers/hashDelayedRevealBatch.js");
/**
 * Creates a batch of encrypted NFTs that can be revealed at a later time.
 *
 * @param options {CreateDelayedRevealBatchParams} - The delayed reveal options.
 * @param options.placeholderMetadata {@link NFTInput} - The placeholder metadata for the batch.
 * @param options.metadata {@link NFTInput} - An array of NFT metadata to be revealed at a later time.
 * @param options.password {string} - The password for the reveal.
 * @param options.contract {@link ThirdwebContract} - The NFT contract instance.
 *
 * @returns The prepared transaction to send.
 *
 * @extension ERC721
 * @example
 * ```ts
 * import { createDelayedRevealBatch } from "thirdweb/extensions/erc721";
 *
 * const placeholderNFT = {
 *   name: "Hidden NFT",
 *   description: "Will be revealed next week!"
 * };
 *
 * const realNFTs = [{
 *   name: "Common NFT #1",
 *   description: "Common NFT, one of many.",
 *   image: ipfs://...,
 * }, {
 *   name: "Super Rare NFT #2",
 *   description: "You got a Super Rare NFT!",
 *   image: ipfs://...,
 * }];
 *
 * const transaction = createDelayedRevealBatch({
 *  contract,
 *  placeholderMetadata: placeholderNFT,
 *  metadata: realNFTs,
 *  password: "password123",
 * });
 *
 * const { transactionHash } = await sendTransaction({ transaction, account });
 * ```
 */
function createDelayedRevealBatch(options) {
    if (!options.password) {
        throw new Error("Password is required");
    }
    return (0, lazyMint_js_1.lazyMint)({
        contract: options.contract,
        asyncParams: async () => {
            const placeholderUris = await (0, upload_js_1.upload)({
                client: options.contract.client,
                files: Array(options.metadata.length).fill(options.placeholderMetadata),
            });
            const placeholderUri = (0, ipfs_js_1.getBaseUriFromBatch)(placeholderUris);
            const uris = await (0, upload_js_1.upload)({
                client: options.contract.client,
                files: options.metadata,
            });
            const baseUri = (0, ipfs_js_1.getBaseUriFromBatch)(uris);
            const baseUriId = await (0, getBaseURICount_js_1.getBaseURICount)({
                contract: options.contract,
            });
            const hashedPassword = await (0, hashDelayedRevealBatch_js_1.hashDelayedRevealPassword)(baseUriId, options.password, options.contract);
            const encryptedBaseURI = await (0, encryptDecrypt_js_1.encryptDecrypt)({
                contract: options.contract,
                data: (0, hex_js_1.toHex)(baseUri),
                key: hashedPassword,
            });
            const chainId = BigInt(options.contract.chain.id);
            const provenanceHash = (0, keccak256_js_1.keccak256)((0, utils_1.encodePacked)(["bytes", "bytes", "uint256"], [(0, hex_js_1.toHex)(baseUri), hashedPassword, chainId]));
            const data = (0, encodeAbiParameters_js_1.encodeAbiParameters)([
                { name: "baseUri", type: "bytes" },
                { name: "provenanceHash", type: "bytes32" },
            ], [encryptedBaseURI, provenanceHash]);
            return {
                amount: BigInt(options.metadata.length),
                baseURIForTokens: placeholderUri.slice(-1) === "/"
                    ? placeholderUri
                    : `${placeholderUri}/`,
                extraData: data,
            };
        },
    });
}
//# sourceMappingURL=createDelayedRevealBatch.js.map