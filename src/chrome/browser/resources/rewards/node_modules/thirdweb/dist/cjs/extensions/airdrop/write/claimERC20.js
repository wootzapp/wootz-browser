"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.claimERC20 = claimERC20;
const addresses_js_1 = require("../../../constants/addresses.js");
const fetch_proofs_erc20_js_1 = require("../../../utils/extensions/airdrop/fetch-proofs-erc20.js");
const tokenMerkleRoot_js_1 = require("../__generated__/Airdrop/read/tokenMerkleRoot.js");
const claimERC20_js_1 = require("../__generated__/Airdrop/write/claimERC20.js");
/**
 * Claim airdrop of ERC20 tokens for allowlisted addresses. (Pull based airdrop)
 * @param options - The transaction options.
 * @example
 * ```ts
 * import { claimERC20 } from "thirdweb/extensions/airdrop";
 * import { sendTransaction } from "thirdweb";
 *
 * const tokenAddress = "0x..." // Address of airdropped tokens to claim
 * const recipient = "0x..."  // Address of the allowlisted recipient
 *
 * const claimTransaction = claimERC20({
 *    contract,
 *    tokenAddress,
 *    recipient
 * });
 *
 * await sendTransaction({ claimTransaction, account });
 *
 * ```
 * @extension AIRDROP
 * @returns A promise that resolves to the transaction result.
 */
function claimERC20(options) {
    return (0, claimERC20_js_1.claimERC20)({
        contract: options.contract,
        asyncParams: async () => {
            const merkleRoot = await (0, tokenMerkleRoot_js_1.tokenMerkleRoot)({
                contract: options.contract,
                tokenAddress: options.tokenAddress,
            });
            const tokenAddress = options.tokenAddress;
            const tokenDecimals = await (async () => {
                if ((0, addresses_js_1.isNativeTokenAddress)(tokenAddress) ||
                    tokenAddress === addresses_js_1.ZERO_ADDRESS) {
                    throw new Error("Token address can't be zero address or native token");
                }
                const [{ getContract }, { decimals: getDecimals }] = await Promise.all([
                    Promise.resolve().then(() => require("../../../contract/contract.js")),
                    Promise.resolve().then(() => require("../../erc20/read/decimals.js")),
                ]);
                const tokenContract = getContract({
                    address: tokenAddress,
                    chain: options.contract.chain,
                    client: options.contract.client,
                });
                return await getDecimals({ contract: tokenContract });
            })();
            const merkleProof = await (0, fetch_proofs_erc20_js_1.fetchProofsERC20)({
                contract: options.contract,
                recipient: options.recipient,
                merkleRoot,
                tokenDecimals,
            });
            if (!merkleProof) {
                throw new Error("Proof not found for recipient address");
            }
            return {
                token: tokenAddress,
                receiver: merkleProof.recipient,
                quantity: merkleProof.quantity,
                proofs: merkleProof.proof,
            };
        },
    });
}
//# sourceMappingURL=claimERC20.js.map