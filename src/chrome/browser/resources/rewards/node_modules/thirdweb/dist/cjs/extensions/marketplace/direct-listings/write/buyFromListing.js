"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.buyFromListing = buyFromListing;
const addresses_js_1 = require("../../../../constants/addresses.js");
const buyFromListing_js_1 = require("../../__generated__/IDirectListings/write/buyFromListing.js");
const getListing_js_1 = require("../read/getListing.js");
const utils_js_1 = require("../utils.js");
/**
 * Buys a listing from the marketplace.
 *
 * @param options - The options for buying from a listing.
 * @returns A promise that resolves to the transaction result.
 * @extension MARKETPLACE
 * @example
 * ```ts
 * import { buyFromListing } from "thirdweb/extensions/marketplace";
 * import { sendTransaction } from "thirdweb";
 *
 * const transaction = buyFromListing({
 *  contract,
 *  listingId: 1n,
 *  quantity: 1n,
 *  recipient: "0x...",
 * });
 *
 * await sendTransaction({ transaction, account });
 * ```
 */
function buyFromListing(options) {
    return (0, buyFromListing_js_1.buyFromListing)({
        contract: options.contract,
        asyncParams: async () => {
            const listing = await (0, getListing_js_1.getListing)({
                contract: options.contract,
                listingId: options.listingId,
            });
            const listingValidity = await (0, utils_js_1.isListingValid)({
                contract: options.contract,
                listing: listing,
                quantity: options.quantity,
            });
            if (!listingValidity.valid) {
                throw new Error(listingValidity.reason);
            }
            return {
                listingId: options.listingId,
                quantity: options.quantity,
                buyFor: options.recipient,
                currency: listing.currencyContractAddress,
                expectedTotalPrice: listing.pricePerToken * options.quantity,
                overrides: {
                    value: (0, addresses_js_1.isNativeTokenAddress)(listing.currencyContractAddress)
                        ? listing.pricePerToken * options.quantity
                        : 0n,
                    extraGas: 50000n, // add extra gas to account for router call
                },
            };
        },
    });
}
//# sourceMappingURL=buyFromListing.js.map