"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.buyFromListing = buyFromListing;
exports.isBuyFromListingSupported = isBuyFromListingSupported;
const addresses_js_1 = require("../../../../constants/addresses.js");
const BuyFromListing = require("../../__generated__/IDirectListings/write/buyFromListing.js");
const GetListing = require("../read/getListing.js");
const utils_js_1 = require("../utils.js");
/**
 * Buys a listing from the marketplace.
 *
 * @param options - The options for buying from a listing.
 * @returns A promise that resolves to the transaction result.
 * @extension MARKETPLACE
 * @example
 * ```ts
 * import { buyFromListing } from "thirdweb/extensions/marketplace";
 * import { sendTransaction } from "thirdweb";
 *
 * const transaction = buyFromListing({
 *  contract,
 *  listingId: 1n,
 *  quantity: 1n,
 *  recipient: "0x...",
 * });
 *
 * await sendTransaction({ transaction, account });
 * ```
 */
function buyFromListing(options) {
    return BuyFromListing.buyFromListing({
        contract: options.contract,
        asyncParams: async () => {
            const listing = await GetListing.getListing({
                contract: options.contract,
                listingId: options.listingId,
            });
            const listingValidity = await (0, utils_js_1.isListingValid)({
                contract: options.contract,
                listing: listing,
                quantity: options.quantity,
            });
            if (!listingValidity.valid) {
                throw new Error(listingValidity.reason);
            }
            return {
                listingId: options.listingId,
                quantity: options.quantity,
                buyFor: options.recipient,
                currency: listing.currencyContractAddress,
                expectedTotalPrice: listing.pricePerToken * options.quantity,
                overrides: {
                    value: (0, addresses_js_1.isNativeTokenAddress)(listing.currencyContractAddress)
                        ? listing.pricePerToken * options.quantity
                        : 0n,
                    extraGas: 50000n, // add extra gas to account for router call
                },
            };
        },
    });
}
/**
 * Checks if the `buyFromListing` method is supported by the given contract.
 * @param availableSelectors An array of 4byte function selectors of the contract. You can get this in various ways, such as using "whatsabi" or if you have the ABI of the contract available you can use it to generate the selectors.
 * @returns A boolean indicating if the `buyFromListing` method is supported.
 * @extension MARKETPLACE
 * @example
 * ```ts
 * import { isBuyFromListingSupported } from "thirdweb/extensions/marketplace";
 *
 * const supported = isBuyFromListingSupported(["0x..."]);
 * ```
 */
function isBuyFromListingSupported(availableSelectors) {
    return (BuyFromListing.isBuyFromListingSupported(availableSelectors) &&
        GetListing.isGetListingSupported(availableSelectors));
}
//# sourceMappingURL=buyFromListing.js.map