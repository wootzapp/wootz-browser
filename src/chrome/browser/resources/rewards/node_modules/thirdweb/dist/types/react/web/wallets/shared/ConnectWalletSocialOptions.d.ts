import type { Chain } from "../../../../chains/types.js";
import type { ThirdwebClient } from "../../../../client/client.js";
import type { Profile } from "../../../../wallets/in-app/core/authentication/types.js";
import type { Account, Wallet } from "../../../../wallets/interfaces/wallet.js";
import { type SocialAuthOption } from "../../../../wallets/types.js";
import type { EcosystemWalletId } from "../../../../wallets/wallet-types.js";
import type { InAppWalletLocale } from "./locale/types.js";
export type ConnectWalletSelectUIState = undefined | {
    emailLogin?: string;
    phoneLogin?: string;
    socialLogin?: {
        type: SocialAuthOption;
        connectionPromise: Promise<Account | Profile[]>;
    };
    guestLogin?: {
        connectionPromise: Promise<Account | Profile[]>;
    };
    passkeyLogin?: boolean;
    walletLogin?: boolean;
};
type ConnectWalletSocialOptionsProps = {
    select: () => void;
    done: () => void;
    locale: InAppWalletLocale;
    wallet: Wallet<EcosystemWalletId> | Wallet<"inApp">;
    goBack?: () => void;
    chain: Chain | undefined;
    client: ThirdwebClient;
    size: "compact" | "wide";
    isLinking?: boolean;
    disabled?: boolean;
};
/**
 * @internal
 */
export declare const ConnectWalletSocialOptions: (props: ConnectWalletSocialOptionsProps) => import("react/jsx-runtime.js").JSX.Element;
export {};
//# sourceMappingURL=ConnectWalletSocialOptions.d.ts.map