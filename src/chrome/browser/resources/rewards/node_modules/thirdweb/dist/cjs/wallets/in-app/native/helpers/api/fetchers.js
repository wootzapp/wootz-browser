"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.authFetchEmbeddedWalletUser = exports.verifyClientId = void 0;
exports.getSessionHeaders = getSessionHeaders;
exports.fetchUserDetails = fetchUserDetails;
exports.storeUserShares = storeUserShares;
exports.getUserShares = getUserShares;
exports.deleteAccount = deleteAccount;
const fetch_js_1 = require("../../../../../utils/fetch.js");
const random_js_1 = require("../../../../../utils/random.js");
const constants_js_1 = require("../constants.js");
const errors_js_1 = require("../errors.js");
const local_js_1 = require("../storage/local.js");
const EMBEDDED_WALLET_TOKEN_HEADER = "embedded-wallet-token";
const PAPER_CLIENT_ID_HEADER = "x-thirdweb-client-id";
let sessionNonce = undefined;
function getSessionHeaders() {
    if (!sessionNonce) {
        sessionNonce = (0, random_js_1.randomBytesHex)(16);
    }
    return {
        "Content-Type": "application/json",
        [constants_js_1.THIRDWEB_SESSION_NONCE_HEADER]: sessionNonce,
    };
}
const verifyClientId = async (client) => {
    const resp = await (0, fetch_js_1.getClientFetch)(client)(constants_js_1.ROUTE_VERIFY_THIRDWEB_CLIENT_ID, {
        method: "POST",
        headers: {
            ...getSessionHeaders(),
        },
        body: JSON.stringify({ clientId: client.clientId, parentDomain: "" }),
    });
    if (!resp.ok) {
        const error = await resp.json();
        throw new Error(`Something went wrong generating auth token from user cognito email otp. ${error.message}`);
    }
    return {
        success: true,
    };
};
exports.verifyClientId = verifyClientId;
const authFetchEmbeddedWalletUser = async (client, url, props, retries = 3) => {
    const authTokenClient = await (0, local_js_1.getAuthTokenClient)(client.clientId);
    const params = { ...props };
    params.headers = params?.headers
        ? {
            ...params.headers,
            Authorization: `Bearer ${EMBEDDED_WALLET_TOKEN_HEADER}:${authTokenClient || ""}`,
            [PAPER_CLIENT_ID_HEADER]: client.clientId,
            ...getSessionHeaders(),
        }
        : {
            Authorization: `Bearer ${EMBEDDED_WALLET_TOKEN_HEADER}:${authTokenClient || ""}`,
            [PAPER_CLIENT_ID_HEADER]: client.clientId,
            ...getSessionHeaders(),
        };
    try {
        return await (0, fetch_js_1.getClientFetch)(client)(url, params);
    }
    catch (e) {
        if (retries > 0) {
            await new Promise((resolve) => setTimeout(resolve, 500));
            return await (0, exports.authFetchEmbeddedWalletUser)(client, url, params, retries - 1);
        }
        throw e;
    }
};
exports.authFetchEmbeddedWalletUser = authFetchEmbeddedWalletUser;
async function fetchUserDetails(args) {
    const url = new URL(constants_js_1.ROUTE_EMBEDDED_WALLET_DETAILS);
    if (args) {
        // TODO (inapp) remove this, unused in the backend but still required
        url.searchParams.append("email", args.email ?? "none");
        url.searchParams.append("clientId", args.client.clientId);
    }
    const resp = await (0, exports.authFetchEmbeddedWalletUser)(args.client, url.href, {
        method: "GET",
    });
    if (!resp.ok) {
        const error = await resp.json();
        throw new Error(`Something went wrong determining wallet type. ${error.message}`);
    }
    const result = (await resp.json());
    return result;
}
async function storeUserShares({ client, walletAddress, maybeEncryptedRecoveryShares, authShare, }) {
    const resp = await (0, exports.authFetchEmbeddedWalletUser)(client, constants_js_1.ROUTE_STORE_USER_SHARES, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
            walletAddress,
            maybeEncryptedRecoveryShares,
            authShare,
        }),
    });
    if (!resp.ok) {
        const error = await resp.json();
        throw new Error(`Something went wrong storing user wallet shares: ${JSON.stringify(error.message, null, 2)}`);
    }
}
async function getUserShares(client, getShareUrl) {
    const resp = await (0, exports.authFetchEmbeddedWalletUser)(client, getShareUrl.href, {
        method: "GET",
    });
    if (!resp.ok) {
        const error = await resp.json();
        throw new Error(`Something went wrong getting user's wallet: ${JSON.stringify(error.message, null, 2)} `);
    }
    const respJ = await resp.json();
    try {
        return respJ;
    }
    catch (e) {
        throw new Error((0, errors_js_1.createErrorMessage)("Malformed response from the ews user wallet API", e));
    }
}
async function deleteAccount(client) {
    const url = new URL(constants_js_1.ROUTE_EMBEDDED_WALLET_DETAILS);
    const resp = await (0, exports.authFetchEmbeddedWalletUser)(client, url.href, {
        method: "DELETE",
    });
    if (!resp.ok) {
        const error = await resp.json();
        throw new Error(`Something went wrong deleting the active account: ${error.message}`);
    }
    return await resp.json();
}
//# sourceMappingURL=fetchers.js.map