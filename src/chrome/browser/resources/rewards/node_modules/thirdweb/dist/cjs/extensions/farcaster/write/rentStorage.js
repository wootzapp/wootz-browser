"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.rentStorage = rentStorage;
const prepare_contract_call_js_1 = require("../../../transaction/prepare-contract-call.js");
const bigint_js_1 = require("../../../utils/bigint.js");
const getStorageRegistry_js_1 = require("../contracts/getStorageRegistry.js");
const getStoragePrice_js_1 = require("../read/getStoragePrice.js");
/**
 * Rent storage for the provided farcaster fid.
 * @param options - The options for calling the `rentStorage` function.
 * @returns A prepared transaction object to rent the storage.
 * @extension FARCASTER
 * @example
 * ```ts
 * import { rentStorage } from "thirdweb/extensions/farcaster";
 * import { sendTransaction } from "thirdweb";
 *
 * const transaction = rentStorage({
 *  client,
 * 	fid,
 *  units,
 * });
 *
 * await sendTransaction({ transaction, account });
 * ```
 */
function rentStorage(options) {
    const units = (0, bigint_js_1.toBigInt)(options.units ?? 1);
    if (units < 1n) {
        throw new Error(`Expected units to be greater than or equal to 1, got ${options.units}`);
    }
    const fid = (0, bigint_js_1.toBigInt)(options.fid);
    return (0, prepare_contract_call_js_1.prepareContractCall)({
        contract: (0, getStorageRegistry_js_1.getStorageRegistry)({
            client: options.client,
            chain: options.chain,
        }),
        method: [
            "0x783a112b",
            [
                {
                    type: "uint256",
                    name: "fid",
                },
                {
                    type: "uint256",
                    name: "units",
                },
            ],
            [
                {
                    type: "uint256",
                    name: "overpayment",
                },
            ],
        ],
        value: async () => {
            const price = await (0, getStoragePrice_js_1.getStoragePrice)({
                client: options.client,
                chain: options.chain,
                units,
            });
            return price;
        },
        params: [fid, units],
    });
}
//# sourceMappingURL=rentStorage.js.map