import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { useState } from "react";
import { isMobile } from "../../../../utils/web/isMobile.js";
import { openWindow } from "../../../../utils/web/openWindow.js";
import { useCustomTheme } from "../../../core/design-system/CustomThemeProvider.js";
import { iconSize, radius, spacing, } from "../../../core/design-system/index.js";
import { AppleIcon } from "../../ui/ConnectWallet/icons/AppleIcon.js";
import { ChromeIcon } from "../../ui/ConnectWallet/icons/ChromeIcon.js";
import { PlayStoreIcon } from "../../ui/ConnectWallet/icons/PlayStoreIcon.js";
import { QRCode } from "../../ui/components/QRCode.js";
import { Spacer } from "../../ui/components/Spacer.js";
import { WalletImage } from "../../ui/components/WalletImage.js";
import { Container, ModalHeader } from "../../ui/components/basic.js";
import { Text } from "../../ui/components/text.js";
import { StyledButton } from "../../ui/design-system/elements.js";
/**
 * @internal
 */
export const GetStartedScreen = ({ wallet, walletInfo, header, footer, onBack, locale, client }) => {
    const [showScreen, setShowScreen] = useState("base");
    const isScanScreen = showScreen === "android-scan" || showScreen === "ios-scan";
    const handleBack = onBack
        ? () => {
            if (showScreen === "base") {
                onBack();
            }
            else {
                setShowScreen("base");
            }
        }
        : undefined;
    return (_jsx(Container, { fullHeight: true, flex: "column", animate: "fadein", children: _jsxs(Container, { expand: true, flex: "column", p: "lg", children: [showScreen === "android-scan" && walletInfo.app.android && (_jsx(InstallScanScreen, { platformIcon: _jsx(PlayStoreIcon, { size: iconSize.md }), url: walletInfo.app.android, platform: "Google Play", walletName: walletInfo.name, walletId: wallet.id, onBack: handleBack, locale: {
                        scanToDownload: locale.getStartedScreen.instruction,
                    }, client: client })), showScreen === "ios-scan" && walletInfo.app.ios && (_jsx(InstallScanScreen, { platformIcon: _jsx(AppleIcon, { size: iconSize.md }), url: walletInfo.app.ios, platform: "App Store", walletName: walletInfo.name, walletId: wallet.id, onBack: handleBack, locale: {
                        scanToDownload: locale.getStartedScreen.instruction,
                    }, client: client })), showScreen === "base" && (_jsxs(Container, { expand: true, flex: "column", children: [header || (_jsx(ModalHeader, { onBack: handleBack, title: walletInfo.name })), _jsx(Spacer, { y: "xl" }), _jsx(Container, { expand: true, animate: "fadein", flex: "column", center: "y", style: {
                                minHeight: "250px",
                            }, children: _jsxs(Container, { flex: "column", gap: "xs", children: [walletInfo.app.chrome && (_jsxs(ButtonLink, { onClick: () => {
                                            openWindow(walletInfo.app.chrome || "");
                                        }, children: [_jsx(ChromeIcon, { size: iconSize.lg }), _jsx("span", { children: locale.download.chrome })] })), walletInfo.app.android && (_jsxs(ButtonLink, { as: "button", onClick: () => {
                                            if (isMobile()) {
                                                openWindow(walletInfo.app.android || "");
                                            }
                                            else {
                                                setShowScreen("android-scan");
                                            }
                                        }, children: [_jsx(PlayStoreIcon, { size: iconSize.lg }), _jsx("span", { children: locale.download.android })] })), walletInfo.app.ios && (_jsxs(ButtonLink, { as: "button", onClick: () => {
                                            if (isMobile()) {
                                                openWindow(walletInfo.app.ios || "");
                                            }
                                            else {
                                                setShowScreen("ios-scan");
                                            }
                                        }, children: [_jsx(AppleIcon, { size: iconSize.lg }), _jsx("span", { children: locale.download.iOS })] }))] }) })] })), !isScanScreen && footer] }) }));
};
/**
 * @internal
 */
const InstallScanScreen = (props) => {
    return (_jsxs(Container, { animate: "fadein", expand: true, children: [_jsx(ModalHeader, { title: props.walletName, onBack: props.onBack }), _jsx(Spacer, { y: "xl" }), _jsxs(Container, { flex: "column", expand: true, center: "both", style: {
                    textAlign: "center",
                }, children: [_jsx(QRCode, { qrCodeUri: props.url, QRIcon: _jsx(WalletImage, { id: props.walletId, size: iconSize.xxl, client: props.client }) }), _jsx(Spacer, { y: "xl" }), _jsx(Text, { multiline: true, center: true, balance: true, children: props.locale.scanToDownload }), _jsx(Spacer, { y: "xs" })] })] }));
};
const ButtonLink = /* @__PURE__ */ StyledButton((_) => {
    const theme = useCustomTheme();
    return {
        all: "unset",
        textDecoration: "none",
        padding: `${spacing.sm} ${spacing.md}`,
        borderRadius: radius.sm,
        display: "flex",
        alignItems: "center",
        gap: spacing.md,
        cursor: "pointer",
        boxSizing: "border-box",
        width: "100%",
        fontWeight: 500,
        color: theme.colors.secondaryButtonText,
        background: theme.colors.secondaryButtonBg,
        transition: "100ms ease",
        "&:hover": {
            background: theme.colors.secondaryButtonHoverBg,
            textDecoration: "none",
            color: theme.colors.primaryText,
        },
    };
});
//# sourceMappingURL=GetStartedScreen.js.map