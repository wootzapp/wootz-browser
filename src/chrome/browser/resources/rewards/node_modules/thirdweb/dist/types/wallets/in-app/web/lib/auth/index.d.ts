import type { ThirdwebClient } from "../../../../../client/client.js";
import type { OneOf } from "../../../../../utils/type-utils.js";
import type { SocialAuthOption } from "../../../../../wallets/types.js";
import { type AuthArgsType, type GetAuthenticatedUserParams, type PreAuthArgsType } from "../../../core/authentication/types.js";
import type { Ecosystem } from "../../types.js";
/**
 * Retrieves the authenticated user email for the active in-app wallet.
 * @param options - The arguments for retrieving the authenticated user.
 * @returns The authenticated user email if logged in and wallet initialized, otherwise undefined.
 * @example
 * ```ts
 * import { getUserEmail } from "thirdweb/wallets/in-app";
 *
 * const email = await getUserEmail({ client });
 * console.log(email);
 * ```
 * @wallet
 */
export declare function getUserEmail(options: GetAuthenticatedUserParams): Promise<string | undefined>;
/**
 * Retrieves the authenticated user phone number for the active embedded wallet.
 * @param options - The arguments for retrieving the authenticated user.
 * @returns The authenticated user phone number if authenticated with phone number, otherwise undefined.
 * @example
 * ```ts
 * import { getUserPhoneNumber } from "thirdweb/wallets/embedded";
 *
 * const phoneNumber = await getUserPhoneNumber({ client });
 * console.log(phoneNumber);
 * ```
 * @wallet
 */
export declare function getUserPhoneNumber(options: GetAuthenticatedUserParams): Promise<string | undefined>;
/**
 * Pre-authenticates the user based on the provided authentication strategy.
 * Use this function to send a verification code to the user's email or phone number.
 * @param args - The arguments required for pre-authentication.
 * @returns A promise that resolves to the pre-authentication result.
 * @throws An error if the provided authentication strategy doesn't require pre-authentication.
 * @example
 * ```ts
 * import { preAuthenticate } from "thirdweb/wallets/in-app";
 *
 * const result = await preAuthenticate({
 *  client,
 *  strategy: "email",
 *  email: "example@example.org",
 * });
 * ```
 * @wallet
 */
export declare function preAuthenticate(args: PreAuthArgsType): Promise<void>;
/**
 * Authenticates the user based on the provided authentication arguments.
 * @param args - The authentication arguments.
 * @returns A promise that resolves to the authentication result.
 * @example
 * ```ts
 * import { authenticate } from "thirdweb/wallets/in-app";
 *
 * const result = await authenticate({
 *  client,
 *  strategy: "email",
 *  email: "example@example.org",
 *  verificationCode: "123456",
 * });
 * ```
 * @wallet
 */
export declare function authenticate(args: OneOf<AuthArgsType | {
    strategy: SocialAuthOption;
    client: ThirdwebClient;
    ecosystem?: Ecosystem;
    redirect: boolean;
}>): Promise<void | import("../../../core/authentication/types.js").AuthLoginReturnType>;
//# sourceMappingURL=index.d.ts.map