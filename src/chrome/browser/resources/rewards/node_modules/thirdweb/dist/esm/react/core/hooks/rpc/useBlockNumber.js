import { useQuery, useQueryClient } from "@tanstack/react-query";
import { useEffect, useMemo } from "react";
import { eth_blockNumber } from "../../../../rpc/actions/eth_blockNumber.js";
import { getRpcClient } from "../../../../rpc/rpc.js";
import { watchBlockNumber } from "../../../../rpc/watchBlockNumber.js";
/**
 * Hook that watches for changes in the block number on a given chain.
 * @param options - The options for the hook.
 * @returns The latest block number.
 * @example
 * ```jsx
 * import { useBlockNumber } from "thirdweb/react";
 * const blockNumber = useBlockNumber({client, chain});
 * ```
 * @utils
 */
export function useBlockNumber(options) {
    const { client, chain, enabled = true, watch = true } = options;
    const queryClient = useQueryClient();
    const queryKey = useMemo(() => [chain.id, "blockNumber"], [chain]);
    const query = useQuery({
        // TODO: technically client should be part of the queryKey here...
        queryKey: queryKey,
        queryFn: async () => {
            const rpcRequest = getRpcClient({ client, chain });
            return await eth_blockNumber(rpcRequest);
        },
        enabled,
    });
    useEffect(() => {
        if (!enabled || !watch) {
            // don't watch if not enabled or not watching
            return;
        }
        return watchBlockNumber({
            client,
            chain,
            onNewBlockNumber: (newBlockNumber) => {
                queryClient.setQueryData(queryKey, newBlockNumber);
            },
        });
    }, [client, chain, enabled, queryClient, queryKey, watch]);
    return query.data;
}
//# sourceMappingURL=useBlockNumber.js.map