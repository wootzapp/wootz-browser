import { useMutation } from "@tanstack/react-query";
import { getGasPrice } from "../../../../gas/get-gas-price.js";
import { estimateGasCost } from "../../../../transaction/actions/estimate-gas-cost.js";
import { sendTransaction } from "../../../../transaction/actions/send-transaction.js";
import { resolvePromisedValue } from "../../../../utils/promise/resolve-promised-value.js";
import { getTokenBalance } from "../../../../wallets/utils/getTokenBalance.js";
import { getWalletBalance } from "../../../../wallets/utils/getWalletBalance.js";
import { hasSponsoredTransactionsEnabled } from "../../utils/wallet.js";
/**
 * A hook to send a transaction.
 * @returns A mutation object to send a transaction.
 * @example
 * ```jsx
 * import { useSendTransaction } from "thirdweb/react";
 * const { mutate: sendTx, data: transactionResult } = useSendTransaction();
 *
 * // later
 * sendTx(tx);
 * ```
 * @internal
 */
export function useSendTransactionCore(args) {
    const { showPayModal, gasless, wallet, switchChain } = args;
    let _account = wallet?.getAccount();
    return useMutation({
        mutationFn: async (tx) => {
            // switch chain if needed
            if (wallet && tx.chain.id !== wallet.getChain()?.id) {
                await switchChain(tx.chain);
                // in smart wallet case, account may change after chain switch
                _account = wallet.getAccount();
            }
            const account = _account;
            if (!account) {
                throw new Error("No active account");
            }
            if (!showPayModal) {
                return sendTransaction({
                    transaction: tx,
                    account,
                    gasless,
                });
            }
            return new Promise((resolve, reject) => {
                const sendTx = async () => {
                    try {
                        const res = await sendTransaction({
                            transaction: tx,
                            account,
                            gasless,
                        });
                        resolve(res);
                    }
                    catch (e) {
                        reject(e);
                    }
                };
                (async () => {
                    try {
                        const [_nativeValue, _erc20Value] = await Promise.all([
                            resolvePromisedValue(tx.value),
                            resolvePromisedValue(tx.erc20Value),
                        ]);
                        const nativeValue = _nativeValue || 0n;
                        const erc20Value = _erc20Value?.amountWei || 0n;
                        const [nativeBalance, erc20Balance, gasCost] = await Promise.all([
                            getWalletBalance({
                                client: tx.client,
                                address: account.address,
                                chain: tx.chain,
                            }),
                            _erc20Value?.tokenAddress
                                ? getTokenBalance({
                                    client: tx.client,
                                    account,
                                    chain: tx.chain,
                                    tokenAddress: _erc20Value.tokenAddress,
                                })
                                : undefined,
                            getTotalTxCostForBuy(tx, account.address),
                        ]);
                        const gasSponsored = hasSponsoredTransactionsEnabled(wallet);
                        const txGasCost = gasSponsored ? 0n : gasCost;
                        const nativeCost = nativeValue + txGasCost;
                        const shouldShowModal = (erc20Value > 0n &&
                            erc20Balance &&
                            erc20Balance.value < erc20Value) ||
                            (nativeCost > 0n && nativeBalance.value < nativeCost);
                        if (shouldShowModal) {
                            showPayModal({
                                tx,
                                sendTx,
                                rejectTx: reject,
                                resolveTx: resolve,
                            });
                        }
                        else {
                            sendTx();
                        }
                    }
                    catch (e) {
                        console.error("Failed to estimate cost", e);
                        // send it anyway?
                        sendTx();
                    }
                })();
            });
        },
    });
}
async function getTotalTxCostForBuy(tx, from) {
    try {
        const gasCost = await estimateGasCost({
            transaction: tx,
            from,
        });
        const bufferCost = gasCost.wei / 10n;
        // Note: get tx.value AFTER estimateGasCost
        const txValue = await resolvePromisedValue(tx.value);
        // add 10% extra gas cost to the estimate to ensure user buys enough to cover the tx cost
        return gasCost.wei + bufferCost + (txValue || 0n);
    }
    catch {
        if (from) {
            // try again without passing from
            return await getTotalTxCostForBuy(tx);
        }
        // fallback if both fail, use the tx value + 2M * gas price
        const value = await resolvePromisedValue(tx.value);
        const gasPrice = await getGasPrice({
            client: tx.client,
            chain: tx.chain,
        });
        const buffer = 2000000n * gasPrice;
        if (!value) {
            return 0n + buffer;
        }
        return value + buffer;
    }
}
//# sourceMappingURL=useSendTransaction.js.map