"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getCognitoRecoveryPassword = void 0;
exports.getCognitoRecoveryPasswordV1 = getCognitoRecoveryPasswordV1;
exports.getCognitoRecoveryPasswordV2 = getCognitoRecoveryPasswordV2;
const client_lambda_1 = require("@aws-sdk/client-lambda");
const credential_providers_1 = require("@aws-sdk/credential-providers");
const to_bytes_js_1 = require("../../../../../utils/encoding/to-bytes.js");
const fetchers_js_1 = require("../api/fetchers.js");
const constants_js_1 = require("../constants.js");
async function getCognitoRecoveryPasswordV1(client) {
    const idTokenResponse = await (0, fetchers_js_1.authFetchEmbeddedWalletUser)(client, constants_js_1.ROUTE_AUTH_COGNITO_ID_TOKEN_V1, {
        method: "GET",
    });
    if (!idTokenResponse.ok) {
        throw new Error(`Failed to fetch id token from Cognito: ${JSON.stringify(await idTokenResponse.json(), null, 2)}`);
    }
    const idTokenResult = await idTokenResponse.json();
    const { idToken, accessToken } = idTokenResult;
    const cognitoIdentity = (0, credential_providers_1.fromCognitoIdentityPool)({
        clientConfig: {
            region: constants_js_1.AWS_REGION,
        },
        identityPoolId: constants_js_1.COGNITO_IDENTITY_POOL_ID,
        logins: {
            [constants_js_1.ROUTE_COGNITO_IDENTITY_POOL_URL]: idToken,
        },
    });
    const credentials = await cognitoIdentity();
    // ? Figure out how to potentially route things through API Gateway
    const lambdaClient = new client_lambda_1.LambdaClient({
        region: constants_js_1.AWS_REGION,
        credentials: credentials,
    });
    const params = {
        FunctionName: constants_js_1.GENERATE_RECOVERY_PASSWORD_LAMBDA_FUNCTION_V1,
        Payload: (0, to_bytes_js_1.stringToBytes)(JSON.stringify({
            accessToken,
            idToken,
        })),
    };
    const data = await lambdaClient.send(new client_lambda_1.InvokeCommand(params));
    if (!data.Payload) {
        throw new Error("No payload");
    }
    const encKeyResult = JSON.parse(data.Payload.transformToString());
    const result = JSON.parse(encKeyResult.body).recoveryShareEncKey;
    return result;
}
async function getCognitoRecoveryPasswordV2(client) {
    const idTokenResponse = await (0, fetchers_js_1.authFetchEmbeddedWalletUser)(client, constants_js_1.ROUTE_AUTH_COGNITO_ID_TOKEN_V2, {
        method: "GET",
    });
    if (!idTokenResponse.ok) {
        throw new Error(`Failed to fetch id token from Cognito: ${JSON.stringify(await idTokenResponse.json(), null, 2)}`);
    }
    const idTokenResult = await idTokenResponse.json();
    const { token, identityId, lambdaToken } = idTokenResult;
    const cognitoIdentity = (0, credential_providers_1.fromCognitoIdentity)({
        clientConfig: {
            region: constants_js_1.AWS_REGION,
        },
        identityId,
        logins: {
            "cognito-identity.amazonaws.com": token,
        },
    });
    // ? Figure out how to potentially route things through API Gateway
    const lambdaClient = new client_lambda_1.LambdaClient({
        region: constants_js_1.AWS_REGION,
        credentials: cognitoIdentity,
    });
    const params = {
        FunctionName: constants_js_1.GENERATE_RECOVERY_PASSWORD_LAMBDA_FUNCTION_V2,
        Payload: (0, to_bytes_js_1.stringToBytes)(JSON.stringify({
            token: lambdaToken,
        })),
    };
    const data = await lambdaClient.send(new client_lambda_1.InvokeCommand(params));
    if (!data.Payload) {
        throw new Error("No payload");
    }
    const encKeyResult = JSON.parse(data.Payload.transformToString());
    if (encKeyResult.statusCode !== 200) {
        throw new Error("Failed to get recovery code", JSON.parse(encKeyResult.body).message);
    }
    return JSON.parse(encKeyResult.body)
        .recoveryShareEncKey;
}
exports.getCognitoRecoveryPassword = getCognitoRecoveryPasswordV2;
//# sourceMappingURL=recoveryCode.js.map