"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getOwnedTokenIds = getOwnedTokenIds;
const balanceOfBatch_js_1 = require("../__generated__/IERC1155/read/balanceOfBatch.js");
const nextTokenIdToMint_js_1 = require("../__generated__/IERC1155Enumerable/read/nextTokenIdToMint.js");
const nextTokenId_js_1 = require("../__generated__/Zora1155/read/nextTokenId.js");
const DEFAULT_QUERY_ALL_COUNT = 100;
/**
 * Retrieves the owned ERC1155 tokenIds & the owned balance of each tokenId for a given wallet address.
 * @param options - The transaction options and parameters.
 * @returns A promise that resolves to an array of ERC1155 NFTs owned by the wallet address, along with the quantity owned.
 * @extension ERC1155
 * @example
 * ```ts
 * import { getOwnedNFTs } from "thirdweb/extensions/erc1155";
 * const ownedTokenIds = await getOwnedTokenIds({
 *  contract,
 *  start: 0,
 *  count: 10,
 *  address: "0x123...",
 * });
 * ```
 */
async function getOwnedTokenIds(options) {
    const maxId = await Promise.allSettled([
        (0, nextTokenIdToMint_js_1.nextTokenIdToMint)(options),
        (0, nextTokenId_js_1.nextTokenId)(options),
    ]).then(([_nextToMint, _next]) => {
        if (_nextToMint.status === "fulfilled") {
            return _nextToMint.value;
        }
        if (_next.status === "fulfilled") {
            return _next.value;
        }
        throw Error("Contract doesn't have required extension");
    });
    // approach is naieve, likely can be improved
    const owners = [];
    const tokenIds = [];
    for (let i = 0n; i < maxId; i++) {
        owners.push(options.address);
        tokenIds.push(i);
    }
    const balances = await (0, balanceOfBatch_js_1.balanceOfBatch)({
        ...options,
        owners,
        tokenIds,
    });
    let ownedBalances = balances
        .map((b, i) => {
        return {
            tokenId: BigInt(i),
            balance: b,
        };
    })
        .filter((b) => b.balance > 0);
    if (options.start || options.count) {
        const start = options?.start || 0;
        const count = options?.count || DEFAULT_QUERY_ALL_COUNT;
        ownedBalances = ownedBalances.slice(start, start + count);
    }
    return ownedBalances;
}
//# sourceMappingURL=getOwnedTokenIds.js.map