"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.claimTo = claimTo;
exports.isClaimToSupported = isClaimToSupported;
const get_claim_params_js_1 = require("../../../../utils/extensions/drops/get-claim-params.js");
const getContractMetadata_js_1 = require("../../../common/read/getContractMetadata.js");
const claim_js_1 = require("../../__generated__/IDrop/write/claim.js");
const getActiveClaimCondition_js_1 = require("../read/getActiveClaimCondition.js");
/**
 * Claim ERC721 NFTs to a specified address
 * @param options - The options for the transaction
 * @extension ERC721
 * @example
 * ```ts
 * import { claimTo } from "thirdweb/extensions/erc721";
 * import { sendTransaction } from "thirdweb";
 *
 * const transaction = claimTo({
 *   contract,
 *   to: "0x...",
 *   quantity: 1n,
 * });
 *
 * await sendTransaction({ transaction, account });
 * ```
 * @throws If no claim condition is set
 * @returns A promise that resolves with the submitted transaction hash.
 */
function claimTo(options) {
    return (0, claim_js_1.claim)({
        contract: options.contract,
        asyncParams: () => (0, get_claim_params_js_1.getClaimParams)({
            type: "erc721",
            contract: options.contract,
            to: options.to,
            quantity: options.quantity,
            from: options.from,
        }),
    });
}
/**
 * Checks if the `claimTo` method is supported by the given contract.
 * @param availableSelectors An array of 4byte function selectors of the contract. You can get this in various ways, such as using "whatsabi" or if you have the ABI of the contract available you can use it to generate the selectors.
 * @returns A boolean indicating if the `claimTo` method is supported.
 * @extension ERC721
 * @example
 * ```ts
 * import { isClaimToSupported } from "thirdweb/extensions/erc721";
 *
 * const supported = isClaimToSupported(["0x..."]);
 * ```
 */
function isClaimToSupported(availableSelectors) {
    return ((0, claim_js_1.isClaimSupported)(availableSelectors) &&
        // required to check if the contract supports the getActiveClaimCondition method
        (0, getActiveClaimCondition_js_1.isGetActiveClaimConditionSupported)(availableSelectors) &&
        // requires contractMetadata for claimer proofs
        (0, getContractMetadata_js_1.isGetContractMetadataSupported)(availableSelectors));
}
//# sourceMappingURL=claimTo.js.map