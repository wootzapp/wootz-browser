import { jsx as _jsx } from "react/jsx-runtime";
import { useQuery } from "@tanstack/react-query";
import { useState } from "react";
import { trackPayEvent } from "../../../../analytics/track.js";
import { CustomThemeProvider } from "../../../core/design-system/CustomThemeProvider.js";
import { useActiveAccount } from "../../../core/hooks/wallets/useActiveAccount.js";
import { useActiveWallet } from "../../../core/hooks/wallets/useActiveWallet.js";
import { LoadingScreen } from "../../wallets/shared/LoadingScreen.js";
import { useConnectLocale } from "../ConnectWallet/locale/getConnectLocale.js";
import { LazyBuyScreen } from "../ConnectWallet/screens/Buy/LazyBuyScreen.js";
import { Modal } from "../components/Modal.js";
import { ExecutingTxScreen } from "./ExecutingScreen.js";
export function TransactionModal(props) {
    const account = useActiveAccount();
    const wallet = useActiveWallet();
    useQuery({
        queryKey: ["transaction-modal-event"],
        queryFn: () => {
            if (!account || !wallet)
                return;
            trackPayEvent({
                client: props.client,
                walletAddress: account.address,
                walletType: wallet.id,
                event: "open_pay_transaction_modal",
            });
        },
        enabled: !!wallet,
    });
    return (_jsx(CustomThemeProvider, { theme: props.theme, children: _jsx(Modal, { open: true, size: "compact", setOpen: (_open) => {
                if (!_open) {
                    props.onClose();
                }
            }, children: _jsx(TransactionModalContent, { ...props }) }) }));
}
function TransactionModalContent(props) {
    const localeQuery = useConnectLocale(props.localeId);
    const [screen, setScreen] = useState("buy");
    if (!localeQuery.data) {
        return _jsx(LoadingScreen, {});
    }
    if (screen === "execute-tx") {
        return (_jsx(ExecutingTxScreen, { tx: props.tx, closeModal: props.onClose, onTxSent: props.onTxSent }));
    }
    return (_jsx(LazyBuyScreen, { title: props.title, isEmbed: false, client: props.client, onBack: props.onBack, supportedTokens: props.supportedTokens, connectLocale: localeQuery.data, theme: typeof props.theme === "string" ? props.theme : props.theme.type, payOptions: props.payOptions, onDone: () => {
            setScreen("execute-tx");
        }, connectOptions: undefined }));
}
//# sourceMappingURL=TransactionModal.js.map