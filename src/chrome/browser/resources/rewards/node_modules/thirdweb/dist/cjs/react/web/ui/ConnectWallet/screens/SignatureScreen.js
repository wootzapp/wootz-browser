"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SignatureScreen = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("@emotion/react");
const react_icons_1 = require("@radix-ui/react-icons");
const react_2 = require("react");
const CustomThemeProvider_js_1 = require("../../../../core/design-system/CustomThemeProvider.js");
const index_js_1 = require("../../../../core/design-system/index.js");
const useSiweAuth_js_1 = require("../../../../core/hooks/auth/useSiweAuth.js");
const useActiveAccount_js_1 = require("../../../../core/hooks/wallets/useActiveAccount.js");
const useActiveWallet_js_1 = require("../../../../core/hooks/wallets/useActiveWallet.js");
const useDisconnect_js_1 = require("../../../../core/hooks/wallets/useDisconnect.js");
const wait_js_1 = require("../../../../core/utils/wait.js");
const LoadingScreen_js_1 = require("../../../wallets/shared/LoadingScreen.js");
const Spacer_js_1 = require("../../components/Spacer.js");
const Spinner_js_1 = require("../../components/Spinner.js");
const WalletImage_js_1 = require("../../components/WalletImage.js");
const basic_js_1 = require("../../components/basic.js");
const buttons_js_1 = require("../../components/buttons.js");
const text_js_1 = require("../../components/text.js");
const elements_js_1 = require("../../design-system/elements.js");
const TOS_js_1 = require("../Modal/TOS.js");
const WalletLogoSpinner_js_1 = require("./WalletLogoSpinner.js");
const SignatureScreen = (props) => {
    const { onDone, modalSize, termsOfServiceUrl, privacyPolicyUrl, connectLocale, } = props;
    const activeWallet = (0, useActiveWallet_js_1.useActiveWallet)();
    const activeAccount = (0, useActiveAccount_js_1.useActiveAccount)();
    const siweAuth = (0, useSiweAuth_js_1.useSiweAuth)(activeWallet, activeAccount, props.auth);
    const [status, setStatus] = (0, react_2.useState)("idle");
    const { disconnect } = (0, useDisconnect_js_1.useDisconnect)();
    const wallet = (0, useActiveWallet_js_1.useActiveWallet)();
    const locale = connectLocale.signatureScreen;
    const signIn = (0, react_2.useCallback)(async () => {
        try {
            setStatus("signing");
            await siweAuth.doLogin();
            onDone?.();
        }
        catch (err) {
            await (0, wait_js_1.wait)(1000);
            setStatus("failed");
            console.error("failed to log in", err);
        }
    }, [onDone, siweAuth]);
    // this should not happen
    if (!wallet) {
        return (0, jsx_runtime_1.jsx)(LoadingScreen_js_1.LoadingScreen, {});
    }
    if (wallet.id === "inApp" || wallet.id === "embedded") {
        return ((0, jsx_runtime_1.jsx)(HeadlessSignIn, { signIn: signIn, status: status, connectLocale: connectLocale, wallet: wallet }));
    }
    const handleRetry = () => {
        signIn();
    };
    return ((0, jsx_runtime_1.jsxs)(basic_js_1.Container, { animate: "fadein", fullHeight: true, flex: "column", children: [(0, jsx_runtime_1.jsx)(basic_js_1.Container, { p: "lg", style: {
                    paddingBottom: 0,
                }, children: (0, jsx_runtime_1.jsx)(basic_js_1.ModalHeader, { title: locale.instructionScreen.title }) }), (0, jsx_runtime_1.jsx)(basic_js_1.Container, { style: {
                    paddingTop: 0,
                    paddingBottom: index_js_1.spacing.xl,
                }, flex: "column", px: modalSize === "compact" ? "lg" : "xxl", center: "y", expand: true, children: status === "idle" ? ((0, jsx_runtime_1.jsxs)(jsx_runtime_1.Fragment, { children: [(0, jsx_runtime_1.jsx)(basic_js_1.Container, { flex: "row", center: "x", animate: "fadein", py: "3xl", children: (0, jsx_runtime_1.jsx)(PulsatingContainer, { children: (0, jsx_runtime_1.jsx)(WalletImage_js_1.WalletImage, { id: wallet.id, client: props.client, size: "80" }) }) }), (0, jsx_runtime_1.jsx)(text_js_1.Text, { center: true, multiline: true, balance: true, children: locale.instructionScreen.instruction }), (0, jsx_runtime_1.jsx)(Spacer_js_1.Spacer, { y: "lg" }), (0, jsx_runtime_1.jsx)(buttons_js_1.Button, { fullWidth: true, variant: "accent", onClick: signIn, style: {
                                alignItems: "center",
                                padding: index_js_1.spacing.md,
                            }, children: connectLocale.signatureScreen.instructionScreen.signInButton }), (0, jsx_runtime_1.jsx)(Spacer_js_1.Spacer, { y: "sm" }), (0, jsx_runtime_1.jsx)(buttons_js_1.Button, { fullWidth: true, variant: "secondary", onClick: () => {
                                disconnect(wallet);
                            }, style: {
                                alignItems: "center",
                                padding: index_js_1.spacing.md,
                            }, children: connectLocale.signatureScreen.instructionScreen.disconnectWallet })] })) : ((0, jsx_runtime_1.jsxs)(jsx_runtime_1.Fragment, { children: [(0, jsx_runtime_1.jsx)(basic_js_1.Container, { py: "3xl", children: (0, jsx_runtime_1.jsx)(WalletLogoSpinner_js_1.WalletLogoSpinner, { client: props.client, error: status === "failed", id: wallet.id }) }), (0, jsx_runtime_1.jsxs)(basic_js_1.Container, { flex: "column", gap: "md", animate: "fadein", children: [(0, jsx_runtime_1.jsx)(text_js_1.Text, { size: "lg", center: true, color: "primaryText", children: status === "failed"
                                        ? locale.signingScreen.failedToSignIn
                                        : locale.signingScreen.inProgress }), status === "signing" && ((0, jsx_runtime_1.jsx)(text_js_1.Text, { center: true, multiline: true, balance: true, children: connectLocale.signatureScreen.signingScreen.prompt })), status === "failed" && ((0, jsx_runtime_1.jsxs)(basic_js_1.Container, { children: [(0, jsx_runtime_1.jsx)(Spacer_js_1.Spacer, { y: "sm" }), (0, jsx_runtime_1.jsxs)(buttons_js_1.Button, { fullWidth: true, variant: "accent", onClick: handleRetry, style: {
                                                gap: index_js_1.spacing.xs,
                                                alignItems: "center",
                                                padding: index_js_1.spacing.md,
                                            }, children: [(0, jsx_runtime_1.jsx)(react_icons_1.ReloadIcon, { width: index_js_1.iconSize.sm, height: index_js_1.iconSize.sm }), locale.signingScreen.tryAgain] }), (0, jsx_runtime_1.jsx)(Spacer_js_1.Spacer, { y: "sm" }), (0, jsx_runtime_1.jsx)(buttons_js_1.Button, { fullWidth: true, variant: "secondary", onClick: () => {
                                                disconnect(wallet);
                                            }, style: {
                                                alignItems: "center",
                                                padding: index_js_1.spacing.md,
                                            }, children: locale.instructionScreen.disconnectWallet })] }))] }, status)] })) }), (termsOfServiceUrl || privacyPolicyUrl) && ((0, jsx_runtime_1.jsx)(basic_js_1.Container, { p: "md", animate: "fadein", children: (0, jsx_runtime_1.jsx)(TOS_js_1.TOS, { termsOfServiceUrl: termsOfServiceUrl, privacyPolicyUrl: privacyPolicyUrl, locale: connectLocale.agreement }) }))] }));
};
exports.SignatureScreen = SignatureScreen;
function HeadlessSignIn({ signIn, status, connectLocale, wallet, }) {
    const locale = connectLocale.signatureScreen;
    const mounted = (0, react_2.useRef)(false);
    const { disconnect } = (0, useDisconnect_js_1.useDisconnect)();
    (0, react_2.useEffect)(() => {
        if (mounted.current) {
            return;
        }
        mounted.current = true;
        signIn();
    }, [signIn]);
    return ((0, jsx_runtime_1.jsxs)(basic_js_1.Container, { p: "lg", fullHeight: true, flex: "column", animate: "fadein", children: [(0, jsx_runtime_1.jsx)(basic_js_1.ModalHeader, { title: locale.signingScreen.title }), (0, jsx_runtime_1.jsxs)(basic_js_1.Container, { expand: true, flex: "row", center: "both", style: {
                    minHeight: "250px",
                }, children: [status === "signing" && (0, jsx_runtime_1.jsx)(Spinner_js_1.Spinner, { size: "xl", color: "accentText" }), status === "failed" && ((0, jsx_runtime_1.jsx)(jsx_runtime_1.Fragment, { children: (0, jsx_runtime_1.jsxs)(basic_js_1.Container, { children: [(0, jsx_runtime_1.jsx)(Spacer_js_1.Spacer, { y: "lg" }), (0, jsx_runtime_1.jsx)(text_js_1.Text, { size: "lg", center: true, color: "danger", children: locale.signingScreen.failedToSignIn }), (0, jsx_runtime_1.jsx)(Spacer_js_1.Spacer, { y: "lg" }), (0, jsx_runtime_1.jsxs)(buttons_js_1.Button, { fullWidth: true, variant: "accent", onClick: () => {
                                        signIn();
                                    }, style: {
                                        gap: index_js_1.spacing.xs,
                                        alignItems: "center",
                                        padding: index_js_1.spacing.md,
                                    }, children: [(0, jsx_runtime_1.jsx)(react_icons_1.ReloadIcon, { width: index_js_1.iconSize.sm, height: index_js_1.iconSize.sm }), locale.signingScreen.tryAgain] }), (0, jsx_runtime_1.jsx)(Spacer_js_1.Spacer, { y: "sm" }), (0, jsx_runtime_1.jsx)(buttons_js_1.Button, { fullWidth: true, variant: "secondary", onClick: () => {
                                        disconnect(wallet);
                                    }, style: {
                                        alignItems: "center",
                                        padding: index_js_1.spacing.md,
                                    }, children: locale.instructionScreen.disconnectWallet })] }) }))] })] }));
}
const pulseAnimation = (0, react_1.keyframes) `
0% {
  transform: scale(0.9);
}
100% {
  opacity: 0;
  transform: scale(1.4);
}
`;
const PulsatingContainer = /* @__PURE__ */ (0, elements_js_1.StyledDiv)((_) => {
    const theme = (0, CustomThemeProvider_js_1.useCustomTheme)();
    return {
        position: "relative",
        "&::before": {
            content: '""',
            display: "block",
            position: "absolute",
            left: 0,
            top: 0,
            bottom: 0,
            right: 0,
            background: theme.colors.accentText,
            animation: `${pulseAnimation} 2s cubic-bezier(0.175, 0.885, 0.32, 1.1) infinite`,
            zIndex: -1,
            borderRadius: index_js_1.radius.xl,
        },
    };
});
//# sourceMappingURL=SignatureScreen.js.map