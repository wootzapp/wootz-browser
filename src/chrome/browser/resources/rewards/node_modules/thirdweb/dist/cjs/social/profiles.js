"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getSocialProfiles = getSocialProfiles;
const domains_js_1 = require("../utils/domains.js");
const fetch_js_1 = require("../utils/fetch.js");
/**
 * Fetches the wallet's available social profiles.
 * @param args - The arguments to use when fetching the social profiles.
 * @param args.address - The wallet address to fetch the social profiles for.
 * @param args.client - The Thirdweb client.
 * @returns A promise resolving to the retrieved social profiles for different protocols. If a profile is not available for a protocol, the value will be `null`.
 *
 * @example
 * ```ts
 * import { getProfiles } from "thirdweb/social";
 * const profiles = await getProfiles({
 *   address: "0x...",
 *   client,
 * });
 * ```
 * @beta
 */
async function getSocialProfiles(args) {
    const { address, client } = args;
    const clientFetch = (0, fetch_js_1.getClientFetch)(client);
    const response = await clientFetch(`${(0, domains_js_1.getThirdwebBaseUrl)("social")}/v1/profiles/${address}`);
    if (response.status !== 200) {
        try {
            const errorBody = await response.json();
            throw new Error(`Failed to fetch profile: ${errorBody.message}`);
        }
        catch {
            throw new Error(`Failed to fetch profile: ${response.status}\n${await response.text()}`);
        }
    }
    return (await response.json()).data;
}
//# sourceMappingURL=profiles.js.map