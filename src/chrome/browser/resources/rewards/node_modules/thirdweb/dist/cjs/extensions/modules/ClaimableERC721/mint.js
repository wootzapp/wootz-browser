"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.encodeMintParams = void 0;
exports.mint = mint;
const viem_1 = require("viem");
const addresses_js_1 = require("../../../constants/addresses.js");
const download_js_1 = require("../../../storage/download.js");
const hex_js_1 = require("../../../utils/encoding/hex.js");
const encodeBytesBeforeMintERC721_js_1 = require("../__generated__/ClaimableERC721/encode/encodeBytesBeforeMintERC721.js");
const getClaimCondition_js_1 = require("../__generated__/ClaimableERC721/read/getClaimCondition.js");
const mint_js_1 = require("../__generated__/ERC721Core/write/mint.js");
/**
 * Mints ERC721 tokens to a specified address via a ClaimableERC721 module.
 * @param options The options for minting tokens.
 * @returns A transaction to mint tokens.
 * @example
 * ```typescript
 * import { ClaimableERC721 } from "thirdweb/modules";
 *
 * const transaction = ClaimableERC721.mint({
 *   contract,
 *   to: "0x...", // Address to mint tokens to
 *   quantity: 2, // Amount of tokens to mint
 * });
 *
 * // Send the transaction
 * await sendTransaction({ transaction, account });
 * ```
 * @modules ClaimableERC721
 */
function mint(options) {
    return (0, mint_js_1.mint)({
        contract: options.contract,
        asyncParams: async () => {
            const cc = await (0, getClaimCondition_js_1.getClaimCondition)({ contract: options.contract });
            const totalPrice = cc.pricePerUnit * BigInt(options.quantity);
            const value = (0, addresses_js_1.isNativeTokenAddress)(cc.currency) ? totalPrice : 0n;
            const erc20Value = !(0, addresses_js_1.isNativeTokenAddress)(cc.currency) && cc.pricePerUnit > 0n
                ? {
                    amountWei: totalPrice,
                    tokenAddress: cc.currency,
                }
                : undefined;
            let recipientAllowlistProof = [];
            if (cc.allowlistMerkleRoot &&
                cc.allowlistMerkleRoot !== (0, hex_js_1.padHex)("0x", { size: 32 })) {
                const { fetchProofsForClaimer } = await Promise.resolve().then(() => require("../../../utils/extensions/drops/fetch-proofs-for-claimers.js"));
                const metadataUri = cc.auxData;
                if (metadataUri) {
                    // download merkle tree from metadata
                    const metadata = await (0, download_js_1.download)({
                        client: options.contract.client,
                        uri: metadataUri,
                    });
                    const metadataJson = await metadata.json();
                    const merkleTreeUri = metadataJson.merkleTreeUri;
                    // fetch proofs
                    if (merkleTreeUri) {
                        const allowlistProof = await fetchProofsForClaimer({
                            contract: options.contract,
                            claimer: options.to,
                            merkleTreeUri,
                            tokenDecimals: 18, // unused here
                            async hashEntry(options) {
                                return (0, viem_1.keccak256)((0, viem_1.encodePacked)(["address"], [(0, viem_1.getAddress)(options.entry.address)]));
                            },
                        });
                        recipientAllowlistProof = allowlistProof?.proof || [];
                    }
                }
            }
            return {
                to: (0, viem_1.getAddress)(options.to),
                amount: BigInt(options.quantity),
                baseURI: "",
                data: (0, encodeBytesBeforeMintERC721_js_1.encodeBytesBeforeMintERC721Params)({
                    params: {
                        currency: cc.currency,
                        pricePerUnit: cc.pricePerUnit,
                        recipientAllowlistProof,
                    },
                }),
                overrides: {
                    value,
                    erc20Value,
                },
            };
        },
    });
}
exports.encodeMintParams = encodeBytesBeforeMintERC721_js_1.encodeBytesBeforeMintERC721Params;
//# sourceMappingURL=mint.js.map