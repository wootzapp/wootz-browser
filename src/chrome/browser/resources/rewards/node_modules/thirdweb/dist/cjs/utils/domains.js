"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getThirdwebBaseUrl = exports.getThirdwebDomains = exports.setThirdwebDomains = exports.DEFAULT_RPC_URL = void 0;
exports.DEFAULT_RPC_URL = "rpc.thirdweb.com";
const DEFAULT_SOCIAL_URL = "social.thirdweb.com";
const DEFAULT_IN_APP_WALLET_URL = "embedded-wallet.thirdweb.com";
const DEFAULT_PAY_URL = "pay.thirdweb.com";
const DEFAULT_STORAGE_URL = "storage.thirdweb.com";
const DEFAULT_BUNDLER_URL = "bundler.thirdweb.com";
let domains = {
    rpc: exports.DEFAULT_RPC_URL,
    inAppWallet: DEFAULT_IN_APP_WALLET_URL,
    social: DEFAULT_SOCIAL_URL,
    pay: DEFAULT_PAY_URL,
    storage: DEFAULT_STORAGE_URL,
    bundler: DEFAULT_BUNDLER_URL,
};
/**
 * @internal
 */
const setThirdwebDomains = (DomainOverrides) => {
    domains = {
        rpc: DomainOverrides.rpc ?? exports.DEFAULT_RPC_URL,
        inAppWallet: DomainOverrides.inAppWallet ?? DEFAULT_IN_APP_WALLET_URL,
        social: DomainOverrides.social ?? DEFAULT_SOCIAL_URL,
        pay: DomainOverrides.pay ?? DEFAULT_PAY_URL,
        storage: DomainOverrides.storage ?? DEFAULT_STORAGE_URL,
        bundler: DomainOverrides.bundler ?? DEFAULT_BUNDLER_URL,
    };
};
exports.setThirdwebDomains = setThirdwebDomains;
/**
 * @internal
 */
const getThirdwebDomains = () => {
    return domains;
};
exports.getThirdwebDomains = getThirdwebDomains;
/**
 * @internal
 */
const getThirdwebBaseUrl = (service) => {
    const origin = domains[service];
    if (origin.startsWith("localhost")) {
        return `http://${origin}`;
    }
    return `https://${origin}`;
};
exports.getThirdwebBaseUrl = getThirdwebBaseUrl;
//# sourceMappingURL=domains.js.map