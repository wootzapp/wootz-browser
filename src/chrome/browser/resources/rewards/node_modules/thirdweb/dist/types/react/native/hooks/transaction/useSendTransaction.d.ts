import { type SendTransactionConfig } from "../../../core/hooks/transaction/useSendTransaction.js";
/**
 * A hook to send a transaction.
 * @returns A mutation object to send a transaction.
 * @param config Configuration for the `useSendTransaction` hook.
 * Refer to [`SendTransactionConfig`](https://portal.thirdweb.com/references/typescript/v5/SendTransactionConfig) for more details.
 * @example
 * ```tsx
 * import { useSendTransaction } from "thirdweb/react";
 * const { mutate: sendTx, data: transactionResult } = useSendTransaction();
 *
 * // later
 * sendTx(tx);
 * ```
 *
 * ### Gasless usage with [thirdweb Engine](https://portal.thirdweb.com/engine)
 * ```tsx
 * import { useSendTransaction } from "thirdweb/react";
 * const mutation = useSendTransaction({
 *   gasless: {
 *     provider: "engine",
 *     relayerUrl: "https://thirdweb.engine-***.thirdweb.com/relayer/***",
 *     relayerForwarderAddress: "0x...",
 *   }
 * });
 * ```
 *
 * ### Gasless usage with OpenZeppelin
 * ```tsx
 * import { useSendTransaction } from "thirdweb/react";
 * const mutation = useSendTransaction({
 *   gasless: {
 *     provider: "openzeppelin",
 *     relayerUrl: "https://...",
 *     relayerForwarderAddress: "0x...",
 *   }
 * });
 * @transaction
 */
export declare function useSendTransaction(config?: SendTransactionConfig): import("@tanstack/react-query").UseMutationResult<{
    readonly transactionHash: import("../../../../exports/thirdweb.js").Hex;
    client: import("../../../../client/client.js").ThirdwebClient;
    chain: import("../../../../chains/types.js").Chain;
    maxBlocksWaitTime?: number | undefined;
}, Error, import("../../../../transaction/prepare-transaction.js").PreparedTransaction>;
//# sourceMappingURL=useSendTransaction.d.ts.map