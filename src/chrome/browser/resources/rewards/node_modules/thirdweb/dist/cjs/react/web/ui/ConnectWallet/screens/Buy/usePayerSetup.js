"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.usePayerSetup = usePayerSetup;
const react_1 = require("react");
const useActiveAccount_js_1 = require("../../../../../core/hooks/wallets/useActiveAccount.js");
const useActiveWallet_js_1 = require("../../../../../core/hooks/wallets/useActiveWallet.js");
const useActiveWalletChain_js_1 = require("../../../../../core/hooks/wallets/useActiveWalletChain.js");
function usePayerSetup() {
    const wallet = (0, useActiveWallet_js_1.useActiveWallet)();
    const account = (0, useActiveAccount_js_1.useActiveAccount)();
    const activeChain = (0, useActiveWalletChain_js_1.useActiveWalletChain)();
    const [_payer, setPayer] = (0, react_1.useState)();
    (0, react_1.useEffect)(() => {
        const wallet = _payer?.wallet;
        function update() {
            if (!wallet) {
                setPayer(undefined);
                return;
            }
            const account = wallet.getAccount();
            const chain = wallet.getChain();
            if (account && chain) {
                setPayer({
                    account,
                    chain,
                    wallet,
                });
            }
            else {
                setPayer(undefined);
            }
        }
        if (wallet) {
            const unsubChainChanged = wallet.subscribe("chainChanged", update);
            const unsubAccountChanged = wallet.subscribe("accountChanged", update);
            return () => {
                unsubChainChanged();
                unsubAccountChanged();
            };
        }
        return undefined;
    }, [_payer]);
    const initialPayer = account && activeChain && wallet
        ? { account, chain: activeChain, wallet }
        : undefined;
    // return the payer state if its set
    // otherwise return the active wallet as payer
    const payer = _payer || initialPayer;
    return {
        payer,
        setPayer,
    };
}
//# sourceMappingURL=usePayerSetup.js.map