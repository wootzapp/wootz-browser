import { formatLog, } from "viem";
import { numberToHex } from "../../utils/encoding/hex.js";
/**
 * Retrieves logs from the Ethereum blockchain based on the specified parameters.
 * @param request - The EIP1193 request function.
 * @param params - The parameters for retrieving logs.
 * @returns A promise that resolves to the retrieved logs.
 * @rpc
 * @example
 * ```ts
 * import { getRpcClient, eth_getLogs } from "thirdweb/rpc";
 * const rpcRequest = getRpcClient({ client, chain });
 * const logs = await eth_getLogs(rpcRequest, {
 *  address: "0x...",
 *  fromBlock: 123456n,
 *  toBlock: 123456n,
 * });
 * ```
 */
export async function eth_getLogs(request, params = {}) {
    const topics = params.topics ?? [];
    let logs;
    // in the case we have a blockHash
    if (params.blockHash) {
        const param = {
            topics,
            blockHash: params.blockHash,
        };
        if (params.address) {
            param.address = params.address;
        }
        logs = await request({
            method: "eth_getLogs",
            params: [param],
        });
    }
    // otherwise
    else {
        const param = { topics };
        if (params.address) {
            param.address = params.address;
        }
        if (params.fromBlock) {
            param.fromBlock =
                typeof params.fromBlock === "bigint"
                    ? numberToHex(params.fromBlock)
                    : params.fromBlock;
        }
        if (params.toBlock) {
            param.toBlock =
                typeof params.toBlock === "bigint"
                    ? numberToHex(params.toBlock)
                    : params.toBlock;
        }
        logs = await request({
            method: "eth_getLogs",
            params: [param],
        });
    }
    return logs.map((log) => formatLog(log));
}
//# sourceMappingURL=eth_getLogs.js.map