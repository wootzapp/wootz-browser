import type { Address } from "abitype";
import type { BaseTransactionOptions } from "../../../transaction/types.js";
declare const UniswapFee: {
    readonly LOWEST: 100;
    readonly LOW: 500;
    readonly MEDIUM: 3000;
    readonly HIGH: 10000;
};
/**
 * Represents the parameters for the `findUniswapV3Pool` function.
 * @extension UNISWAP
 */
export type GetUniswapV3PoolParams = {
    tokenA: Address;
    tokenB: Address;
};
/**
 * @extension UNISWAP
 */
export type GetUniswapV3PoolResult = {
    poolFee: (typeof UniswapFee)[keyof typeof UniswapFee];
    poolAddress: Address;
};
/**
 * Finds the Uniswap V3 pools for the two tokens.
 * @param options - The token pair to find any pools for any Uniswap contract that implements getPool.
 * @returns The pools' addresses and fees.
 * @extension UNISWAP
 * @example
 * ```ts
 * import { getUniswapV3Pool } from "thirdweb/extensions/uniswap";
 * const pools = await getUniswapV3Pool({
 *  tokenA: "0x...",
 *  tokenB: "0x...",
 *  contract: factoryContract
 * });
 * ```
 */
export declare function getUniswapV3Pool(options: BaseTransactionOptions<GetUniswapV3PoolParams>): Promise<GetUniswapV3PoolResult[]>;
export {};
//# sourceMappingURL=getUniswapV3Pools.d.ts.map