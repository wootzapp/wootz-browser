import { jsx as _jsx } from "react/jsx-runtime";
import { useMemo, useState } from "react";
import { getCachedChain } from "../../../../../../../chains/utils.js";
import { NATIVE_TOKEN_ADDRESS } from "../../../../../../../constants/addresses.js";
import { NATIVE_TOKEN } from "../../nativeToken.js";
import { SwapConfirmationScreen } from "./ConfirmationScreen.js";
import { SwapStatusScreen } from "./SwapStatusScreen.js";
export function SwapFlow(props) {
    const [swapTxHash, setSwapTxHash] = useState();
    const quote = props.buyWithCryptoQuote;
    const fromChain = useMemo(() => getCachedChain(quote.swapDetails.fromToken.chainId), [quote]);
    const toChain = useMemo(() => getCachedChain(quote.swapDetails.toToken.chainId), [quote]);
    const fromTokenSymbol = quote.swapDetails.fromToken.symbol || "";
    const toTokenSymbol = quote.swapDetails.toToken.symbol || "";
    const fromAmount = quote.swapDetails.fromAmount;
    const toAmount = quote.swapDetails.toAmount;
    const _toToken = quote.swapDetails.toToken;
    const _fromToken = quote.swapDetails.fromToken;
    const toToken = useMemo(() => {
        if (_toToken.tokenAddress === NATIVE_TOKEN_ADDRESS) {
            return NATIVE_TOKEN;
        }
        const tokenInfo = {
            address: _toToken.tokenAddress,
            name: _toToken.name || "",
            symbol: _toToken.symbol || "",
        };
        return tokenInfo;
    }, [_toToken]);
    const fromToken = useMemo(() => {
        if (_fromToken.tokenAddress === NATIVE_TOKEN_ADDRESS) {
            return NATIVE_TOKEN;
        }
        const tokenInfo = {
            address: _fromToken.tokenAddress,
            name: _fromToken.name || "",
            symbol: _fromToken.symbol || "",
        };
        return tokenInfo;
    }, [_fromToken]);
    if (swapTxHash) {
        return (_jsx(SwapStatusScreen, { title: props.title, onBack: props.onBack, onTryAgain: props.onTryAgain, swapTxHash: swapTxHash, client: props.client, onDone: props.onDone, transactionMode: props.transactionMode, isEmbed: props.isEmbed, quote: quote, onSuccess: props.onSuccess }));
    }
    return (_jsx(SwapConfirmationScreen, { title: props.title, setSwapTxHash: setSwapTxHash, toChain: toChain, toAmount: toAmount, toTokenSymbol: toTokenSymbol, fromChain: fromChain, toToken: toToken, fromAmount: fromAmount, fromToken: fromToken, fromTokenSymbol: fromTokenSymbol, client: props.client, onBack: props.onBack, onTryAgain: props.onTryAgain, quote: quote, isFiatFlow: props.isFiatFlow, payer: props.payer }));
}
//# sourceMappingURL=SwapFlow.js.map