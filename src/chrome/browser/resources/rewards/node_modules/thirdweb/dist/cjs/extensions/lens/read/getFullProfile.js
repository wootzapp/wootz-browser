"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getFullProfile = getFullProfile;
const polygon_js_1 = require("../../../chains/chain-definitions/polygon.js");
const contract_js_1 = require("../../../contract/contract.js");
const getProfile_js_1 = require("../__generated__/LensHub/read/getProfile.js");
const getDefaultHandle_js_1 = require("../__generated__/TokenHandleRegistry/read/getDefaultHandle.js");
const consts_js_1 = require("../consts.js");
/**
 * Return the profile data _with Lens handle_ and optional join date
 *
 * In Lens Protocol, each profile is associated with an ERC721 token,
 * thus, the tokenId represent profileId and the 2 terms can be used interchangeably
 * @extension LENS
 *
 * @example
 * ```ts
 * import { getFullProfile } from "thirdweb/extension/lens";
 *
 * const profileId = 10000n; // profileId is the tokenId of the NFT
 * const lensProfile = await getFullProfile({ profileId, client });
 * ```
 */
async function getFullProfile(options) {
    const { profileId, overrides, includeJoinDate, client } = options;
    const lensHubContract = (0, contract_js_1.getContract)({
        address: overrides?.lensHubAddress || consts_js_1.LENS_HUB_ADDRESS,
        chain: overrides?.chain || polygon_js_1.polygon,
        client,
    });
    const tokenHandleRegistryContract = (0, contract_js_1.getContract)({
        address: overrides?.tokenHandleRegistryAddress ||
            consts_js_1.LENS_TOKEN_HANDLE_REGISTRY_ADDRESS,
        chain: overrides?.chain || polygon_js_1.polygon,
        client,
    });
    const [profile, handleTokenId, { download }] = await Promise.all([
        (0, getProfile_js_1.getProfile)({ contract: lensHubContract, profileId }),
        (0, getDefaultHandle_js_1.getDefaultHandle)({
            contract: tokenHandleRegistryContract,
            profileId,
        }).catch(() => null),
        Promise.resolve().then(() => require("../../../storage/download.js")),
    ]);
    // A profile data should always pair with a handle, so we exit if either is missing
    if (!profile || !handleTokenId) {
        return null;
    }
    const [{ getHandle }, { mintTimestampOf }, profileData] = await Promise.all([
        Promise.resolve().then(() => require("../__generated__/LensHandle/read/getHandle.js")),
        Promise.resolve().then(() => require("../__generated__/LensHub/read/mintTimestampOf.js")),
        profile?.metadataURI
            ? (await download({ uri: profile.metadataURI, client })).json()
            : null,
    ]);
    const lensHandleContract = (0, contract_js_1.getContract)({
        address: overrides?.lensHandleAddress || consts_js_1.LENS_HANDLE_ADDRESS,
        chain: overrides?.chain || polygon_js_1.polygon,
        client,
    });
    const [handle, joinDate] = await Promise.all([
        getHandle({ contract: lensHandleContract, tokenId: handleTokenId }),
        includeJoinDate
            ? mintTimestampOf({ contract: lensHubContract, tokenId: profileId })
            : null,
    ]);
    const result = {
        profileData,
        handle,
        joinDate,
    };
    return result;
}
//# sourceMappingURL=getFullProfile.js.map