"use strict";
"use client";
Object.defineProperty(exports, "__esModule", { value: true });
exports.WalletImage = WalletImage;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
const webStorage_js_1 = require("../../../../utils/storage/webStorage.js");
const getWalletInfo_js_1 = require("../../../../wallets/__generated__/getWalletInfo.js");
const mipdStore_js_1 = require("../../../../wallets/injected/mipdStore.js");
const index_js_1 = require("../../../core/design-system/index.js");
const useActiveWallet_js_1 = require("../../../core/hooks/wallets/useActiveWallet.js");
const storage_js_1 = require("../../../core/utils/storage.js");
const wallet_js_1 = require("../../../core/utils/wallet.js");
const walletIcon_js_1 = require("../../../core/utils/walletIcon.js");
const Img_js_1 = require("./Img.js");
/**
 * @internal
 */
function WalletImage(props) {
    const [image, setImage] = (0, react_1.useState)(undefined);
    const activeWallet = (0, useActiveWallet_js_1.useActiveWallet)();
    (0, react_1.useEffect)(() => {
        async function fetchImage() {
            // show EOA icon for external wallets
            // show auth provider icon for in-app wallets
            // show the admin EOA icon for smart
            const storage = webStorage_js_1.webLocalStorage;
            const activeEOAId = props.id;
            let image;
            if (activeEOAId === "inApp" &&
                activeWallet &&
                (activeWallet.id === "inApp" || activeWallet.id === "smart")) {
                // when showing an active wallet icon - check last auth provider and override the IAW icon
                const lastAuthProvider = await (0, storage_js_1.getLastAuthProvider)(storage);
                image = lastAuthProvider
                    ? (0, walletIcon_js_1.getWalletIcon)(lastAuthProvider)
                    : walletIcon_js_1.genericWalletIcon;
            }
            else {
                const mipdImage = (0, mipdStore_js_1.getInstalledWalletProviders)().find((x) => x.info.rdns === activeEOAId)?.info.icon;
                if (mipdImage) {
                    image = mipdImage;
                }
                else {
                    image = await (0, getWalletInfo_js_1.getWalletInfo)(activeEOAId, true);
                }
            }
            setImage(image);
        }
        fetchImage();
    }, [props.id, activeWallet]);
    if (image) {
        return ((0, jsx_runtime_1.jsx)(Img_js_1.Img, { src: image, width: props.size, height: props.size, loading: "eager", client: props.client, style: {
                borderRadius: index_js_1.radius.md,
                ...props.style,
            } }));
    }
    return ((0, jsx_runtime_1.jsx)(WalletImageQuery, { id: props.id, size: props.size, client: props.client }));
}
function WalletImageQuery(props) {
    const walletImage = (0, wallet_js_1.useWalletImage)(props.id);
    if (walletImage.isFetched && !walletImage.data) {
        return ((0, jsx_runtime_1.jsx)(Img_js_1.Img, { client: props.client, src: walletIcon_js_1.genericWalletIcon, width: props.size, height: props.size }));
    }
    return ((0, jsx_runtime_1.jsx)(Img_js_1.Img, { client: props.client, src: walletImage.isLoading ? undefined : walletImage.data, fallbackImage: walletIcon_js_1.genericWalletIcon, width: props.size, height: props.size, loading: "eager", style: {
            borderRadius: index_js_1.radius.md,
        } }));
}
//# sourceMappingURL=WalletImage.js.map