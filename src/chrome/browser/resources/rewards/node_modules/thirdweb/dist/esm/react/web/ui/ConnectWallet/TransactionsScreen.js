"use client";
import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { ExternalLinkIcon } from "@radix-ui/react-icons";
import { useState } from "react";
import { iconSize } from "../../../core/design-system/index.js";
import { useChainExplorers } from "../../../core/hooks/others/useChainQuery.js";
import { useActiveAccount } from "../../../core/hooks/wallets/useActiveAccount.js";
import { useActiveWallet } from "../../../core/hooks/wallets/useActiveWallet.js";
import { useActiveWalletChain } from "../../../core/hooks/wallets/useActiveWalletChain.js";
import { LoadingScreen } from "../../wallets/shared/LoadingScreen.js";
import { Spacer } from "../components/Spacer.js";
import Tabs from "../components/Tabs.js";
import { Container, Line, ModalHeader } from "../components/basic.js";
import { ButtonLink } from "../components/buttons.js";
import { CoinsIcon } from "./icons/CoinsIcon.js";
import { FundsIcon } from "./icons/FundsIcon.js";
import { PayTxHistoryList } from "./screens/Buy/pay-transactions/BuyTxHistory.js";
import { TxDetailsScreen } from "./screens/Buy/pay-transactions/TxDetailsScreen.js";
import { WalletTransactionHistory } from "./screens/WalletTransactionHistory.js";
//
/**
 * @internal
 */
export function TransactionsScreen(props) {
    const [activeTab, setActiveTab] = useState("Transactions");
    // For now, you can only select pay transactions (purcahses)
    const [selectedTx, setSelectedTx] = useState(null);
    const activeChain = useActiveWalletChain();
    const activeWallet = useActiveWallet();
    const activeAccount = useActiveAccount();
    const chainExplorers = useChainExplorers(activeChain);
    const payer = activeChain && activeAccount && activeWallet
        ? { chain: activeChain, account: activeAccount, wallet: activeWallet }
        : undefined;
    if (!payer) {
        return _jsx(LoadingScreen, {});
    }
    if (selectedTx) {
        return (_jsx(TxDetailsScreen, { title: props.title, client: props.client, statusInfo: selectedTx, onBack: () => setSelectedTx(null), onDone: () => setSelectedTx(null), payer: payer, transactionMode: false, isEmbed: false }));
    }
    return (_jsxs(Container, { animate: "fadein", children: [_jsx(Container, { p: "lg", children: _jsx(ModalHeader, { title: props.locale.transactions, onBack: props.onBack }) }), _jsx(Line, {}), _jsxs(Container, { px: "lg", scrollY: true, style: {
                    minHeight: "330px",
                }, children: [_jsx(Spacer, { y: "md" }), _jsxs(Tabs, { options: [
                            {
                                label: (_jsxs("span", { className: "flex gap-2", children: [_jsx(CoinsIcon, { size: iconSize.sm }), " Transactions"] })),
                                value: "Transactions",
                            },
                            {
                                label: (_jsxs("span", { className: "flex gap-2", children: [_jsx(FundsIcon, { size: iconSize.sm }), " Purchases"] })),
                                value: "Purchases",
                            },
                        ], selected: activeTab, onSelect: setActiveTab, children: [activeTab === "Purchases" && (_jsx(PayTxHistoryList, { client: props.client, onSelectTx: setSelectedTx })), activeTab === "Transactions" && (_jsx(WalletTransactionHistory, { locale: props.locale, client: props.client, address: payer.account.address }))] })] }), _jsx(Line, {}), _jsx(Container, { p: "lg", children: _jsxs(ButtonLink, { fullWidth: true, variant: "outline", href: `${chainExplorers.explorers[0]?.url}/address/${activeAccount?.address}`, target: "_blank", as: "a", gap: "xs", style: {
                        textDecoration: "none",
                        color: "inherit",
                    }, children: ["View on Explorer", _jsx(ExternalLinkIcon, { width: iconSize.sm, height: iconSize.sm })] }) })] }));
}
//# sourceMappingURL=TransactionsScreen.js.map