"use strict";
"use client";
Object.defineProperty(exports, "__esModule", { value: true });
exports.LinkedProfilesScreen = LinkedProfilesScreen;
const jsx_runtime_1 = require("react/jsx-runtime");
const address_js_1 = require("../../../../../utils/address.js");
const index_js_1 = require("../../../../core/design-system/index.js");
const useProfiles_js_1 = require("../../../../core/hooks/others/useProfiles.js");
const useSocialProfiles_js_1 = require("../../../../core/social/useSocialProfiles.js");
const walletIcon_js_1 = require("../../../../core/utils/walletIcon.js");
const LoadingScreen_js_1 = require("../../../wallets/shared/LoadingScreen.js");
const Img_js_1 = require("../../components/Img.js");
const Spacer_js_1 = require("../../components/Spacer.js");
const basic_js_1 = require("../../components/basic.js");
const text_js_1 = require("../../components/text.js");
const Blobbie_js_1 = require("../Blobbie.js");
const MenuButton_js_1 = require("../MenuButton.js");
const AddUserIcon_js_1 = require("../icons/AddUserIcon.js");
function getProfileDisplayName(profile) {
    switch (true) {
        case profile.type === "email" && profile.details.email !== undefined:
            return profile.details.email;
        case profile.type === "google" && profile.details.email !== undefined:
            return profile.details.email;
        case profile.type === "phone" && profile.details.phone !== undefined:
            return profile.details.phone;
        case profile.details.address !== undefined:
            return (0, address_js_1.shortenAddress)(profile.details.address, 6);
        case profile.type === "cognito" &&
            profile.details.email !== undefined:
            return profile.details.email;
        default:
            return profile.type.slice(0, 1).toUpperCase() + profile.type.slice(1);
    }
}
/**
 * @internal
 */
function LinkedProfilesScreen(props) {
    const { data: connectedProfiles, isLoading } = (0, useProfiles_js_1.useProfiles)();
    if (isLoading) {
        return (0, jsx_runtime_1.jsx)(LoadingScreen_js_1.LoadingScreen, {});
    }
    return ((0, jsx_runtime_1.jsxs)(basic_js_1.Container, { style: {
            minHeight: "300px",
        }, children: [(0, jsx_runtime_1.jsx)(basic_js_1.Container, { p: "lg", children: (0, jsx_runtime_1.jsx)(basic_js_1.ModalHeader, { title: props.locale.manageWallet.linkedProfiles, onBack: props.onBack }) }), (0, jsx_runtime_1.jsx)(basic_js_1.Line, {}), isLoading ? ((0, jsx_runtime_1.jsx)(LoadingScreen_js_1.LoadingScreen, {})) : ((0, jsx_runtime_1.jsxs)(basic_js_1.Container, { scrollY: true, style: {
                    height: "300px",
                }, children: [(0, jsx_runtime_1.jsx)(Spacer_js_1.Spacer, { y: "md" }), (0, jsx_runtime_1.jsxs)(basic_js_1.Container, { px: "sm", children: [(0, jsx_runtime_1.jsxs)(MenuButton_js_1.MenuButton, { onClick: () => {
                                    props.setScreen("link-profile");
                                }, style: {
                                    fontSize: index_js_1.fontSize.sm,
                                }, children: [(0, jsx_runtime_1.jsx)(AddUserIcon_js_1.AddUserIcon, { size: index_js_1.iconSize.md }), (0, jsx_runtime_1.jsx)(text_js_1.Text, { color: "primaryText", children: props.locale.manageWallet.linkProfile })] }), (0, jsx_runtime_1.jsx)(Spacer_js_1.Spacer, { y: "xs" }), connectedProfiles
                                ?.filter((profile) => profile.type !== "guest")
                                .map((profile) => ((0, jsx_runtime_1.jsx)(LinkedProfile, { profile: profile, client: props.client }, `${profile.type}-${getProfileDisplayName(profile)}`)))] }), (0, jsx_runtime_1.jsx)(Spacer_js_1.Spacer, { y: "md" })] }))] }));
}
function LinkedProfile({ profile, client, }) {
    const { data: socialProfiles } = (0, useSocialProfiles_js_1.useSocialProfiles)({
        client,
        address: profile.details.address,
    });
    return ((0, jsx_runtime_1.jsxs)(MenuButton_js_1.MenuButton, { style: {
            fontSize: index_js_1.fontSize.sm,
            cursor: "default",
        }, disabled // disabled until we have more data to show on a dedicated profile screen
        : true, children: [socialProfiles?.some((p) => p.avatar) ? ((0, jsx_runtime_1.jsx)(Img_js_1.Img, { src: socialProfiles?.find((p) => p.avatar)?.avatar, width: index_js_1.iconSize.lg, height: index_js_1.iconSize.lg, loading: "eager", client: client, style: {
                    borderRadius: "100%",
                } })) : profile.details.address !== undefined ? ((0, jsx_runtime_1.jsx)(basic_js_1.Container, { style: {
                    width: "32px",
                    height: "32px",
                    borderRadius: "100%",
                    overflow: "hidden",
                }, children: (0, jsx_runtime_1.jsx)(Blobbie_js_1.Blobbie, { address: profile.details.address, size: 32 }) })) : ((0, jsx_runtime_1.jsx)(Img_js_1.Img, { src: (0, walletIcon_js_1.getWalletIcon)(profile.type), width: index_js_1.iconSize.lg, height: index_js_1.iconSize.lg, loading: "eager", client: client })), (0, jsx_runtime_1.jsxs)("div", { style: {
                    display: "flex",
                    flexDirection: "row",
                    justifyContent: "space-between",
                    alignItems: "center",
                    flexGrow: 1,
                }, children: [(0, jsx_runtime_1.jsx)(text_js_1.Text, { color: "primaryText", children: socialProfiles?.find((p) => p.avatar)?.name ||
                            getProfileDisplayName(profile) }), socialProfiles?.find((p) => p.avatar)?.name &&
                        profile.details.address && ((0, jsx_runtime_1.jsx)(text_js_1.Text, { color: "secondaryText", size: "sm", children: (0, address_js_1.shortenAddress)(profile.details.address, 4) }))] })] }));
}
//# sourceMappingURL=LinkedProfilesScreen.js.map