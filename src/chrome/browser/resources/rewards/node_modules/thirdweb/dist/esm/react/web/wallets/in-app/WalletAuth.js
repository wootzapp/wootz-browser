import { jsx as _jsx, Fragment as _Fragment, jsxs as _jsxs } from "react/jsx-runtime";
import { Suspense, useRef, useState } from "react";
import { defineChain } from "../../../../chains/utils.js";
import { linkProfile } from "../../../../wallets/in-app/core/wallet/profiles.js";
import { iconSize } from "../../../core/design-system/index.js";
import { useAddConnectedWallet } from "../../../core/hooks/wallets/useAddConnectedWallet.js";
import AllWalletsUI from "../../ui/ConnectWallet/Modal/AllWalletsUI.js";
import { WalletSelector } from "../../ui/ConnectWallet/WalletSelector.js";
import { Spacer } from "../../ui/components/Spacer.js";
import { WalletImage } from "../../ui/components/WalletImage.js";
import { Container, ModalHeader } from "../../ui/components/basic.js";
import { getDefaultWallets } from "../defaultWallets.js";
import { ErrorState } from "../shared/ErrorState.js";
import { LoadingScreen } from "../shared/LoadingScreen.js";
import { LoadingState } from "../shared/LoadingState.js";
export function WalletAuth(props) {
    const { wallet, done } = props;
    const addConnectedWallet = useAddConnectedWallet();
    const walletToConnect = useRef();
    const [status, setStatus] = useState("selecting");
    const [error, setError] = useState();
    const [showAll, setShowAll] = useState(false);
    const back = () => {
        setStatus("selecting");
        walletToConnect.current = undefined;
        props.onBack();
    };
    async function login(walletToLink) {
        setStatus("loading");
        walletToConnect.current = walletToLink;
        try {
            await linkProfile(wallet, {
                strategy: "wallet",
                wallet: walletToLink,
                chain: wallet.getChain() || defineChain(1),
            }).catch((e) => {
                setError(e.message);
                throw e;
            });
            addConnectedWallet(walletToLink);
            done();
        }
        catch {
            setStatus("error");
        }
    }
    if (!walletToConnect.current) {
        if (showAll) {
            return (_jsx(Suspense, { fallback: _jsx(LoadingScreen, {}), children: _jsx(AllWalletsUI, { onBack: () => setShowAll(false), onSelect: async (newWallet) => {
                        login(newWallet);
                        setShowAll(false);
                    }, client: props.client, connectLocale: props.locale, recommendedWallets: undefined, specifiedWallets: [], size: props.size, disableSelectionDataReset: true }) }));
        }
        return (_jsx(WalletSelector, { title: props.locale.connectAWallet, wallets: getDefaultWallets(), selectWallet: async (newWallet) => {
                login(newWallet);
            }, onShowAll: () => {
                setShowAll(true);
            }, done: () => { }, goBack: back, setModalVisibility: () => { }, client: props.client, connectLocale: props.locale, hideHeader: false, recommendedWallets: undefined, chain: wallet.getChain(), showAllWallets: true, chains: [], size: props.size, meta: props.meta || {}, walletConnect: props.walletConnect, modalHeader: { title: props.inAppLocale.linkWallet, onBack: back }, walletIdsToHide: ["inApp"], disableSelectionDataReset: true }));
    }
    return (_jsxs(Container, { animate: "fadein", fullHeight: true, flex: "column", children: [_jsx(Container, { p: "lg", children: _jsx(ModalHeader, { title: props.inAppLocale.linkWallet, onBack: back }) }), _jsx(Container, { px: props.size === "wide" ? "xxl" : "lg", expand: true, flex: "column", center: "y", children: _jsx("div", { children: status === "error" ? (_jsxs(_Fragment, { children: [_jsx(ErrorState, { onTryAgain: () => {
                                    if (!walletToConnect.current) {
                                        throw new Error("Failed to connect to unknown wallet");
                                    }
                                    login(walletToConnect.current);
                                }, title: error || "Failed to Login" }), _jsx(Spacer, { y: "lg" })] })) : (_jsx(_Fragment, { children: _jsx(LoadingState, { title: "Sign in with your wallet", subtitle: "A pop-up prompt will appear to sign-in and verify your wallet", icon: _jsx(WalletImage, { id: walletToConnect.current.id ?? "", size: iconSize.xl, client: props.client }) }) })) }) })] }));
}
//# sourceMappingURL=WalletAuth.js.map