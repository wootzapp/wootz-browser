import { prepareContractCall } from "../../../transaction/prepare-contract-call.js";
import { toBigInt } from "../../../utils/bigint.js";
import { getKeyGateway } from "../contracts/getKeyGateway.js";
import { getFid } from "../read/getFid.js";
/**
 * Adds farcaster signer for the given account.
 * @param options - The options for adding the signer.
 * @returns A prepared transaction object to add the signer to the account.
 * @extension FARCASTER
 * @example
 * ```ts
 * import { addSigner } from "thirdweb/extensions/farcaster";
 * import { sendTransaction } from "thirdweb";
 *
 * const transaction = addSigner({
 *  client,
 * 	appAccount,
 *  signerPublicKey
 * });
 *
 * await sendTransaction({ transaction, account });
 * ```
 */
export function addSigner(options) {
    return prepareContractCall({
        contract: getKeyGateway({
            client: options.client,
            chain: options.chain,
        }),
        method: [
            "0x22b1a414",
            [
                {
                    type: "uint32",
                    name: "keyType",
                },
                {
                    type: "bytes",
                    name: "key",
                },
                {
                    type: "uint8",
                    name: "metadataType",
                },
                {
                    type: "bytes",
                    name: "metadata",
                },
            ],
            [],
        ],
        params: async () => {
            const deadline = "deadline" in options
                ? options.deadline
                : BigInt(Math.floor(Date.now() / 1000) + 3600); // default signatures last for 1 hour
            const appFid = await getFid({
                client: options.client,
                chain: options.chain,
                address: "appAccount" in options
                    ? options.appAccount.address
                    : options.appAccountAddress,
                disableCache: options.disableCache,
            });
            // Set the signedKeyRequestMetadata if provided, otherwise generate using the app account
            let signedKeyRequestMetadata;
            if ("signedKeyRequestMetadata" in options) {
                signedKeyRequestMetadata = options.signedKeyRequestMetadata;
            }
            else if ("appAccount" in options) {
                const { getSignedKeyRequestMetadata } = await import("../eip712Signatures/keyRequestSignature.js");
                signedKeyRequestMetadata = await getSignedKeyRequestMetadata({
                    account: options.appAccount,
                    message: {
                        requestFid: toBigInt(appFid),
                        key: options.signerPublicKey,
                        deadline,
                    },
                });
            }
            else {
                throw new Error("Invalid options, expected signedKeyRequestMetadata or appAccount to be provided");
            }
            return [1, options.signerPublicKey, 1, signedKeyRequestMetadata];
        },
    });
}
//# sourceMappingURL=addSigner.js.map