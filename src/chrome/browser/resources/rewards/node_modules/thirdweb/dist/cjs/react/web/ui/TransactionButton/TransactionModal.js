"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TransactionModal = TransactionModal;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_query_1 = require("@tanstack/react-query");
const react_1 = require("react");
const track_js_1 = require("../../../../analytics/track.js");
const CustomThemeProvider_js_1 = require("../../../core/design-system/CustomThemeProvider.js");
const useActiveAccount_js_1 = require("../../../core/hooks/wallets/useActiveAccount.js");
const useActiveWallet_js_1 = require("../../../core/hooks/wallets/useActiveWallet.js");
const LoadingScreen_js_1 = require("../../wallets/shared/LoadingScreen.js");
const getConnectLocale_js_1 = require("../ConnectWallet/locale/getConnectLocale.js");
const LazyBuyScreen_js_1 = require("../ConnectWallet/screens/Buy/LazyBuyScreen.js");
const Modal_js_1 = require("../components/Modal.js");
const ExecutingScreen_js_1 = require("./ExecutingScreen.js");
function TransactionModal(props) {
    const account = (0, useActiveAccount_js_1.useActiveAccount)();
    const wallet = (0, useActiveWallet_js_1.useActiveWallet)();
    (0, react_query_1.useQuery)({
        queryKey: ["transaction-modal-event"],
        queryFn: () => {
            if (!account || !wallet)
                return;
            (0, track_js_1.trackPayEvent)({
                client: props.client,
                walletAddress: account.address,
                walletType: wallet.id,
                event: "open_pay_transaction_modal",
            });
        },
        enabled: !!wallet,
    });
    return ((0, jsx_runtime_1.jsx)(CustomThemeProvider_js_1.CustomThemeProvider, { theme: props.theme, children: (0, jsx_runtime_1.jsx)(Modal_js_1.Modal, { open: true, size: "compact", setOpen: (_open) => {
                if (!_open) {
                    props.onClose();
                }
            }, children: (0, jsx_runtime_1.jsx)(TransactionModalContent, { ...props }) }) }));
}
function TransactionModalContent(props) {
    const localeQuery = (0, getConnectLocale_js_1.useConnectLocale)(props.localeId);
    const [screen, setScreen] = (0, react_1.useState)("buy");
    if (!localeQuery.data) {
        return (0, jsx_runtime_1.jsx)(LoadingScreen_js_1.LoadingScreen, {});
    }
    if (screen === "execute-tx") {
        return ((0, jsx_runtime_1.jsx)(ExecutingScreen_js_1.ExecutingTxScreen, { tx: props.tx, closeModal: props.onClose, onTxSent: props.onTxSent }));
    }
    return ((0, jsx_runtime_1.jsx)(LazyBuyScreen_js_1.LazyBuyScreen, { title: props.title, isEmbed: false, client: props.client, onBack: props.onBack, supportedTokens: props.supportedTokens, connectLocale: localeQuery.data, theme: typeof props.theme === "string" ? props.theme : props.theme.type, payOptions: props.payOptions, onDone: () => {
            setScreen("execute-tx");
        }, connectOptions: undefined }));
}
//# sourceMappingURL=TransactionModal.js.map