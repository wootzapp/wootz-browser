"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.useBuyWithFiatStatus = useBuyWithFiatStatus;
const react_query_1 = require("@tanstack/react-query");
const getStatus_js_1 = require("../../../../pay/buyWithFiat/getStatus.js");
/**
 * A hook to get a status of a "Buy with Fiat" transaction to determine if the transaction is completed, failed or pending.
 *
 * This hook is a React Query wrapper of the [`getBuyWithFiatStatus`](https://portal.thirdweb.com/references/typescript/v5/getBuyWithCryptoStatus) function.
 * You can also use that function directly.
 *
 * `useBuyWithFiatStatus` refetches the status using `getBuyWithFiatStatus` every 5 seconds.
 *
 * @param params - object of type [`GetBuyWithFiatStatusParams`](https://portal.thirdweb.com/references/typescript/v5/BuyWithCryptoTransaction)
 * @returns A react query object which contains the data of type [`BuyWithFiatStatus`](https://portal.thirdweb.com/references/typescript/v5/BuyWithCryptoStatus)
 * @example
 * ```tsx
 * import { useBuyWithFiatStatus } from "thirdweb/react";
 * import { client } from "./client";
 *
 * function Example() {
 *   const fiatStatus = useBuyWithFiatStatus({
 *     client: client, // thirdweb client
 *     intentId: "....", // get the intentId from quote ( quote.intentId )
 *   });
 *
 *   console.log(fiatStatus.data);
 *
 *   return <div>...</div>;
 * }
 * ```
 * @buyCrypto
 */
function useBuyWithFiatStatus(params) {
    return (0, react_query_1.useQuery)({
        queryKey: ["useBuyWithFiatStatus", params],
        queryFn: async () => {
            if (!params) {
                throw new Error("No params provided");
            }
            return (0, getStatus_js_1.getBuyWithFiatStatus)(params);
        },
        enabled: !!params,
        refetchInterval: (query) => {
            const data = query.state.data;
            const status = data?.status;
            if (status === "ON_RAMP_TRANSFER_FAILED" ||
                status === "PAYMENT_FAILED" ||
                status === "CRYPTO_SWAP_COMPLETED" ||
                // onRampToken and toToken being the same means there is no additional swap step
                (status === "ON_RAMP_TRANSFER_COMPLETED" &&
                    data?.quote.toToken.chainId === data?.quote.onRampToken.chainId &&
                    data?.quote.toToken.tokenAddress.toLowerCase() ===
                        data?.quote.onRampToken.tokenAddress.toLowerCase())) {
                return false;
            }
            return 5000;
        },
        refetchIntervalInBackground: true,
        retry: true,
    });
}
//# sourceMappingURL=useBuyWithFiatStatus.js.map