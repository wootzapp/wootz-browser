import type { Address } from "abitype";
import type { ThirdwebContract } from "../../../contract/contract.js";
import type { BaseTransactionOptions } from "../../../transaction/types.js";
import type { NFTInput } from "../../../utils/nft/parseNft.js";
import type { Account } from "../../../wallets/interfaces/wallet.js";
import { type MintWithSignatureParams } from "../__generated__/ISignatureMintERC721/write/mintWithSignature.js";
/**
 * Mints a new ERC721 token with the given minter signature
 * @param options - The transaction options.
 * @example
 * ```ts
 * import { mintWithSignature, generateMintSignature } from "thirdweb/extensions/erc721";
 * import { sendTransaction } from "thirdweb";
 *
 * const { payload, signature } = await generateMintSignature(...)
 *
 * const transaction = mintWithSignature({
 *   contract,
 *   payload,
 *   signature,
 * });
 *
 * await sendTransaction({ transaction, account });
 * ```
 * @extension ERC721
 * @returns A promise that resolves to the transaction result.
 */
export declare function mintWithSignature(options: BaseTransactionOptions<MintWithSignatureParams>): import("../../../transaction/prepare-transaction.js").PreparedTransaction<any, import("abitype").AbiFunction, import("../../../transaction/prepare-transaction.js").PrepareTransactionOptions>;
export type GenerateMintSignatureOptions = {
    account: Account;
    contract: ThirdwebContract;
    mintRequest: GeneratePayloadInput;
};
/**
 * Generates the payload and signature for minting an ERC721 token.
 * @param options - The options for the minting process.
 * @example
 * ```ts
 * import { mintWithSignature, generateMintSignature } from "thirdweb/extensions/erc721";
 *
 * const { payload, signature } = await generateMintSignature({
 *   account,
 *   contract,
 *   mintRequest: {
 *     to: "0x...",
 *     metadata: {
 *       name: "My NFT",
 *       description: "This is my NFT",
 *       image: "https://example.com/image.png",
 *     },
 *   },
 * });
 *
 * const transaction = mintWithSignature({
 *   contract,
 *   payload,
 *   signature,
 * });
 * await sendTransaction({ transaction, account });
 * ```
 * @extension ERC721
 * @returns A promise that resolves to the payload and signature.
 */
export declare function generateMintSignature(options: GenerateMintSignatureOptions): Promise<{
    payload: {
        to: string;
        royaltyRecipient: string;
        royaltyBps: bigint;
        primarySaleRecipient: string;
        uri: string;
        price: bigint;
        currency: string;
        validityStartTimestamp: bigint;
        validityEndTimestamp: bigint;
        uid: `0x${string}`;
    };
    signature: `0x${string}`;
}>;
type GeneratePayloadInput = {
    to: string;
    metadata: NFTInput | string;
    royaltyRecipient?: Address;
    royaltyBps?: number;
    primarySaleRecipient?: Address;
    price?: string;
    priceInWei?: bigint;
    currency?: Address;
    validityStartTimestamp?: Date;
    validityEndTimestamp?: Date;
    uid?: string;
};
export {};
//# sourceMappingURL=sigMint.d.ts.map