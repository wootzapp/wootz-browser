import { type UseQueryResult } from "@tanstack/react-query";
import type { Abi, AbiEvent } from "abitype";
import type { ParseEventLogsResult } from "../../../../event/actions/parse-logs.js";
import { type WatchContractEventsOptions } from "../../../../event/actions/watch-events.js";
import type { PreparedEvent } from "../../../../event/prepare-event.js";
type UseContractEventsOptions<abi extends Abi, abiEvents extends PreparedEvent<AbiEvent>[]> = Omit<WatchContractEventsOptions<abi, abiEvents, true>, "onEvents"> & {
    blockRange?: number;
    enabled?: boolean;
    watch?: boolean;
};
/**
 * Watches contract events and returns the parsed logs.
 * @param options - The options for watching contract events.
 * @param options.contract - The contract to watch events for.
 * @param options.events - The events to watch. Shuould be an array of [prepared events](https://portal.thirdweb.com/references/typescript/v5/prepareEvent).
 * @param options.blockRange - The number of blocks to search for events.
 * @param options.enabled - Whether to enable the query.
 * @param options.watch - Whether to watch for new events.
 * @returns The contract events of the watched contract events.
 * @example
 *
 * ### Using event extensions
 *
 * The `thirdweb/extesions` export contains event definitions for many popular contracts.
 * You can use these event definitions to watch for specific events with a type-safe API.
 *
 * ```jsx
 * import { useContractEvents } from "thirdweb/react";
 * import { tokensClaimedEvent } from "thirdweb/extensions/erc721";
 *
 * const account = useActiveAccount();
 * const contractEvents = useContractEvents({
 *  contract,
 *  events: [tokensClaimedEvent({ claimer: account?.address })],
 * });
 * ```
 *
 * ### Using custom events
 *
 * You can also watch for custom events by passing an array of [prepared events](https://portal.thirdweb.com/references/typescript/v5/prepareEvent).
 *
 * ```jsx
 * import { useContractEvents } from "thirdweb/react";
 * import { prepareEvent } from "thirdweb";
 *
 * const myEvent = prepareEvent({
 *  signature: "event MyEvent(uint256 myArg)",
 * });
 *
 * const contractEvents = useContractEvents({
 *  contract,
 *  events: [myEvent],
 * });
 * ```
 *
 * @contract
 */
export declare function useContractEvents<const abi extends Abi, const abiEvents extends PreparedEvent<AbiEvent>[]>(options: UseContractEventsOptions<abi, abiEvents>): UseQueryResult<ParseEventLogsResult<abiEvents, true>, Error>;
export {};
//# sourceMappingURL=useContractEvents.d.ts.map