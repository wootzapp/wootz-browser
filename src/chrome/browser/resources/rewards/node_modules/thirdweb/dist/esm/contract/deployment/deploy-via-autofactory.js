import { parseEventLogs } from "../../event/actions/parse-logs.js";
import { proxyDeployedEvent } from "../../extensions/thirdweb/__generated__/IContractFactory/events/ProxyDeployed.js";
import { deployProxyByImplementation } from "../../extensions/thirdweb/__generated__/IContractFactory/write/deployProxyByImplementation.js";
import { eth_blockNumber } from "../../rpc/actions/eth_blockNumber.js";
import { getRpcClient } from "../../rpc/rpc.js";
import { encode } from "../../transaction/actions/encode.js";
import { sendAndConfirmTransaction } from "../../transaction/actions/send-and-confirm-transaction.js";
import { keccakId } from "../../utils/any-evm/keccak-id.js";
import { isZkSyncChain } from "../../utils/any-evm/zksync/isZkSyncChain.js";
import { toHex } from "../../utils/encoding/hex.js";
import { resolvePromisedValue } from "../../utils/promise/resolve-promised-value.js";
import { zkDeployProxy } from "./zksync/zkDeployProxy.js";
/**
 * @internal
 */
export function prepareAutoFactoryDeployTransaction(args) {
    return deployProxyByImplementation({
        contract: args.cloneFactoryContract,
        async asyncParams() {
            const rpcRequest = getRpcClient({
                ...args,
            });
            const blockNumber = await eth_blockNumber(rpcRequest);
            const salt = args.salt
                ? keccakId(args.salt)
                : toHex(blockNumber, {
                    size: 32,
                });
            const implementation = await resolvePromisedValue(args.initializeTransaction.to);
            if (!implementation) {
                throw new Error("initializeTransaction must have a 'to' field set");
            }
            return {
                data: await encode(args.initializeTransaction),
                implementation,
                salt,
            };
        },
    });
}
/**
 * @internal
 */
export async function deployViaAutoFactory(options) {
    const { chain, client, account, cloneFactoryContract, initializeTransaction, } = options;
    if (isZkSyncChain(chain)) {
        return zkDeployProxy({
            chain,
            client,
            account,
            cloneFactoryContract,
            initializeTransaction,
        });
    }
    const tx = prepareAutoFactoryDeployTransaction({
        chain,
        client,
        cloneFactoryContract,
        initializeTransaction,
    });
    const receipt = await sendAndConfirmTransaction({
        transaction: tx,
        account,
    });
    const decodedEvent = parseEventLogs({
        events: [proxyDeployedEvent()],
        logs: receipt.logs,
    });
    if (decodedEvent.length === 0 || !decodedEvent[0]) {
        throw new Error(`No ProxyDeployed event found in transaction: ${receipt.transactionHash}`);
    }
    return decodedEvent[0]?.args.proxy;
}
//# sourceMappingURL=deploy-via-autofactory.js.map