"use strict";
"use client";
Object.defineProperty(exports, "__esModule", { value: true });
exports.GuestLogin = GuestLogin;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
const webStorage_js_1 = require("../../../../utils/storage/webStorage.js");
const is_ecosystem_wallet_js_1 = require("../../../../wallets/ecosystem/is-ecosystem-wallet.js");
const storage_js_1 = require("../../../core/utils/storage.js");
const Spacer_js_1 = require("../../ui/components/Spacer.js");
const Spinner_js_1 = require("../../ui/components/Spinner.js");
const basic_js_1 = require("../../ui/components/basic.js");
const buttons_js_1 = require("../../ui/components/buttons.js");
const text_js_1 = require("../../ui/components/text.js");
/**
 * @internal
 */
function GuestLogin(props) {
    const ewLocale = props.locale;
    const locale = ewLocale.socialLoginScreen;
    const [authError, setAuthError] = (0, react_1.useState)(undefined);
    const { done, wallet } = props;
    const [status, setStatus] = (0, react_1.useState)("connecting");
    const handleGuestLogin = async () => {
        const connectOptions = {
            client: props.client,
            ecosystem: (0, is_ecosystem_wallet_js_1.isEcosystemWallet)(wallet)
                ? {
                    id: wallet.id,
                    partnerId: wallet.getConfig()?.partnerId,
                }
                : undefined,
            strategy: "guest",
        };
        try {
            await wallet.connect(connectOptions);
            await (0, storage_js_1.setLastAuthProvider)("guest", webStorage_js_1.webLocalStorage);
            setStatus("connected");
            done();
        }
        catch (e) {
            setStatus("error");
            // TODO this only happens on 'retry' button click, not on initial login
            // should pass auth error message to this component
            if (e instanceof Error &&
                e?.message?.includes("PAYMENT_METHOD_REQUIRED")) {
                setAuthError(ewLocale.maxAccountsExceeded);
            }
            console.error("Error generating guest account", e);
        }
    };
    const guestLogin = props.state?.guestLogin;
    const socialLoginStarted = (0, react_1.useRef)(false);
    (0, react_1.useEffect)(() => {
        if (socialLoginStarted.current) {
            return;
        }
        if (guestLogin) {
            socialLoginStarted.current = true;
            setStatus("connecting");
            guestLogin.connectionPromise
                .then(() => {
                done();
                setStatus("connected");
            })
                .catch((e) => {
                setAuthError(e.message);
                setStatus("error");
            });
        }
    }, [done, guestLogin]);
    return ((0, jsx_runtime_1.jsx)(basic_js_1.Container, { animate: "fadein", flex: "column", fullHeight: true, children: (0, jsx_runtime_1.jsxs)(basic_js_1.Container, { flex: "column", expand: true, p: "lg", style: {
                paddingBottom: 0,
            }, children: [props.goBack && ((0, jsx_runtime_1.jsx)(basic_js_1.ModalHeader, { title: locale.title, onBack: props.goBack })), props.size === "compact" ? (0, jsx_runtime_1.jsx)(Spacer_js_1.Spacer, { y: "xl" }) : null, (0, jsx_runtime_1.jsxs)(basic_js_1.Container, { flex: "column", center: "both", expand: true, style: {
                        textAlign: "center",
                        minHeight: "250px",
                    }, children: [status !== "error" && ((0, jsx_runtime_1.jsxs)(basic_js_1.Container, { animate: "fadein", children: [(0, jsx_runtime_1.jsx)(text_js_1.Text, { color: "primaryText", center: true, multiline: true, style: {
                                        maxWidth: "250px",
                                    }, children: "Generating your guest account" }), (0, jsx_runtime_1.jsx)(Spacer_js_1.Spacer, { y: "xl" }), (0, jsx_runtime_1.jsx)(basic_js_1.Container, { center: "x", flex: "row", children: (0, jsx_runtime_1.jsx)(Spinner_js_1.Spinner, { size: "lg", color: "accentText" }) }), (0, jsx_runtime_1.jsx)(Spacer_js_1.Spacer, { y: "xxl" })] })), status === "error" && ((0, jsx_runtime_1.jsxs)(basic_js_1.Container, { animate: "fadein", children: [authError ? ((0, jsx_runtime_1.jsx)(text_js_1.Text, { center: true, color: "danger", children: authError })) : ((0, jsx_runtime_1.jsx)(text_js_1.Text, { color: "danger", children: locale.failed })), (0, jsx_runtime_1.jsx)(Spacer_js_1.Spacer, { y: "lg" }), (0, jsx_runtime_1.jsx)(buttons_js_1.Button, { variant: "primary", onClick: handleGuestLogin, children: locale.retry }), (0, jsx_runtime_1.jsx)(Spacer_js_1.Spacer, { y: "xxl" })] }))] })] }) }));
}
//# sourceMappingURL=GuestLogin.js.map