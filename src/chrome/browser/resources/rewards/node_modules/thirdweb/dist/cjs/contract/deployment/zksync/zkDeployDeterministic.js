"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.zkDeployContractDeterministic = zkDeployContractDeterministic;
const abitype_1 = require("abitype");
const zksync_1 = require("viem/zksync");
const send_and_confirm_transaction_js_1 = require("../../../transaction/actions/send-and-confirm-transaction.js");
const prepare_contract_call_js_1 = require("../../../transaction/prepare-contract-call.js");
const read_contract_js_1 = require("../../../transaction/read-contract.js");
const encodeAbiParameters_js_1 = require("../../../utils/abi/encodeAbiParameters.js");
const normalizeFunctionParams_js_1 = require("../../../utils/abi/normalizeFunctionParams.js");
const keccak_id_js_1 = require("../../../utils/any-evm/keccak-id.js");
const computeDeploymentAddress_js_1 = require("../../../utils/any-evm/zksync/computeDeploymentAddress.js");
const constants_js_1 = require("../../../utils/any-evm/zksync/constants.js");
const is_contract_deployed_js_1 = require("../../../utils/bytecode/is-contract-deployed.js");
const prefix_js_1 = require("../../../utils/bytecode/prefix.js");
const hex_js_1 = require("../../../utils/encoding/hex.js");
const contract_js_1 = require("../../contract.js");
const zkDeployContract_js_1 = require("./zkDeployContract.js");
const zkDeployCreate2Factory_js_1 = require("./zkDeployCreate2Factory.js");
/**
 * @internal
 */
async function zkDeployContractDeterministic(options) {
    const constructorAbi = options.abi.find((x) => "type" in x && x.type === "constructor") || { inputs: [] };
    const encodedArgs = (0, encodeAbiParameters_js_1.encodeAbiParameters)(constructorAbi.inputs, (0, normalizeFunctionParams_js_1.normalizeFunctionParams)(constructorAbi, options.params));
    const create2FactoryAddress = await (0, zkDeployCreate2Factory_js_1.zkDeployCreate2Factory)({
        client: options.client,
        chain: options.chain,
        account: options.account,
    });
    const bytecode = (0, prefix_js_1.ensureBytecodePrefix)(options.bytecode);
    const bytecodeHash = (0, hex_js_1.uint8ArrayToHex)((0, zksync_1.hashBytecode)(bytecode));
    const predictedAddress = (0, computeDeploymentAddress_js_1.computeDeploymentAddress)({
        bytecodeHash,
        encodedArgs,
        create2FactoryAddress,
        salt: options.salt,
    });
    const deployed = await (0, is_contract_deployed_js_1.isContractDeployed)({
        address: predictedAddress,
        chain: options.chain,
        client: options.client,
    });
    if (!deployed) {
        // check if bytecodehash is known
        const knownCodesStorageContract = (0, contract_js_1.getContract)({
            address: constants_js_1.KNOWN_CODES_STORAGE,
            chain: options.chain,
            client: options.client,
        });
        const marker = await (0, read_contract_js_1.readContract)({
            contract: knownCodesStorageContract,
            method: "function getMarker(bytes32 _hash) view returns (uint256 marker)",
            params: [bytecodeHash],
        });
        // if not known, publish the bytecodehash
        if (marker !== 1n) {
            await (0, zkDeployContract_js_1.zkDeployContract)({
                client: options.client,
                chain: options.chain,
                account: options.account,
                abi: options.abi,
                bytecode,
                params: options.params,
            });
        }
        console.log(`deploying contract via create2 factory at: ${predictedAddress}`);
        // deploy with create2 factory
        const factory = (0, contract_js_1.getContract)({
            address: create2FactoryAddress,
            chain: options.chain,
            client: options.client,
            abi: (0, abitype_1.parseAbi)(constants_js_1.singletonFactoryAbi),
        });
        const salt = options?.salt ? (0, keccak_id_js_1.keccakId)(options.salt) : (0, keccak_id_js_1.keccakId)("thirdweb");
        await (0, send_and_confirm_transaction_js_1.sendAndConfirmTransaction)({
            account: options.account,
            transaction: (0, prepare_contract_call_js_1.prepareContractCall)({
                contract: factory,
                method: "deploy",
                params: [salt, bytecodeHash, encodedArgs],
            }),
        });
    }
    return predictedAddress;
}
//# sourceMappingURL=zkDeployDeterministic.js.map