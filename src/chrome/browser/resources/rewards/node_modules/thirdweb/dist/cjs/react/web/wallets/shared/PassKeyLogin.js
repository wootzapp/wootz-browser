"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PassKeyLogin = PassKeyLogin;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
const wallets_js_1 = require("../../../../exports/wallets.js");
const webStorage_js_1 = require("../../../../utils/storage/webStorage.js");
const is_ecosystem_wallet_js_1 = require("../../../../wallets/ecosystem/is-ecosystem-wallet.js");
const passkeys_js_1 = require("../../../../wallets/in-app/web/lib/auth/passkeys.js");
const index_js_1 = require("../../../core/design-system/index.js");
const storage_js_1 = require("../../../core/utils/storage.js");
const FingerPrintIcon_js_1 = require("../../ui/ConnectWallet/icons/FingerPrintIcon.js");
const Spacer_js_1 = require("../../ui/components/Spacer.js");
const basic_js_1 = require("../../ui/components/basic.js");
const buttons_js_1 = require("../../ui/components/buttons.js");
const ErrorState_js_1 = require("./ErrorState.js");
const LoadingScreen_js_1 = require("./LoadingScreen.js");
const LoadingState_js_1 = require("./LoadingState.js");
// is passkey stored?
// - login
// else
// - show login or signup options
function PassKeyLogin(props) {
    const { wallet, done, client, chain, size, locale } = props;
    const [screen, setScreen] = (0, react_1.useState)("loading");
    const triggered = (0, react_1.useRef)(false);
    (0, react_1.useEffect)(() => {
        if (triggered.current) {
            return;
        }
        triggered.current = true;
        (0, passkeys_js_1.hasStoredPasskey)(client, (0, is_ecosystem_wallet_js_1.isEcosystemWallet)(wallet.id) ? wallet.id : undefined)
            .then((isStored) => {
            if (isStored) {
                setScreen("login");
            }
            else {
                setScreen("select");
            }
        })
            .catch(() => {
            setScreen("select");
        });
    }, [client, wallet.id]);
    return ((0, jsx_runtime_1.jsxs)(basic_js_1.Container, { animate: "fadein", fullHeight: true, flex: "column", children: [(0, jsx_runtime_1.jsx)(basic_js_1.Container, { p: "lg", children: (0, jsx_runtime_1.jsx)(basic_js_1.ModalHeader, { title: props.isLinking
                        ? locale.passkeys.linkPasskey
                        : locale.passkeys.title, onBack: props.onBack }) }), (0, jsx_runtime_1.jsx)(basic_js_1.Container, { px: size === "wide" ? "xxl" : "lg", expand: true, flex: "column", center: "y", children: (0, jsx_runtime_1.jsxs)("div", { children: [screen === "loading" && ((0, jsx_runtime_1.jsxs)(jsx_runtime_1.Fragment, { children: [(0, jsx_runtime_1.jsx)(LoadingScreen_js_1.LoadingScreen, {}), (0, jsx_runtime_1.jsx)(Spacer_js_1.Spacer, { y: "xxl" })] })), screen === "select" && ((0, jsx_runtime_1.jsx)(SelectLoginMethod, { onSignin: () => {
                                setScreen("login");
                            }, onSignup: () => {
                                setScreen("signup");
                            } })), screen === "login" && ((0, jsx_runtime_1.jsx)(LoginScreen, { wallet: wallet, client: client, done: done, onCreate: () => {
                                setScreen("signup");
                            }, chain: chain, isLinking: props.isLinking })), screen === "signup" && ((0, jsx_runtime_1.jsx)(SignupScreen, { wallet: wallet, client: client, done: done, chain: chain, isLinking: props.isLinking }))] }) })] }));
}
function LoginScreen(props) {
    const { wallet, done, client, chain } = props;
    const [status, setStatus] = (0, react_1.useState)("loading");
    const [error, setError] = (0, react_1.useState)();
    async function login() {
        setStatus("loading");
        try {
            if (props.isLinking) {
                await (0, wallets_js_1.linkProfile)(wallet, {
                    strategy: "passkey",
                    type: "sign-in",
                }).catch((e) => {
                    setError(e.message);
                    throw e;
                });
            }
            else {
                await wallet.connect({
                    client: client,
                    strategy: "passkey",
                    type: "sign-in",
                    chain,
                });
                await (0, storage_js_1.setLastAuthProvider)("passkey", webStorage_js_1.webLocalStorage);
            }
            done();
        }
        catch {
            setStatus("error");
        }
    }
    const triggered = (0, react_1.useRef)(false);
    (0, react_1.useEffect)(() => {
        if (triggered.current) {
            return;
        }
        triggered.current = true;
        login();
    });
    if (status === "loading") {
        return ((0, jsx_runtime_1.jsx)(LoadingState_js_1.LoadingState, { title: "Requesting Passkey", subtitle: "A pop-up prompt will appear to sign-in and verify your passkey", icon: (0, jsx_runtime_1.jsx)(FingerPrintIcon_js_1.FingerPrintIcon, { size: index_js_1.iconSize.xxl }) }));
    }
    if (status === "error") {
        return ((0, jsx_runtime_1.jsxs)(jsx_runtime_1.Fragment, { children: [(0, jsx_runtime_1.jsx)(ErrorState_js_1.ErrorState, { onTryAgain: login, title: error || "Failed to Login" }), (0, jsx_runtime_1.jsx)(Spacer_js_1.Spacer, { y: "sm" }), (0, jsx_runtime_1.jsx)(buttons_js_1.Button, { variant: "outline", fullWidth: true, onClick: props.onCreate, children: "Create a new Passkey" }), (0, jsx_runtime_1.jsx)(Spacer_js_1.Spacer, { y: "lg" })] }));
    }
    return null;
}
function SignupScreen(props) {
    const { wallet, done, client, chain } = props;
    const [error, setError] = (0, react_1.useState)();
    const [status, setStatus] = (0, react_1.useState)("loading");
    async function signup() {
        setStatus("loading");
        try {
            if (props.isLinking) {
                await (0, wallets_js_1.linkProfile)(wallet, {
                    strategy: "passkey",
                    type: "sign-up",
                });
            }
            else {
                await wallet.connect({
                    client: client,
                    strategy: "passkey",
                    type: "sign-up",
                    chain,
                });
                await (0, storage_js_1.setLastAuthProvider)("passkey", webStorage_js_1.webLocalStorage);
            }
            done();
        }
        catch (e) {
            console.error(e);
            if (e instanceof Error) {
                setError(`Error creating passkey: ${e.message}`);
            }
            setStatus("error");
        }
    }
    const triggered = (0, react_1.useRef)(false);
    (0, react_1.useEffect)(() => {
        if (triggered.current) {
            return;
        }
        triggered.current = true;
        signup();
    });
    if (status === "loading") {
        return ((0, jsx_runtime_1.jsx)(LoadingState_js_1.LoadingState, { title: "Creating Passkey", subtitle: "A pop-up prompt will appear to sign-in and verify your passkey", icon: (0, jsx_runtime_1.jsx)(FingerPrintIcon_js_1.FingerPrintIcon, { size: index_js_1.iconSize.xxl }) }));
    }
    if (status === "error") {
        return ((0, jsx_runtime_1.jsxs)(jsx_runtime_1.Fragment, { children: [(0, jsx_runtime_1.jsx)(ErrorState_js_1.ErrorState, { onTryAgain: signup, title: error || "Failed to create passkey" }), (0, jsx_runtime_1.jsx)(Spacer_js_1.Spacer, { y: "lg" })] }));
    }
    return null;
}
function SelectLoginMethod(props) {
    return ((0, jsx_runtime_1.jsxs)(basic_js_1.Container, { children: [(0, jsx_runtime_1.jsx)(Spacer_js_1.Spacer, { y: "xxl" }), (0, jsx_runtime_1.jsx)(basic_js_1.Container, { flex: "row", center: "x", color: "accentText", children: (0, jsx_runtime_1.jsx)(FingerPrintIcon_js_1.FingerPrintIcon, { size: index_js_1.iconSize["4xl"] }) }), (0, jsx_runtime_1.jsx)(Spacer_js_1.Spacer, { y: "xl" }), (0, jsx_runtime_1.jsx)(Spacer_js_1.Spacer, { y: "xxl" }), (0, jsx_runtime_1.jsx)(buttons_js_1.Button, { variant: "accent", onClick: props.onSignup, fullWidth: true, children: "Create a Passkey" }), (0, jsx_runtime_1.jsx)(Spacer_js_1.Spacer, { y: "sm" }), (0, jsx_runtime_1.jsx)(buttons_js_1.Button, { variant: "outline", onClick: props.onSignin, fullWidth: true, children: "I have a Passkey" }), (0, jsx_runtime_1.jsx)(Spacer_js_1.Spacer, { y: "lg" })] }));
}
//# sourceMappingURL=PassKeyLogin.js.map