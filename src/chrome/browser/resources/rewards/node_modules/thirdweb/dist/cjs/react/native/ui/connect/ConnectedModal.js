"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConnectedModal = ConnectedModal;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
const react_native_1 = require("react-native");
const contract_js_1 = require("../../../../contract/contract.js");
const is_contract_deployed_js_1 = require("../../../../utils/bytecode/is-contract-deployed.js");
const formatNumber_js_1 = require("../../../../utils/formatNumber.js");
const useSiweAuth_js_1 = require("../../../core/hooks/auth/useSiweAuth.js");
const useChainQuery_js_1 = require("../../../core/hooks/others/useChainQuery.js");
const useActiveAccount_js_1 = require("../../../core/hooks/wallets/useActiveAccount.js");
const useActiveWallet_js_1 = require("../../../core/hooks/wallets/useActiveWallet.js");
const useActiveWalletChain_js_1 = require("../../../core/hooks/wallets/useActiveWalletChain.js");
const useDisconnect_js_1 = require("../../../core/hooks/wallets/useDisconnect.js");
const isSmartWallet_js_1 = require("../../../core/utils/isSmartWallet.js");
const wallet_js_1 = require("../../../core/utils/wallet.js");
const index_js_1 = require("../../design-system/index.js");
const Address_js_1 = require("../components/Address.js");
const ChainIcon_js_1 = require("../components/ChainIcon.js");
const Header_js_1 = require("../components/Header.js");
const RNImage_js_1 = require("../components/RNImage.js");
const Skeleton_js_1 = require("../components/Skeleton.js");
const WalletImage_js_1 = require("../components/WalletImage.js");
const button_js_1 = require("../components/button.js");
const spacer_js_1 = require("../components/spacer.js");
const text_js_1 = require("../components/text.js");
const view_js_1 = require("../components/view.js");
const svgs_js_1 = require("../icons/svgs.js");
const ReceiveScreen_js_1 = require("./ReceiveScreen.js");
const SendScreen_js_1 = require("./SendScreen.js");
const TokenListScreen_js_1 = require("./TokenListScreen.js");
function ConnectedModal(props) {
    const { theme, containerType, client } = props;
    const [modalState, setModalState] = (0, react_1.useState)({
        screen: "account",
    });
    let content;
    switch (modalState.screen) {
        case "send": {
            content = ((0, jsx_runtime_1.jsx)(SendScreen_js_1.SendScreen, { theme: theme, client: client, onClose: props.onClose, onBack: () => setModalState({ screen: "account" }), containerType: containerType, supportedTokens: props.supportedTokens }));
            break;
        }
        case "receive": {
            content = ((0, jsx_runtime_1.jsx)(ReceiveScreen_js_1.ReceiveScreen, { account: props.account, wallet: props.wallet, theme: theme, containerType: props.containerType, onBack: () => setModalState({ screen: "account" }), onClose: props.onClose }));
            break;
        }
        case "view_funds": {
            content = ((0, jsx_runtime_1.jsxs)(jsx_runtime_1.Fragment, { children: [(0, jsx_runtime_1.jsx)(Header_js_1.Header, { theme: theme, onClose: props.onClose, onBack: () => setModalState({ screen: "account" }), containerType: containerType, title: "View Funds" }), (0, jsx_runtime_1.jsx)(spacer_js_1.Spacer, { size: "xl" }), (0, jsx_runtime_1.jsx)(TokenListScreen_js_1.TokenListScreen, { client: client, theme: theme, supportedTokens: props.supportedTokens })] }));
            break;
        }
        default: {
            content = ((0, jsx_runtime_1.jsxs)(jsx_runtime_1.Fragment, { children: [props.onClose && ((0, jsx_runtime_1.jsx)(react_native_1.TouchableOpacity, { onPress: props.onClose, style: {
                            padding: index_js_1.spacing.lg,
                            position: "absolute",
                            right: 0,
                            top: 0,
                            zIndex: 1,
                        }, children: (0, jsx_runtime_1.jsx)(RNImage_js_1.RNImage, { theme: theme, data: svgs_js_1.CLOSE_ICON, size: 24, color: theme.colors.secondaryIconColor }) })), (0, jsx_runtime_1.jsx)(spacer_js_1.Spacer, { size: "xl" }), (0, jsx_runtime_1.jsx)(AccountHeader, { ...props }), (0, jsx_runtime_1.jsx)(spacer_js_1.Spacer, { size: "lg" }), (0, jsx_runtime_1.jsx)(WalletActionsRow, { ...props, setModalState: setModalState }), (0, jsx_runtime_1.jsx)(spacer_js_1.Spacer, { size: "lg" }), (0, jsx_runtime_1.jsx)(WalletMenu, { ...props, setModalState: setModalState })] }));
        }
    }
    return ((0, jsx_runtime_1.jsx)(view_js_1.ThemedView, { theme: theme, style: containerType === "modal"
            ? styles.modalContainer
            : styles.embedContainer, children: content }));
}
const AccountHeader = (props) => {
    const { account, wallet, theme } = props;
    const walletChain = (0, useActiveWalletChain_js_1.useActiveWalletChain)();
    const { pfp, name, balanceQuery } = (0, wallet_js_1.useConnectedWalletDetails)(props.client, walletChain, account, props.detailsButton?.displayBalanceToken);
    return ((0, jsx_runtime_1.jsxs)(react_native_1.View, { style: styles.accountHeaderContainer, children: [(0, jsx_runtime_1.jsx)(WalletImage_js_1.WalletImage, { theme: theme, size: 70, wallet: wallet, avatar: pfp }), (0, jsx_runtime_1.jsx)(SmartAccountBadge, { client: props.client, theme: theme }), (0, jsx_runtime_1.jsx)(spacer_js_1.Spacer, { size: "smd" }), (0, jsx_runtime_1.jsx)(Address_js_1.Address, { account: account, theme: theme, addressOrENS: name }), (0, jsx_runtime_1.jsx)(spacer_js_1.Spacer, { size: "xxs" }), balanceQuery.data ? ((0, jsx_runtime_1.jsxs)(text_js_1.ThemedText, { theme: theme, type: "subtext", style: {
                    fontSize: index_js_1.fontSize.sm,
                }, children: [(0, formatNumber_js_1.formatNumber)(Number(balanceQuery.data.displayValue), 5), " ", balanceQuery.data?.symbol] })) : ((0, jsx_runtime_1.jsx)(Skeleton_js_1.Skeleton, { theme: theme, style: { width: 80, height: 16 } }))] }));
};
const WalletActionsRow = (props) => {
    const { theme, setModalState } = props;
    return ((0, jsx_runtime_1.jsxs)(react_native_1.View, { style: styles.walletActionRowContainer, children: [(0, jsx_runtime_1.jsxs)(button_js_1.ThemedButton, { theme: theme, variant: "secondary", style: styles.walletActionButton, onPress: () => setModalState({ screen: "send" }), children: [(0, jsx_runtime_1.jsx)(RNImage_js_1.RNImage, { theme: theme, size: 24, data: svgs_js_1.SEND_ICON, color: theme.colors.secondaryIconColor }), (0, jsx_runtime_1.jsx)(text_js_1.ThemedText, { theme: theme, type: "defaultSemiBold", children: "Send" })] }), (0, jsx_runtime_1.jsxs)(button_js_1.ThemedButton, { theme: theme, variant: "secondary", style: styles.walletActionButton, onPress: () => setModalState({ screen: "receive" }), children: [(0, jsx_runtime_1.jsx)(RNImage_js_1.RNImage, { theme: theme, size: 24, data: svgs_js_1.RECEIVE_ICON, color: theme.colors.secondaryIconColor }), (0, jsx_runtime_1.jsx)(text_js_1.ThemedText, { theme: theme, type: "defaultSemiBold", children: "Receive" })] })] }));
};
const WalletMenu = (props) => {
    return ((0, jsx_runtime_1.jsxs)(react_native_1.View, { style: styles.walletMenuContainer, children: [(0, jsx_runtime_1.jsx)(ChainSwitcher, { ...props }), (0, jsx_runtime_1.jsx)(ViewFunds, { ...props }), (0, jsx_runtime_1.jsx)(DisconnectWallet, { ...props })] }));
};
const ChainSwitcher = (props) => {
    const { client, wallet, theme } = props;
    const chain = wallet.getChain();
    const { name } = (0, useChainQuery_js_1.useChainName)(chain);
    return ((0, jsx_runtime_1.jsxs)(react_native_1.TouchableOpacity, { style: styles.walletMenuRow, children: [(0, jsx_runtime_1.jsx)(ChainIcon_js_1.ChainIcon, { client: client, size: 32, chain: chain, theme: theme }), name ? ((0, jsx_runtime_1.jsx)(text_js_1.ThemedText, { theme: theme, type: "defaultSemiBold", children: name })) : ((0, jsx_runtime_1.jsx)(Skeleton_js_1.Skeleton, { theme: theme, style: { width: 80, height: 16 } }))] }));
};
/** TODO (rn) implement transactions screen
const Transactions = (props: ConnectedModalPropsInner) => {
  const { client, wallet, theme } = props;
  return (
    <TouchableOpacity style={styles.walletMenuRow} onPress={() => {}}>
      <RNImage
        theme={theme}
        size={32}
        data={TRANSACTIONS_ICON}
        color={theme.colors.secondaryIconColor}
      />
      <ThemedText theme={theme} type="defaultSemiBold">
        Transactions
      </ThemedText>
    </TouchableOpacity>
  );
};
*/
const ViewFunds = (props) => {
    const { theme, setModalState } = props;
    return ((0, jsx_runtime_1.jsxs)(react_native_1.TouchableOpacity, { style: styles.walletMenuRow, onPress: () => setModalState({ screen: "view_funds" }), children: [(0, jsx_runtime_1.jsx)(RNImage_js_1.RNImage, { theme: theme, size: 32, data: svgs_js_1.COINS_ICON, color: theme.colors.secondaryIconColor }), (0, jsx_runtime_1.jsx)(text_js_1.ThemedText, { theme: theme, type: "defaultSemiBold", children: "View Funds" })] }));
};
const DisconnectWallet = (props) => {
    const { wallet, account, theme, onClose } = props;
    const { disconnect } = (0, useDisconnect_js_1.useDisconnect)();
    const siweAuth = (0, useSiweAuth_js_1.useSiweAuth)(wallet, account, props.auth);
    return ((0, jsx_runtime_1.jsxs)(react_native_1.TouchableOpacity, { style: styles.walletMenuRow, onPress: () => {
            onClose?.();
            disconnect(wallet);
            if (siweAuth.isLoggedIn) {
                siweAuth.doLogout();
            }
        }, children: [(0, jsx_runtime_1.jsx)(RNImage_js_1.RNImage, { theme: theme, size: 32, data: svgs_js_1.EXIT_ICON, color: theme.colors.secondaryIconColor }), (0, jsx_runtime_1.jsx)(text_js_1.ThemedText, { theme: theme, type: "defaultSemiBold", children: "Disconnect Wallet" })] }));
};
function SmartAccountBadge(props) {
    const activeAccount = (0, useActiveAccount_js_1.useActiveAccount)();
    const activeWallet = (0, useActiveWallet_js_1.useActiveWallet)();
    const isSmartWallet = (0, isSmartWallet_js_1.hasSmartAccount)(activeWallet);
    const chain = (0, useActiveWalletChain_js_1.useActiveWalletChain)();
    const { client, theme } = props;
    const [isSmartWalletDeployed, setIsSmartWalletDeployed] = (0, react_1.useState)(false);
    (0, react_1.useEffect)(() => {
        if (activeAccount && isSmartWallet && activeAccount.address && chain) {
            const contract = (0, contract_js_1.getContract)({
                address: activeAccount.address,
                chain,
                client,
            });
            (0, is_contract_deployed_js_1.isContractDeployed)(contract).then((isDeployed) => {
                setIsSmartWalletDeployed(isDeployed);
            });
        }
        else {
            setIsSmartWalletDeployed(false);
        }
    }, [activeAccount, chain, client, isSmartWallet]);
    const content = ((0, jsx_runtime_1.jsxs)(react_native_1.View, { style: {
            flexDirection: "row",
            alignItems: "center",
            justifyContent: "center",
            gap: index_js_1.spacing.xs,
            backgroundColor: theme.colors.secondaryButtonBg,
            borderRadius: index_js_1.radius.md,
            paddingVertical: index_js_1.spacing.xs,
            paddingLeft: index_js_1.spacing.sm,
            paddingRight: index_js_1.spacing.smd,
        }, children: [(0, jsx_runtime_1.jsx)(RNImage_js_1.RNImage, { theme: theme, data: svgs_js_1.SMART_WALLET_ICON, size: 14, color: theme.colors.accentButtonBg }), (0, jsx_runtime_1.jsx)(text_js_1.ThemedText, { theme: theme, style: { color: theme.colors.primaryText, fontSize: index_js_1.fontSize.xs }, children: "Smart Account" })] }));
    if (chain && activeAccount && isSmartWallet) {
        return ((0, jsx_runtime_1.jsxs)(jsx_runtime_1.Fragment, { children: [(0, jsx_runtime_1.jsx)(spacer_js_1.Spacer, { size: "smd" }), isSmartWalletDeployed ? ((0, jsx_runtime_1.jsx)(react_native_1.TouchableOpacity, { onPress: () => react_native_1.Linking.openURL(`https://thirdweb.com/${chain.id}/${activeAccount.address}/account`), children: content })) : ((0, jsx_runtime_1.jsx)(react_native_1.View, { children: content }))] }));
    }
    return null;
}
const styles = react_native_1.StyleSheet.create({
    modalContainer: {
        flex: 1,
        width: "100%",
        flexDirection: "column",
        borderTopLeftRadius: index_js_1.radius.lg,
        borderTopRightRadius: index_js_1.radius.lg,
    },
    embedContainer: {
        flex: 1,
        width: "100%",
        flexDirection: "column",
        backgroundColor: "transparent",
    },
    accountHeaderContainer: {
        flexDirection: "column",
        justifyContent: "center",
        alignItems: "center",
        paddingHorizontal: index_js_1.spacing.lg,
    },
    walletActionRowContainer: {
        flexDirection: "row",
        justifyContent: "space-evenly",
        alignItems: "center",
        gap: index_js_1.spacing.md,
        paddingHorizontal: index_js_1.spacing.lg,
    },
    walletActionButton: { flex: 1, padding: index_js_1.spacing.smd, gap: index_js_1.spacing.smd },
    walletMenuContainer: {
        flexDirection: "column",
        gap: index_js_1.spacing.lg,
        paddingHorizontal: index_js_1.spacing.lg,
    },
    walletMenuRow: {
        flexDirection: "row",
        justifyContent: "flex-start",
        alignItems: "center",
        gap: index_js_1.spacing.md,
    },
});
//# sourceMappingURL=ConnectedModal.js.map