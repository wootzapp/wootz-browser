import type { ThirdwebClient } from "../../../client/client.js";
import type { EcosystemWalletId } from "../../wallet-types.js";
import type { AuthAndWalletRpcReturnType } from "../core/authentication/types.js";
import type { InAppWalletIframeCommunicator } from "./utils/iFrameCommunication/InAppWalletIframeCommunicator.js";
export type Ecosystem = {
    id: EcosystemWalletId;
    partnerId?: string;
};
type ClientIdConstructorType = {
    /**
     * the clientId found on the dashboard settings {@link https://thirdweb.com/dashboard/settings}
     */
    client: ThirdwebClient;
};
export type InAppWalletConstructorType = ClientIdConstructorType & {
    /**
     * @param authResult - The authResult returned from the InAppWalletSdk auth method
     * @returns
     */
    onAuthSuccess?: (authResult: AuthAndWalletRpcReturnType) => void;
    /**
     * @param ecosystem - An optional set of options to connect to an ecosystem wallet.
     */
    ecosystem?: Ecosystem;
    /**
     * The domain of the passkey to use for authentication
     */
    passkeyDomain?: string;
};
export type ClientIdWithQuerierType = ClientIdConstructorType & {
    querier: InAppWalletIframeCommunicator<any>;
};
/**
 * @internal
 */
export type GetAddressReturnType = {
    address: string;
};
export type SignMessageReturnType = {
    signedMessage: string;
};
export type SignTransactionReturnType = {
    signedTransaction: string;
};
export type SignedTypedDataReturnType = {
    signedTypedData: string;
};
export {};
//# sourceMappingURL=types.d.ts.map