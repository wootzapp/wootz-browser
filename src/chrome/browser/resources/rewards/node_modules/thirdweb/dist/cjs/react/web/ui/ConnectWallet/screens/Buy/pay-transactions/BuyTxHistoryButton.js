"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BuyTxHistoryButtonHeight = void 0;
exports.BuyTxHistoryButton = BuyTxHistoryButton;
const jsx_runtime_1 = require("react/jsx-runtime");
const styled_1 = require("@emotion/styled");
const utils_js_1 = require("../../../../../../../chains/utils.js");
const formatNumber_js_1 = require("../../../../../../../utils/formatNumber.js");
const CustomThemeProvider_js_1 = require("../../../../../../core/design-system/CustomThemeProvider.js");
const index_js_1 = require("../../../../../../core/design-system/index.js");
const ChainName_js_1 = require("../../../../components/ChainName.js");
const Spacer_js_1 = require("../../../../components/Spacer.js");
const basic_js_1 = require("../../../../components/basic.js");
const buttons_js_1 = require("../../../../components/buttons.js");
const text_js_1 = require("../../../../components/text.js");
const PayTokenIcon_js_1 = require("../PayTokenIcon.js");
const statusMeta_js_1 = require("./statusMeta.js");
exports.BuyTxHistoryButtonHeight = "62px";
function BuyTxHistoryButton(props) {
    const statusMeta = props.txInfo.type === "swap"
        ? (0, statusMeta_js_1.getBuyWithCryptoStatusMeta)(props.txInfo.status)
        : (0, statusMeta_js_1.getBuyWithFiatStatusMeta)(props.txInfo.status);
    return ((0, jsx_runtime_1.jsxs)(TxButton, { onClick: props.onClick, variant: "secondary", fullWidth: true, style: {
            paddingBlock: index_js_1.spacing.sm,
        }, children: [(0, jsx_runtime_1.jsxs)(basic_js_1.Container, { flex: "row", center: "y", gap: "sm", style: {
                    flex: 1,
                }, children: [(0, jsx_runtime_1.jsx)(PayTokenIcon_js_1.PayTokenIcon, { client: props.client, chain: (0, utils_js_1.getCachedChain)(props.txInfo.status.quote.toToken.chainId), size: "md", token: {
                            address: props.txInfo.status.quote.toToken.tokenAddress,
                        } }), (0, jsx_runtime_1.jsxs)("div", { style: {
                            flex: 1,
                            display: "flex",
                            flexDirection: "column",
                            justifyContent: "center",
                        }, children: [(0, jsx_runtime_1.jsxs)(basic_js_1.Container, { flex: "row", gap: "xs", center: "y", style: {
                                    justifyContent: "space-between",
                                }, children: [(0, jsx_runtime_1.jsxs)(text_js_1.Text, { size: "sm", color: "primaryText", children: ["Buy", " ", (0, formatNumber_js_1.formatNumber)(Number(props.txInfo.type === "swap"
                                                ? props.txInfo.status.quote.toAmount
                                                : props.txInfo.status.quote.estimatedToTokenAmount), 6), " ", props.txInfo.status.quote.toToken.symbol] }), " "] }), (0, jsx_runtime_1.jsx)(Spacer_js_1.Spacer, { y: "xxs" }), (0, jsx_runtime_1.jsx)(basic_js_1.Container, { flex: "row", center: "y", gap: "xxs", style: {
                                    justifyContent: "space-between",
                                }, children: (0, jsx_runtime_1.jsx)(ChainName_js_1.ChainName, { chain: (0, utils_js_1.getCachedChain)(props.txInfo.status.quote.toToken.chainId), size: "xs", client: props.client }) })] })] }), (0, jsx_runtime_1.jsx)(basic_js_1.Container, { flex: "row", gap: "xxs", center: "y", children: (0, jsx_runtime_1.jsx)(text_js_1.Text, { size: "xs", color: statusMeta.color, children: statusMeta.status }) })] }));
}
const TxButton = /* @__PURE__ */ (0, styled_1.default)(buttons_js_1.Button)(() => {
    const theme = (0, CustomThemeProvider_js_1.useCustomTheme)();
    return {
        background: theme.colors.tertiaryBg,
        "&:hover": {
            background: theme.colors.secondaryButtonBg,
        },
        height: exports.BuyTxHistoryButtonHeight,
    };
});
//# sourceMappingURL=BuyTxHistoryButton.js.map