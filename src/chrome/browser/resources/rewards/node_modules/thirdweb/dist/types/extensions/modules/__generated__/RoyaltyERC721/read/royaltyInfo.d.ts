import type { AbiParameterToPrimitiveType } from "abitype";
import type { BaseTransactionOptions } from "../../../../../transaction/types.js";
import type { Hex } from "../../../../../utils/encoding/hex.js";
/**
 * Represents the parameters for the "royaltyInfo" function.
 */
export type RoyaltyInfoParams = {
    tokenId: AbiParameterToPrimitiveType<{
        type: "uint256";
        name: "_tokenId";
    }>;
    salePrice: AbiParameterToPrimitiveType<{
        type: "uint256";
        name: "_salePrice";
    }>;
};
export declare const FN_SELECTOR: "0x2a55205a";
/**
 * Checks if the `royaltyInfo` method is supported by the given contract.
 * @param availableSelectors An array of 4byte function selectors of the contract. You can get this in various ways, such as using "whatsabi" or if you have the ABI of the contract available you can use it to generate the selectors.
 * @returns A boolean indicating if the `royaltyInfo` method is supported.
 * @modules RoyaltyERC721
 * @example
 * ```ts
 * import { RoyaltyERC721 } from "thirdweb/modules";
 * const supported = RoyaltyERC721.isRoyaltyInfoSupported(["0x..."]);
 * ```
 */
export declare function isRoyaltyInfoSupported(availableSelectors: string[]): boolean;
/**
 * Encodes the parameters for the "royaltyInfo" function.
 * @param options - The options for the royaltyInfo function.
 * @returns The encoded ABI parameters.
 * @modules RoyaltyERC721
 * @example
 * ```ts
 * import { RoyaltyERC721 } from "thirdweb/modules";
 * const result = RoyaltyERC721.encodeRoyaltyInfoParams({
 *  tokenId: ...,
 *  salePrice: ...,
 * });
 * ```
 */
export declare function encodeRoyaltyInfoParams(options: RoyaltyInfoParams): `0x${string}`;
/**
 * Encodes the "royaltyInfo" function into a Hex string with its parameters.
 * @param options - The options for the royaltyInfo function.
 * @returns The encoded hexadecimal string.
 * @modules RoyaltyERC721
 * @example
 * ```ts
 * import { RoyaltyERC721 } from "thirdweb/modules";
 * const result = RoyaltyERC721.encodeRoyaltyInfo({
 *  tokenId: ...,
 *  salePrice: ...,
 * });
 * ```
 */
export declare function encodeRoyaltyInfo(options: RoyaltyInfoParams): `${typeof FN_SELECTOR}${string}`;
/**
 * Decodes the result of the royaltyInfo function call.
 * @param result - The hexadecimal result to decode.
 * @returns The decoded result as per the FN_OUTPUTS definition.
 * @modules RoyaltyERC721
 * @example
 * ```ts
 * import { RoyaltyERC721 } from "thirdweb/modules";
 * const result = RoyaltyERC721.decodeRoyaltyInfoResultResult("...");
 * ```
 */
export declare function decodeRoyaltyInfoResult(result: Hex): readonly [string, bigint];
/**
 * Calls the "royaltyInfo" function on the contract.
 * @param options - The options for the royaltyInfo function.
 * @returns The parsed result of the function call.
 * @modules RoyaltyERC721
 * @example
 * ```ts
 * import { RoyaltyERC721 } from "thirdweb/modules";
 *
 * const result = await RoyaltyERC721.royaltyInfo({
 *  contract,
 *  tokenId: ...,
 *  salePrice: ...,
 * });
 *
 * ```
 */
export declare function royaltyInfo(options: BaseTransactionOptions<RoyaltyInfoParams>): Promise<readonly [string, bigint]>;
//# sourceMappingURL=royaltyInfo.d.ts.map