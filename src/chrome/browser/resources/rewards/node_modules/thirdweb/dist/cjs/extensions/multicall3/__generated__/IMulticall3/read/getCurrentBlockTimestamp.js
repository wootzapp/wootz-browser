"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.FN_SELECTOR = void 0;
exports.isGetCurrentBlockTimestampSupported = isGetCurrentBlockTimestampSupported;
exports.decodeGetCurrentBlockTimestampResult = decodeGetCurrentBlockTimestampResult;
exports.getCurrentBlockTimestamp = getCurrentBlockTimestamp;
const read_contract_js_1 = require("../../../../../transaction/read-contract.js");
const viem_1 = require("viem");
const detectExtension_js_1 = require("../../../../../utils/bytecode/detectExtension.js");
exports.FN_SELECTOR = "0x0f28c97d";
const FN_INPUTS = [];
const FN_OUTPUTS = [
    {
        type: "uint256",
        name: "timestamp",
    },
];
/**
 * Checks if the `getCurrentBlockTimestamp` method is supported by the given contract.
 * @param availableSelectors An array of 4byte function selectors of the contract. You can get this in various ways, such as using "whatsabi" or if you have the ABI of the contract available you can use it to generate the selectors.
 * @returns A boolean indicating if the `getCurrentBlockTimestamp` method is supported.
 * @extension MULTICALL3
 * @example
 * ```ts
 * import { isGetCurrentBlockTimestampSupported } from "thirdweb/extensions/multicall3";
 * const supported = isGetCurrentBlockTimestampSupported(["0x..."]);
 * ```
 */
function isGetCurrentBlockTimestampSupported(availableSelectors) {
    return (0, detectExtension_js_1.detectMethod)({
        availableSelectors,
        method: [exports.FN_SELECTOR, FN_INPUTS, FN_OUTPUTS],
    });
}
/**
 * Decodes the result of the getCurrentBlockTimestamp function call.
 * @param result - The hexadecimal result to decode.
 * @returns The decoded result as per the FN_OUTPUTS definition.
 * @extension MULTICALL3
 * @example
 * ```ts
 * import { decodeGetCurrentBlockTimestampResult } from "thirdweb/extensions/multicall3";
 * const result = decodeGetCurrentBlockTimestampResultResult("...");
 * ```
 */
function decodeGetCurrentBlockTimestampResult(result) {
    return (0, viem_1.decodeAbiParameters)(FN_OUTPUTS, result)[0];
}
/**
 * Calls the "getCurrentBlockTimestamp" function on the contract.
 * @param options - The options for the getCurrentBlockTimestamp function.
 * @returns The parsed result of the function call.
 * @extension MULTICALL3
 * @example
 * ```ts
 * import { getCurrentBlockTimestamp } from "thirdweb/extensions/multicall3";
 *
 * const result = await getCurrentBlockTimestamp({
 *  contract,
 * });
 *
 * ```
 */
async function getCurrentBlockTimestamp(options) {
    return (0, read_contract_js_1.readContract)({
        contract: options.contract,
        method: [exports.FN_SELECTOR, FN_INPUTS, FN_OUTPUTS],
        params: [],
    });
}
//# sourceMappingURL=getCurrentBlockTimestamp.js.map