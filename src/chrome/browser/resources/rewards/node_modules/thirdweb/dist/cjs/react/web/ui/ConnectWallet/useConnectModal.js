"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.useConnectModal = useConnectModal;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
const RootElementContext_js_1 = require("../../../core/providers/RootElementContext.js");
const wallet_ui_states_provider_js_1 = require("../../providers/wallet-ui-states-provider.js");
const canFitWideModal_js_1 = require("../../utils/canFitWideModal.js");
const defaultWallets_js_1 = require("../../wallets/defaultWallets.js");
const ConnectModal_js_1 = require("./Modal/ConnectModal.js");
const getConnectLocale_js_1 = require("./locale/getConnectLocale.js");
/**
 * hook that allows you to open the Connect UI in a Modal to prompt the user to connect wallet.
 * @example
 * ```tsx
 * import { createThirdwebClient } from "thirdweb";
 * import { useConnectModal } from "thirdweb/react";
 *
 * const client = createThirdwebClient({
 *  clientId: "<your_client_id>",
 * });
 *
 * function Example() {
 *   const { connect, isConnecting } = useConnectModal();
 *
 *   async function handleConnect() {
 *      const wallet = await connect({ client }); // opens the connect modal
 *      console.log('connected to', wallet);
 *   }
 *
 *   return <button onClick={handleConnect}> Connect </button>
 * }
 * ```
 *
 * The returned `connect` method takes an object of type [UseConnectModalOptions](https://portal.thirdweb.com/references/typescript/v5/ConnectButtonProps)
 * as an argument to customize the Connect Modal UI. Refer to [UseConnectModalOptions](https://portal.thirdweb.com/references/typescript/v5/ConnectButtonProps) to see the available options.
 *
 * @walletConnection
 */
function useConnectModal() {
    const setRootEl = (0, react_1.useContext)(RootElementContext_js_1.SetRootElementContext);
    const [isConnecting, setIsConnecting] = (0, react_1.useState)(false);
    const connect = (0, react_1.useCallback)((props) => {
        function cleanup() {
            setIsConnecting(false);
            setRootEl(undefined);
        }
        return new Promise((resolve, reject) => {
            setIsConnecting(true);
            (0, getConnectLocale_js_1.getConnectLocale)(props.locale || "en_US")
                .then((locale) => {
                setRootEl((0, jsx_runtime_1.jsx)(Modal, { ...props, onConnect: (w) => {
                        resolve(w);
                        cleanup();
                    }, onClose: () => {
                        reject();
                        cleanup();
                    }, connectLocale: locale }));
            })
                .catch(() => {
                reject();
                cleanup();
            });
        });
    }, [setRootEl]);
    return { connect, isConnecting };
}
function Modal(props) {
    const wallets = (0, react_1.useMemo)(() => props.wallets ||
        (0, defaultWallets_js_1.getDefaultWallets)({
            appMetadata: props.appMetadata,
            chains: props.chains,
        }), [props.wallets, props.appMetadata, props.chains]);
    const size = (0, react_1.useMemo)(() => {
        return !(0, canFitWideModal_js_1.canFitWideModal)() || wallets.length === 1
            ? "compact"
            : props.size || "wide";
    }, [props.size, wallets.length]);
    const meta = (0, react_1.useMemo)(() => {
        return {
            privacyPolicyUrl: props.privacyPolicyUrl,
            showThirdwebBranding: props.showThirdwebBranding,
            termsOfServiceUrl: props.termsOfServiceUrl,
            title: props.title,
            titleIconUrl: props.titleIcon,
        };
    }, [
        props.privacyPolicyUrl,
        props.showThirdwebBranding,
        props.termsOfServiceUrl,
        props.title,
        props.titleIcon,
    ]);
    return ((0, jsx_runtime_1.jsx)(wallet_ui_states_provider_js_1.WalletUIStatesProvider, { theme: props.theme, isOpen: true, children: (0, jsx_runtime_1.jsx)(ConnectModal_js_1.default, { onClose: props.onClose, shouldSetActive: props.setActive === undefined ? true : props.setActive, accountAbstraction: props.accountAbstraction, 
            // TODO: not set up in `useConnectModal` for some reason?
            auth: undefined, chain: props.chain, client: props.client, connectLocale: props.connectLocale, meta: meta, size: size, welcomeScreen: props.welcomeScreen, localeId: props.locale || "en_US", onConnect: props.onConnect, recommendedWallets: props.recommendedWallets, showAllWallets: props.showAllWallets, wallets: wallets, chains: props.chains, walletConnect: props.walletConnect }) }));
}
//# sourceMappingURL=useConnectModal.js.map