import type { ThirdwebClient } from "../../../../client/client.js";
import type { SocialAuthOption } from "../../../../wallets/types.js";
import type { Account } from "../../../interfaces/wallet.js";
import { type AuthLoginReturnType, type AuthStoredTokenWithCookieReturnType, type GetUser, type LogoutReturnType, type MultiStepAuthArgsType, type MultiStepAuthProviderType, type SingleStepAuthArgsType } from "../../core/authentication/types.js";
import type { InAppConnector } from "../../core/interfaces/connector.js";
import type { Ecosystem, InAppWalletConstructorType } from "../types.js";
import { InAppWalletIframeCommunicator } from "../utils/iFrameCommunication/InAppWalletIframeCommunicator.js";
import { Auth, type AuthQuerierTypes } from "./auth/iframe-auth.js";
/**
 * @internal
 */
export declare class InAppWebConnector implements InAppConnector {
    protected client: ThirdwebClient;
    protected ecosystem?: Ecosystem;
    protected querier: InAppWalletIframeCommunicator<AuthQuerierTypes>;
    private wallet?;
    /**
     * Used to manage the Auth state of the user.
     */
    auth: Auth;
    private passkeyDomain?;
    private isClientIdLegacyPaper;
    /**
     * @example
     * `const thirdwebInAppWallet = new InAppWalletSdk({ clientId: "", chain: "Goerli" });`
     * @internal
     */
    constructor({ client, onAuthSuccess, ecosystem, passkeyDomain, }: InAppWalletConstructorType);
    initializeWallet(authToken?: string): Promise<void>;
    /**
     * Gets the user if they're logged in
     * @example
     * ```js
     *  const user = await thirdwebInAppWallet.getUser();
     *  switch (user.status) {
     *     case UserWalletStatus.LOGGED_OUT: {
     *       // User is logged out, call one of the auth methods on thirdwebInAppWallet.auth to authenticate the user
     *       break;
     *     }
     *     case UserWalletStatus.LOGGED_IN_WALLET_INITIALIZED: {
     *       // user is logged in and wallet is all set up.
     *       // You have access to:
     *       user.status;
     *       user.authDetails;
     *       user.walletAddress;
     *       user.wallet;
     *       break;
     *     }
     * }
     * ```
     * @returns GetUser - an object to containing various information on the user statuses
     */
    getUser(): Promise<GetUser>;
    getAccount(): Promise<Account>;
    preAuthenticate(args: MultiStepAuthProviderType): Promise<void>;
    authenticateWithRedirect(strategy: SocialAuthOption, mode?: "redirect" | "popup" | "window", redirectUrl?: string): void;
    loginWithAuthToken(authResult: AuthStoredTokenWithCookieReturnType): Promise<AuthLoginReturnType>;
    /**
     * Authenticates the user and returns the auth token, but does not instantiate their wallet
     */
    authenticate(args: MultiStepAuthArgsType | SingleStepAuthArgsType): Promise<AuthStoredTokenWithCookieReturnType>;
    /**
     * Authenticates the user then instantiates their wallet using the resulting auth token
     */
    connect(args: MultiStepAuthArgsType | SingleStepAuthArgsType): Promise<AuthLoginReturnType>;
    logout(): Promise<LogoutReturnType>;
    private passkeyAuth;
}
//# sourceMappingURL=web-connector.d.ts.map