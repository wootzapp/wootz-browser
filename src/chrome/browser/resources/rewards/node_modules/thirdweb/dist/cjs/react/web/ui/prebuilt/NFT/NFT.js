"use strict";
"use client";
Object.defineProperty(exports, "__esModule", { value: true });
exports.NFTProviderContext = void 0;
exports.NFT = NFT;
exports.getNFTInfo = getNFTInfo;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_query_1 = require("@tanstack/react-query");
const react_1 = require("react");
const getNFT_js_1 = require("../../../../../extensions/erc721/read/getNFT.js");
const getNFT_js_2 = require("../../../../../extensions/erc1155/read/getNFT.js");
const MediaRenderer_js_1 = require("../../MediaRenderer/MediaRenderer.js");
/**
 * @internal
 */
exports.NFTProviderContext = (0, react_1.createContext)(undefined);
/**
 * A React context provider component that supplies NFT-related data to its child components.
 *
 * This component serves as a wrapper around the `NFTProviderContext.Provider` and passes
 * the provided NFT data down to all of its child components through the context API.
 *
 *
 * @component
 * @param {React.PropsWithChildren<NFTProviderProps>} props - The props for the NFT provider
 *
 * @example
 * ```tsx
 * import { getContract } from "thirdweb";
 * import { NFT } from "thirdweb/react";
 *
 * const contract = getContract({
 *   address: "0x...",
 *   chain: ethereum,
 *   client: yourThirdwebClient,
 * });
 *
 * <NFT contract={contract} tokenId={0n}>
 *   <Suspense fallback={"Loading media..."}>
 *     <NFT.Media />
 *     <NFT.Description />
 *   </Suspense>
 * </NFT>
 * ```
 */
function NFT(props) {
    return ((0, jsx_runtime_1.jsx)(exports.NFTProviderContext.Provider, { value: props, children: props.children }));
}
/**
 * @internal
 */
function useNFTContext() {
    const ctx = (0, react_1.useContext)(exports.NFTProviderContext);
    if (!ctx) {
        throw new Error("NFTProviderContext not found. Make sure you are using NFT.Media, NFT.Description, etc. inside a <NFT /> component");
    }
    return ctx;
}
/**
 * This component fetches and displays an NFT's media. It uses thirdweb [`MediaRenderer`](https://portal.thirdweb.com/react/v5/components/MediaRenderer) under the hood
 * so you can style it just like how you would style a MediaRenderer.
 * @returns A MediaRenderer component
 *
 * Since this component has an internal loading state (for when the NFT media is being fetched),
 * you must wrap it with React.Suspense to make it work.
 *
 * @component
 * @example
 * ### Basic usage
 * ```tsx
 * import { getContract } from "thirdweb";
 * import { NFT } from "thirdweb/react";
 *
 * const nftContract = getContract({
 *   address: "0x...",
 *   chain: ethereum,
 *   client: yourThirdwebClient,
 * });
 *
 * <NFT contract={nftContract} tokenId={0n}>
 *   This will show the media for tokenId #0 from the `nftContract` collection
 *   <Suspense fallback={"Loading media..."}>
 *     <NFT.Media />
 *   </Suspense>
 * </NFT>
 * ```
 *
 * ### Basic stylings
 * You can style NFT.Media with the `style` and `className` props.
 * ```tsx
 * <NFT.Media style={{ borderRadius: "8px" }} className="mx-auto" />
 * ```
 */
NFT.Media = (props) => {
    const { contract, tokenId } = useNFTContext();
    const nftQuery = (0, react_query_1.useSuspenseQuery)({
        queryKey: [
            "__nft_info_internal__",
            contract.chain.id,
            contract.address,
            tokenId.toString(),
        ],
        queryFn: () => getNFTInfo({ contract, tokenId }),
    });
    const animation_url = nftQuery.data?.metadata.animation_url;
    const image = nftQuery.data?.metadata.image || nftQuery.data?.metadata.image_url;
    return ((0, jsx_runtime_1.jsx)(MediaRenderer_js_1.MediaRenderer, { client: contract.client, src: animation_url || image, poster: image, ...props }));
};
/**
 * This component fetches and displays an NFT's name. It takes in a `className` and `style` props
 * so you can style it just like how you would style a <span> element.
 * @returns A <span> element containing the name of the NFT
 *
 * Since this component has an internal loading state (for when the NFT media is being fetched),
 * you must wrap it with React.Suspense to make it work.
 *
 * @component
 * @example
 * ### Basic usage
 * ```tsx
 * import { getContract } from "thirdweb";
 * import { NFT } from "thirdweb/react";
 *
 * const nftContract = getContract({
 *   address: "0x...",
 *   chain: ethereum,
 *   client: yourThirdwebClient,
 * });
 *
 * <NFT contract={nftContract} tokenId={0n}>
 *   This will show the name for tokenId #0 from the `nftContract` collection
 *   <Suspense fallback={"Loading nft name..."}>
 *     <NFT.Name className="mx-auto" style={{ color: "red" }} />
 *   </Suspense>
 * </NFT>
 * ```
 */
NFT.Name = (props) => {
    const { contract, tokenId } = useNFTContext();
    const nftQuery = (0, react_query_1.useSuspenseQuery)({
        queryKey: [
            "__nft_info_internal__",
            contract.chain.id,
            contract.address,
            tokenId.toString(),
        ],
        queryFn: () => getNFTInfo({ contract, tokenId }),
    });
    const name = nftQuery.data?.metadata.name || "";
    return (0, jsx_runtime_1.jsx)("span", { ...props, children: name });
};
/**
 * This component fetches and displays an NFT's description. It takes in a `className` and `style` props
 * so you can style it just like how you would style a <span> element.
 * @returns A <span> element containing the description of the NFT
 *
 * Since this component has an internal loading state (for when the NFT media is being fetched),
 * you must wrap it with React.Suspense to make it work.
 *
 * @component
 * @example
 * ### Basic usage
 * ```tsx
 * import { getContract } from "thirdweb";
 * import { NFT } from "thirdweb/react";
 *
 * const nftContract = getContract({
 *   address: "0x...",
 *   chain: ethereum,
 *   client: yourThirdwebClient,
 * });
 *
 * <NFT contract={nftContract} tokenId={0n}>
 *   This will show the description for tokenId #0 from the `nftContract` collection
 *   <Suspense fallback={"Loading description..."}>
 *     <NFT.Description className="mx-auto" style={{ color: "red" }} />
 *   </Suspense>
 * </NFT>
 * ```
 */
NFT.Description = (props) => {
    const { contract, tokenId } = useNFTContext();
    const nftQuery = (0, react_query_1.useSuspenseQuery)({
        queryKey: [
            "__nft_info_internal__",
            contract.chain.id,
            contract.address,
            tokenId.toString(),
        ],
        queryFn: () => getNFTInfo({ contract, tokenId }),
    });
    const description = nftQuery.data?.metadata.description || "";
    return (0, jsx_runtime_1.jsx)("span", { ...props, children: description });
};
/**
 * @internal
 */
async function getNFTInfo(options) {
    const nft = await Promise.allSettled([
        (0, getNFT_js_1.getNFT)(options),
        (0, getNFT_js_2.getNFT)(options),
    ]).then(([possibleNFT721, possibleNFT1155]) => {
        // getNFT extension always return an NFT object
        // so we need to check if the tokenURI exists
        if (possibleNFT721.status === "fulfilled" &&
            possibleNFT721.value.tokenURI) {
            return possibleNFT721.value;
        }
        if (possibleNFT1155.status === "fulfilled" &&
            possibleNFT1155.value.tokenURI) {
            return possibleNFT1155.value;
        }
        throw new Error("Failed to load NFT metadata");
    });
    return nft;
}
//# sourceMappingURL=NFT.js.map