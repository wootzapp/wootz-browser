"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getDeployedInfraContract = getDeployedInfraContract;
exports.prepareInfraContractDeployTransaction = prepareInfraContractDeployTransaction;
const prepare_transaction_js_1 = require("../../../transaction/prepare-transaction.js");
const compute_published_contract_address_js_1 = require("../../../utils/any-evm/compute-published-contract-address.js");
const compute_published_contract_deploy_info_js_1 = require("../../../utils/any-evm/compute-published-contract-deploy-info.js");
const is_contract_deployed_js_1 = require("../../../utils/bytecode/is-contract-deployed.js");
const contract_js_1 = require("../../contract.js");
const create_2_factory_js_1 = require("./create-2-factory.js");
/**
 * @internal
 */
async function getDeployedInfraContract(options) {
    const address = await (0, compute_published_contract_address_js_1.computePublishedContractAddress)({
        ...options,
    });
    const factory = (0, contract_js_1.getContract)({
        ...options,
        address,
    });
    if (await (0, is_contract_deployed_js_1.isContractDeployed)(factory)) {
        return factory;
    }
    return null;
}
/**
 * @internal
 */
function prepareInfraContractDeployTransaction(options) {
    const { client, chain } = options;
    return (0, prepare_transaction_js_1.prepareTransaction)({
        client,
        chain,
        to: () => (0, create_2_factory_js_1.computeCreate2FactoryAddress)({
            client,
            chain,
        }),
        data: async () => {
            const infraContractInfo = await (0, compute_published_contract_deploy_info_js_1.computeDeploymentInfoFromContractId)(options);
            return infraContractInfo.initBytecodeWithsalt;
        },
    });
}
//# sourceMappingURL=infra.js.map