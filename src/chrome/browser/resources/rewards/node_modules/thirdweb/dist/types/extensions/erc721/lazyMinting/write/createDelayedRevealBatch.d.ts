import type { BaseTransactionOptions } from "../../../../transaction/types.js";
import type { NFTInput } from "../../../../utils/nft/parseNft.js";
/**
 * @extension ERC721
 */
export type CreateDelayedRevealBatchParams = {
    placeholderMetadata: NFTInput;
    metadata: NFTInput[];
    password: string;
};
/**
 * Creates a batch of encrypted NFTs that can be revealed at a later time.
 *
 * @param options {CreateDelayedRevealBatchParams} - The delayed reveal options.
 * @param options.placeholderMetadata {@link NFTInput} - The placeholder metadata for the batch.
 * @param options.metadata {@link NFTInput} - An array of NFT metadata to be revealed at a later time.
 * @param options.password {string} - The password for the reveal.
 * @param options.contract {@link ThirdwebContract} - The NFT contract instance.
 *
 * @returns The prepared transaction to send.
 *
 * @extension ERC721
 * @example
 * ```ts
 * import { createDelayedRevealBatch } from "thirdweb/extensions/erc721";
 *
 * const placeholderNFT = {
 *   name: "Hidden NFT",
 *   description: "Will be revealed next week!"
 * };
 *
 * const realNFTs = [{
 *   name: "Common NFT #1",
 *   description: "Common NFT, one of many.",
 *   image: ipfs://...,
 * }, {
 *   name: "Super Rare NFT #2",
 *   description: "You got a Super Rare NFT!",
 *   image: ipfs://...,
 * }];
 *
 * const transaction = createDelayedRevealBatch({
 *  contract,
 *  placeholderMetadata: placeholderNFT,
 *  metadata: realNFTs,
 *  password: "password123",
 * });
 *
 * const { transactionHash } = await sendTransaction({ transaction, account });
 * ```
 */
export declare function createDelayedRevealBatch(options: BaseTransactionOptions<CreateDelayedRevealBatchParams>): import("../../../../transaction/prepare-transaction.js").PreparedTransaction<any, import("abitype").AbiFunction, import("../../../../transaction/prepare-transaction.js").PrepareTransactionOptions>;
//# sourceMappingURL=createDelayedRevealBatch.d.ts.map