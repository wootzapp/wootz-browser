import type { ThirdwebContract } from "../../../contract/contract.js";
import type { Hex } from "../../encoding/hex.js";
import type { OverrideProof } from "./types.js";
export type GetClaimParamsOptions = {
    contract: ThirdwebContract;
    to: string;
    quantity: bigint;
    from?: string;
} & ({
    type: "erc721";
} | {
    type: "erc20";
    tokenDecimals: number;
} | {
    type: "erc1155";
    tokenId: bigint;
});
/**
 * Get the claim parameters for a given drop
 * @param options - The options for getting the claim parameters
 * @returns The claim parameters
 * @extension ERC1155
 * @example
 * ```ts
 * import { getClaimParams } from "thirdweb/utils";
 *
 * const claimParams = await getClaimParams({
 *  contract,
 *  to: "0x...",
 *  quantity: 1n,
 *  type: "erc1155",
 *  tokenId: 0n,
 * });
 * ```
 * @extension COMMON
 */
export declare function getClaimParams(options: GetClaimParamsOptions): Promise<{
    receiver: string;
    tokenId: bigint | undefined;
    quantity: bigint;
    currency: string;
    pricePerToken: bigint;
    allowlistProof: OverrideProof;
    data: Hex;
    overrides: {
        value: bigint;
        erc20Value: {
            amountWei: bigint;
            tokenAddress: string;
        } | undefined;
    };
}>;
//# sourceMappingURL=get-claim-params.d.ts.map