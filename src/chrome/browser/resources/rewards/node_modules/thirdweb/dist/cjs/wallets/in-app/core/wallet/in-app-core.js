"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getOrCreateInAppWalletConnector = getOrCreateInAppWalletConnector;
exports.createInAppWallet = createInAppWallet;
const track_js_1 = require("../../../../analytics/track.js");
const utils_js_1 = require("../../../../chains/utils.js");
const wallet_emitter_js_1 = require("../../../wallet-emitter.js");
const linkAccount_js_1 = require("../authentication/linkAccount.js");
const connectorCache = new Map();
/**
 * @internal
 */
async function getOrCreateInAppWalletConnector(client, connectorFactory, ecosystem) {
    const key = JSON.stringify({ clientId: client.clientId, ecosystem });
    if (connectorCache.has(key)) {
        return connectorCache.get(key);
    }
    const connector = await connectorFactory(client);
    connectorCache.set(key, connector);
    return connector;
}
/**
 * @internal
 */
function createInAppWallet(args) {
    const { createOptions, connectorFactory } = args;
    const emitter = (0, wallet_emitter_js_1.createWalletEmitter)();
    let account = undefined;
    let chain = undefined;
    let client;
    return {
        id: "inApp",
        subscribe: emitter.subscribe,
        getChain() {
            if (!chain) {
                return undefined;
            }
            chain = (0, utils_js_1.getCachedChainIfExists)(chain.id) || chain;
            return chain;
        },
        getConfig: () => createOptions,
        getAccount: () => account,
        /**
         * @description
         * Gets the linked profiles for the current wallet.
         * This method is only available for in-app or ecosystem wallets.
         *
         * @returns An array of accounts user profiles linked to the current wallet.
         *
         * @example
         * ```ts
         * import { inAppWallet } from "thirdweb/wallets";
         *
         * const wallet = inAppWallet();
         * wallet.connect({ strategy: "google" });
         *
         * const profiles = wallet.getProfiles();
         *
         * console.log(profiles[0].type);
         * console.log(profiles[0].details.email);
         * ```
         */
        getProfiles: async () => {
            if (!client) {
                return [];
            }
            return (0, linkAccount_js_1.getLinkedProfilesInternal)({ client });
        },
        autoConnect: async (options) => {
            const { autoConnectInAppWallet } = await Promise.resolve().then(() => require("./index.js"));
            const connector = await getOrCreateInAppWalletConnector(options.client, connectorFactory);
            const [connectedAccount, connectedChain] = await autoConnectInAppWallet(options, createOptions, connector);
            // set the states
            client = options.client;
            account = connectedAccount;
            chain = connectedChain;
            (0, track_js_1.trackConnect)({
                client: options.client,
                walletType: "inApp",
                walletAddress: account.address,
            });
            // return only the account
            return account;
        },
        connect: async (options) => {
            const { connectInAppWallet } = await Promise.resolve().then(() => require("./index.js"));
            const connector = await getOrCreateInAppWalletConnector(options.client, connectorFactory);
            const [connectedAccount, connectedChain] = await connectInAppWallet(options, createOptions, connector);
            // set the states
            client = options.client;
            account = connectedAccount;
            chain = connectedChain;
            (0, track_js_1.trackConnect)({
                client: options.client,
                walletType: "inApp",
                walletAddress: account.address,
            });
            // return only the account
            return account;
        },
        disconnect: async () => {
            // If no client is assigned, we should be fine just unsetting the states
            if (client) {
                const connector = await getOrCreateInAppWalletConnector(client, connectorFactory);
                const result = await connector.logout();
                if (!result.success) {
                    throw new Error("Failed to logout");
                }
            }
            account = undefined;
            chain = undefined;
            emitter.emit("disconnect", undefined);
        },
        switchChain: async (newChain) => {
            if (createOptions?.smartAccount && client && account) {
                // if account abstraction is enabled, reconnect to smart account on the new chain
                const { autoConnectInAppWallet } = await Promise.resolve().then(() => require("./index.js"));
                const connector = await getOrCreateInAppWalletConnector(client, connectorFactory);
                const [connectedAccount, connectedChain] = await autoConnectInAppWallet({
                    chain: newChain,
                    client,
                }, createOptions, connector);
                account = connectedAccount;
                chain = connectedChain;
            }
            else {
                // if not, simply set the new chain
                chain = newChain;
            }
            emitter.emit("chainChanged", newChain);
        },
        // This is not included on the global interface but is force-resolved in linkProfile
        linkProfile: async (options) => {
            if (!client) {
                throw new Error("No client found, please connect the wallet before linking a profile");
            }
            const connector = await getOrCreateInAppWalletConnector(client, connectorFactory);
            const { storedToken } = await connector.authenticate(options);
            return await (0, linkAccount_js_1.linkAccount)({
                client,
                tokenToLink: storedToken.cookieString,
            });
        },
    };
}
//# sourceMappingURL=in-app-core.js.map