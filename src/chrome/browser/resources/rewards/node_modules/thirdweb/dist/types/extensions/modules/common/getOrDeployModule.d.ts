import type { Chain } from "../../../chains/types.js";
import type { ThirdwebClient } from "../../../client/client.js";
import type { Account } from "../../../wallets/interfaces/wallet.js";
/**
 * Gets or deploys a module implementation contract.
 * @param options - The options to use.
 * @returns The module.
 * @modules
 *
 * @example
 * ```ts
 * import { getOrDeployModule } from "thirdweb/modules";
 *
 * const module = await getOrDeployModule({
 *   client,
 *   chain,
 *   account,
 *   contractId,
 *   publisher,
 * });
 * ```
 */
export declare function getOrDeployModule(options: {
    client: ThirdwebClient;
    chain: Chain;
    account: Account;
    contractId: string;
    publisher?: string;
}): Promise<Readonly<import("../../../contract/contract.js").ContractOptions<[]>>>;
/**
 * Gets a deployed module implementation contract.
 * @param options - The options to use.
 * @returns The module.
 * @modules
 *
 * @example
 * ```ts
 * import { getDeployedModule } from "thirdweb/modules";
 *
 * const module = await getDeployedModule({
 *   client,
 *   chain,
 *   contractId,
 *   publisher,
 * });
 * ```
 */
export declare function getDeployedModule(options: {
    client: ThirdwebClient;
    chain: Chain;
    contractId: string;
    publisher?: string;
}): Promise<Readonly<import("../../../contract/contract.js").ContractOptions<[]>> | null>;
//# sourceMappingURL=getOrDeployModule.d.ts.map