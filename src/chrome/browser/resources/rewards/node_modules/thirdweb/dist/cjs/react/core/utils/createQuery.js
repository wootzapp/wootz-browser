"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createContractQuery = createContractQuery;
const react_query_1 = require("@tanstack/react-query");
const function_id_js_1 = require("../../../utils/function-id.js");
const json_js_1 = require("../../../utils/json.js");
const CONTRACT_QUERY_CACHE = new WeakMap();
/**
 * Creates a `useQuery` hook for a contract call.
 * @param readCall - A function that performs the contract function call and returns the result.
 * @returns An object containing the created `useRead` hook.
 * @example
 * ```jsx
 * import { createContractQuery } from "thirdweb/react";
 * import { totalSupply } from "thirdweb/extensions/erc20";
 * const useTotalSupply = createContractQuery(totalSupply);
 * const { data, isLoading } = useTotalSupply({contract})
 * ```
 * @transaction
 */
function createContractQuery(readCall) {
    if (CONTRACT_QUERY_CACHE.has(readCall)) {
        return CONTRACT_QUERY_CACHE.get(readCall);
    }
    function useRead(options) {
        const { contract, queryOptions, ...params } = options;
        return (0, react_query_1.useQuery)({
            queryKey: [
                "readContract",
                contract.chain.id,
                contract.address,
                (0, function_id_js_1.getFunctionId)(readCall),
                (0, json_js_1.stringify)(params),
            ],
            queryFn: () => readCall(options),
            ...queryOptions,
        });
    }
    CONTRACT_QUERY_CACHE.set(readCall, useRead);
    return useRead;
}
//# sourceMappingURL=createQuery.js.map