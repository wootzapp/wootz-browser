"use strict";
"use client";
Object.defineProperty(exports, "__esModule", { value: true });
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
const useActiveAccount_js_1 = require("../../../../core/hooks/wallets/useActiveAccount.js");
const wallet_ui_states_provider_js_1 = require("../../../providers/wallet-ui-states-provider.js");
const Modal_js_1 = require("../../components/Modal.js");
const constants_js_1 = require("../constants.js");
const ConnectModalContent_js_1 = require("./ConnectModalContent.js");
const screen_js_1 = require("./screen.js");
/**
 * @internal
 */
const ConnectModal = (props) => {
    const screenSetup = (0, screen_js_1.useSetupScreen)({
        size: props.size,
        welcomeScreen: props.welcomeScreen,
        wallets: props.wallets,
    });
    const setSelectionData = (0, wallet_ui_states_provider_js_1.useSetSelectionData)();
    const { screen, setScreen, initialScreen } = screenSetup;
    const isWalletModalOpen = (0, wallet_ui_states_provider_js_1.useIsWalletModalOpen)();
    const setIsWalletModalOpen = (0, wallet_ui_states_provider_js_1.useSetIsWalletModalOpen)();
    const [hideModal, setHideModal] = (0, react_1.useState)(false);
    const closeModal = (0, react_1.useCallback)(() => {
        props.onClose?.();
        setIsWalletModalOpen(false);
        (0, constants_js_1.onModalUnmount)(() => {
            setScreen(initialScreen);
            setSelectionData({});
        });
    }, [
        initialScreen,
        setIsWalletModalOpen,
        setScreen,
        setSelectionData,
        props.onClose,
    ]);
    const activeAccount = (0, useActiveAccount_js_1.useActiveAccount)();
    (0, react_1.useEffect)(() => {
        if (!isWalletModalOpen) {
            (0, constants_js_1.onModalUnmount)(() => {
                setHideModal(false);
            });
        }
    }, [isWalletModalOpen]);
    const setModalVisibility = (0, react_1.useCallback)((value) => setHideModal(!value), []);
    // if wallet is suddenly disconnected when showing the sign in screen, close the modal and reset the screen
    (0, react_1.useEffect)(() => {
        if (isWalletModalOpen &&
            screen === constants_js_1.reservedScreens.signIn &&
            !activeAccount) {
            setScreen(initialScreen);
            setIsWalletModalOpen(false);
        }
    }, [
        initialScreen,
        isWalletModalOpen,
        screen,
        setIsWalletModalOpen,
        setScreen,
        activeAccount,
    ]);
    return ((0, jsx_runtime_1.jsx)(Modal_js_1.Modal, { hide: hideModal, size: props.size, open: isWalletModalOpen, setOpen: (value) => {
            if (hideModal) {
                return;
            }
            if (!value) {
                closeModal();
            }
        }, children: (0, jsx_runtime_1.jsx)(ConnectModalContent_js_1.ConnectModalContent, { shouldSetActive: props.shouldSetActive, screenSetup: screenSetup, setModalVisibility: setModalVisibility, isOpen: isWalletModalOpen, onClose: closeModal, accountAbstraction: props.accountAbstraction, auth: props.auth, client: props.client, connectLocale: props.connectLocale, size: props.size, welcomeScreen: props.welcomeScreen, meta: props.meta, hideHeader: false, onConnect: props.onConnect, recommendedWallets: props.recommendedWallets, wallets: props.wallets, chain: props.chain, showAllWallets: props.showAllWallets, chains: props.chains, walletConnect: props.walletConnect, modalHeader: undefined, walletIdsToHide: undefined }) }));
};
exports.default = ConnectModal;
//# sourceMappingURL=ConnectModal.js.map