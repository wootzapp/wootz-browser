"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.generateMerkleTreeInfoERC20 = generateMerkleTreeInfoERC20;
const addresses_js_1 = require("../../../constants/addresses.js");
const process_snapshot_erc20_js_1 = require("../../../utils/extensions/airdrop/process-snapshot-erc20.js");
/**
 * Generate merkle tree for a given snapshot.
 * @param options - The transaction options.
 * @example
 * ```ts
 * import { generateMerkleTreeInfoERC20 } from "thirdweb/extensions/airdrop";
 *
 * // snapshot / allowlist of airdrop recipients and amounts
 * const snapshot = [
 *    { recipient: "0x...", amount: 10 },
 *    { recipient: "0x...", amount: 15 },
 *    { recipient: "0x...", amount: 20 },
 * ];
 *
 * const tokenAddress = "0x..." // Address of ERC20 airdrop token
 *
 * const { merkleRoot, snapshotUri } = await generateMerkleTreeInfoERC20({
 *    contract,
 *    tokenAddress,
 *    snapshot
 * });
 *
 * // Optional next steps {See: saveSnapshot and setMerkleRoot functions}
 * // - Save snapshot on-chain (on the airdrop contract uri)
 * // - Set merkle root on the contract to enable claiming
 *
 * ```
 * @extension AIRDROP
 * @returns A promise that resolves to the merkle-root and snapshot-uri.
 */
async function generateMerkleTreeInfoERC20(options) {
    const { snapshot, contract } = options;
    // get token decimals
    const tokenAddress = options.tokenAddress;
    const tokenDecimals = await (async () => {
        if ((0, addresses_js_1.isNativeTokenAddress)(tokenAddress) || tokenAddress === addresses_js_1.ZERO_ADDRESS) {
            throw new Error("Token address can't be zero address or native token");
        }
        const [{ getContract }, { decimals: getDecimals }] = await Promise.all([
            Promise.resolve().then(() => require("../../../contract/contract.js")),
            Promise.resolve().then(() => require("../../erc20/read/decimals.js")),
        ]);
        const tokenContract = getContract({
            address: tokenAddress,
            chain: contract.chain,
            client: contract.client,
        });
        return await getDecimals({ contract: tokenContract });
    })();
    // generate merkle tree from snapshot
    const { shardedMerkleInfo, uri } = await (0, process_snapshot_erc20_js_1.processSnapshotERC20)({
        snapshot,
        client: contract.client,
        tokenDecimals,
    });
    return {
        merkleRoot: shardedMerkleInfo.merkleRoot,
        snapshotUri: uri,
    };
}
//# sourceMappingURL=merkleInfoERC20.js.map