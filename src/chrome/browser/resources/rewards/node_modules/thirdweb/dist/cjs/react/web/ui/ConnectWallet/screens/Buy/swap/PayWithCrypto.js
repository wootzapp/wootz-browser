"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PayWithCrypto = PayWithCrypto;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_icons_1 = require("@radix-ui/react-icons");
const formatNumber_js_1 = require("../../../../../../../utils/formatNumber.js");
const index_js_1 = require("../../../../../../core/design-system/index.js");
const useChainQuery_js_1 = require("../../../../../../core/hooks/others/useChainQuery.js");
const useWalletBalance_js_1 = require("../../../../../../core/hooks/others/useWalletBalance.js");
const Skeleton_js_1 = require("../../../../components/Skeleton.js");
const basic_js_1 = require("../../../../components/basic.js");
const buttons_js_1 = require("../../../../components/buttons.js");
const text_js_1 = require("../../../../components/text.js");
const TokenSymbol_js_1 = require("../../../../components/token/TokenSymbol.js");
const GenericWalletIcon_js_1 = require("../../../icons/GenericWalletIcon.js");
const formatTokenBalance_js_1 = require("../../formatTokenBalance.js");
const nativeToken_js_1 = require("../../nativeToken.js");
const PayTokenIcon_js_1 = require("../PayTokenIcon.js");
/**
 * Shows an amount "value" and renders the selected token and chain
 * It also renders the buttons to select the token and chain
 * It also renders the balance of active wallet for the selected token in selected chain
 * @internal
 */
function PayWithCrypto(props) {
    const { name } = (0, useChainQuery_js_1.useChainName)(props.chain);
    const balanceQuery = (0, useWalletBalance_js_1.useWalletBalance)({
        address: props.payerAccount.address,
        chain: props.chain,
        tokenAddress: (0, nativeToken_js_1.isNativeToken)(props.token) ? undefined : props.token.address,
        client: props.client,
    });
    return ((0, jsx_runtime_1.jsxs)(basic_js_1.Container, { bg: "tertiaryBg", borderColor: "borderColor", flex: "row", style: {
            borderWidth: "1px",
            borderTopWidth: 0,
            borderStyle: "solid",
            flexWrap: "nowrap",
            justifyContent: "space-between",
            minHeight: "64px",
            alignItems: "center",
            ...(props.swapRequired
                ? { borderBottom: "none" }
                : {
                    borderBottomLeftRadius: index_js_1.radius.md,
                    borderBottomRightRadius: index_js_1.radius.md,
                }),
        }, children: [(0, jsx_runtime_1.jsxs)(buttons_js_1.Button, { variant: "ghost", onClick: props.onSelectToken, gap: "sm", style: {
                    paddingInline: index_js_1.spacing.sm,
                    paddingBlock: index_js_1.spacing.sm,
                    minWidth: "50%",
                    justifyContent: "flex-start",
                }, disabled: props.freezeChainAndTokenSelection, children: [(0, jsx_runtime_1.jsx)(PayTokenIcon_js_1.PayTokenIcon, { token: props.token, chain: props.chain, size: "md", client: props.client }), (0, jsx_runtime_1.jsxs)(basic_js_1.Container, { flex: "column", gap: "3xs", children: [(0, jsx_runtime_1.jsxs)(basic_js_1.Container, { flex: "row", gap: "xs", center: "y", color: "primaryText", children: [(0, jsx_runtime_1.jsx)(TokenSymbol_js_1.TokenSymbol, { token: props.token, chain: props.chain, size: "sm" }), (0, jsx_runtime_1.jsx)(react_icons_1.ChevronDownIcon, { width: index_js_1.iconSize.sm, height: index_js_1.iconSize.sm })] }), name ? ((0, jsx_runtime_1.jsx)(text_js_1.Text, { size: "xs", children: name })) : ((0, jsx_runtime_1.jsx)(Skeleton_js_1.Skeleton, { width: "90px", height: index_js_1.fontSize.xs }))] })] }), (0, jsx_runtime_1.jsxs)("div", { style: {
                    flexGrow: 1,
                    flexShrink: 1,
                    display: "flex",
                    flexDirection: "column",
                    alignItems: "flex-end",
                    gap: index_js_1.spacing.xxs,
                    overflow: "hidden",
                    textOverflow: "ellipsis",
                    whiteSpace: "nowrap",
                    justifyContent: "center",
                    paddingRight: index_js_1.spacing.sm,
                }, children: [props.isLoading ? ((0, jsx_runtime_1.jsx)(Skeleton_js_1.Skeleton, { width: "120px", height: index_js_1.fontSize.md, color: "borderColor" })) : ((0, jsx_runtime_1.jsx)(text_js_1.Text, { size: "md", color: props.value ? "primaryText" : "secondaryText", style: {}, children: (0, formatNumber_js_1.formatNumber)(Number(props.value), 6) || "" })), (0, jsx_runtime_1.jsxs)(basic_js_1.Container, { flex: "row", gap: "xxs", center: "y", color: "secondaryText", children: [(0, jsx_runtime_1.jsx)(GenericWalletIcon_js_1.GenericWalletIcon, { size: index_js_1.fontSize.xs }), balanceQuery.data ? ((0, jsx_runtime_1.jsx)(text_js_1.Text, { size: "xs", color: "secondaryText", weight: 500, children: (0, formatTokenBalance_js_1.formatTokenBalance)(balanceQuery.data, false) })) : ((0, jsx_runtime_1.jsx)(Skeleton_js_1.Skeleton, { width: "70px", height: index_js_1.fontSize.xs }))] })] })] }));
}
//# sourceMappingURL=PayWithCrypto.js.map