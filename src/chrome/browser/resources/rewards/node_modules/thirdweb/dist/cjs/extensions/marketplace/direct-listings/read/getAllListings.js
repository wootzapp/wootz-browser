"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getAllListings = getAllListings;
const eth_getBlockByNumber_js_1 = require("../../../../rpc/actions/eth_getBlockByNumber.js");
const rpc_js_1 = require("../../../../rpc/rpc.js");
const bigint_js_1 = require("../../../../utils/bigint.js");
const getAllListings_js_1 = require("../../__generated__/IDirectListings/read/getAllListings.js");
const totalListings_js_1 = require("../../__generated__/IDirectListings/read/totalListings.js");
const utils_js_1 = require("../../utils.js");
const utils_js_2 = require("../utils.js");
const DEFAULT_QUERY_ALL_COUNT = 100n;
/**
 * Retrieves all direct listings based on the provided options.
 * @param options - The options for retrieving the listing.
 * @returns A promise that resolves to the direct listings array.
 * @extension MARKETPLACE
 * @example
 *
 * ```ts
 * import { getAllListings } from "thirdweb/extensions/marketplace";
 *
 * const listings = await getAllListings({ contract, start: 0, count: 10 });
 * ```
 */
async function getAllListings(options) {
    const totalCount = await (0, totalListings_js_1.totalListings)(options);
    // if the totalListingCount is 0, return an empty array and skip all other work
    if (totalCount === 0n) {
        return [];
    }
    const start = BigInt(options.start || 0);
    const count = BigInt(options.count || DEFAULT_QUERY_ALL_COUNT);
    const end = (0, bigint_js_1.min)(totalCount, start + count);
    const rpcClient = (0, rpc_js_1.getRpcClient)(options.contract);
    const [rawListings, latestBlock] = await Promise.all([
        (0, utils_js_1.getAllInBatches)((startId, endId) => (0, getAllListings_js_1.getAllListings)({ contract: options.contract, startId, endId }), {
            start,
            end,
            maxSize: DEFAULT_QUERY_ALL_COUNT,
        }).then((listings) => listings.flat()),
        // get the latest block number once
        (0, eth_getBlockByNumber_js_1.eth_getBlockByNumber)(rpcClient, {
            blockTag: "latest",
        }),
    ]);
    const listings = (await Promise.all(rawListings.map((rawListing) => (0, utils_js_2.mapDirectListing)({
        contract: options.contract,
        latestBlock,
        rawListing,
    }).catch(() => null)))).filter((listing) => listing !== null);
    return listings; // TODO: Fix when TS 5.5 is out
}
//# sourceMappingURL=getAllListings.js.map