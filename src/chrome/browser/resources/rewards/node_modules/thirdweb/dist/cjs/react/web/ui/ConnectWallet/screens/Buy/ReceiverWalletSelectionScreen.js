"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ReceiverWalletDrawerScreen = ReceiverWalletDrawerScreen;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_icons_1 = require("@radix-ui/react-icons");
const react_1 = require("react");
const address_js_1 = require("../../../../../../utils/address.js");
const index_js_1 = require("../../../../../core/design-system/index.js");
const connection_manager_js_1 = require("../../../../../core/providers/connection-manager.js");
const Spacer_js_1 = require("../../../components/Spacer.js");
const TextDivider_js_1 = require("../../../components/TextDivider.js");
const Tooltip_js_1 = require("../../../components/Tooltip.js");
const basic_js_1 = require("../../../components/basic.js");
const buttons_js_1 = require("../../../components/buttons.js");
const formElements_js_1 = require("../../../components/formElements.js");
const text_js_1 = require("../../../components/text.js");
const WalletSelectorButton_js_1 = require("./WalletSelectorButton.js");
function ReceiverWalletDrawerScreen(props) {
    const [address, setAddress] = (0, react_1.useState)("");
    const isValidAddress = (0, react_1.useMemo)(() => (0, address_js_1.isAddress)(address), [address]);
    const showError = !!address && !isValidAddress;
    const connectionManager = (0, connection_manager_js_1.useConnectionManager)();
    const connectedWallets = (0, react_1.useSyncExternalStore)(connectionManager.connectedWallets.subscribe, connectionManager.connectedWallets.getValue);
    function handleSubmit() {
        props.onSelect(address);
        props.onBack();
    }
    return ((0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsx)(text_js_1.Text, { size: "lg", color: "primaryText", children: "Send to" }), (0, jsx_runtime_1.jsx)(Spacer_js_1.Spacer, { y: "lg" }), (0, jsx_runtime_1.jsxs)("div", { style: {
                    position: "relative",
                }, children: [(0, jsx_runtime_1.jsx)(formElements_js_1.Input, { "data-error": showError, value: address, placeholder: "Enter wallet address", variant: "outline", onChange: (e) => setAddress(e.target.value), style: {
                            paddingRight: "50px",
                        }, onKeyDown: (e) => {
                            if (isValidAddress && e.key === "Enter") {
                                handleSubmit();
                            }
                        } }), (0, jsx_runtime_1.jsx)(Tooltip_js_1.ToolTip, { tip: "Confirm", children: (0, jsx_runtime_1.jsx)(buttons_js_1.IconButton, { disabled: !isValidAddress, style: {
                                position: "absolute",
                                right: 0,
                                top: 0,
                                bottom: 0,
                                width: "40px",
                            }, onClick: handleSubmit, "aria-label": "Confirm", children: (0, jsx_runtime_1.jsx)(react_icons_1.ArrowRightIcon, { width: index_js_1.iconSize.md, height: index_js_1.iconSize.md }) }) })] }), showError && ((0, jsx_runtime_1.jsxs)(jsx_runtime_1.Fragment, { children: [(0, jsx_runtime_1.jsx)(Spacer_js_1.Spacer, { y: "xs" }), (0, jsx_runtime_1.jsx)(text_js_1.Text, { color: "danger", size: "sm", children: "Invalid address" })] })), (0, jsx_runtime_1.jsx)(Spacer_js_1.Spacer, { y: "lg" }), (0, jsx_runtime_1.jsx)(TextDivider_js_1.TextDivider, { text: "OR" }), (0, jsx_runtime_1.jsx)(Spacer_js_1.Spacer, { y: "md" }), (0, jsx_runtime_1.jsx)(text_js_1.Text, { size: "sm", children: "Connected" }), (0, jsx_runtime_1.jsx)(Spacer_js_1.Spacer, { y: "xs" }), (0, jsx_runtime_1.jsx)(basic_js_1.Container, { flex: "column", gap: "sm", children: connectedWallets.map((w) => {
                    const address = (w.getAccount()?.address || "").toLowerCase();
                    return ((0, jsx_runtime_1.jsx)(WalletSelectorButton_js_1.WalletSelectorButton, { address: address, client: props.client, onClick: () => {
                            props.onSelect(address);
                            props.onBack();
                        }, disableChevron: true, checked: address === props.receiverAddress.toLowerCase(), walletId: w.id }, w.id));
                }) })] }));
}
//# sourceMappingURL=ReceiverWalletSelectionScreen.js.map