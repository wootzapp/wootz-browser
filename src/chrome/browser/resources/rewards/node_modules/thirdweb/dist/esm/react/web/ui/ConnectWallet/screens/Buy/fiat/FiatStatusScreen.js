import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from "react/jsx-runtime";
import { CheckCircledIcon } from "@radix-ui/react-icons";
import { useQueryClient } from "@tanstack/react-query";
import { useEffect, useRef } from "react";
import { isMobile } from "../../../../../../../utils/web/isMobile.js";
import { iconSize } from "../../../../../../core/design-system/index.js";
import { useBuyWithFiatStatus } from "../../../../../../core/hooks/pay/useBuyWithFiatStatus.js";
import { invalidateWalletBalance } from "../../../../../../core/providers/invalidateWalletBalance.js";
import { Spacer } from "../../../../components/Spacer.js";
import { Spinner } from "../../../../components/Spinner.js";
import { StepBar } from "../../../../components/StepBar.js";
import { Container, ModalHeader } from "../../../../components/basic.js";
import { Button } from "../../../../components/buttons.js";
import { Text } from "../../../../components/text.js";
import { AccentFailIcon } from "../../../icons/AccentFailIcon.js";
import { getBuyWithFiatStatusMeta } from "../pay-transactions/statusMeta.js";
import { OnRampTxDetailsTable } from "./FiatTxDetailsTable.js";
/**
 * Poll for "Buy with Fiat" status - when the on-ramp is in progress
 * - Show success screen if swap is not required and on-ramp is completed
 * - Show Failed screen if on-ramp failed
 * - call `onShowSwapFlow` if on-ramp is completed and swap is required
 */
export function OnrampStatusScreen(props) {
    const queryClient = useQueryClient();
    const { openedWindow, onSuccess } = props;
    const statusQuery = useBuyWithFiatStatus({
        intentId: props.intentId,
        client: props.client,
    });
    // determine UI status
    let uiStatus = "loading";
    if (statusQuery.data?.status === "ON_RAMP_TRANSFER_FAILED" ||
        statusQuery.data?.status === "PAYMENT_FAILED") {
        uiStatus = "failed";
    }
    else if (statusQuery.data?.status === "CRYPTO_SWAP_FALLBACK") {
        uiStatus = "partialSuccess";
    }
    else if (statusQuery.data?.status === "ON_RAMP_TRANSFER_COMPLETED") {
        uiStatus = "completed";
    }
    const purchaseCbCalled = useRef(false);
    useEffect(() => {
        if (purchaseCbCalled.current || !onSuccess) {
            return;
        }
        if (statusQuery.data?.status === "ON_RAMP_TRANSFER_COMPLETED") {
            purchaseCbCalled.current = true;
            onSuccess(statusQuery.data);
        }
    }, [onSuccess, statusQuery.data]);
    // close the onramp popup if onramp is completed
    useEffect(() => {
        if (!openedWindow || !statusQuery.data) {
            return;
        }
        if (statusQuery.data?.status === "CRYPTO_SWAP_REQUIRED" ||
            statusQuery.data?.status === "ON_RAMP_TRANSFER_COMPLETED") {
            openedWindow.close();
        }
    }, [statusQuery.data, openedWindow]);
    // invalidate wallet balance when onramp is completed
    const invalidatedBalance = useRef(false);
    useEffect(() => {
        if (!invalidatedBalance.current &&
            statusQuery.data?.status === "ON_RAMP_TRANSFER_COMPLETED") {
            invalidatedBalance.current = true;
            invalidateWalletBalance(queryClient);
        }
    }, [statusQuery.data, queryClient]);
    // show swap flow
    useEffect(() => {
        if (statusQuery.data?.status === "CRYPTO_SWAP_REQUIRED") {
            props.onShowSwapFlow(statusQuery.data);
        }
    }, [statusQuery.data, props.onShowSwapFlow]);
    return (_jsxs(Container, { p: "lg", children: [_jsx(ModalHeader, { title: props.title, onBack: props.onBack }), props.hasTwoSteps && (_jsxs(_Fragment, { children: [_jsx(Spacer, { y: "lg" }), _jsx(StepBar, { steps: 2, currentStep: 1 }), _jsx(Spacer, { y: "sm" }), _jsxs(Text, { size: "xs", children: ["Step 1 of 2 - Buying ", props.quote.onRampToken.token.symbol, " with", " ", props.quote.fromCurrencyWithFees.currencySymbol] })] })), _jsx(OnrampStatusScreenUI, { uiStatus: uiStatus, onDone: props.onDone, fiatStatus: statusQuery.data, client: props.client, transactionMode: props.transactionMode, quote: props.quote, isEmbed: props.isEmbed })] }));
}
function OnrampStatusScreenUI(props) {
    const { uiStatus } = props;
    const statusMeta = props.fiatStatus
        ? getBuyWithFiatStatusMeta(props.fiatStatus)
        : undefined;
    const fiatStatus = props.fiatStatus && props.fiatStatus.status !== "NOT_FOUND"
        ? props.fiatStatus
        : undefined;
    const onRampTokenQuote = props.quote.onRampToken;
    const txDetails = (_jsx(OnRampTxDetailsTable, { client: props.client, token: fiatStatus?.source // source tx is onRamp token
            ? {
                chainId: fiatStatus.source.token.chainId,
                address: fiatStatus.source.token.tokenAddress,
                symbol: fiatStatus.source.token.symbol || "",
                amount: fiatStatus.source.amount,
            }
            : {
                chainId: onRampTokenQuote.token.chainId,
                address: onRampTokenQuote.token.tokenAddress,
                symbol: onRampTokenQuote.token.symbol,
                amount: onRampTokenQuote.amount,
            }, fiat: {
            amount: props.quote.fromCurrencyWithFees.amount,
            currencySymbol: props.quote.fromCurrencyWithFees.currencySymbol,
        }, statusMeta: fiatStatus?.source && statusMeta
            ? {
                color: statusMeta?.color,
                text: statusMeta?.status,
                txHash: fiatStatus.source.transactionHash,
            }
            : undefined }));
    return (_jsxs(Container, { children: [_jsx(Spacer, { y: "xl" }), uiStatus === "loading" && (_jsxs(_Fragment, { children: [_jsx(Spacer, { y: "md" }), _jsx(Container, { flex: "row", center: "x", children: _jsx(Spinner, { size: "xxl", color: "accentText" }) }), _jsx(Spacer, { y: "md" }), _jsx(Text, { color: "primaryText", size: "lg", center: true, children: "Buy Pending" }), _jsx(Spacer, { y: "sm" }), !isMobile() && _jsx(Text, { center: true, children: "Complete the purchase in popup" }), _jsx(Spacer, { y: "xxl" }), txDetails] })), uiStatus === "failed" && (_jsxs(_Fragment, { children: [_jsx(Spacer, { y: "md" }), _jsx(Container, { flex: "row", center: "x", children: _jsx(AccentFailIcon, { size: iconSize["3xl"] }) }), _jsx(Spacer, { y: "lg" }), _jsx(Text, { color: "primaryText", size: "lg", center: true, children: "Transaction Failed" }), _jsx(Spacer, { y: "xxl" }), txDetails] })), uiStatus === "completed" && (_jsxs(_Fragment, { children: [_jsx(Spacer, { y: "md" }), _jsx(Container, { flex: "row", center: "x", color: "success", children: _jsx(CheckCircledIcon, { width: iconSize["3xl"], height: iconSize["3xl"] }) }), _jsx(Spacer, { y: "md" }), _jsx(Text, { color: "primaryText", size: "lg", center: true, children: "Buy Complete" }), props.fiatStatus && props.fiatStatus.status !== "NOT_FOUND" && (_jsxs(_Fragment, { children: [_jsx(Spacer, { y: "xxl" }), txDetails, _jsx(Spacer, { y: "sm" })] })), !props.isEmbed && (_jsx(Button, { variant: "accent", fullWidth: true, onClick: props.onDone, children: props.transactionMode ? "Continue Transaction" : "Done" }))] }))] }));
}
//# sourceMappingURL=FiatStatusScreen.js.map