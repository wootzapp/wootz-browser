import { type ThirdwebContract } from "../../../../../../contract/contract.js";
import type { PreparedTransaction } from "../../../../../../transaction/prepare-transaction.js";
import type { Account } from "../../../../../../wallets/interfaces/wallet.js";
import type { ClaimButtonProps, Erc20ClaimParams, Erc721ClaimParams, Erc1155ClaimParams } from "./types.js";
/**
 * This button is used to claim tokens (NFT or ERC20) from a given thirdweb Drop contract.
 *
 * there are 3 type of Drop contract: NFT Drop (DropERC721), Edition Drop (DropERC1155) and Token Drop (DropERC20)
 *
 * Learn more: https://thirdweb.com/explore/drops
 *
 *
 * Note: This button only works with thirdweb Drop contracts.
 * For custom contract, please use [`TransactionButton`](https://portal.thirdweb.com/references/typescript/v5/TransactionButton)
 * @param props
 * @returns A wrapper for TransactionButton
 *
 * @component
 * @example
 *
 * Example for claiming NFT from an NFT Drop contract
 * ```tsx
 * import { ClaimButton } from "thirdweb/react";
 * import { ethereum } from "thirdweb/chains";
 *
 * <ClaimButton
 *   contractAddress="0x..." // contract address of the NFT Drop
 *   chain={ethereum}
 *   client={client}
 *   claimParams={{
 *     type: "ERC721",
 *     quantity: 1n, // claim 1 token
 *   }}
 * >
 *   Claim now
 * </ClaimButton>
 * ```
 *
 * For Edition Drop (ERC1155)
 * ```tsx
 * <ClaimButton
 *   contractAddress="0x..." // contract address of the Edition Drop
 *   chain={ethereum}
 *   client={client}
 *   claimParams={{
 *     type: "ERC1155",
 *     quantity: 1n,
 *     tokenId: 0n,
 *   }}
 * >
 *   Claim now
 * </ClaimButton>
 * ```
 *
 * For Token Drop (ERC20)
 * ```tsx
 * <ClaimButton
 *   contractAddress="0x..." // contract address of the Token Drop
 *   chain={ethereum}
 *   client={client}
 *   claimParams={{
 *     type: "ERC20",
 *     quantity: "100", // claim 100 ERC20 tokens
 *     // instead of `quantity`, you can also use `quantityInWei` (bigint)
 *   }}
 * >
 *   Claim now
 * </ClaimButton>
 * ```
 *
 * Attach custom Pay metadata
 * ```tsx
 * <ClaimButton
 *   payModal={{
 *     metadata: {
 *       name: "Van Gogh Starry Night",
 *       image: "https://unsplash.com/starry-night.png"
 *     }
 *   }}
 * >...</ClaimButton>
 *
 * ```
 *
 * Since this button uses the `TransactionButton`, it can take in any props that can be passed
 * to the [`TransactionButton`](https://portal.thirdweb.com/references/typescript/v5/TransactionButton)
 *
 *
 * For error handling & callbacks on transaction-sent and transaction-confirmed,
 * please refer to the TransactionButton docs.
 */
export declare function ClaimButton(props: ClaimButtonProps): import("react/jsx-runtime.js").JSX.Element;
/**
 * @internal
 */
export declare function getERC721ClaimTo({ contract, account, claimParams, }: {
    contract: ThirdwebContract;
    account: Account | undefined;
    claimParams: Erc721ClaimParams;
}): Promise<PreparedTransaction<any, import("abitype").AbiFunction, import("../../../../../../transaction/prepare-transaction.js").PrepareTransactionOptions>>;
/**
 * @internal
 */
export declare function getERC1155ClaimTo({ contract, account, claimParams, }: {
    contract: ThirdwebContract;
    account: Account | undefined;
    claimParams: Erc1155ClaimParams;
}): Promise<PreparedTransaction<any, import("abitype").AbiFunction, import("../../../../../../transaction/prepare-transaction.js").PrepareTransactionOptions>>;
/**
 * @internal
 */
export declare function getERC20ClaimTo({ contract, account, claimParams, }: {
    contract: ThirdwebContract;
    account: Account | undefined;
    claimParams: Erc20ClaimParams;
}): Promise<PreparedTransaction<any, import("abitype").AbiFunction, import("../../../../../../transaction/prepare-transaction.js").PrepareTransactionOptions>>;
//# sourceMappingURL=index.d.ts.map