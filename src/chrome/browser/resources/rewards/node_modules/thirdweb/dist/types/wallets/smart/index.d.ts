import type { Chain } from "../../chains/types.js";
import type { Account, Wallet } from "../interfaces/wallet.js";
import type { CreateWalletArgs, WalletConnectionOption, WalletId } from "../wallet-types.js";
/**
 * Checks if the provided wallet is a smart wallet.
 *
 * @param wallet - The wallet to check.
 * @returns True if the wallet is a smart wallet, false otherwise.
 */
export declare function isSmartWallet(wallet: Wallet<WalletId>): wallet is Wallet<"smart">;
/**
 * We can get the personal account for given smart account but not the other way around - this map gives us the reverse lookup
 * @internal
 */
export declare const personalAccountToSmartAccountMap: WeakMap<Account, Wallet<"smart">>;
/**
 * @internal
 */
export declare function connectSmartWallet(wallet: Wallet<"smart">, connectionOptions: WalletConnectionOption<"smart">, creationOptions: CreateWalletArgs<"smart">[1]): Promise<[Account, Chain]>;
/**
 * @internal
 */
export declare function disconnectSmartWallet(wallet: Wallet<"smart">): Promise<void>;
//# sourceMappingURL=index.d.ts.map