"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TokenRow = exports.TokenListScreen = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_native_1 = require("react-native");
const formatNumber_js_1 = require("../../../../utils/formatNumber.js");
const useWalletBalance_js_1 = require("../../../core/hooks/others/useWalletBalance.js");
const useActiveAccount_js_1 = require("../../../core/hooks/wallets/useActiveAccount.js");
const useActiveWalletChain_js_1 = require("../../../core/hooks/wallets/useActiveWalletChain.js");
const defaultTokens_js_1 = require("../../../core/utils/defaultTokens.js");
const index_js_1 = require("../../design-system/index.js");
const RNImage_js_1 = require("../components/RNImage.js");
const Skeleton_js_1 = require("../components/Skeleton.js");
const TokenIcon_js_1 = require("../components/TokenIcon.js");
const text_js_1 = require("../components/text.js");
const svgs_js_1 = require("../icons/svgs.js");
const TokenListScreen = (props) => {
    const supportedTokens = props.supportedTokens || defaultTokens_js_1.defaultTokens;
    const chain = (0, useActiveWalletChain_js_1.useActiveWalletChain)();
    const account = (0, useActiveAccount_js_1.useActiveAccount)();
    const tokens = chain ? supportedTokens[chain.id] || [] : [];
    return ((0, jsx_runtime_1.jsx)(react_native_1.ScrollView, { style: { flex: 1 }, children: (0, jsx_runtime_1.jsxs)(react_native_1.View, { style: styles.listContainer, children: [(0, jsx_runtime_1.jsx)(exports.TokenRow, { chain: chain, address: account?.address, client: props.client, theme: props.theme, onTokenSelected: props.onTokenSelected }), tokens.map((t) => {
                    return ((0, jsx_runtime_1.jsx)(exports.TokenRow, { chain: chain, client: props.client, address: account?.address, theme: props.theme, token: t, onTokenSelected: props.onTokenSelected }, t.address));
                })] }) }));
};
exports.TokenListScreen = TokenListScreen;
const TokenRow = (props) => {
    const { token, theme, address, chain, client, onTokenSelected } = props;
    const balanceQuery = (0, useWalletBalance_js_1.useWalletBalance)({
        address,
        chain,
        client,
        tokenAddress: token?.address,
    });
    const tokenName = props.token ? props.token.name : balanceQuery.data?.name;
    const inner = ((0, jsx_runtime_1.jsxs)(jsx_runtime_1.Fragment, { children: [(0, jsx_runtime_1.jsx)(TokenIcon_js_1.TokenIcon, { token: token, size: 40, chain: chain, client: client, theme: theme }), (0, jsx_runtime_1.jsxs)(react_native_1.View, { style: { flexDirection: "column", gap: index_js_1.spacing.xxs }, children: [(0, jsx_runtime_1.jsx)(text_js_1.ThemedText, { theme: theme, type: "defaultSemiBold", children: tokenName }), address &&
                        (balanceQuery.data ? ((0, jsx_runtime_1.jsxs)(text_js_1.ThemedText, { theme: theme, type: "subtext", children: [formatBalanceOnButton(Number(balanceQuery.data.displayValue)), balanceQuery.data?.symbol] })) : ((0, jsx_runtime_1.jsx)(Skeleton_js_1.Skeleton, { theme: theme, style: { width: 80, height: 14 } })))] }), props.onTokenSelected && ((0, jsx_runtime_1.jsxs)(jsx_runtime_1.Fragment, { children: [(0, jsx_runtime_1.jsx)(react_native_1.View, { style: { flex: 1 } }), (0, jsx_runtime_1.jsx)(RNImage_js_1.RNImage, { theme: theme, size: 24, data: svgs_js_1.RIGHT_CHEVRON, color: theme.colors.secondaryIconColor })] }))] }));
    return onTokenSelected ? ((0, jsx_runtime_1.jsx)(react_native_1.TouchableOpacity, { style: styles.tokenRowContainer, onPress: () => onTokenSelected(token), children: inner })) : ((0, jsx_runtime_1.jsx)(react_native_1.View, { style: styles.tokenRowContainer, children: inner }));
};
exports.TokenRow = TokenRow;
function formatBalanceOnButton(num) {
    return (0, formatNumber_js_1.formatNumber)(num, num < 1 ? 5 : 4);
}
const styles = react_native_1.StyleSheet.create({
    listContainer: {
        flexDirection: "column",
        flex: 1,
        paddingHorizontal: index_js_1.spacing.lg,
        gap: index_js_1.spacing.md,
    },
    tokenRowContainer: {
        flexDirection: "row",
        gap: index_js_1.spacing.md,
        alignItems: "center",
    },
    emptyContainer: {
        flexDirection: "column",
        flex: 1,
        justifyContent: "center",
        alignItems: "center",
        padding: index_js_1.spacing.lg,
    },
});
//# sourceMappingURL=TokenListScreen.js.map