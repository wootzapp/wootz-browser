"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TransferConfirmationScreen = TransferConfirmationScreen;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_icons_1 = require("@radix-ui/react-icons");
const react_1 = require("react");
const addresses_js_1 = require("../../../../../../../constants/addresses.js");
const contract_js_1 = require("../../../../../../../contract/contract.js");
const transfer_js_1 = require("../../../../../../../extensions/erc20/write/transfer.js");
const getTransfer_js_1 = require("../../../../../../../pay/buyWithCrypto/getTransfer.js");
const send_and_confirm_transaction_js_1 = require("../../../../../../../transaction/actions/send-and-confirm-transaction.js");
const send_transaction_js_1 = require("../../../../../../../transaction/actions/send-transaction.js");
const prepare_transaction_js_1 = require("../../../../../../../transaction/prepare-transaction.js");
const units_js_1 = require("../../../../../../../utils/units.js");
const index_js_1 = require("../../../../../../core/design-system/index.js");
const useChainQuery_js_1 = require("../../../../../../core/hooks/others/useChainQuery.js");
const Spacer_js_1 = require("../../../../components/Spacer.js");
const Spinner_js_1 = require("../../../../components/Spinner.js");
const StepBar_js_1 = require("../../../../components/StepBar.js");
const SwitchNetwork_js_1 = require("../../../../components/SwitchNetwork.js");
const basic_js_1 = require("../../../../components/basic.js");
const buttons_js_1 = require("../../../../components/buttons.js");
const text_js_1 = require("../../../../components/text.js");
const nativeToken_js_1 = require("../../nativeToken.js");
const Stepper_js_1 = require("../Stepper.js");
const WalletSelectorButton_js_1 = require("../WalletSelectorButton.js");
const TokenInfoRow_js_1 = require("../pay-transactions/TokenInfoRow.js");
const ConfirmationScreen_js_1 = require("./ConfirmationScreen.js");
function TransferConfirmationScreen(props) {
    const { title, onBack, receiverAddress, client, payer, onDone, chain, token, tokenAmount, transactionMode, setTransactionHash, } = props;
    const [step, setStep] = (0, react_1.useState)("transfer");
    const [status, setStatus] = (0, react_1.useState)({ id: "idle" });
    const { symbol } = (0, useChainQuery_js_1.useChainSymbol)(chain);
    return ((0, jsx_runtime_1.jsxs)(basic_js_1.Container, { p: "lg", children: [(0, jsx_runtime_1.jsx)(basic_js_1.ModalHeader, { title: title, onBack: onBack }), (0, jsx_runtime_1.jsx)(Spacer_js_1.Spacer, { y: "xl" }), transactionMode && ((0, jsx_runtime_1.jsxs)(jsx_runtime_1.Fragment, { children: [(0, jsx_runtime_1.jsx)(StepBar_js_1.StepBar, { steps: 2, currentStep: step === "transfer" ? 1 : 2 }), (0, jsx_runtime_1.jsx)(Spacer_js_1.Spacer, { y: "sm" }), (0, jsx_runtime_1.jsx)(text_js_1.Text, { size: "sm", children: step === "transfer"
                            ? "Step 1 of 2 - Transfer funds"
                            : "Step 2 of 2 - Finalize transaction" }), (0, jsx_runtime_1.jsx)(Spacer_js_1.Spacer, { y: "xl" })] })), (0, jsx_runtime_1.jsxs)(basic_js_1.Container, { flex: "row", center: "y", style: {
                    justifyContent: "space-between",
                }, children: [(0, jsx_runtime_1.jsx)(text_js_1.Text, { size: "sm", children: "From" }), (0, jsx_runtime_1.jsx)(WalletSelectorButton_js_1.WalletRow, { address: payer.account.address, client: client })] }), (0, jsx_runtime_1.jsx)(Spacer_js_1.Spacer, { y: "md" }), (0, jsx_runtime_1.jsx)(basic_js_1.Line, {}), (0, jsx_runtime_1.jsx)(Spacer_js_1.Spacer, { y: "md" }), (0, jsx_runtime_1.jsxs)(basic_js_1.Container, { flex: "row", center: "y", style: {
                    justifyContent: "space-between",
                }, children: [(0, jsx_runtime_1.jsx)(text_js_1.Text, { size: "sm", children: "To" }), (0, jsx_runtime_1.jsx)(WalletSelectorButton_js_1.WalletRow, { address: receiverAddress, client: client })] }), (0, jsx_runtime_1.jsx)(Spacer_js_1.Spacer, { y: "md" }), (0, jsx_runtime_1.jsx)(basic_js_1.Line, {}), (0, jsx_runtime_1.jsx)(Spacer_js_1.Spacer, { y: "md" }), (0, jsx_runtime_1.jsx)(TokenInfoRow_js_1.TokenInfoRow, { chainId: chain.id, client: client, label: "Amount", tokenAmount: tokenAmount, tokenSymbol: (0, nativeToken_js_1.isNativeToken)(token) ? symbol || "" : token.symbol, tokenAddress: (0, nativeToken_js_1.isNativeToken)(token) ? addresses_js_1.NATIVE_TOKEN_ADDRESS : token.address }), (0, jsx_runtime_1.jsx)(Spacer_js_1.Spacer, { y: "lg" }), transactionMode && ((0, jsx_runtime_1.jsxs)(jsx_runtime_1.Fragment, { children: [(0, jsx_runtime_1.jsx)(Spacer_js_1.Spacer, { y: "sm" }), (0, jsx_runtime_1.jsxs)(basic_js_1.Container, { gap: "sm", flex: "row", style: {
                            justifyContent: "space-between",
                        }, center: "y", color: "accentText", children: [(0, jsx_runtime_1.jsx)(Stepper_js_1.Step, { isDone: step === "execute", isActive: step === "transfer", label: step === "transfer" ? "Transfer" : "Done" }), (0, jsx_runtime_1.jsx)(ConfirmationScreen_js_1.ConnectorLine, {}), (0, jsx_runtime_1.jsx)(Stepper_js_1.Step, { isDone: false, label: "Finalize", isActive: step === "execute" })] }), (0, jsx_runtime_1.jsx)(Spacer_js_1.Spacer, { y: "lg" })] })), status.id === "error" && ((0, jsx_runtime_1.jsxs)(jsx_runtime_1.Fragment, { children: [(0, jsx_runtime_1.jsx)(basic_js_1.Container, { flex: "row", gap: "xs", center: "both", color: "danger", children: (0, jsx_runtime_1.jsx)(text_js_1.Text, { color: "danger", size: "sm", style: { textAlign: "center" }, children: step === "transfer"
                                ? `${status.error || "Failed to Transfer"}`
                                : "Failed to Execute" }) }), (0, jsx_runtime_1.jsx)(Spacer_js_1.Spacer, { y: "md" })] })), !transactionMode && step === "execute" && status.id === "done" && ((0, jsx_runtime_1.jsxs)(jsx_runtime_1.Fragment, { children: [(0, jsx_runtime_1.jsxs)(basic_js_1.Container, { flex: "row", gap: "xs", center: "both", color: "success", children: [(0, jsx_runtime_1.jsx)(react_icons_1.CheckCircledIcon, { width: index_js_1.iconSize.sm, height: index_js_1.iconSize.sm }), (0, jsx_runtime_1.jsx)(text_js_1.Text, { color: "success", size: "sm", children: "Payment completed" })] }), (0, jsx_runtime_1.jsx)(Spacer_js_1.Spacer, { y: "md" })] })), payer.chain.id !== chain.id ? ((0, jsx_runtime_1.jsx)(SwitchNetwork_js_1.SwitchNetworkButton, { fullWidth: true, variant: "accent", switchChain: async () => {
                    await props.payer.wallet.switchChain(chain);
                } })) : ((0, jsx_runtime_1.jsxs)(buttons_js_1.Button, { variant: "accent", fullWidth: true, disabled: status.id === "pending", onClick: async () => {
                    if (step === "execute") {
                        onDone();
                        return;
                    }
                    try {
                        setStatus({ id: "pending" });
                        // TRANSACTION MODE = transfer funds to another one of your wallets before executing the tx
                        if (transactionMode) {
                            const transaction = (0, nativeToken_js_1.isNativeToken)(token)
                                ? (0, prepare_transaction_js_1.prepareTransaction)({
                                    client,
                                    chain,
                                    to: receiverAddress,
                                    value: (0, units_js_1.toWei)(tokenAmount),
                                })
                                : (0, transfer_js_1.transfer)({
                                    contract: (0, contract_js_1.getContract)({
                                        address: token.address,
                                        chain: chain,
                                        client: client,
                                    }),
                                    to: receiverAddress,
                                    amount: tokenAmount,
                                });
                            await (0, send_and_confirm_transaction_js_1.sendAndConfirmTransaction)({
                                account: props.payer.account,
                                transaction,
                            });
                            // switch to execute step
                            setStep("execute");
                            setStatus({ id: "idle" });
                        }
                        else {
                            const transferResponse = await (0, getTransfer_js_1.getBuyWithCryptoTransfer)({
                                client,
                                fromAddress: payer.account.address,
                                toAddress: receiverAddress,
                                chainId: chain.id,
                                tokenAddress: (0, nativeToken_js_1.isNativeToken)(token)
                                    ? addresses_js_1.NATIVE_TOKEN_ADDRESS
                                    : token.address,
                                amount: tokenAmount,
                                purchaseData: undefined, // TODO (pay): add purchase data
                            });
                            if (transferResponse.approval) {
                                setStep("approve");
                                // approve the transfer
                                await (0, send_and_confirm_transaction_js_1.sendAndConfirmTransaction)({
                                    account: props.payer.account,
                                    transaction: transferResponse.approval,
                                });
                            }
                            setStep("transfer");
                            // execute the transfer
                            const transaction = transferResponse.transactionRequest;
                            const tx = await (0, send_transaction_js_1.sendTransaction)({
                                account: props.payer.account,
                                transaction,
                            });
                            // switches to the status polling screen
                            setTransactionHash(tx.transactionHash);
                            setStatus({ id: "idle" });
                        }
                        // biome-ignore lint/suspicious/noExplicitAny: catch multiple errors
                    }
                    catch (e) {
                        console.error(e);
                        setStatus({
                            id: "error",
                            error: "error" in e ? e.error?.message : e?.message,
                        });
                    }
                }, gap: "xs", children: [step === "execute" && (status.id === "done" ? "Done" : "Continue"), step === "transfer" &&
                        (status.id === "pending" ? "Confirming" : "Confirm"), step === "approve" &&
                        (status.id === "pending" ? "Approving" : "Approve"), status.id === "pending" && ((0, jsx_runtime_1.jsx)(Spinner_js_1.Spinner, { size: "sm", color: "accentButtonText" }))] }))] }));
}
//# sourceMappingURL=TransferConfirmationScreen.js.map