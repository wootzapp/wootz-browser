"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.useBlockNumber = useBlockNumber;
const react_query_1 = require("@tanstack/react-query");
const react_1 = require("react");
const eth_blockNumber_js_1 = require("../../../../rpc/actions/eth_blockNumber.js");
const rpc_js_1 = require("../../../../rpc/rpc.js");
const watchBlockNumber_js_1 = require("../../../../rpc/watchBlockNumber.js");
/**
 * Hook that watches for changes in the block number on a given chain.
 * @param options - The options for the hook.
 * @returns The latest block number.
 * @example
 * ```jsx
 * import { useBlockNumber } from "thirdweb/react";
 * const blockNumber = useBlockNumber({client, chain});
 * ```
 * @utils
 */
function useBlockNumber(options) {
    const { client, chain, enabled = true, watch = true } = options;
    const queryClient = (0, react_query_1.useQueryClient)();
    const queryKey = (0, react_1.useMemo)(() => [chain.id, "blockNumber"], [chain]);
    const query = (0, react_query_1.useQuery)({
        // TODO: technically client should be part of the queryKey here...
        queryKey: queryKey,
        queryFn: async () => {
            const rpcRequest = (0, rpc_js_1.getRpcClient)({ client, chain });
            return await (0, eth_blockNumber_js_1.eth_blockNumber)(rpcRequest);
        },
        enabled,
    });
    (0, react_1.useEffect)(() => {
        if (!enabled || !watch) {
            // don't watch if not enabled or not watching
            return;
        }
        return (0, watchBlockNumber_js_1.watchBlockNumber)({
            client,
            chain,
            onNewBlockNumber: (newBlockNumber) => {
                queryClient.setQueryData(queryKey, newBlockNumber);
            },
        });
    }, [client, chain, enabled, queryClient, queryKey, watch]);
    return query.data;
}
//# sourceMappingURL=useBlockNumber.js.map