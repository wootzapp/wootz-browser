"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getConnectedEmail = getConnectedEmail;
exports.saveConnectedEmail = saveConnectedEmail;
exports.clearConnectedEmail = clearConnectedEmail;
exports.getConnectedAuthStrategy = getConnectedAuthStrategy;
exports.saveConnectedAuthStrategy = saveConnectedAuthStrategy;
exports.clearConnectedAuthStrategy = clearConnectedAuthStrategy;
exports.isDeviceSharePresentForUser = isDeviceSharePresentForUser;
exports.getAuthTokenClient = getAuthTokenClient;
exports.setAuthTokenClient = setAuthTokenClient;
exports.removeAuthTokenInClient = removeAuthTokenInClient;
exports.setWallerUserDetails = setWallerUserDetails;
exports.getWalletUserDetails = getWalletUserDetails;
exports.removeLoggedInWalletUserId = removeLoggedInWalletUserId;
exports.setDeviceShare = setDeviceShare;
exports.getDeviceShare = getDeviceShare;
const async_storage_1 = require("@react-native-async-storage/async-storage");
const settings_js_1 = require("../../../core/constants/settings.js");
const constants_js_1 = require("../constants.js");
const CONNECTED_EMAIL_LOCAL_STORAGE_NAME = "embedded-wallet-connected-email";
const CONNECTED_AUTH_STRATEGY_LOCAL_STORAGE_NAME = "embedded-wallet-connected-auth-params";
const getItemFromAsyncStorage = async (key) => {
    // @ts-ignore - default import buils but ts doesn't like it
    return async_storage_1.default.getItem(key);
};
const setItemInAsyncStorage = async (key, value) => {
    // @ts-ignore - default import buils but ts doesn't like it
    await async_storage_1.default.setItem(key, value);
};
const removeItemInAsyncStorage = async (key) => {
    // @ts-ignore - default import buils but ts doesn't like it
    await async_storage_1.default.removeItem(key);
};
async function getConnectedEmail() {
    return getItemFromAsyncStorage(CONNECTED_EMAIL_LOCAL_STORAGE_NAME);
}
async function saveConnectedEmail(email) {
    await setItemInAsyncStorage(CONNECTED_EMAIL_LOCAL_STORAGE_NAME, email);
}
async function clearConnectedEmail() {
    await removeItemInAsyncStorage(CONNECTED_EMAIL_LOCAL_STORAGE_NAME);
}
async function getConnectedAuthStrategy() {
    return (await getItemFromAsyncStorage(CONNECTED_AUTH_STRATEGY_LOCAL_STORAGE_NAME));
}
async function saveConnectedAuthStrategy(authStrategy) {
    await setItemInAsyncStorage(CONNECTED_AUTH_STRATEGY_LOCAL_STORAGE_NAME, authStrategy);
}
async function clearConnectedAuthStrategy() {
    await removeItemInAsyncStorage(CONNECTED_AUTH_STRATEGY_LOCAL_STORAGE_NAME);
}
async function isDeviceSharePresentForUser(clientId, walletUserId) {
    if (!walletUserId) {
        return false;
    }
    const storedDeviceShare = await getItemFromAsyncStorage((0, settings_js_1.DEVICE_SHARE_LOCAL_STORAGE_NAME)(clientId, walletUserId));
    return !!storedDeviceShare;
}
async function getAuthTokenClient(clientId) {
    return getItemFromAsyncStorage((0, settings_js_1.AUTH_TOKEN_LOCAL_STORAGE_NAME)(clientId));
}
async function setAuthTokenClient(cookieString, clientId) {
    const authToken = (0, settings_js_1.AUTH_TOKEN_LOCAL_STORAGE_NAME)(clientId);
    await setItemInAsyncStorage(authToken, cookieString);
}
async function removeAuthTokenInClient(clientId) {
    const verifiedTokenString = await getAuthTokenClient(clientId);
    if (verifiedTokenString) {
        await removeItemInAsyncStorage((0, settings_js_1.AUTH_TOKEN_LOCAL_STORAGE_NAME)(clientId));
        return true;
    }
    return false;
}
async function setWallerUserDetails({ clientId, userId, email, }) {
    const userDetails = await getWalletUserDetails(clientId);
    let newEmail = email;
    if (userDetails && userDetails.userId === userId && !newEmail) {
        newEmail = userDetails.email;
    }
    const name = (0, settings_js_1.WALLET_USER_DETAILS_LOCAL_STORAGE_NAME)(clientId);
    await setItemInAsyncStorage(
    // ! Keep this in sync with getWalletUserDetails function below
    name, JSON.stringify({ userId, email: newEmail }));
}
async function getWalletUserDetails(clientId) {
    const result = await getItemFromAsyncStorage((0, settings_js_1.WALLET_USER_DETAILS_LOCAL_STORAGE_NAME)(clientId));
    if (!result) {
        return undefined;
    }
    try {
        const parsed = JSON.parse(result);
        return parsed;
    }
    catch {
        return undefined;
    }
}
async function removeLoggedInWalletUserId(clientId) {
    await removeItemInAsyncStorage((0, settings_js_1.WALLET_USER_DETAILS_LOCAL_STORAGE_NAME)(clientId));
    await removeItemInAsyncStorage((0, settings_js_1.WALLET_USER_ID_LOCAL_STORAGE_NAME)(clientId));
}
async function setDeviceShare({ clientId, deviceShare, }) {
    const userDetails = await getWalletUserDetails(clientId);
    if (!userDetails) {
        throw new Error("Missing wallet user ID");
    }
    const name = (0, settings_js_1.DEVICE_SHARE_LOCAL_STORAGE_NAME)(clientId, userDetails.userId);
    await setWallerUserDetails({ userId: userDetails.userId, clientId });
    await setItemInAsyncStorage(name, deviceShare);
    return deviceShare;
}
async function getDeviceShare(clientId) {
    const cachedWalletUserId = await getWalletUserDetails(clientId);
    if (!cachedWalletUserId) {
        throw new Error("Missing wallet user ID");
    }
    const name = (0, settings_js_1.DEVICE_SHARE_LOCAL_STORAGE_NAME)(clientId, cachedWalletUserId.userId);
    const deviceShareString = await getItemFromAsyncStorage(name);
    if (!deviceShareString) {
        throw new Error(constants_js_1.DEVICE_SHARE_MISSING_MESSAGE);
    }
    const deviceShare = deviceShareString;
    return { deviceShare };
}
//# sourceMappingURL=local.js.map