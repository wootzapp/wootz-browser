"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.mintAdditionalSupplyTo = mintAdditionalSupplyTo;
exports.isMintAdditionalSupplyToSupported = isMintAdditionalSupplyToSupported;
const URI = require("../__generated__/IERC1155/read/uri.js");
const MintTo = require("../__generated__/IMintableERC1155/write/mintTo.js");
/**
 * Mints a "supply" number of additional ERC1155 tokens to the specified "to" address.
 * @param options - The transaction options.
 * @returns A promise that resolves to the transaction result.
 * @extension ERC1155
 * @example
 * ```ts
 * import { mintAdditionalSupplyTo } from "thirdweb/extensions/erc1155";
 * import { sendTransaction } from "thirdweb";
 *
 * const transaction = mintAdditionalSupplyTo({
 *  contract,
 *  to: "0x...",
 *  tokenId: 1n,
 *  supply: 10n,
 * });
 *
 * await sendTransaction({ transaction, account });
 *
 * ```
 */
function mintAdditionalSupplyTo(options) {
    return MintTo.mintTo({
        contract: options.contract,
        asyncParams: async () => {
            // we'll be re-using the exising token URI
            const tokenUri = await URI.uri({
                contract: options.contract,
                tokenId: options.tokenId,
            });
            return {
                to: options.to,
                tokenId: options.tokenId,
                uri: tokenUri,
                amount: options.supply,
            };
        },
    });
}
/**
 * Checks if the `mintAdditionalSupplyTo` method is supported by the given contract.
 * @param availableSelectors An array of 4byte function selectors of the contract. You can get this in various ways, such as using "whatsabi" or if you have the ABI of the contract available you can use it to generate the selectors.
 * @returns A boolean indicating if the `mintAdditionalSupplyTo` method is supported.
 * @extension ERC1155
 * @example
 * ```ts
 * import { isMintAdditionalSupplyToSupported } from "thirdweb/extensions/erc1155";
 *
 * const supported = isMintAdditionalSupplyToSupported(["0x..."]);
 * ```
 */
function isMintAdditionalSupplyToSupported(availableSelectors) {
    return (MintTo.isMintToSupported(availableSelectors) &&
        URI.isUriSupported(availableSelectors));
}
//# sourceMappingURL=mintAdditionalSupplyTo.js.map