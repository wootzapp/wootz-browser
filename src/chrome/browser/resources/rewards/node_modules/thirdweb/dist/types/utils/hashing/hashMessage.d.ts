import { type ByteArray, type SignableMessage } from "viem";
import type { Hex } from "../encoding/hex.js";
type To = "hex" | "bytes";
export type HashMessage<TTo extends To> = (TTo extends "bytes" ? ByteArray : never) | (TTo extends "hex" ? Hex : never);
/**
 * Ethereum Signed Message hashing
 * @param message - The message to hash, either as a string, a Uint8Array, or an object with a `raw` property containing a Uint8Array.
 * @param to_ - The desired output format of the hash (optional). Defaults to 'hex'.
 * @example
 * ```ts
 * import { hashMessage } from "thirdweb/utils";
 * const hash = hashMessage("hello world");
 * ```
 * @returns The Ethereum Signed Message hash of the message in the specified format.
 * @utils
 */
export declare function hashMessage<TTo extends To = "hex">(message: SignableMessage, to_?: TTo): HashMessage<TTo>;
export {};
//# sourceMappingURL=hashMessage.d.ts.map