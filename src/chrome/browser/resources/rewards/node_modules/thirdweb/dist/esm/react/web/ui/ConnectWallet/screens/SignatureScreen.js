import { jsx as _jsx, Fragment as _Fragment, jsxs as _jsxs } from "react/jsx-runtime";
import { keyframes } from "@emotion/react";
import { ReloadIcon } from "@radix-ui/react-icons";
import { useCallback, useEffect, useRef, useState } from "react";
import { useCustomTheme } from "../../../../core/design-system/CustomThemeProvider.js";
import { iconSize, radius, spacing, } from "../../../../core/design-system/index.js";
import { useSiweAuth } from "../../../../core/hooks/auth/useSiweAuth.js";
import { useActiveAccount } from "../../../../core/hooks/wallets/useActiveAccount.js";
import { useActiveWallet } from "../../../../core/hooks/wallets/useActiveWallet.js";
import { useAdminWallet } from "../../../../core/hooks/wallets/useAdminAccount.js";
import { useDisconnect } from "../../../../core/hooks/wallets/useDisconnect.js";
import { wait } from "../../../../core/utils/wait.js";
import { LoadingScreen } from "../../../wallets/shared/LoadingScreen.js";
import { Spacer } from "../../components/Spacer.js";
import { Spinner } from "../../components/Spinner.js";
import { WalletImage } from "../../components/WalletImage.js";
import { Container, ModalHeader } from "../../components/basic.js";
import { Button } from "../../components/buttons.js";
import { Text } from "../../components/text.js";
import { StyledDiv } from "../../design-system/elements.js";
import { TOS } from "../Modal/TOS.js";
import { WalletLogoSpinner } from "./WalletLogoSpinner.js";
export const SignatureScreen = (props) => {
    const { onDone, modalSize, termsOfServiceUrl, privacyPolicyUrl, connectLocale, } = props;
    const wallet = useActiveWallet();
    const adminWallet = useAdminWallet();
    const activeAccount = useActiveAccount();
    const siweAuth = useSiweAuth(wallet, activeAccount, props.auth);
    const [status, setStatus] = useState("idle");
    const { disconnect } = useDisconnect();
    const locale = connectLocale.signatureScreen;
    const signIn = useCallback(async () => {
        try {
            setStatus("signing");
            await siweAuth.doLogin();
            onDone?.();
        }
        catch (err) {
            await wait(1000);
            setStatus("failed");
            console.error("failed to log in", err);
        }
    }, [onDone, siweAuth]);
    if (!wallet) {
        return _jsx(LoadingScreen, {});
    }
    if (wallet.id === "inApp" ||
        wallet.id === "embedded" ||
        (wallet.id === "smart" && adminWallet?.id === "inApp")) {
        return (_jsx(HeadlessSignIn, { signIn: signIn, status: status, connectLocale: connectLocale, wallet: wallet }));
    }
    const handleRetry = () => {
        signIn();
    };
    return (_jsxs(Container, { animate: "fadein", fullHeight: true, flex: "column", children: [_jsx(Container, { p: "lg", style: {
                    paddingBottom: 0,
                }, children: _jsx(ModalHeader, { title: locale.instructionScreen.title }) }), _jsx(Container, { style: {
                    paddingTop: 0,
                    paddingBottom: spacing.xl,
                }, flex: "column", px: modalSize === "compact" ? "lg" : "xxl", center: "y", expand: true, children: status === "idle" ? (_jsxs(_Fragment, { children: [_jsx(Container, { flex: "row", center: "x", animate: "fadein", py: "3xl", children: _jsx(PulsatingContainer, { children: _jsx(WalletImage, { id: wallet.id, client: props.client, size: "80" }) }) }), _jsx(Text, { center: true, multiline: true, balance: true, children: locale.instructionScreen.instruction }), _jsx(Spacer, { y: "lg" }), _jsx(Button, { fullWidth: true, variant: "accent", onClick: signIn, style: {
                                alignItems: "center",
                                padding: spacing.md,
                            }, children: connectLocale.signatureScreen.instructionScreen.signInButton }), _jsx(Spacer, { y: "sm" }), _jsx(Button, { fullWidth: true, variant: "secondary", onClick: () => {
                                disconnect(wallet);
                            }, style: {
                                alignItems: "center",
                                padding: spacing.md,
                            }, children: connectLocale.signatureScreen.instructionScreen.disconnectWallet })] })) : (_jsxs(_Fragment, { children: [_jsx(Container, { py: "3xl", children: _jsx(WalletLogoSpinner, { client: props.client, error: status === "failed", id: wallet.id }) }), _jsxs(Container, { flex: "column", gap: "md", animate: "fadein", children: [_jsx(Text, { size: "lg", center: true, color: "primaryText", children: status === "failed"
                                        ? locale.signingScreen.failedToSignIn
                                        : locale.signingScreen.inProgress }), status === "signing" && (_jsx(Text, { center: true, multiline: true, balance: true, children: connectLocale.signatureScreen.signingScreen.prompt })), status === "failed" && (_jsxs(Container, { children: [_jsx(Spacer, { y: "sm" }), _jsxs(Button, { fullWidth: true, variant: "accent", onClick: handleRetry, style: {
                                                gap: spacing.xs,
                                                alignItems: "center",
                                                padding: spacing.md,
                                            }, children: [_jsx(ReloadIcon, { width: iconSize.sm, height: iconSize.sm }), locale.signingScreen.tryAgain] }), _jsx(Spacer, { y: "sm" }), _jsx(Button, { fullWidth: true, variant: "secondary", onClick: () => {
                                                disconnect(wallet);
                                            }, style: {
                                                alignItems: "center",
                                                padding: spacing.md,
                                            }, children: locale.instructionScreen.disconnectWallet })] }))] }, status)] })) }), (termsOfServiceUrl || privacyPolicyUrl) && (_jsx(Container, { p: "md", animate: "fadein", children: _jsx(TOS, { termsOfServiceUrl: termsOfServiceUrl, privacyPolicyUrl: privacyPolicyUrl, locale: connectLocale.agreement }) }))] }));
};
function HeadlessSignIn({ signIn, status, connectLocale, wallet, }) {
    const locale = connectLocale.signatureScreen;
    const mounted = useRef(false);
    const { disconnect } = useDisconnect();
    useEffect(() => {
        if (mounted.current) {
            return;
        }
        mounted.current = true;
        signIn();
    }, [signIn]);
    return (_jsxs(Container, { p: "lg", fullHeight: true, flex: "column", animate: "fadein", children: [_jsx(ModalHeader, { title: locale.signingScreen.title }), _jsxs(Container, { expand: true, flex: "row", center: "both", style: {
                    minHeight: "250px",
                }, children: [status === "signing" && _jsx(Spinner, { size: "xl", color: "accentText" }), status === "failed" && (_jsxs(Container, { children: [_jsx(Spacer, { y: "lg" }), _jsx(Text, { size: "lg", center: true, color: "danger", children: locale.signingScreen.failedToSignIn }), _jsx(Spacer, { y: "lg" }), _jsxs(Button, { fullWidth: true, variant: "accent", onClick: () => {
                                    signIn();
                                }, style: {
                                    gap: spacing.xs,
                                    alignItems: "center",
                                    padding: spacing.md,
                                }, children: [_jsx(ReloadIcon, { width: iconSize.sm, height: iconSize.sm }), locale.signingScreen.tryAgain] }), _jsx(Spacer, { y: "sm" }), _jsx(Button, { fullWidth: true, variant: "secondary", onClick: () => {
                                    disconnect(wallet);
                                }, style: {
                                    alignItems: "center",
                                    padding: spacing.md,
                                }, children: locale.instructionScreen.disconnectWallet })] }))] })] }));
}
const pulseAnimation = keyframes `
0% {
  transform: scale(0.9);
}
100% {
  opacity: 0;
  transform: scale(1.4);
}
`;
const PulsatingContainer = /* @__PURE__ */ StyledDiv((_) => {
    const theme = useCustomTheme();
    return {
        position: "relative",
        "&::before": {
            content: '""',
            display: "block",
            position: "absolute",
            left: 0,
            top: 0,
            bottom: 0,
            right: 0,
            background: theme.colors.accentText,
            animation: `${pulseAnimation} 2s cubic-bezier(0.175, 0.885, 0.32, 1.1) infinite`,
            zIndex: -1,
            borderRadius: radius.xl,
        },
    };
});
//# sourceMappingURL=SignatureScreen.js.map