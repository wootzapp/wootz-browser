"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ExecutingTxScreen = ExecutingTxScreen;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_icons_1 = require("@radix-ui/react-icons");
const react_1 = require("react");
const index_js_1 = require("../../../core/design-system/index.js");
const useChainQuery_js_1 = require("../../../core/hooks/others/useChainQuery.js");
const useSendTransaction_js_1 = require("../../hooks/transaction/useSendTransaction.js");
const AccentFailIcon_js_1 = require("../ConnectWallet/icons/AccentFailIcon.js");
const Spacer_js_1 = require("../components/Spacer.js");
const Spinner_js_1 = require("../components/Spinner.js");
const basic_js_1 = require("../components/basic.js");
const buttons_js_1 = require("../components/buttons.js");
const text_js_1 = require("../components/text.js");
function ExecutingTxScreen(props) {
    const sendTxCore = (0, useSendTransaction_js_1.useSendTransaction)({
        payModal: false,
    });
    const [txHash, setTxHash] = (0, react_1.useState)();
    const chainExplorers = (0, useChainQuery_js_1.useChainExplorers)(props.tx.chain);
    const [status, setStatus] = (0, react_1.useState)("loading");
    const sendTx = (0, react_1.useCallback)(async () => {
        setStatus("loading");
        try {
            const txData = await sendTxCore.mutateAsync(props.tx);
            setTxHash(txData.transactionHash);
            props.onTxSent(txData);
            setStatus("sent");
        }
        catch (e) {
            // Do not reject the transaction here, because the user may want to try again
            // we only reject on modal close
            console.error(e);
            setStatus("failed");
        }
    }, [sendTxCore, props.tx, props.onTxSent]);
    const done = (0, react_1.useRef)(false);
    (0, react_1.useEffect)(() => {
        if (done.current) {
            return;
        }
        done.current = true;
        sendTx();
    }, [sendTx]);
    return ((0, jsx_runtime_1.jsxs)(basic_js_1.Container, { p: "lg", children: [(0, jsx_runtime_1.jsx)(basic_js_1.ModalHeader, { title: "Transaction", onBack: props.onBack }), (0, jsx_runtime_1.jsx)(Spacer_js_1.Spacer, { y: "xxl" }), (0, jsx_runtime_1.jsx)(Spacer_js_1.Spacer, { y: "xxl" }), (0, jsx_runtime_1.jsxs)(basic_js_1.Container, { flex: "row", center: "x", children: [status === "loading" && (0, jsx_runtime_1.jsx)(Spinner_js_1.Spinner, { size: "xxl", color: "accentText" }), status === "failed" && (0, jsx_runtime_1.jsx)(AccentFailIcon_js_1.AccentFailIcon, { size: index_js_1.iconSize["3xl"] }), status === "sent" && ((0, jsx_runtime_1.jsx)(basic_js_1.Container, { color: "success", flex: "row", center: "both", children: (0, jsx_runtime_1.jsx)(react_icons_1.CheckCircledIcon, { width: index_js_1.iconSize["3xl"], height: index_js_1.iconSize["3xl"] }) }))] }), (0, jsx_runtime_1.jsx)(Spacer_js_1.Spacer, { y: "lg" }), (0, jsx_runtime_1.jsxs)(text_js_1.Text, { color: "primaryText", center: true, size: "lg", children: [status === "loading" && "Sending transaction", status === "failed" && "Transaction failed", status === "sent" && "Transaction sent"] }), (0, jsx_runtime_1.jsx)(Spacer_js_1.Spacer, { y: "sm" }), (0, jsx_runtime_1.jsx)(text_js_1.Text, { color: "danger", center: true, size: "sm", children: status === "failed" && sendTxCore.error
                    ? sendTxCore.error.message
                    : "" }), (0, jsx_runtime_1.jsx)(Spacer_js_1.Spacer, { y: "xxl" }), (0, jsx_runtime_1.jsx)(Spacer_js_1.Spacer, { y: "xxl" }), status === "failed" && ((0, jsx_runtime_1.jsx)(buttons_js_1.Button, { variant: "accent", fullWidth: true, onClick: sendTx, children: "Try Again" })), status === "sent" && ((0, jsx_runtime_1.jsxs)(jsx_runtime_1.Fragment, { children: [(0, jsx_runtime_1.jsx)(buttons_js_1.Button, { variant: "accent", fullWidth: true, onClick: props.closeModal, children: "Done" }), txHash && ((0, jsx_runtime_1.jsxs)(jsx_runtime_1.Fragment, { children: [(0, jsx_runtime_1.jsx)(Spacer_js_1.Spacer, { y: "sm" }), (0, jsx_runtime_1.jsxs)(buttons_js_1.ButtonLink, { fullWidth: true, variant: "outline", href: `${chainExplorers.explorers[0]?.url}/tx/${txHash}`, target: "_blank", as: "a", gap: "xs", style: {
                                    textDecoration: "none",
                                    color: "inherit",
                                }, children: ["View on Explorer", (0, jsx_runtime_1.jsx)(react_icons_1.ExternalLinkIcon, { width: index_js_1.iconSize.sm, height: index_js_1.iconSize.sm })] })] }))] }))] }));
}
//# sourceMappingURL=ExecutingScreen.js.map