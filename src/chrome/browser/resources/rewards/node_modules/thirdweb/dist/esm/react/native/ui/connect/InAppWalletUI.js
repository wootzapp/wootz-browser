import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from "react/jsx-runtime";
import { useMutation } from "@tanstack/react-query";
import { useCallback, useEffect, useRef, useState } from "react";
import { Alert, StyleSheet, TouchableOpacity, View } from "react-native";
import { nativeLocalStorage } from "../../../../utils/storage/nativeStorage.js";
import { preAuthenticate } from "../../../../wallets/in-app/native/auth/index.js";
import { hasStoredPasskey } from "../../../../wallets/in-app/native/auth/passkeys.js";
import { socialAuthOptions, } from "../../../../wallets/types.js";
import { setLastAuthProvider } from "../../../core/utils/storage.js";
import { radius, spacing } from "../../design-system/index.js";
import { RNImage } from "../components/RNImage.js";
import { getAuthProviderImage } from "../components/WalletImage.js";
import { ThemedButton, ThemedButtonWithIcon } from "../components/button.js";
import { ThemedInput, ThemedInputWithSubmit } from "../components/input.js";
import { Spacer } from "../components/spacer.js";
import { ThemedText } from "../components/text.js";
import { APPLE_ICON, DISCORD_ICON, FACEBOOK_ICON, FARCASTER_ICON, GOOGLE_ICON, TELEGRAM_ICON, } from "../icons/svgs.js";
import { LoadingView } from "./LoadingView.js";
const defaultAuthOptions = [
    "email",
    "phone",
    "passkey",
    "google",
    "facebook",
    "apple",
];
const socialIcons = {
    google: GOOGLE_ICON,
    facebook: FACEBOOK_ICON,
    apple: APPLE_ICON,
    discord: DISCORD_ICON,
    farcaster: FARCASTER_ICON,
    telegram: TELEGRAM_ICON,
};
export function InAppWalletUI(props) {
    const { wallet, theme } = props;
    const config = wallet.getConfig();
    const authOptions = config?.auth?.options || defaultAuthOptions;
    const socialLogins = authOptions.filter((x) => socialAuthOptions.includes(x));
    const [inputMode, setInputMode] = useState("email");
    return (_jsxs(View, { style: styles.container, children: [_jsx(View, { style: styles.row, children: socialLogins.map((auth) => (_jsx(SocialLogin, { auth: auth, ...props }, auth))) }), authOptions.includes("email") ? (inputMode === "email" ? (_jsx(PreOtpLogin, { auth: "email", ...props })) : (_jsx(ThemedButtonWithIcon, { theme: theme, title: "Email address", icon: getAuthProviderImage("email"), onPress: () => setInputMode("email") }))) : null, authOptions.includes("phone") ? (inputMode === "phone" ? (_jsx(PreOtpLogin, { auth: "phone", ...props })) : (_jsx(ThemedButtonWithIcon, { theme: theme, title: "Phone number", icon: getAuthProviderImage("phone"), onPress: () => setInputMode("phone") }))) : null, authOptions.includes("passkey") ? (_jsx(ThemedButtonWithIcon, { theme: theme, title: "Passkey", icon: getAuthProviderImage("passkey"), onPress: () => {
                    props.setScreen({ screen: "passkey", wallet });
                } })) : null] }));
}
function SocialLogin(props) {
    const { theme, wallet, auth, client, connector } = props;
    // TODO (rn) - move this onPress and state up
    const strategy = props.auth;
    const connectInAppWallet = useCallback(() => {
        connector({
            wallet,
            connectFn: async (chain) => {
                await wallet.connect({
                    client,
                    strategy: auth,
                    chain,
                });
                await setLastAuthProvider(auth, nativeLocalStorage);
                return wallet;
            },
            authMethod: auth,
        });
    }, [connector, auth, wallet, client]);
    return (_jsx(TouchableOpacity, { style: [
            styles.socialIconContainer,
            { borderColor: theme.colors.borderColor },
        ], onPress: connectInAppWallet, children: _jsx(RNImage, { theme: theme, size: 38, data: socialIcons[auth] }) }, strategy));
}
function PreOtpLogin(props) {
    const { theme, auth, client, setScreen, wallet } = props;
    const [phoneOrEmail, setPhoneNumberOrEmail] = useState("");
    const sendCode = useMutation({
        mutationFn: async (options) => {
            const { auth, phoneOrEmail } = options;
            if (auth === "phone") {
                if (phoneOrEmail.slice(0, 1) !== "+") {
                    throw new Error("Invalid phone number. Please include a country code.");
                }
                await preAuthenticate({
                    client,
                    strategy: auth,
                    phoneNumber: phoneOrEmail,
                });
            }
            else {
                await preAuthenticate({
                    client,
                    strategy: auth,
                    email: phoneOrEmail,
                });
            }
        },
    });
    return (_jsx(ThemedInputWithSubmit, { theme: theme, placeholder: auth === "phone" ? "Phone number" : "Email address", onChangeText: setPhoneNumberOrEmail, value: phoneOrEmail, keyboardType: auth === "phone" ? "phone-pad" : "email-address", onSubmit: () => sendCode.mutate({
            auth,
            phoneOrEmail,
        }, {
            onSuccess: (_, vars) => {
                if (vars.auth === "phone") {
                    setScreen({
                        screen: "otp",
                        auth: {
                            strategy: vars.auth,
                            phoneNumber: vars.phoneOrEmail,
                        },
                        wallet,
                    });
                }
                else {
                    setScreen({
                        screen: "otp",
                        auth: { strategy: vars.auth, email: vars.phoneOrEmail },
                        wallet,
                    });
                }
            },
            onError: (error) => {
                // TODO (rn) - handle error toast or input error border/label
                Alert.alert("Error", error.message);
            },
        }), isSubmitting: sendCode.isPending }));
}
export function OtpLogin(props) {
    const { theme, auth, wallet, client, connector } = props;
    const [verificationCode, setVerificationCode] = useState("");
    const connectInAppWallet = async () => {
        if (!verificationCode || !verificationCode)
            return;
        await connector({
            wallet,
            connectFn: async (chain) => {
                if (auth.strategy === "phone") {
                    await wallet.connect({
                        client,
                        strategy: auth.strategy,
                        phoneNumber: auth.phoneNumber,
                        verificationCode,
                        chain,
                    });
                }
                else {
                    await wallet.connect({
                        client,
                        strategy: auth.strategy,
                        email: auth.email,
                        verificationCode,
                        chain,
                    });
                }
                await setLastAuthProvider(auth.strategy, nativeLocalStorage);
                return wallet;
            },
            authMethod: auth.strategy,
        });
    };
    return (_jsxs(_Fragment, { children: [_jsxs(View, { style: {
                    flexDirection: "column",
                    justifyContent: "center",
                    alignItems: "center",
                }, children: [_jsx(ThemedText, { theme: theme, style: { color: theme.colors.secondaryText }, children: "Enter the verification code sent to" }), _jsx(ThemedText, { theme: theme, type: "defaultSemiBold", children: auth.strategy === "phone" ? auth.phoneNumber : auth.email })] }), _jsx(Spacer, { size: "xs" }), _jsx(ThemedInput, { theme: theme, placeholder: "Verification code", onChangeText: setVerificationCode, value: verificationCode, keyboardType: "number-pad" }), _jsx(ThemedButton, { theme: theme, onPress: connectInAppWallet, variant: "accent", children: _jsx(ThemedText, { theme: theme, type: "defaultSemiBold", style: { color: theme.colors.accentButtonText }, children: "Verify" }) })] }));
}
export function PasskeyView(props) {
    const { theme, wallet, client } = props;
    const [screen, setScreen] = useState("loading");
    const triggered = useRef(false);
    useEffect(() => {
        if (triggered.current) {
            return;
        }
        triggered.current = true;
        hasStoredPasskey(client)
            .then((isStored) => {
            if (isStored) {
                setScreen("login");
            }
            else {
                setScreen("select");
            }
        })
            .catch(() => {
            setScreen("select");
        });
    }, [client]);
    if (screen === "loading") {
        return _jsx(LoadingView, { theme: theme });
    }
    if (screen === "login" || screen === "signup") {
        return (_jsx(PasskeyLoadingView, { ...props, type: screen === "login" ? "sign-in" : "sign-up" }));
    }
    return (wallet && (_jsxs(View, { style: {
            flexDirection: "column",
            flex: 1,
            alignItems: "center",
            justifyContent: "center",
            padding: spacing.xl,
        }, children: [_jsx(RNImage, { theme: theme, size: 90, data: getAuthProviderImage("passkey"), color: theme.colors.accentButtonBg }), _jsx(Spacer, { size: "xxl" }), _jsx(ThemedButton, { theme: theme, variant: "accent", style: { width: "100%" }, onPress: async () => {
                    setScreen("signup");
                }, children: _jsx(ThemedText, { theme: theme, type: "defaultSemiBold", style: {
                        color: theme.colors.accentButtonText,
                    }, children: "Create a Passkey" }) }), _jsx(Spacer, { size: "md" }), _jsx(ThemedButton, { theme: theme, variant: "secondary", style: { width: "100%" }, onPress: async () => {
                    setScreen("login");
                }, children: _jsx(ThemedText, { theme: theme, type: "defaultSemiBold", style: {
                        color: theme.colors.secondaryButtonText,
                    }, children: "I have a Passkey" }) })] })));
}
function PasskeyLoadingView(props) {
    const { theme, type, wallet, client, connector } = props;
    const triggered = useRef(false);
    useEffect(() => {
        if (triggered.current) {
            return;
        }
        triggered.current = true;
        const connectInAppWallet = async (type) => {
            await connector({
                wallet,
                connectFn: async (chain) => {
                    await wallet.connect({
                        client,
                        strategy: "passkey",
                        type,
                        chain,
                    });
                    await setLastAuthProvider("passkey", nativeLocalStorage);
                    return wallet;
                },
                authMethod: "passkey",
            });
        };
        connectInAppWallet(type);
    }, [client, type, wallet, connector]);
    return _jsx(LoadingView, { theme: theme });
}
const styles = StyleSheet.create({
    container: {
        flexDirection: "column",
        gap: spacing.md,
    },
    row: {
        flexDirection: "row",
        flexWrap: "wrap",
        gap: spacing.md,
        justifyContent: "space-evenly",
    },
    socialIconContainer: {
        flex: 1,
        flexDirection: "column",
        alignItems: "center",
        justifyContent: "center",
        borderStyle: "solid",
        borderWidth: 1,
        borderRadius: radius.lg,
        height: 60,
    },
});
//# sourceMappingURL=InAppWalletUI.js.map