/**
 * Creates an emitter object that allows subscribing to events and emitting events.
 * @returns An emitter object with `subscribe` and `emit` methods.
 * @template TEmitter - The type of the emitter.
 * @example
 * ```ts
 * const emitter = createEmitter<{
 *  event1: string;
 * event2: number;
 * }>();
 *
 * emitter.subscribe("event1", (data) => {
 * console.log(data); // "hello"
 * });
 *
 * emitter.emit("event1", "hello");
 * ```
 */
export function createEmitter() {
    const subsribers = new Map();
    return {
        subscribe(event, cb) {
            if (!subsribers.has(event)) {
                subsribers.set(event, new Set([cb]));
            }
            else {
                subsribers.get(event)?.add(cb);
            }
            return () => {
                const subscribers = subsribers.get(event);
                if (subscribers) {
                    subscribers.delete(cb);
                }
            };
        },
        emit(event, data) {
            const subscribers = subsribers.get(event);
            if (subscribers) {
                for (const cb of subscribers) {
                    cb(data);
                }
            }
        },
    };
}
//# sourceMappingURL=tiny-emitter.js.map