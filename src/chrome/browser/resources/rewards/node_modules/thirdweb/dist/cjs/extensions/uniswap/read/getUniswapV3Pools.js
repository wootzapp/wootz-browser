"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getUniswapV3Pool = getUniswapV3Pool;
const addresses_js_1 = require("../../../constants/addresses.js");
const types_js_1 = require("../types.js");
/**
 * Finds the Uniswap V3 pools for the two tokens.
 * @param options - The token pair to find any pools for any Uniswap contract that implements getPool.
 * @returns The pools' addresses and fees.
 * @extension UNISWAP
 * @example
 * ```ts
 * import { getUniswapV3Pool } from "thirdweb/extensions/uniswap";
 * const pools = await getUniswapV3Pool({
 *  tokenA: "0x...",
 *  tokenB: "0x...",
 *  contract: factoryContract
 * });
 * ```
 */
async function getUniswapV3Pool(options) {
    const { getPool } = await Promise.resolve().then(() => require("../__generated__/IUniswapV3Factory/read/getPool.js"));
    const promises = Object.values(types_js_1.UniswapFee)
        .filter((value) => typeof value === "number")
        .map(async (fee) => {
        const poolAddress = await getPool({
            contract: options.contract,
            tokenA: options.tokenA,
            tokenB: options.tokenB,
            fee: Number(fee),
        });
        return {
            poolFee: Number(fee),
            poolAddress,
        };
    });
    const results = await Promise.all(promises);
    const validPools = results.filter((result) => result.poolAddress && result.poolAddress !== addresses_js_1.ADDRESS_ZERO);
    return validPools;
}
//# sourceMappingURL=getUniswapV3Pools.js.map