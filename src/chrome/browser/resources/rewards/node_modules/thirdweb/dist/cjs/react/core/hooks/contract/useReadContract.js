"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.useReadContract = useReadContract;
const react_query_1 = require("@tanstack/react-query");
const read_contract_js_1 = require("../../../../transaction/read-contract.js");
const function_id_js_1 = require("../../../../utils/function-id.js");
const json_js_1 = require("../../../../utils/json.js");
function useReadContract(extensionOrOptions, options) {
    // extension case
    if (typeof extensionOrOptions === "function") {
        if (!options) {
            throw new Error(`Missing second argument for "useReadContract(<extension>, <options>)" hook.`);
        }
        const { queryOptions, contract, ...params } = options;
        const query = (0, react_query_1.queryOptions)({
            queryKey: [
                "readContract",
                contract.chain.id,
                contract.address,
                (0, function_id_js_1.getFunctionId)(extensionOrOptions),
                (0, json_js_1.stringify)(params),
            ],
            // @ts-expect-error - TODO: clean up the type issues here
            queryFn: () => extensionOrOptions({ ...params, contract }),
            ...queryOptions,
        });
        // TODO - FIX LATER
        // biome-ignore lint/correctness/useHookAtTopLevel: <explanation>
        return (0, react_query_1.useQuery)(query);
    }
    // raw tx case
    if ("method" in extensionOrOptions) {
        const { queryOptions, ...tx } = extensionOrOptions;
        const query = (0, react_query_1.queryOptions)({
            queryKey: [
                "readContract",
                tx.contract.chain.id,
                tx.contract.address,
                tx.method,
                (0, json_js_1.stringify)(tx.params),
            ],
            queryFn: () => (0, read_contract_js_1.readContract)(extensionOrOptions),
            ...queryOptions,
        });
        // TODO - FIX LATER
        // biome-ignore lint/correctness/useHookAtTopLevel: <explanation>
        return (0, react_query_1.useQuery)(query);
    }
    throw new Error(`Invalid "useReadContract" options. Expected either a read extension or a transaction object.`);
}
//# sourceMappingURL=useReadContract.js.map