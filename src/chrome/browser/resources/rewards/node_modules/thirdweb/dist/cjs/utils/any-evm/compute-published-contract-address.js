"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.computePublishedContractAddress = computePublishedContractAddress;
exports.computeContractAddress = computeContractAddress;
const compute_deployment_address_js_1 = require("./compute-deployment-address.js");
const compute_published_contract_deploy_info_js_1 = require("./compute-published-contract-deploy-info.js");
/**
 * Predicts the implementation address of any published contract
 * @param args - The arguments for predicting the address of a published contract.
 * @param args.client - The Thirdweb client.
 * @param args.chain - The chain to predict the address on.
 * @param args.constructorParams - The parameters for the contract constructor.
 * @param args.contractId - The contract id.
 * @param args.publisher - The publisher of the contract.
 * @param args.version - The version of the contract.
 * @example
 * ```ts
 * import { computePublishedContractAddress } from "thirdweb/deploys";
 *
 * const contractMetadata = await fetchPublishedContractMetadata({
 *  client,
 *  chain,
 * });
 * const address = await computePublishedContractAddress({
 *   client,
 *   chain,
 *   contractId: "AccountFactory",
 *   constructorParams,
 * });
 * ```
 * @returns A promise that resolves to the predicted address of the contract.
 * @extension DEPLOY
 */
async function computePublishedContractAddress(args) {
    const info = await (0, compute_published_contract_deploy_info_js_1.computeDeploymentInfoFromContractId)(args);
    return (0, compute_deployment_address_js_1.computeDeploymentAddress)(info);
}
/**
 * @internal
 */
async function computeContractAddress(args) {
    const info = await (0, compute_published_contract_deploy_info_js_1.computeDeploymentInfoFromMetadata)(args);
    return (0, compute_deployment_address_js_1.computeDeploymentAddress)(info);
}
//# sourceMappingURL=compute-published-contract-address.js.map