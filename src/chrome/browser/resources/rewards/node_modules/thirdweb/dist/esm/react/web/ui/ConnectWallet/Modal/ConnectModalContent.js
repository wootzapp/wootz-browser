"use client";
import { jsx as _jsx, Fragment as _Fragment, jsxs as _jsxs } from "react/jsx-runtime";
import { Suspense, lazy, useCallback } from "react";
import { useSiweAuth, } from "../../../../core/hooks/auth/useSiweAuth.js";
import { useActiveAccount } from "../../../../core/hooks/wallets/useActiveAccount.js";
import { useActiveWallet } from "../../../../core/hooks/wallets/useActiveWallet.js";
import { useSetActiveWallet } from "../../../../core/hooks/wallets/useSetActiveWallet.js";
import { useConnectionManager } from "../../../../core/providers/connection-manager.js";
import { useSetSelectionData } from "../../../providers/wallet-ui-states-provider.js";
import { LoadingScreen } from "../../../wallets/shared/LoadingScreen.js";
import { WalletSelector } from "../WalletSelector.js";
import { onModalUnmount, reservedScreens } from "../constants.js";
import { SignatureScreen } from "../screens/SignatureScreen.js";
import { StartScreen } from "../screens/StartScreen.js";
import { AnyWalletConnectUI } from "./AnyWalletConnectUI.js";
import { ConnectModalCompactLayout, ConnectModalWideLayout, } from "./ConnectModalSkeleton.js";
import { SmartConnectUI } from "./SmartWalletConnectUI.js";
import { ScreenSetupContext } from "./screen.js";
const AllWalletsUI = /* @__PURE__ */ lazy(() => import("./AllWalletsUI.js"));
/**
 * @internal
 */
export const ConnectModalContent = (props) => {
    const { setModalVisibility, onClose, shouldSetActive } = props;
    const { screen, setScreen, initialScreen } = props.screenSetup;
    const setActiveWallet = useSetActiveWallet();
    const setSelectionData = useSetSelectionData();
    const activeWallet = useActiveWallet();
    const activeAccount = useActiveAccount();
    const siweAuth = useSiweAuth(activeWallet, activeAccount, props.auth);
    const showSignatureScreen = siweAuth.requiresAuth && !siweAuth.isLoggedIn;
    const connectionManager = useConnectionManager();
    const handleConnected = useCallback((wallet) => {
        if (shouldSetActive) {
            setActiveWallet(wallet);
        }
        else {
            connectionManager.addConnectedWallet(wallet);
        }
        if (props.onConnect) {
            props.onConnect(wallet);
        }
        onModalUnmount(() => {
            setSelectionData({});
            setModalVisibility(true);
        });
        // show sign in screen if required
        if (showSignatureScreen) {
            setScreen(reservedScreens.signIn);
        }
        else {
            setScreen(initialScreen);
            onClose?.();
        }
    }, [
        setModalVisibility,
        onClose,
        props.onConnect,
        setActiveWallet,
        showSignatureScreen,
        setScreen,
        setSelectionData,
        shouldSetActive,
        initialScreen,
        connectionManager,
    ]);
    const handleBack = useCallback(() => {
        setSelectionData({});
        setScreen(initialScreen);
    }, [setScreen, initialScreen, setSelectionData]);
    const walletList = (_jsx(WalletSelector, { title: props.meta.title || props.connectLocale.defaultModalTitle, wallets: props.wallets, selectWallet: (newWallet) => {
            if (newWallet.onConnectRequested) {
                newWallet
                    .onConnectRequested()
                    .then(() => setScreen(newWallet))
                    .catch(console.error); // TODO propagate error down
            }
            else {
                setScreen(newWallet);
            }
        }, onShowAll: () => {
            setScreen(reservedScreens.showAll);
        }, done: handleConnected, goBack: props.wallets.length > 1 ? handleBack : undefined, setModalVisibility: setModalVisibility, client: props.client, connectLocale: props.connectLocale, hideHeader: props.hideHeader, recommendedWallets: props.recommendedWallets, accountAbstraction: props.accountAbstraction, chain: props.chain, showAllWallets: props.showAllWallets, chains: props.chains, walletConnect: props.walletConnect, meta: props.meta, size: props.size, modalHeader: props.modalHeader, walletIdsToHide: props.walletIdsToHide }));
    const showAll = (_jsx(Suspense, { fallback: _jsx(LoadingScreen, {}), children: _jsx(AllWalletsUI, { onBack: handleBack, onSelect: setScreen, client: props.client, connectLocale: props.connectLocale, recommendedWallets: props.recommendedWallets, specifiedWallets: props.wallets, size: props.size }) }));
    const getStarted = (_jsx(StartScreen, { client: props.client, connectLocale: props.connectLocale, meta: props.meta, welcomeScreen: props.welcomeScreen }));
    const goBack = props.wallets.length > 1 ? handleBack : undefined;
    const getWalletUI = (wallet) => {
        if (props.accountAbstraction) {
            return (_jsx(SmartConnectUI, { accountAbstraction: props.accountAbstraction, done: (smartWallet) => {
                    handleConnected(smartWallet);
                }, personalWallet: wallet, onBack: goBack, setModalVisibility: props.setModalVisibility, meta: props.meta, size: props.size, chain: props.chain, chains: props.chains, client: props.client, walletConnect: props.walletConnect, connectLocale: props.connectLocale }, wallet.id));
        }
        return (_jsx(AnyWalletConnectUI, { wallet: wallet, onBack: goBack, done: () => {
                handleConnected(wallet);
            }, setModalVisibility: props.setModalVisibility, chain: props.chain, chains: props.chains, client: props.client, meta: props.meta, size: props.size, walletConnect: props.walletConnect, connectLocale: props.connectLocale }, wallet.id));
    };
    const signatureScreen = (_jsx(SignatureScreen, { onDone: onClose, modalSize: props.size, termsOfServiceUrl: props.meta.termsOfServiceUrl, privacyPolicyUrl: props.meta.privacyPolicyUrl, auth: props.auth, client: props.client, connectLocale: props.connectLocale }));
    return (_jsx(ScreenSetupContext.Provider, { value: props.screenSetup, children: props.size === "wide" ? (_jsx(ConnectModalWideLayout, { left: walletList, right: _jsxs(_Fragment, { children: [screen === reservedScreens.signIn && signatureScreen, screen === reservedScreens.main && getStarted, screen === reservedScreens.getStarted && getStarted, screen === reservedScreens.showAll && showAll, typeof screen !== "string" && getWalletUI(screen)] }) })) : (_jsxs(ConnectModalCompactLayout, { children: [screen === reservedScreens.signIn && signatureScreen, screen === reservedScreens.main && walletList, screen === reservedScreens.getStarted && getStarted, screen === reservedScreens.showAll && showAll, typeof screen !== "string" && getWalletUI(screen)] })) }));
};
//# sourceMappingURL=ConnectModalContent.js.map