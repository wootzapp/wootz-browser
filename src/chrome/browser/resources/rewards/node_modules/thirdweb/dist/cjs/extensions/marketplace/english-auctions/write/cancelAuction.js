"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.cancelAuction = cancelAuction;
const cancelAuction_js_1 = require("../../__generated__/IEnglishAuctions/write/cancelAuction.js");
const getWinningBid_js_1 = require("../read/getWinningBid.js");
/**
 * Cancels an auction by providing the necessary options.
 *
 * @param options - The options for canceling the auction.
 * @returns A transaction that can be sent to cancel the auction.
 * @throws An error when sending the transaction if the auction has an existing bid and cannot be canceled.
 * @extension MARKETPLACE
 * @example
 * ```ts
 * import { cancelAuction } from "thirdweb/extensions/marketplace";
 * import { sendTransaction } from "thirdweb";
 *
 * const transaction = cancelAuction({
 *  contract,
 *  auctionId: 0n,
 * });
 *
 * await sendTransaction({ transaction, account });
 * ```
 */
function cancelAuction(options) {
    return (0, cancelAuction_js_1.cancelAuction)({
        contract: options.contract,
        asyncParams: async () => {
            const winningBid = await (0, getWinningBid_js_1.getWinningBid)({
                contract: options.contract,
                auctionId: options.auctionId,
            });
            if (winningBid) {
                throw new Error("Cannot cancel an auction with an existing bid");
            }
            return {
                auctionId: options.auctionId,
                overrides: {
                    extraGas: 50000n, // add extra gas to account for router call
                },
            };
        },
    });
}
//# sourceMappingURL=cancelAuction.js.map