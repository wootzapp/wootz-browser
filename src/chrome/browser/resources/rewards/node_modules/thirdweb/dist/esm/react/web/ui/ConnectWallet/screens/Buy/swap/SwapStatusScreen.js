import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from "react/jsx-runtime";
import { CheckCircledIcon } from "@radix-ui/react-icons";
import { useQueryClient } from "@tanstack/react-query";
import { useEffect, useRef } from "react";
import { iconSize } from "../../../../../../core/design-system/index.js";
import { useBuyWithCryptoStatus } from "../../../../../../core/hooks/pay/useBuyWithCryptoStatus.js";
import { invalidateWalletBalance } from "../../../../../../core/providers/invalidateWalletBalance.js";
import { Spacer } from "../../../../components/Spacer.js";
import { Spinner } from "../../../../components/Spinner.js";
import { Container, ModalHeader } from "../../../../components/basic.js";
import { Button } from "../../../../components/buttons.js";
import { Text } from "../../../../components/text.js";
import { AccentFailIcon } from "../../../icons/AccentFailIcon.js";
import { SwapTxDetailsTable } from "../pay-transactions/SwapDetailsScreen.js";
export function SwapStatusScreen(props) {
    const { onSuccess } = props;
    const swapStatus = useBuyWithCryptoStatus({
        client: props.client,
        transactionHash: props.swapTxHash,
    });
    let uiStatus = "pending";
    if (swapStatus.data?.status === "COMPLETED") {
        uiStatus = "success";
    }
    else if (swapStatus.data?.status === "FAILED") {
        uiStatus = "failed";
    }
    if (swapStatus.data?.status === "COMPLETED" &&
        swapStatus.data?.subStatus === "PARTIAL_SUCCESS") {
        uiStatus = "partialSuccess";
    }
    const purchaseCbCalled = useRef(false);
    useEffect(() => {
        if (purchaseCbCalled.current || !onSuccess) {
            return;
        }
        if (swapStatus.data?.status === "COMPLETED") {
            purchaseCbCalled.current = true;
            onSuccess(swapStatus.data);
        }
    }, [onSuccess, swapStatus]);
    const queryClient = useQueryClient();
    const balanceInvalidated = useRef(false);
    useEffect(() => {
        if ((uiStatus === "success" || uiStatus === "partialSuccess") &&
            !balanceInvalidated.current) {
            balanceInvalidated.current = true;
            invalidateWalletBalance(queryClient);
        }
    }, [queryClient, uiStatus]);
    const swapDetails = swapStatus.data && swapStatus.data.status !== "NOT_FOUND" ? (_jsx(SwapTxDetailsTable, { status: swapStatus.data, type: "status", hideStatusRow: true, client: props.client })) : props.quote ? (_jsx(SwapTxDetailsTable, { type: "quote", quote: props.quote, client: props.client })) : null;
    return (_jsx(Container, { animate: "fadein", children: _jsxs(Container, { p: "lg", children: [_jsx(ModalHeader, { title: props.title, onBack: props.onBack }), _jsx(Spacer, { y: "sm" }), uiStatus === "success" && (_jsxs(_Fragment, { children: [_jsx(Spacer, { y: "md" }), _jsxs(Container, { color: "success", flex: "column", center: "x", children: [_jsx(CheckCircledIcon, { width: iconSize["3xl"], height: iconSize["3xl"] }), _jsx(Spacer, { y: "sm" }), _jsx(Text, { color: "primaryText", size: "lg", children: "Buy Complete" })] }), _jsx(Spacer, { y: "xl" }), swapDetails, _jsx(Spacer, { y: "sm" }), !props.isEmbed && (_jsx(Button, { variant: "accent", fullWidth: true, onClick: props.onDone, children: props.transactionMode ? "Continue Transaction" : "Done" }))] })), uiStatus === "partialSuccess" &&
                    swapStatus.data?.status !== "NOT_FOUND" &&
                    swapStatus.data?.destination && (_jsxs(_Fragment, { children: [_jsx(Spacer, { y: "lg" }), _jsxs(Container, { color: "success", flex: "column", center: "x", children: [_jsx(AccentFailIcon, { size: iconSize["3xl"] }), _jsx(Spacer, { y: "xl" }), _jsx(Text, { color: "primaryText", size: "lg", children: "Incomplete" }), _jsx(Spacer, { y: "sm" }), _jsxs(Text, { size: "sm", color: "danger", children: ["Expected ", swapStatus.data.quote.toToken.symbol, ", Got", " ", swapStatus.data.destination.token.symbol, " instead"] })] }), _jsx(Spacer, { y: "xl" }), swapDetails] })), uiStatus === "failed" && (_jsxs(_Fragment, { children: [_jsx(Spacer, { y: "xxl" }), _jsxs(Container, { flex: "column", children: [_jsxs(Container, { flex: "column", center: "both", children: [_jsx(AccentFailIcon, { size: iconSize["3xl"] }), _jsx(Spacer, { y: "xl" }), _jsx(Text, { color: "primaryText", size: "lg", children: "Transaction Failed" }), _jsx(Spacer, { y: "sm" }), _jsxs(Text, { size: "sm", children: ["Your transaction ", `couldn't`, " be processed"] })] }), _jsx(Spacer, { y: "md" }), _jsx(Button, { variant: "accent", fullWidth: true, onClick: props.onTryAgain, children: "Try Again" }), _jsx(Spacer, { y: "xl" }), swapDetails] })] })), uiStatus === "pending" && (_jsxs(_Fragment, { children: [_jsx(Spacer, { y: "xl" }), _jsxs(Container, { flex: "column", animate: "fadein", center: "both", children: [_jsx("div", { style: {
                                        position: "relative",
                                        display: "flex",
                                        alignItems: "center",
                                        justifyContent: "center",
                                    }, children: _jsx(Spinner, { size: "3xl", color: "accentText" }) }), _jsx(Spacer, { y: "lg" }), _jsx(Text, { color: "primaryText", size: "lg", children: "Buy Pending" })] }), _jsx(Spacer, { y: "xxl" }), swapDetails] }))] }) }));
}
//# sourceMappingURL=SwapStatusScreen.js.map