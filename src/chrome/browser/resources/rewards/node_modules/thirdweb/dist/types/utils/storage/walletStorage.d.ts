import type { AsyncStorage } from "./AsyncStorage.js";
/**
 * Save the connection params to storage for given wallet id
 * It saves an object with wallet id as key and params as value to storage on CONNECT_PARAMS_MAP_KEY
 * CONNECT_PARAMS_MAP_KEY: { walletId1: walletId1Params, walletId2: walletId2Params, ... }
 *
 * @param walletId
 * @param params
 * @internal
 */
export declare function saveConnectParamsToStorage<T extends object>(storage: AsyncStorage, walletId: string, params: T): Promise<void>;
/**
 * Save the connection params to storage for given wallet id
 * It saves an object with wallet id as key and params as value to storage on CONNECT_PARAMS_MAP_KEY
 * CONNECT_PARAMS_MAP_KEY: { walletId1: walletId1Params, walletId2: walletId2Params, ... }
 *
 * @param walletId
 * @param params
 * @internal
 */
export declare function deleteConnectParamsFromStorage(storage: AsyncStorage, walletId: string): Promise<void>;
/**
 * Get the saved connection params from storage for given wallet id
 * @internal
 */
export declare function getSavedConnectParamsFromStorage<T extends object>(storage: AsyncStorage, walletId: string): Promise<T | null>;
/**
 * Wallet that uses a personal wallet must save the connection params to storage of this type
 */
export type WithPersonalWalletConnectionOptions = {
    personalWalletId: string;
};
//# sourceMappingURL=walletStorage.d.ts.map