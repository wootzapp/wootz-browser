import type { FileOrBufferOrString } from "../../../storage/upload/types.js";
import type { BaseTransactionOptions } from "../../../transaction/types.js";
import type { Prettify } from "../../../utils/type-utils.js";
/**
 * Represents the input data for creating an NFT (Non-Fungible Token).
 * @extension ERC1155
 */
type NFTInput = Prettify<{
    name?: string;
    description?: string;
    image?: FileOrBufferOrString;
    animation_url?: FileOrBufferOrString;
    external_url?: FileOrBufferOrString;
    background_color?: string;
    properties?: Record<string, unknown> | Array<Record<string, unknown>>;
} & Record<string, unknown>>;
/**
 * @extension ERC1155
 */
export type LazyMintParams = {
    nfts: (NFTInput | string)[];
};
/**
 * Lazily mints ERC1155 tokens.
 * @param options - The options for the lazy minting process.
 * @returns A promise that resolves to the prepared contract call.
 * @extension ERC1155
 * @example
 * ```ts
 * import { lazyMint } from "thirdweb/extensions/erc1155";
 * import { sendTransaction } from "thirdweb";
 *
 * const transaction = lazyMint({
 * contract,
 * nfts: [
 *    {
 *      name: "My NFT",
 *      description: "This is my NFT",
 *      image: "https://example.com/image.png",
 *    },
 *  ],
 * });
 *
 * await sendTransaction({ transaction, account });
 * ```
 */
export declare function lazyMint(options: BaseTransactionOptions<LazyMintParams>): import("../../../transaction/prepare-transaction.js").PreparedTransaction<any, import("abitype").AbiFunction, import("../../../transaction/prepare-transaction.js").PrepareTransactionOptions>;
/**
 * Checks if the `lazyMint` method is supported by the given contract.
 * @param availableSelectors An array of 4byte function selectors of the contract. You can get this in various ways, such as using "whatsabi" or if you have the ABI of the contract available you can use it to generate the selectors.
 * @returns A boolean indicating if the `lazyMint` method is supported.
 * @extension ERC1155
 * @example
 * ```ts
 * import { isLazyMintSupported } from "thirdweb/extensions/erc1155";
 *
 * const supported = isLazyMintSupported(["0x..."]);
 * ```
 */
export declare function isLazyMintSupported(availableSelectors: string[]): boolean;
export {};
//# sourceMappingURL=lazyMint.d.ts.map