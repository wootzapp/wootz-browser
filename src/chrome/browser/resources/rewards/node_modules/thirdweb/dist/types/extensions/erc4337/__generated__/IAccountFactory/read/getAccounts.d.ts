import type { AbiParameterToPrimitiveType } from "abitype";
import type { BaseTransactionOptions } from "../../../../../transaction/types.js";
import type { Hex } from "../../../../../utils/encoding/hex.js";
/**
 * Represents the parameters for the "getAccounts" function.
 */
export type GetAccountsParams = {
    start: AbiParameterToPrimitiveType<{
        type: "uint256";
        name: "start";
    }>;
    end: AbiParameterToPrimitiveType<{
        type: "uint256";
        name: "end";
    }>;
};
export declare const FN_SELECTOR: "0xe68a7c3b";
/**
 * Checks if the `getAccounts` method is supported by the given contract.
 * @param availableSelectors An array of 4byte function selectors of the contract. You can get this in various ways, such as using "whatsabi" or if you have the ABI of the contract available you can use it to generate the selectors.
 * @returns A boolean indicating if the `getAccounts` method is supported.
 * @extension ERC4337
 * @example
 * ```ts
 * import { isGetAccountsSupported } from "thirdweb/extensions/erc4337";
 * const supported = isGetAccountsSupported(["0x..."]);
 * ```
 */
export declare function isGetAccountsSupported(availableSelectors: string[]): boolean;
/**
 * Encodes the parameters for the "getAccounts" function.
 * @param options - The options for the getAccounts function.
 * @returns The encoded ABI parameters.
 * @extension ERC4337
 * @example
 * ```ts
 * import { encodeGetAccountsParams } from "thirdweb/extensions/erc4337";
 * const result = encodeGetAccountsParams({
 *  start: ...,
 *  end: ...,
 * });
 * ```
 */
export declare function encodeGetAccountsParams(options: GetAccountsParams): `0x${string}`;
/**
 * Encodes the "getAccounts" function into a Hex string with its parameters.
 * @param options - The options for the getAccounts function.
 * @returns The encoded hexadecimal string.
 * @extension ERC4337
 * @example
 * ```ts
 * import { encodeGetAccounts } from "thirdweb/extensions/erc4337";
 * const result = encodeGetAccounts({
 *  start: ...,
 *  end: ...,
 * });
 * ```
 */
export declare function encodeGetAccounts(options: GetAccountsParams): `${typeof FN_SELECTOR}${string}`;
/**
 * Decodes the result of the getAccounts function call.
 * @param result - The hexadecimal result to decode.
 * @returns The decoded result as per the FN_OUTPUTS definition.
 * @extension ERC4337
 * @example
 * ```ts
 * import { decodeGetAccountsResult } from "thirdweb/extensions/erc4337";
 * const result = decodeGetAccountsResultResult("...");
 * ```
 */
export declare function decodeGetAccountsResult(result: Hex): readonly string[];
/**
 * Calls the "getAccounts" function on the contract.
 * @param options - The options for the getAccounts function.
 * @returns The parsed result of the function call.
 * @extension ERC4337
 * @example
 * ```ts
 * import { getAccounts } from "thirdweb/extensions/erc4337";
 *
 * const result = await getAccounts({
 *  contract,
 *  start: ...,
 *  end: ...,
 * });
 *
 * ```
 */
export declare function getAccounts(options: BaseTransactionOptions<GetAccountsParams>): Promise<readonly string[]>;
//# sourceMappingURL=getAccounts.d.ts.map