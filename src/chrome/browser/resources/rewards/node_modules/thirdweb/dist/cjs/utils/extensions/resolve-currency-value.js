"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.resolveCurrencyValue = resolveCurrencyValue;
const addresses_js_1 = require("../../constants/addresses.js");
const units_js_1 = require("../units.js");
async function resolveCurrencyValue(options) {
    if ((0, addresses_js_1.isNativeTokenAddress)(options.currencyAddress)) {
        const [name, decimals, symbol] = await Promise.all([
            options.chain.nativeCurrency?.name ??
                Promise.resolve().then(() => require("../../chains/utils.js")).then(({ getChainNativeCurrencyName }) => getChainNativeCurrencyName(options.chain)),
            options.chain.nativeCurrency?.decimals ??
                Promise.resolve().then(() => require("../../chains/utils.js")).then(({ getChainDecimals }) => getChainDecimals(options.chain)),
            options.chain.nativeCurrency?.symbol ??
                Promise.resolve().then(() => require("../../chains/utils.js")).then(({ getChainSymbol }) => getChainSymbol(options.chain)),
        ]);
        return {
            name,
            decimals,
            symbol,
            displayValue: (0, units_js_1.toTokens)(options.wei, decimals),
            value: options.wei,
        };
    }
    // else it's a erc20
    const [{ getContract }, { getCurrencyMetadata }] = await Promise.all([
        Promise.resolve().then(() => require("../../contract/contract.js")),
        Promise.resolve().then(() => require("../../extensions/erc20/read/getCurrencyMetadata.js")),
    ]);
    const contract = getContract({
        address: options.currencyAddress,
        chain: options.chain,
        client: options.client,
    });
    const metadata = await getCurrencyMetadata({ contract });
    return {
        name: metadata.name,
        decimals: metadata.decimals,
        symbol: metadata.symbol,
        displayValue: (0, units_js_1.toTokens)(options.wei, metadata.decimals),
        value: options.wei,
    };
}
//# sourceMappingURL=resolve-currency-value.js.map