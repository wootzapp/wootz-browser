{"version":3,"file":"ModelViewerGLTFInstance-spec.js","sourceRoot":"","sources":["../../../../src/test/three-components/gltf-instance/ModelViewerGLTFInstance-spec.ts"],"names":[],"mappings":"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","sourcesContent":["/* @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {BufferGeometry, DoubleSide, Mesh, MeshStandardMaterial} from 'three';\nimport {GLTF} from 'three/examples/jsm/loaders/GLTFLoader.js';\n\nimport {ModelViewerGLTFInstance} from '../../../three-components/gltf-instance/ModelViewerGLTFInstance.js';\nimport {PreparedGLTF} from '../../../three-components/GLTFInstance.js';\nimport {createFakeThreeGLTF} from '../../helpers.js';\n\n\n\nconst expect = chai.expect;\n\nsuite('ModelViewerGLTFInstance', () => {\n  let rawGLTF: GLTF;\n  let preparedGLTF: PreparedGLTF;\n\n  setup(async () => {\n    rawGLTF = createFakeThreeGLTF();\n\n    const materialOne = new MeshStandardMaterial();\n    const materialTwo = new MeshStandardMaterial();\n\n    materialTwo.transparent = true;\n    materialTwo.side = DoubleSide;\n\n    const meshOne = new Mesh(new BufferGeometry(), materialOne);\n    const meshTwo = new Mesh(new BufferGeometry(), materialOne);\n    const meshThree = new Mesh(new BufferGeometry(), materialTwo);\n\n    rawGLTF.scene.add(meshOne, meshTwo, meshThree);\n\n    preparedGLTF = await ModelViewerGLTFInstance.prepare(rawGLTF);\n  });\n\n  suite('with a prepared GLTF', () => {\n    suite('when cloned', () => {\n      let cloneInstance: ModelViewerGLTFInstance;\n      let gltfInstance: ModelViewerGLTFInstance;\n\n      setup(async () => {\n        gltfInstance = new ModelViewerGLTFInstance(preparedGLTF);\n        cloneInstance = await gltfInstance.clone<ModelViewerGLTFInstance>();\n      });\n\n      teardown(() => {\n        gltfInstance.dispose();\n        cloneInstance.dispose();\n      });\n\n      test('clones materials in a mesh', () => {\n        const [originalMeshOne, originalMeshTwo, originalMeshThree] =\n            gltfInstance.scene.children as [Mesh, Mesh, Mesh];\n        const [meshOne, meshTwo, meshThree] =\n            cloneInstance.scene.children as [Mesh, Mesh, Mesh];\n\n        expect(originalMeshOne.material).to.not.be.equal(meshOne.material);\n        expect(originalMeshTwo.material).to.not.be.equal(meshTwo.material);\n        expect(originalMeshThree.material).to.not.be.equal(meshThree.material);\n      });\n\n      test('only clones a discrete material once', () => {\n        const [meshOne, meshTwo, meshThree] =\n            cloneInstance.scene.children as [Mesh, Mesh, Mesh];\n\n        expect(meshOne.material).to.be.equal(meshTwo.material);\n        expect(meshOne.material).to.not.be.equal(meshThree.material);\n      });\n    });\n  });\n\n  suite('preparing the GLTF', () => {\n    test('sets meshes to cast shadows', () => {\n      (preparedGLTF.scene.children as [Mesh, Mesh, Mesh])\n          .forEach(mesh => expect(mesh.castShadow).to.be.true);\n    });\n\n    test('disables frustum culling on meshes', () => {\n      (preparedGLTF.scene.children as [Mesh, Mesh, Mesh])\n          .forEach(mesh => expect(mesh.frustumCulled).to.be.false);\n    });\n  });\n});\n"]}