{"version":3,"file":"ARRenderer-spec.js","sourceRoot":"","sources":["../../../src/test/three-components/ARRenderer-spec.ts"],"names":[],"mappings":"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","sourcesContent":["/* @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Matrix4, PerspectiveCamera, Vector2, Vector3} from 'three';\n\nimport {IS_ANDROID} from '../../constants.js';\nimport {$scene} from '../../model-viewer-base.js';\nimport {ModelViewerElement} from '../../model-viewer.js';\nimport {ARRenderer} from '../../three-components/ARRenderer.js';\nimport {ModelScene} from '../../three-components/ModelScene.js';\nimport {Renderer} from '../../three-components/Renderer.js';\nimport {waitForEvent} from '../../utilities.js';\nimport {assetPath} from '../helpers.js';\n\nconst expect = chai.expect;\n\nclass MockXRFrame implements XRFrame {\n  constructor(public session: XRSession) {\n  }\n\n  readonly predictedDisplayTime = 0;\n\n  // We don't use nor test the returned XRPose other than its existence.\n  getPose(_xrSpace: XRSpace, _frameOfRef: XRReferenceSpace) {\n    return {} as XRPose;\n  }\n\n  getViewerPose(_referenceSpace?: XRReferenceSpace): XRViewerPose {\n    // Rotate 180 degrees on Y (so it's not the default)\n    // and angle 45 degrees towards the ground, like a phone.\n    const matrix = new Matrix4()\n                       .identity()\n                       .makeRotationAxis(new Vector3(0, 1, 0), Math.PI)\n                       .multiply(new Matrix4().makeRotationAxis(\n                           new Vector3(1, 0, 0), -Math.PI / 4));\n    matrix.setPosition(10, 2, 3);\n    const transform: XRRigidTransform = {\n      matrix: matrix.elements as unknown as Float32Array,\n      position: {} as DOMPointReadOnly,\n      orientation: {} as DOMPointReadOnly,\n      inverse: {} as XRRigidTransform\n    };\n    const camera = new PerspectiveCamera();\n    const view: XRView = {\n      eye: {} as XREye,\n      projectionMatrix: camera.projectionMatrix.elements as unknown as\n          Float32Array,\n      transform: transform,\n      requestViewportScale: (_scale: number|null) => {}\n    };\n    const viewerPos: XRViewerPose = {\n      transform: transform,\n      views: [view],\n      emulatedPosition: false\n    };\n\n    return viewerPos;\n  }\n\n  getHitTestResults(_xrHitTestSource: XRHitTestSource) {\n    return [];\n  }\n\n  getHitTestResultsForTransientInput(_hitTestSource:\n                                         XRTransientInputHitTestSource) {\n    return [];\n  }\n}\n\nsuite('ARRenderer', () => {\n  let element: ModelViewerElement;\n  let arRenderer: ARRenderer;\n  let xrSession: XRSession;\n\n  let inputSources: Array<XRInputSource> = [];\n\n  const setInputSources = (sources: Array<XRInputSource>) => {\n    inputSources = sources;\n  };\n\n  const stubWebXrInterface = (arRenderer: ARRenderer) => {\n    arRenderer.resolveARSession = async () => {\n      class FakeSession extends EventTarget implements XRSession {\n        public renderState: XRRenderState = {\n          baseLayer: {\n            getViewport: () => {\n              return {x: 0, y: 0, width: 320, height: 240} as XRViewport\n            }\n          } as unknown as XRLayer\n        } as XRRenderState;\n\n        public hitTestSources: Set<XRHitTestSource> =\n            new Set<XRHitTestSource>();\n\n        async updateRenderState(_object: any) {\n        }\n\n        requestFrameOfReference() {\n          return {};\n        }\n\n        async requestReferenceSpace(_type: XRReferenceSpaceType):\n            Promise<XRReferenceSpace> {\n          return {} as XRReferenceSpace;\n        }\n\n        get inputSources(): Array<XRInputSource> {\n          return inputSources;\n        }\n\n        async requestHitTestSource(_options: XRHitTestOptionsInit):\n            Promise<XRHitTestSource> {\n          const result = {cancel: () => {}};\n\n          this.hitTestSources.add(result);\n\n          return result;\n        }\n\n        async requestHitTestSourceForTransientInput(\n            _options: XRTransientInputHitTestOptionsInit) {\n          const result = {cancel: () => {}};\n\n          this.hitTestSources.add(result);\n\n          return result;\n        }\n\n        requestAnimationFrame() {\n          return 1;\n        }\n\n        cancelAnimationFrame() {\n        }\n\n        async end() {\n          this.dispatchEvent(new CustomEvent('end'));\n        }\n\n        readonly environmentBlendMode = {} as XREnvironmentBlendMode;\n        readonly visibilityState = {} as XRVisibilityState;\n        async updateTargetFrameRate(_rate: number) {\n          return;\n        }\n        onend() {\n        }\n        oninputsourceschange() {\n        }\n        onselect() {\n        }\n        onselectstart() {\n        }\n        onselectend() {\n        }\n        onsqueeze() {\n        }\n        onsqueezestart() {\n        }\n        onsqueezeend() {\n        }\n        onvisibilitychange() {\n        }\n        onframeratechange() {\n        }\n      }\n\n      xrSession = new FakeSession();\n      return xrSession;\n    };\n  };\n\n  setup(() => {\n    element = new ModelViewerElement();\n    document.body.insertBefore(element, document.body.firstChild);\n    arRenderer = Renderer.singleton.arRenderer;\n  });\n\n  teardown(() => {\n    if (element.parentNode != null) {\n      element.parentNode.removeChild(element);\n    }\n  });\n\n  // This fails on Android when karma.conf has hostname: 'bs-local.com',\n  // possibly due to not serving over HTTPS (which disables WebXR)? However,\n  // Browserstack is unstable without this hostname.\n  test('supports presenting to AR only on Android', async () => {\n    expect(await arRenderer.supportsPresentation()).to.be.equal(IS_ANDROID);\n  });\n\n  test('is not presenting if present has not been invoked', () => {\n    expect(arRenderer.isPresenting).to.be.equal(false);\n  });\n\n  suite('when presenting a scene', () => {\n    let modelScene: ModelScene;\n    let oldXRRay: any;\n\n    setup(async () => {\n      const sourceLoads = waitForEvent(element, 'poster-dismissed');\n      element.src = assetPath('models/Astronaut.glb');\n      await sourceLoads;\n      modelScene = element[$scene];\n      stubWebXrInterface(arRenderer);\n      setInputSources([]);\n\n      oldXRRay = (window as any).XRRay;\n      (window as any).XRRay = class MockXRRay implements XRRay {\n        readonly origin = new DOMPointReadOnly;\n        readonly direction = new DOMPointReadOnly;\n        matrix = new Float32Array;\n\n        constructor(_origin: DOMPointInit, _direction: DOMPointInit) {\n        }\n      }\n\n      await arRenderer.present(modelScene);\n    });\n\n    teardown(async () => {\n      (window as any).XRRay = oldXRRay;\n      await arRenderer.stopPresenting().catch(() => {});\n    });\n\n    test('presents the model at its natural scale', () => {\n      const scale = modelScene.target.getWorldScale(new Vector3());\n\n      expect(scale.x).to.be.equal(1);\n      expect(scale.y).to.be.equal(1);\n      expect(scale.z).to.be.equal(1);\n    });\n\n    suite('presentation ends', () => {\n      setup(async () => {\n        await arRenderer.stopPresenting();\n      });\n\n      test('restores the model to its natural scale', () => {\n        const scale = modelScene.target.getWorldScale(new Vector3());\n\n        expect(scale.x).to.be.equal(1);\n        expect(scale.y).to.be.equal(1);\n        expect(scale.z).to.be.equal(1);\n      });\n\n      test('restores original camera', () => {\n        expect(modelScene.camera).to.be.equal(modelScene.camera);\n      });\n\n      test('restores scene size', () => {\n        expect(modelScene.width).to.be.equal(300);\n        expect(modelScene.height).to.be.equal(150);\n      });\n    });\n\n    // We're going to need to mock out XRFrame more so it can set the camera\n    // in order to properly test this.\n\n    suite('after initial placement', () => {\n      let yaw: number;\n\n      setup(async () => {\n        arRenderer.onWebXRFrame(0, new MockXRFrame(arRenderer.currentSession!));\n        yaw = modelScene.yaw;\n      });\n\n      test('places the model oriented to the camera', () => {\n        const epsilon = 0.0001;\n        const {target, position, camera} = modelScene;\n\n        const cameraPosition = camera.position;\n        const cameraToHit = new Vector2(\n            position.x - cameraPosition.x, position.z - cameraPosition.z);\n        const forward = target.getWorldDirection(new Vector3());\n        const forwardProjection = new Vector2(forward.x, forward.z);\n\n        expect(forward.y).to.be.equal(0);\n        expect(cameraToHit.cross(forwardProjection)).to.be.closeTo(0, epsilon);\n        expect(cameraToHit.dot(forwardProjection)).to.be.lessThan(0);\n        expect(modelScene.yaw).to.be.equal(yaw);\n      });\n    });\n  });\n});\n"]}