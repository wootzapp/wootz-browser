{"version":3,"file":"sampler.js","sourceRoot":"","sources":["../../../src/features/scene-graph/sampler.ts"],"names":[],"mappings":"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","sourcesContent":["/* @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Texture as ThreeTexture} from 'three';\n\nimport {Filter, MagFilter, MinFilter, Sampler as GLTFSampler, Wrap, WrapMode} from '../../three-components/gltf-instance/gltf-2.0.js';\nimport {Sampler as DefaultedSampler} from '../../three-components/gltf-instance/gltf-defaulted.js';\n\nimport {Sampler as SamplerInterface} from './api.js';\nimport {$correlatedObjects, $onUpdate, $sourceObject, ThreeDOMElement} from './three-dom-element.js';\n\n\n\nconst isMinFilter = (() => {\n  const minFilterValues: Array<MinFilter> = [\n    Filter.Nearest,\n    Filter.Linear,\n    Filter.NearestMipmapNearest,\n    Filter.LinearMipmapLinear,\n    Filter.NearestMipmapLinear,\n    Filter.LinearMipmapLinear\n  ];\n  return (value: unknown): value is MinFilter =>\n             minFilterValues.indexOf(value as MinFilter) > -1;\n})();\n\nconst isMagFilter = (() => {\n  const magFilterValues: Array<MagFilter> = [Filter.Nearest, Filter.Linear];\n  return (value: unknown): value is MagFilter =>\n             magFilterValues.indexOf(value as MagFilter) > -1;\n})();\n\nconst isWrapMode = (() => {\n  const wrapModes: Array<WrapMode> =\n      [Wrap.ClampToEdge, Wrap.MirroredRepeat, Wrap.Repeat];\n  return (value: unknown): value is WrapMode =>\n             wrapModes.indexOf(value as WrapMode) > -1;\n})();\n\nconst isValidSamplerValue = <P extends 'minFilter'|'magFilter'|'wrapS'|'wrapT'>(\n    property: P, value: unknown): value is DefaultedSampler[P] => {\n  switch (property) {\n    case 'minFilter':\n      return isMinFilter(value);\n    case 'magFilter':\n      return isMagFilter(value);\n    case 'wrapS':\n    case 'wrapT':\n      return isWrapMode(value);\n    default:\n      throw new Error(`Cannot configure property \"${property}\" on Sampler`);\n  }\n};\n\nconst $threeTextures = Symbol('threeTextures');\nconst $setProperty = Symbol('setProperty');\nconst $sourceSampler = Symbol('sourceSampler');\n\n/**\n * Sampler facade implementation for Three.js textures\n */\nexport class Sampler extends ThreeDOMElement implements SamplerInterface {\n  private get[$threeTextures]() {\n    console.assert(\n        this[$correlatedObjects] != null && this[$correlatedObjects]!.size > 0,\n        'Sampler correlated object is undefined');\n    return this[$correlatedObjects] as Set<ThreeTexture>;\n  }\n\n  private get[$sourceSampler]() {\n    console.assert(this[$sourceObject] != null, 'Sampler source is undefined');\n    return (this[$sourceObject] as DefaultedSampler);\n  }\n\n  constructor(\n      onUpdate: () => void, texture: ThreeTexture|null,\n      gltfSampler: GLTFSampler|null) {\n    gltfSampler = gltfSampler ?? {} as GLTFSampler;\n    // These defaults represent a convergence of glTF defaults for wrap mode and\n    // Three.js defaults for filters. Per glTF 2.0 spec, a renderer may choose\n    // its own defaults for filters.\n    // @see https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#reference-sampler\n    // @see https://threejs.org/docs/#api/en/textures/Texture\n    if (gltfSampler.minFilter == null) {\n      gltfSampler.minFilter =\n          texture ? texture.minFilter as MinFilter : Filter.LinearMipmapLinear;\n    }\n    if (gltfSampler.magFilter == null) {\n      gltfSampler.magFilter =\n          texture ? texture.magFilter as MagFilter : Filter.Linear;\n    }\n    if (gltfSampler.wrapS == null) {\n      gltfSampler.wrapS = texture ? texture.wrapS as WrapMode : Wrap.Repeat;\n    }\n    if (gltfSampler.wrapT == null) {\n      gltfSampler.wrapT = texture ? texture.wrapT as WrapMode : Wrap.Repeat;\n    }\n\n    super(\n        onUpdate, gltfSampler, new Set<ThreeTexture>(texture ? [texture] : []));\n  }\n\n  get name(): string {\n    return (this[$sourceObject] as Sampler).name || '';\n  }\n\n  get minFilter(): MinFilter {\n    return this[$sourceSampler].minFilter;\n  }\n\n  get magFilter(): MagFilter {\n    return this[$sourceSampler].magFilter;\n  }\n\n  get wrapS(): WrapMode {\n    return this[$sourceSampler].wrapS;\n  }\n\n  get wrapT(): WrapMode {\n    return this[$sourceSampler].wrapT;\n  }\n\n  setMinFilter(filter: MinFilter) {\n    this[$setProperty]('minFilter', filter);\n  }\n\n  setMagFilter(filter: MagFilter) {\n    this[$setProperty]('magFilter', filter);\n  }\n\n  setWrapS(mode: WrapMode) {\n    this[$setProperty]('wrapS', mode);\n  }\n\n  setWrapT(mode: WrapMode) {\n    this[$setProperty]('wrapT', mode);\n  }\n\n  private[$setProperty]<P extends 'minFilter'|'magFilter'|'wrapS'|'wrapT'>(\n      property: P, value: MinFilter|MagFilter|WrapMode) {\n    const sampler = this[$sourceSampler];\n    if (sampler != null) {\n      if (isValidSamplerValue(property, value)) {\n        sampler[property] = value;\n\n        for (const texture of this[$threeTextures]) {\n          (texture[property] as MinFilter | MagFilter | WrapMode) = value;\n          texture.needsUpdate = true;\n        }\n      }\n      this[$onUpdate]();\n    }\n  }\n}\n"]}