{"version":3,"file":"material.js","sourceRoot":"","sources":["../../../src/features/scene-graph/material.ts"],"names":[],"mappings":"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","sourcesContent":["/* @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Color, DoubleSide, FrontSide, MeshStandardMaterial} from 'three';\n\nimport {AlphaMode, GLTF, Material as GLTFMaterial, RGB} from '../../three-components/gltf-instance/gltf-2.0.js';\nimport {Material as DefaultedMaterial} from '../../three-components/gltf-instance/gltf-defaulted.js';\n\nimport {Material as MaterialInterface} from './api.js';\nimport {LazyLoader, VariantData} from './model.js';\nimport {PBRMetallicRoughness} from './pbr-metallic-roughness.js';\nimport {TextureInfo, TextureUsage} from './texture-info.js';\nimport {$correlatedObjects, $onUpdate, $sourceObject, ThreeDOMElement} from './three-dom-element.js';\n\n\n\nconst $pbrMetallicRoughness = Symbol('pbrMetallicRoughness');\nconst $normalTexture = Symbol('normalTexture');\nconst $occlusionTexture = Symbol('occlusionTexture');\nconst $emissiveTexture = Symbol('emissiveTexture');\nconst $backingThreeMaterial = Symbol('backingThreeMaterial');\nconst $applyAlphaCutoff = Symbol('applyAlphaCutoff');\nexport const $lazyLoadGLTFInfo = Symbol('lazyLoadGLTFInfo');\nconst $initialize = Symbol('initialize');\nexport const $getLoadedMaterial = Symbol('getLoadedMaterial');\nexport const $ensureMaterialIsLoaded = Symbol('ensureMaterialIsLoaded');\nexport const $gltfIndex = Symbol('gltfIndex');\nexport const $setActive = Symbol('setActive');\nexport const $variantIndices = Symbol('variantIndices');\nconst $isActive = Symbol('isActive');\nexport const $variantSet = Symbol('variantSet');\nconst $modelVariants = Symbol('modelVariants');\n\n/**\n * Material facade implementation for Three.js materials\n */\nexport class Material extends ThreeDOMElement implements MaterialInterface {\n  private[$pbrMetallicRoughness]!: PBRMetallicRoughness;\n  private[$normalTexture]!: TextureInfo;\n  private[$occlusionTexture]!: TextureInfo;\n  private[$emissiveTexture]!: TextureInfo;\n  private[$lazyLoadGLTFInfo]?: LazyLoader;\n  private[$gltfIndex]: number;\n  private[$isActive]: boolean;\n  private[$variantSet] = new Set<number>();\n  readonly[$modelVariants]: Map<string, VariantData>;\n\n  get[$backingThreeMaterial](): MeshStandardMaterial {\n    return (this[$correlatedObjects] as Set<MeshStandardMaterial>)\n        .values()\n        .next()\n        .value;\n  }\n\n  constructor(\n      onUpdate: () => void, gltf: GLTF, gltfMaterial: GLTFMaterial,\n      gltfIndex: number, isActive: boolean,\n      modelVariants: Map<string, VariantData>,\n      correlatedMaterials: Set<MeshStandardMaterial>,\n      lazyLoadInfo: LazyLoader|undefined = undefined) {\n    super(onUpdate, gltfMaterial, correlatedMaterials);\n    this[$gltfIndex] = gltfIndex;\n    this[$isActive] = isActive;\n    this[$modelVariants] = modelVariants;\n\n    if (lazyLoadInfo == null) {\n      this[$initialize](gltf);\n    } else {\n      this[$lazyLoadGLTFInfo] = lazyLoadInfo;\n    }\n  }\n\n  private[$initialize](gltf: GLTF): void {\n    const onUpdate = this[$onUpdate] as () => void;\n    const gltfMaterial = this[$sourceObject] as GLTFMaterial;\n    const correlatedMaterials =\n        this[$correlatedObjects] as Set<MeshStandardMaterial>;\n\n    if (gltfMaterial.extensions &&\n        gltfMaterial.extensions['KHR_materials_pbrSpecularGlossiness']) {\n      console.warn(`Material ${gltfMaterial.name} uses a deprecated extension\n          \"KHR_materials_pbrSpecularGlossiness\", please use\n          \"pbrMetallicRoughness\" instead. Specular Glossiness materials are\n          currently supported for rendering, but not for our scene-graph API,\n          nor for auto-generation of USDZ for Quick Look.`);\n    }\n\n    if (gltfMaterial.pbrMetallicRoughness == null) {\n      gltfMaterial.pbrMetallicRoughness = {};\n    }\n    this[$pbrMetallicRoughness] = new PBRMetallicRoughness(\n        onUpdate, gltf, gltfMaterial.pbrMetallicRoughness, correlatedMaterials);\n\n    if (gltfMaterial.emissiveFactor == null) {\n      gltfMaterial.emissiveFactor = [0, 0, 0];\n    }\n\n    if (gltfMaterial.doubleSided == null) {\n      gltfMaterial.doubleSided = false;\n    }\n\n    if (gltfMaterial.alphaMode == null) {\n      gltfMaterial.alphaMode = 'OPAQUE';\n    }\n\n    if (gltfMaterial.alphaCutoff == null) {\n      gltfMaterial.alphaCutoff = 0.5;\n    }\n\n    const {\n      normalTexture: gltfNormalTexture,\n      occlusionTexture: gltfOcclusionTexture,\n      emissiveTexture: gltfEmissiveTexture\n    } = gltfMaterial;\n\n    const {normalMap, aoMap, emissiveMap} =\n        correlatedMaterials.values().next().value;\n\n    this[$normalTexture] = new TextureInfo(\n        onUpdate,\n        TextureUsage.Normal,\n        normalMap,\n        correlatedMaterials,\n        gltf,\n        gltfNormalTexture ? gltfNormalTexture : null,\n    );\n\n    this[$occlusionTexture] = new TextureInfo(\n        onUpdate,\n        TextureUsage.Occlusion,\n        aoMap,\n        correlatedMaterials,\n        gltf,\n        gltfOcclusionTexture ? gltfOcclusionTexture : null,\n    );\n\n    this[$emissiveTexture] = new TextureInfo(\n        onUpdate,\n        TextureUsage.Emissive,\n        emissiveMap,\n        correlatedMaterials,\n        gltf,\n        gltfEmissiveTexture ? gltfEmissiveTexture : null,\n    );\n  }\n\n  async[$getLoadedMaterial](): Promise<MeshStandardMaterial> {\n    if (this[$lazyLoadGLTFInfo] != null) {\n      const {set, material} = await this[$lazyLoadGLTFInfo]!.doLazyLoad();\n\n      // Fills in the missing data.\n      this[$correlatedObjects] = set as Set<MeshStandardMaterial>;\n\n      this[$initialize](this[$lazyLoadGLTFInfo]!.gltf);\n      // Releases lazy load info.\n      this[$lazyLoadGLTFInfo] = undefined;\n      // Redefines the method as a noop method.\n      this.ensureLoaded = async () => {};\n      return material as MeshStandardMaterial;\n    }\n    return this[$correlatedObjects]!.values().next().value;\n  }\n\n  [$ensureMaterialIsLoaded]() {\n    if (this[$lazyLoadGLTFInfo] == null) {\n      return;\n    }\n    throw new Error(`Material \"${this.name}\" has not been loaded, call 'await\n    myMaterial.ensureLoaded()' before using an unloaded material.`);\n  }\n\n  async ensureLoaded() {\n    await this[$getLoadedMaterial]();\n  }\n\n  get isLoaded() {\n    return this[$lazyLoadGLTFInfo] == null;\n  }\n\n  get isActive(): boolean {\n    return this[$isActive];\n  }\n\n  [$setActive](isActive: boolean) {\n    this[$isActive] = isActive;\n  }\n\n  get name(): string {\n    return (this[$sourceObject] as Material).name;\n  }\n\n  set name(name: string) {\n    const sourceMaterial = (this[$sourceObject] as Material);\n    if (sourceMaterial != null) {\n      sourceMaterial.name = name;\n    }\n\n    if (this[$correlatedObjects] != null) {\n      for (const threeMaterial of this[$correlatedObjects]!) {\n        threeMaterial.name = name;\n      }\n    }\n  }\n\n  get pbrMetallicRoughness(): PBRMetallicRoughness {\n    this[$ensureMaterialIsLoaded]();\n    return this[$pbrMetallicRoughness];\n  }\n\n  get normalTexture(): TextureInfo {\n    this[$ensureMaterialIsLoaded]();\n    return this[$normalTexture];\n  }\n\n  get occlusionTexture(): TextureInfo {\n    this[$ensureMaterialIsLoaded]();\n    return this[$occlusionTexture];\n  }\n\n  get emissiveTexture(): TextureInfo {\n    this[$ensureMaterialIsLoaded]();\n    return this[$emissiveTexture];\n  }\n\n  get emissiveFactor(): RGB {\n    this[$ensureMaterialIsLoaded]();\n    return (this[$sourceObject] as DefaultedMaterial).emissiveFactor;\n  }\n\n  get index(): number {\n    return this[$gltfIndex];\n  }\n\n  [$variantIndices]() {\n    return this[$variantSet];\n  }\n\n  hasVariant(name: string): boolean {\n    const variantData = this[$modelVariants].get(name);\n    return variantData != null && this[$variantSet].has(variantData.index);\n  }\n\n  setEmissiveFactor(rgb: RGB|string) {\n    this[$ensureMaterialIsLoaded]();\n    const color = new Color();\n    if (rgb instanceof Array) {\n      color.fromArray(rgb);\n    } else {\n      color.set(rgb).convertSRGBToLinear();\n    }\n    for (const material of this[$correlatedObjects] as\n         Set<MeshStandardMaterial>) {\n      material.emissive.set(color);\n    }\n    (this[$sourceObject] as DefaultedMaterial).emissiveFactor =\n        color.toArray() as [number, number, number];\n    this[$onUpdate]();\n  }\n\n  [$applyAlphaCutoff]() {\n    this[$ensureMaterialIsLoaded]();\n    const gltfMaterial = this[$sourceObject] as DefaultedMaterial;\n    for (const material of this[$correlatedObjects] as\n         Set<MeshStandardMaterial>) {\n      if ((this[$sourceObject] as DefaultedMaterial).alphaMode === 'MASK') {\n        material.alphaTest = gltfMaterial.alphaCutoff;\n      } else {\n        (material.alphaTest as number | undefined) = undefined;\n      }\n\n      material.needsUpdate = true;\n    }\n  }\n\n  setAlphaCutoff(cutoff: number): void {\n    this[$ensureMaterialIsLoaded]();\n    (this[$sourceObject] as DefaultedMaterial).alphaCutoff = cutoff;\n    this[$applyAlphaCutoff]();\n    this[$onUpdate]();\n  }\n\n  getAlphaCutoff(): number {\n    this[$ensureMaterialIsLoaded]();\n    return (this[$sourceObject] as DefaultedMaterial).alphaCutoff;\n  }\n\n  setDoubleSided(doubleSided: boolean): void {\n    this[$ensureMaterialIsLoaded]();\n    for (const material of this[$correlatedObjects] as\n         Set<MeshStandardMaterial>) {\n      // When double-sided is disabled gltf spec dictates that Back-Face culling\n      // must be disabled, in three.js parlance that would mean FrontSide\n      // rendering only.\n      // https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#double-sided\n      material.side = doubleSided ? DoubleSide : FrontSide;\n      material.needsUpdate = true;\n    }\n    (this[$sourceObject] as DefaultedMaterial).doubleSided = doubleSided;\n    this[$onUpdate]();\n  }\n\n  getDoubleSided(): boolean {\n    this[$ensureMaterialIsLoaded]();\n    return (this[$sourceObject] as DefaultedMaterial).doubleSided;\n  }\n\n  setAlphaMode(alphaMode: AlphaMode): void {\n    this[$ensureMaterialIsLoaded]();\n    const enableTransparency =\n        (material: MeshStandardMaterial, enabled: boolean): void => {\n          material.transparent = enabled;\n          material.depthWrite = !enabled;\n        };\n\n    (this[$sourceObject] as DefaultedMaterial).alphaMode = alphaMode;\n\n    for (const material of this[$correlatedObjects] as\n         Set<MeshStandardMaterial>) {\n      enableTransparency(material, alphaMode === 'BLEND');\n      this[$applyAlphaCutoff]();\n      material.needsUpdate = true;\n    }\n\n    this[$onUpdate]();\n  }\n\n  getAlphaMode(): AlphaMode {\n    this[$ensureMaterialIsLoaded]();\n    return (this[$sourceObject] as DefaultedMaterial).alphaMode;\n  }\n}\n"]}