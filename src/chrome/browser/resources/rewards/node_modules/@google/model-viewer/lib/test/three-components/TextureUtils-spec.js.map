{"version":3,"file":"TextureUtils-spec.js","sourceRoot":"","sources":["../../../src/test/three-components/TextureUtils-spec.ts"],"names":[],"mappings":"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","sourcesContent":["/* @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Cache, CubeReflectionMapping, EquirectangularReflectionMapping, WebGLRenderer} from 'three';\n\nimport TextureUtils from '../../three-components/TextureUtils.js';\nimport {assetPath} from '../helpers.js';\n\n\nconst expect = chai.expect;\n\n// Reuse the same canvas as to not stress the WebGL\n// context limit\nconst canvas = document.createElement('canvas');\nconst EQUI_URL = assetPath('environments/spruit_sunrise_1k_LDR.jpg');\nconst HDR_EQUI_URL = assetPath('environments/spruit_sunrise_1k_HDR.hdr');\n\nsuite('TextureUtils', () => {\n  let threeRenderer: WebGLRenderer;\n\n  suiteSetup(() => {\n    // The threeRenderer can retain state, so these tests have the possibility\n    // of getting different results in different orders. However, our use of the\n    // threeRenderer *should* always return its state to what it was before to\n    // avoid this kind of problem (and many other headaches).\n    threeRenderer = new WebGLRenderer({canvas});\n    threeRenderer.debug.checkShaderErrors = true;\n  });\n\n  suiteTeardown(() => {\n    // Ensure we free up memory from loading large environment maps:\n    Cache.clear();\n    threeRenderer.dispose();\n  });\n\n  let textureUtils: TextureUtils;\n\n  setup(() => {\n    textureUtils = new TextureUtils(threeRenderer);\n  });\n\n  teardown(async () => {\n    await textureUtils.dispose();\n  });\n\n\n  suite('load', () => {\n    test('loads a valid texture from URL', async () => {\n      let texture = await textureUtils.load(EQUI_URL);\n      texture.dispose();\n      expect(texture.isTexture).to.be.ok;\n      expect(texture.name).to.be.eq(EQUI_URL);\n      expect(texture.mapping).to.be.eq(EquirectangularReflectionMapping);\n    });\n    test('loads a valid HDR texture from URL', async () => {\n      let texture = await textureUtils.load(HDR_EQUI_URL);\n      texture.dispose();\n      expect(texture.isTexture).to.be.ok;\n      expect(texture.name).to.be.eq(HDR_EQUI_URL);\n      expect(texture.mapping).to.be.eq(EquirectangularReflectionMapping);\n    });\n    test('throws on invalid URL', async () => {\n      try {\n        await textureUtils.load('');\n        expect(false).to.be.ok;\n      } catch (e) {\n        expect(true).to.be.ok;\n      }\n    });\n    test('throws if texture not found', async () => {\n      try {\n        await textureUtils.load('./nope.png');\n        expect(false).to.be.ok;\n      } catch (e) {\n        expect(true).to.be.ok;\n      }\n    });\n  });\n\n  suite('generating an environment map and skybox', () => {\n    test('returns an environmentMap and skybox texture from url', async () => {\n      const textures =\n          await textureUtils.generateEnvironmentMapAndSkybox(EQUI_URL);\n\n      const skybox = textures.skybox!;\n      const environment = textures.environmentMap;\n\n      expect(skybox.isTexture).to.be.ok;\n      expect(environment.isTexture).to.be.ok;\n\n      expect(skybox.name).to.be.eq(EQUI_URL);\n      expect(skybox.mapping).to.be.eq(EquirectangularReflectionMapping);\n\n      expect(environment.name).to.be.eq(EQUI_URL);\n      expect(environment.mapping).to.be.eq(EquirectangularReflectionMapping);\n    });\n\n    test(\n        'returns an environmentMap and skybox texture from an HDR url',\n        async () => {\n          const textures =\n              await textureUtils.generateEnvironmentMapAndSkybox(HDR_EQUI_URL);\n\n          const skybox = textures.skybox!;\n          const environment = textures.environmentMap;\n\n          expect(skybox.isTexture).to.be.ok;\n          expect(environment.isTexture).to.be.ok;\n\n          expect(skybox.name).to.be.eq(HDR_EQUI_URL);\n          expect(skybox.mapping).to.be.eq(EquirectangularReflectionMapping);\n\n          expect(environment.name).to.be.eq(HDR_EQUI_URL);\n          expect(environment.mapping)\n              .to.be.eq(EquirectangularReflectionMapping);\n        });\n\n    test(\n        'returns an environmentMap and skybox texture from two urls',\n        async () => {\n          const textures = await textureUtils.generateEnvironmentMapAndSkybox(\n              EQUI_URL, HDR_EQUI_URL);\n\n          const skybox = textures.skybox!;\n          const environment = textures.environmentMap;\n\n          expect(skybox.isTexture).to.be.ok;\n          expect(environment.isTexture).to.be.ok;\n\n          expect(skybox.name).to.be.eq(EQUI_URL);\n          expect(skybox.mapping).to.be.eq(EquirectangularReflectionMapping);\n\n          expect(environment.name).to.be.eq(HDR_EQUI_URL);\n          expect(environment.mapping)\n              .to.be.eq(EquirectangularReflectionMapping);\n        });\n\n    test('throws if given an invalid url', async () => {\n      try {\n        await textureUtils.generateEnvironmentMapAndSkybox();\n        expect(false).to.be.ok;\n      } catch (e) {\n        expect(true).to.be.ok;\n      }\n    });\n  });\n\n  suite('dynamically generating environment maps', () => {\n    test('creates a cubemap render target with PMREM by default', async () => {\n      const environment =\n          (await textureUtils.generateEnvironmentMapAndSkybox()).environmentMap;\n\n      expect(environment.name).to.be.eq('neutral');\n      expect(environment.mapping).to.be.eq(CubeReflectionMapping);\n    });\n\n    test('creates a cubemap render target with PMREM for neutral', async () => {\n      const environment =\n          (await textureUtils.generateEnvironmentMapAndSkybox(null, 'neutral'))\n              .environmentMap;\n\n      expect(environment.name).to.be.eq('neutral');\n      expect(environment.mapping).to.be.eq(CubeReflectionMapping);\n    });\n\n    test('creates a cubemap render target with PMREM for legacy', async () => {\n      const environment =\n          (await textureUtils.generateEnvironmentMapAndSkybox(null, 'legacy'))\n              .environmentMap;\n\n      expect(environment.name).to.be.eq('legacy');\n      expect(environment.mapping).to.be.eq(CubeReflectionMapping);\n    });\n  });\n});\n"]}