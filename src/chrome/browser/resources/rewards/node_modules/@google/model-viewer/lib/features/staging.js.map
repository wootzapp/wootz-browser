{"version":3,"file":"staging.js","sourceRoot":"","sources":["../../src/features/staging.ts"],"names":[],"mappings":"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","sourcesContent":["\n/* @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {property} from 'lit/decorators.js';\n\nimport {style} from '../decorators.js';\nimport ModelViewerElementBase, {$getModelIsVisible, $renderer, $scene, $tick} from '../model-viewer-base.js';\nimport {degreesToRadians} from '../styles/conversions.js';\nimport {EvaluatedStyle, Intrinsics} from '../styles/evaluators.js';\nimport {numberNode, NumberNode} from '../styles/parsers.js';\nimport {Constructor} from '../utilities.js';\n\nimport {CameraChangeDetails} from './controls.js';\n\n\n// How much the model will rotate per\n// second in radians:\nconst DEFAULT_ROTATION_SPEED = Math.PI / 32;\nexport const AUTO_ROTATE_DELAY_DEFAULT = 3000;\n\nconst rotationRateIntrinsics = {\n  basis:\n      [degreesToRadians(numberNode(DEFAULT_ROTATION_SPEED, 'rad')) as\n       NumberNode<'rad'>],\n  keywords: {auto: [null]}\n};\n\nconst $autoRotateStartTime = Symbol('autoRotateStartTime');\nconst $radiansPerSecond = Symbol('radiansPerSecond');\nconst $syncRotationRate = Symbol('syncRotationRate');\nconst $onCameraChange = Symbol('onCameraChange');\n\nexport declare interface StagingInterface {\n  autoRotate: boolean;\n  autoRotateDelay: number;\n  readonly turntableRotation: number;\n  resetTurntableRotation(theta?: number): void;\n}\n\nexport const StagingMixin = <T extends Constructor<ModelViewerElementBase>>(\n    ModelViewerElement: T): Constructor<StagingInterface>&T => {\n  class StagingModelViewerElement extends ModelViewerElement {\n    @property({type: Boolean, attribute: 'auto-rotate'})\n    autoRotate: boolean = false;\n\n    @property({type: Number, attribute: 'auto-rotate-delay'})\n    autoRotateDelay: number = AUTO_ROTATE_DELAY_DEFAULT;\n\n    @style(\n        {intrinsics: rotationRateIntrinsics, updateHandler: $syncRotationRate})\n    @property({type: String, attribute: 'rotation-per-second'})\n    rotationPerSecond: string = 'auto';\n\n    private[$autoRotateStartTime] = performance.now();\n    private[$radiansPerSecond] = 0;\n\n    connectedCallback() {\n      super.connectedCallback();\n      this.addEventListener(\n          'camera-change', this[$onCameraChange] as EventListener);\n      this[$autoRotateStartTime] = performance.now();\n    }\n\n    disconnectedCallback() {\n      super.disconnectedCallback();\n      this.removeEventListener(\n          'camera-change', this[$onCameraChange] as EventListener);\n      this[$autoRotateStartTime] = performance.now();\n    }\n\n    updated(changedProperties: Map<string, any>) {\n      super.updated(changedProperties);\n\n      if (changedProperties.has('autoRotate')) {\n        this[$autoRotateStartTime] = performance.now();\n      }\n    }\n\n    [$syncRotationRate](style: EvaluatedStyle<Intrinsics<['rad']>>) {\n      this[$radiansPerSecond] = style[0];\n    }\n\n    [$tick](time: number, delta: number) {\n      super[$tick](time, delta);\n\n      if (!this.autoRotate || !this[$getModelIsVisible]() ||\n          this[$renderer].isPresenting) {\n        return;\n      }\n\n      const rotationDelta = Math.min(\n          delta, time - this[$autoRotateStartTime] - this.autoRotateDelay);\n\n      if (rotationDelta > 0) {\n        this[$scene].yaw = this.turntableRotation +\n            this[$radiansPerSecond] * rotationDelta * 0.001;\n      }\n    }\n\n    [$onCameraChange] = (event: CustomEvent<CameraChangeDetails>) => {\n      if (!this.autoRotate) {\n        return;\n      }\n\n      if (event.detail.source === 'user-interaction') {\n        this[$autoRotateStartTime] = performance.now();\n      }\n    };\n\n    get turntableRotation(): number {\n      return this[$scene].yaw;\n    }\n\n    resetTurntableRotation(theta = 0) {\n      this[$scene].yaw = theta;\n    }\n  }\n\n  return StagingModelViewerElement;\n};\n"]}