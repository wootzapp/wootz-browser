{"version":3,"file":"material-spec.js","sourceRoot":"","sources":["../../../../src/test/features/scene-graph/material-spec.ts"],"names":[],"mappings":"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","sourcesContent":["/* @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {MeshStandardMaterial, Texture as ThreeTexture} from 'three';\n\nimport {$threeTexture} from '../../../features/scene-graph/image.js';\nimport {$lazyLoadGLTFInfo} from '../../../features/scene-graph/material.js';\nimport {Model} from '../../../features/scene-graph/model.js';\nimport {Texture} from '../../../features/scene-graph/texture.js';\nimport {$correlatedObjects} from '../../../features/scene-graph/three-dom-element.js';\nimport {ModelViewerElement} from '../../../model-viewer.js';\nimport {waitForEvent} from '../../../utilities.js';\nimport {assetPath} from '../../helpers.js';\n\n\n\nconst expect = chai.expect;\n\nconst CUBES_GLTF_PATH = assetPath('models/cubes.gltf');\nconst HELMET_GLB_PATH = assetPath(\n    'models/glTF-Sample-Models/2.0/DamagedHelmet/glTF-Binary/DamagedHelmet.glb');\nconst ALPHA_BLEND_MODE_TEST = assetPath(\n    'models/glTF-Sample-Models/2.0/AlphaBlendModeTest/glTF-Binary/AlphaBlendModeTest.glb');\nconst REPLACEMENT_TEXTURE_PATH = assetPath(\n    'models/glTF-Sample-Models/2.0/BoxTextured/glTF/CesiumLogoFlat.png');\nsuite('scene-graph/material', () => {\n  suite('Test Texture Slots', () => {\n    let element: ModelViewerElement;\n    let texture: Texture|null;\n    let threeMaterials: Set<MeshStandardMaterial>;\n\n    setup(async () => {\n      element = new ModelViewerElement();\n      element.src = HELMET_GLB_PATH;\n      document.body.insertBefore(element, document.body.firstChild);\n      await waitForEvent(element, 'load');\n\n      texture = await element.createTexture(REPLACEMENT_TEXTURE_PATH);\n      threeMaterials = element.model!.materials[0][$correlatedObjects] as\n          Set<MeshStandardMaterial>;\n    });\n\n    teardown(() => {\n      document.body.removeChild(element);\n      texture = null;\n    });\n\n    test('Set a new base map', async () => {\n      element.model!.materials[0]\n          .pbrMetallicRoughness.baseColorTexture.setTexture(texture);\n      // Gets new UUID to compare with UUID of texture accessible through the\n      // material.\n      const newUUID: string|undefined = texture?.source[$threeTexture].uuid;\n\n      const threeTexture: ThreeTexture =\n          element.model!.materials[0]\n              .pbrMetallicRoughness.baseColorTexture?.texture\n              ?.source[$threeTexture]!;\n\n      for (const material of threeMaterials as Set<MeshStandardMaterial>) {\n        expect(material.map).to.be.eq(threeTexture);\n      }\n\n      expect(threeTexture.uuid).to.be.equal(newUUID);\n    });\n\n    test('Set a new metallicRoughness map', async () => {\n      element.model!.materials[0]\n          .pbrMetallicRoughness.metallicRoughnessTexture.setTexture(texture);\n      // Gets new UUID to compare with UUID of texture accessible through the\n      // material.\n      const newUUID: string|undefined = texture?.source[$threeTexture]?.uuid;\n\n      const threeTexture: ThreeTexture =\n          element.model!.materials[0]\n              .pbrMetallicRoughness.metallicRoughnessTexture?.texture\n              ?.source[$threeTexture]!;\n\n      for (const material of threeMaterials as Set<MeshStandardMaterial>) {\n        expect(material.metalnessMap).to.be.eq(threeTexture);\n        expect(material.roughnessMap).to.be.eq(threeTexture);\n      }\n\n      expect(threeTexture.uuid).to.be.equal(newUUID);\n    });\n\n    test('Set a new normal map', async () => {\n      element.model!.materials[0].normalTexture.setTexture(texture);\n      // Gets new UUID to compare with UUID of texture accessible through the\n      // material.\n      const newUUID: string|undefined = texture?.source[$threeTexture]?.uuid;\n\n      const threeTexture: ThreeTexture =\n          element.model!.materials[0]\n              .normalTexture?.texture?.source[$threeTexture]!;\n\n      for (const material of threeMaterials as Set<MeshStandardMaterial>) {\n        expect(material.normalMap).to.be.eq(threeTexture);\n      }\n\n      expect(threeTexture.uuid).to.be.equal(newUUID);\n    });\n\n    test('Set a new occlusion map', async () => {\n      element.model!.materials[0].occlusionTexture.setTexture(texture);\n      // Gets new UUID to compare with UUID of texture accessible through the\n      // material.\n      const newUUID: string|undefined = texture?.source[$threeTexture]?.uuid;\n\n      const threeTexture: ThreeTexture =\n          element.model!.materials[0]\n              .occlusionTexture?.texture?.source[$threeTexture]!;\n\n      for (const material of threeMaterials as Set<MeshStandardMaterial>) {\n        expect(material.aoMap).to.be.eq(threeTexture);\n      }\n\n      expect(threeTexture.uuid).to.be.equal(newUUID);\n    });\n\n    test('Set a new emissive map', async () => {\n      element.model!.materials[0].emissiveTexture.setTexture(texture);\n      // Gets new UUID to compare with UUID of texture accessible through the\n      // material.\n      const newUUID: string|undefined = texture?.source[$threeTexture]?.uuid;\n\n      const threeTexture: ThreeTexture =\n          element.model!.materials[0]\n              .emissiveTexture?.texture?.source[$threeTexture]!;\n\n      for (const material of threeMaterials as Set<MeshStandardMaterial>) {\n        expect(material.emissiveMap).to.be.eq(threeTexture);\n      }\n\n      expect(threeTexture.uuid).to.be.equal(newUUID);\n    });\n  });\n\n  suite('Material properties', () => {\n    let element: ModelViewerElement;\n\n    setup(async () => {\n      element = new ModelViewerElement();\n    });\n\n    teardown(() => {\n      document.body.removeChild(element);\n    });\n\n    const loadModel = async (path: string) => {\n      element.src = path;\n      document.body.insertBefore(element, document.body.firstChild);\n      await waitForEvent(element, 'load');\n    };\n\n    test('test alpha cutoff expect disabled by default', async () => {\n      await loadModel(HELMET_GLB_PATH);\n      expect(element.model!.materials[0]![$correlatedObjects]\n                 ?.values()\n                 .next()\n                 .value.alphaTest)\n          .to.be.equal(0);\n    });\n\n    test('test alpha cutoff expect valid value as default', async () => {\n      await loadModel(ALPHA_BLEND_MODE_TEST);\n      expect(element.model!.materials[2].getAlphaCutoff()).to.be.equal(0.25);\n    });\n\n    test('test alpha cutoff test setting and getting', async () => {\n      await loadModel(ALPHA_BLEND_MODE_TEST);\n      element.model!.materials[2].setAlphaCutoff(0.5);\n      expect(element.model!.materials[2].getAlphaCutoff()).to.be.equal(0.5);\n    });\n\n    test('test double sided expect default is false', async () => {\n      await loadModel(HELMET_GLB_PATH);\n      expect(element.model!.materials[0].getDoubleSided()).to.be.equal(false);\n    });\n\n    test('test double sided expect default is true', async () => {\n      await loadModel(ALPHA_BLEND_MODE_TEST);\n      expect(element.model!.materials[1].getDoubleSided()).to.be.equal(true);\n    });\n\n    test('test double sided setting and getting', async () => {\n      await loadModel(ALPHA_BLEND_MODE_TEST);\n      expect(element.model!.materials[1].getDoubleSided()).to.be.equal(true);\n\n      element.model!.materials[1].setDoubleSided(false);\n      expect(element.model!.materials[1].getDoubleSided()).to.be.equal(false);\n\n      element.model!.materials[1].setDoubleSided(true);\n      expect(element.model!.materials[1].getDoubleSided()).to.be.equal(true);\n    });\n\n    test('test alpha-mode, setting and getting', async () => {\n      await loadModel(ALPHA_BLEND_MODE_TEST);\n\n      element.model!.materials[0].setAlphaMode('BLEND');\n      expect(element.model!.materials[0].getAlphaMode()).to.be.equal('BLEND');\n      element.model!.materials[0].setAlphaMode('MASK');\n      expect(element.model!.materials[0].getAlphaMode()).to.be.equal('MASK');\n      element.model!.materials[0].setAlphaMode('OPAQUE');\n      expect(element.model!.materials[0].getAlphaMode()).to.be.equal('OPAQUE');\n    });\n\n    test('test alpha-mode, expect default of opaque', async () => {\n      await loadModel(ALPHA_BLEND_MODE_TEST);\n\n      expect(element.model!.materials[0].getAlphaMode()).to.be.equal('OPAQUE');\n    });\n\n    test('test alpha-mode, expect default of blend', async () => {\n      await loadModel(ALPHA_BLEND_MODE_TEST);\n\n      expect(element.model!.materials[1].getAlphaMode()).to.be.equal('BLEND');\n    });\n\n    test('test alpha-mode, expect default of mask', async () => {\n      await loadModel(ALPHA_BLEND_MODE_TEST);\n\n      expect(element.model!.materials[2].getAlphaMode()).to.be.equal('MASK');\n    });\n  });\n\n  suite('Material lazy loading', () => {\n    let element: ModelViewerElement;\n    let model: Model;\n\n    setup(async () => {\n      element = new ModelViewerElement();\n      element.src = CUBES_GLTF_PATH;\n      document.body.insertBefore(element, document.body.firstChild);\n      await waitForEvent(element, 'load');\n      model = element.model as Model;\n    });\n\n    teardown(() => {\n      document.body.removeChild(element);\n    });\n\n    test('Accessing the name getter does not cause throw error.', async () => {\n      expect(model.materials[2].name).to.equal('red');\n      expect(model.materials[2][$lazyLoadGLTFInfo]).to.be.ok;\n    });\n\n    test(\n        'Accessing a getter of an unloaded material throws an error.',\n        async () => {\n          expect(() => {model.materials[2].pbrMetallicRoughness}).to.throw;\n          expect(model.materials[2].isLoaded).to.be.false;\n        });\n\n    test(\n        'Accessing a getter of a loaded material has valid data.', async () => {\n          await model.materials[2].ensureLoaded();\n          expect(model.materials[2].isLoaded).to.be.true;\n          const pbr = model.materials[2].pbrMetallicRoughness;\n          expect(pbr).to.be.ok;\n        });\n  });\n});\n"]}