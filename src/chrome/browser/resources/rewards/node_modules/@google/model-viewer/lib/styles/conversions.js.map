{"version":3,"file":"conversions.js","sourceRoot":"","sources":["../../src/styles/conversions.ts"],"names":[],"mappings":"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","sourcesContent":["/* @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {NumberNode, ZERO} from './parsers';\n\n/**\n * Ensures that a given number is expressed in radians. If the number is already\n * in radians, does nothing. If the value is in degrees, converts it to radians.\n * If the value has no specified unit, the unit is assumed to be radians. If the\n * value is not in radians or degrees, the value is resolved as 0 radians.\n *\n * Also accepts a second argument that is a default value to use if the input\n * numberNode number is NaN or Infinity.\n */\nexport const degreesToRadians =\n    (numberNode: NumberNode, fallbackRadianValue: number = 0): NumberNode => {\n      let {number, unit} = numberNode;\n      if (!isFinite(number)) {\n        number = fallbackRadianValue;\n        unit = 'rad';\n      } else if (numberNode.unit === 'rad' || numberNode.unit == null) {\n        return numberNode;\n      }\n\n      const valueIsDegrees = unit === 'deg' && number != null;\n      const value = valueIsDegrees ? number : 0;\n      const radians = value * Math.PI / 180;\n\n      return {type: 'number', number: radians, unit: 'rad'};\n    };\n\n/**\n * Ensures that a given number is expressed in degrees. If the number is already\n * in degrees, does nothing. If the value is in radians or has no specified\n * unit, converts it to degrees. If the value is not in radians or degrees, the\n * value is resolved as 0 degrees.\n *\n * Also accepts a second argument that is a default value to use if the input\n * numberNode number is NaN or Infinity.\n */\nexport const radiansToDegrees =\n    (numberNode: NumberNode, fallbackDegreeValue: number = 0): NumberNode => {\n      let {number, unit} = numberNode;\n\n      if (!isFinite(number)) {\n        number = fallbackDegreeValue;\n        unit = 'deg';\n      } else if (numberNode.unit === 'deg') {\n        return numberNode;\n      }\n\n      const valueIsRadians =\n          (unit === null || unit === 'rad') && number != null;\n\n      const value = valueIsRadians ? number : 0;\n      const degrees = value * 180 / Math.PI;\n\n      return {type: 'number', number: degrees, unit: 'deg'};\n    };\n\n/**\n * Converts a given length to meters. Currently supported input units are\n * meters, centimeters and millimeters.\n *\n * Also accepts a second argument that is a default value to use if the input\n * numberNode number is NaN or Infinity.\n */\nexport const lengthToBaseMeters =\n    (numberNode: NumberNode, fallbackMeterValue: number = 0): NumberNode => {\n      let {number, unit} = numberNode;\n\n      if (!isFinite(number)) {\n        number = fallbackMeterValue;\n        unit = 'm';\n      } else if (numberNode.unit === 'm') {\n        return numberNode;\n      }\n\n      let scale;\n\n      switch (unit) {\n        default:\n          scale = 1;\n          break;\n        case 'cm':\n          scale = 1 / 100;\n          break;\n        case 'mm':\n          scale = 1 / 1000;\n          break;\n      }\n\n      const value = scale * number;\n      return {type: 'number', number: value, unit: 'm'};\n    };\n\n/**\n * Normalizes the unit of a given input number so that it is expressed in a\n * preferred unit. For length nodes, the return value will be expressed in\n * meters. For angle nodes, the return value will be expressed in radians.\n *\n * Also takes a fallback number that is used when the number value is not a\n * valid number or when the unit of the given number cannot be normalized.\n */\nexport const normalizeUnit = (() => {\n  const identity = (node: NumberNode) => node;\n  const unitNormalizers: {[index: string]: (node: NumberNode) => NumberNode} = {\n    'rad': identity,\n    'deg': degreesToRadians,\n    'm': identity,\n    'mm': lengthToBaseMeters,\n    'cm': lengthToBaseMeters\n  };\n\n  return (node: NumberNode, fallback: NumberNode = ZERO) => {\n    if (!isFinite(node.number)) {\n      node.number = fallback.number;\n      node.unit = fallback.unit;\n    }\n\n    const {unit} = node;\n\n    if (unit == null) {\n      return node;\n    }\n\n    const normalize = unitNormalizers[unit];\n\n    if (normalize == null) {\n      return fallback;\n    }\n\n    return normalize(node);\n  };\n})();"]}