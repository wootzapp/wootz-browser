{"version":3,"file":"primitive-node-spec.js","sourceRoot":"","sources":["../../../../../src/test/features/scene-graph/nodes/primitive-node-spec.ts"],"names":[],"mappings":"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","sourcesContent":["/* @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {MeshStandardMaterial} from 'three/src/materials/MeshStandardMaterial';\n\nimport {$primitivesList, $variantData, Model} from '../../../../features/scene-graph/model.js';\nimport {$initialMaterialIdx} from '../../../../features/scene-graph/nodes/primitive-node.js';\nimport {ModelViewerElement} from '../../../../model-viewer.js';\nimport {CorrelatedSceneGraph} from '../../../../three-components/gltf-instance/correlated-scene-graph.js';\nimport {waitForEvent} from '../../../../utilities.js';\nimport {assetPath, loadThreeGLTF} from '../../../helpers.js';\n\n\n\nconst expect = chai.expect;\n\nconst BRAIN_STEM_GLB_PATH = assetPath(\n    'models/glTF-Sample-Models/2.0/BrainStem/glTF-Binary/BrainStem.glb');\nconst CUBES_GLTF_PATH = assetPath('models/cubes.gltf');\nconst CUBE_GLTF_PATH = assetPath('models/cube.gltf');\nconst MESH_PRIMITIVES_GLB_PATH = assetPath('models/MeshPrimitivesVariants.glb');\nconst KHRONOS_TRIANGLE_GLB_PATH =\n    assetPath('models/glTF-Sample-Models/2.0/Triangle/glTF/Triangle.gltf');\n\nconst findPrimitivesWithVariant = (model: Model, variantName: string) => {\n  const result = new Array<any>();\n  for (const primitive of model![$primitivesList]) {\n    if (primitive.variantInfo != null && model.hasVariant(variantName) &&\n        primitive.variantInfo.has(\n            model[$variantData].get(variantName)!.index)) {\n      result.push(primitive);\n    }\n  }\n  return result.length > 0 ? result : null;\n};\n\nsuite('scene-graph/model/mesh-primitives', () => {\n  suite('Primitive with default material', () => {\n    let element: ModelViewerElement;\n\n    setup(async () => {\n      element = new ModelViewerElement();\n      element.src = KHRONOS_TRIANGLE_GLB_PATH;\n      document.body.insertBefore(element, document.body.firstChild);\n      await waitForEvent(element, 'load');\n    });\n\n    teardown(() => {\n      document.body.removeChild(element);\n    });\n\n    test('has a default material', async () => {\n      const model = element.model!;\n      expect(model[$primitivesList].length).to.equal(1);\n      expect(model.materials.length).to.equal(1);\n      expect(model[$primitivesList][0][$initialMaterialIdx]).to.equal(0);\n      expect(model.materials[0].name).to.equal('Default');\n    });\n  });\n\n  suite('Static Primitive Without Variant', () => {\n    let model: Model;\n    setup(async () => {\n      const threeGLTF = await loadThreeGLTF(CUBE_GLTF_PATH);\n      model = new Model(CorrelatedSceneGraph.from(threeGLTF));\n    });\n\n    test('Should not have any primitives with variant info', async () => {\n      let hasVariantInfoCount = 0;\n      for (const primitive of model![$primitivesList]) {\n        if (primitive.variantInfo.size > 0) {\n          hasVariantInfoCount++;\n        }\n      }\n      expect(hasVariantInfoCount).equals(0);\n    });\n  });\n\n  suite('Static Primitive With Variant', () => {\n    let model: Model;\n    setup(async () => {\n      const threeGLTF = await loadThreeGLTF(CUBES_GLTF_PATH);\n      model = new Model(CorrelatedSceneGraph.from(threeGLTF));\n    });\n\n    test('Primitive count matches glTF file', async () => {\n      expect(model![$primitivesList].length).to.equal(2);\n    });\n\n    test('Primitives should have expected variant names', async () => {\n      expect(findPrimitivesWithVariant(model, 'Purple Yellow')).to.not.be.null;\n      expect(findPrimitivesWithVariant(model, 'Yellow Yellow')).to.not.be.null;\n      expect(findPrimitivesWithVariant(model, 'Yellow Red')).to.not.be.null;\n    });\n\n    test('Should not have any primitives without variant info', async () => {\n      let hasNoVariantInfoCount = 0;\n      for (const primitive of model![$primitivesList]) {\n        if (primitive.variantInfo == null) {\n          hasNoVariantInfoCount++;\n        }\n      }\n      expect(hasNoVariantInfoCount).equals(0);\n    });\n\n    test('Switching to incorrect variant name', async () => {\n      const primitive = findPrimitivesWithVariant(model, 'Purple Yellow')![0];\n      const material = await primitive.enableVariant('Does not exist');\n      expect(material).to.be.null;\n    });\n\n    test('Switching to current variant', async () => {\n      const primitives = findPrimitivesWithVariant(model, 'Purple Yellow')!;\n      const materials = new Array<MeshStandardMaterial>();\n      for (const primitive of primitives) {\n        materials.push(\n            await primitive.enableVariant('Yellow Yellow') as\n            MeshStandardMaterial);\n      }\n      expect(materials).to.not.be.empty;\n      expect(materials.find((material: MeshStandardMaterial) => {\n        return material.name === 'yellow';\n      })).to.not.be.null;\n    });\n\n    test('Switching to variant and then switch back', async () => {\n      const primitives = findPrimitivesWithVariant(model, 'Purple Yellow')!;\n      let materials = new Array<MeshStandardMaterial>();\n      for (const primitive of primitives) {\n        materials.push(\n            await primitive.enableVariant('Yellow Yellow') as\n            MeshStandardMaterial);\n      }\n      expect(materials.find((material: MeshStandardMaterial) => {\n        return material.name === 'yellow';\n      })).to.not.be.null;\n\n      materials = new Array<MeshStandardMaterial>();\n      for (const primitive of primitives) {\n        materials.push(\n            await primitive.enableVariant('Purple Yellow') as\n            MeshStandardMaterial);\n      }\n      expect(materials.find((material: MeshStandardMaterial) => {\n        return material.name === 'purple';\n      })).to.not.be.null;\n    });\n\n    test('Primitive switches to initial material', async () => {\n      const primitive = findPrimitivesWithVariant(model, 'Purple Yellow')![0];\n\n      // Gets current material.\n      const initialMaterial = await primitive.enableVariant('Purple Yellow');\n      // Switches to variant.\n      const variantMaterial = await primitive.enableVariant('Yellow Red');\n      expect(initialMaterial).to.not.equal(variantMaterial)\n      // Switches to initial material.\n      const resetMaterial = await primitive.enableVariant(null);\n      expect(resetMaterial).to.equal(initialMaterial);\n    });\n  });\n\n  suite('Mesh with multiple primitives each with variants', () => {\n    let model: Model;\n    setup(async () => {\n      const threeGLTF = await loadThreeGLTF(MESH_PRIMITIVES_GLB_PATH);\n      model = new Model(CorrelatedSceneGraph.from(threeGLTF));\n    });\n\n    test('Primitive count matches glTF file', async () => {\n      expect(model![$primitivesList].length).to.equal(3);\n    });\n\n    test('Primitives should have expected variant names', async () => {\n      expect(findPrimitivesWithVariant(model, 'Normal')).to.not.be.null;\n      expect(findPrimitivesWithVariant(model, 'Inverse')).to.not.be.null;\n    });\n\n    test('Switching to incorrect variant name', async () => {\n      const primitive = findPrimitivesWithVariant(model, 'Normal')![0];\n      const material = await primitive.enableVariant('Does not exist');\n      expect(material).to.be.null;\n    });\n\n    test('Switching to variant and then switch back', async () => {\n      const MATERIAL_NAME = 'STEEL BLACK';\n      const primitives = findPrimitivesWithVariant(model, 'Normal')!;\n      let materials = new Array<MeshStandardMaterial>();\n      for (const primitive of primitives) {\n        materials.push(\n            await primitive.enableVariant('Inverse') as MeshStandardMaterial);\n      }\n\n      expect(materials).to.not.be.empty;\n      expect(materials.find((material: MeshStandardMaterial) => {\n        return material.name === MATERIAL_NAME;\n      })).to.be.undefined;\n\n      materials = new Array<MeshStandardMaterial>();\n      for (const primitive of primitives) {\n        materials.push(\n            await primitive.enableVariant('Normal') as MeshStandardMaterial);\n      }\n\n      expect(materials.find((material: MeshStandardMaterial) => {\n        return material.name === MATERIAL_NAME;\n      })).to.be.ok;\n    });\n\n    test('Primitive switches to initial material', async () => {\n      const primitive = findPrimitivesWithVariant(model, 'Normal')![0];\n\n      // Gets current material.\n      const initialMaterial = await primitive.enableVariant('Normal');\n      // Switches to variant.\n      const variantMaterial = await primitive.enableVariant('Inverse');\n      expect(initialMaterial).to.not.equal(variantMaterial)\n      // Switches to initial material.\n      const resetMaterial = await primitive.enableVariant(null);\n      expect(resetMaterial).to.equal(initialMaterial);\n    });\n  });\n\n  suite('Skinned Primitive Without Variant', () => {\n    test('Primitive count matches glTF file', async () => {\n      const threeGLTF = await loadThreeGLTF(BRAIN_STEM_GLB_PATH);\n      const model = new Model(CorrelatedSceneGraph.from(threeGLTF));\n      expect(model![$primitivesList].length).to.equal(59);\n    });\n  });\n});\n"]}