{"version":3,"file":"deserializers.js","sourceRoot":"","sources":["../../src/styles/deserializers.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;GAaG;AAEH,OAAO,EAAY,gBAAgB,EAAC,MAAM,cAAc,CAAC;AAGzD;;;;;;;;;;;;;;;;;;;GAmBG;AACH,MAAM,CAAC,MAAM,uBAAuB,GAAG,CAAmB,YAAiB,EAAE,EAAE,CAC3E,CAAC,WAAmB,EAAU,EAAE;IAC9B,IAAI;QACF,MAAM,WAAW,GAAG,gBAAgB,CAAC,WAAW,CAAC,CAAC;QAClD,MAAM,KAAK,GAAG,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC;aAC3C,MAAM,CACH,CAAC,SAAS,EAA0B,EAAE,CAClC,SAAS,IAAI,SAAS,CAAC,IAAI,KAAK,OAAO,CAAC;aAC/C,GAAG,CAAC,SAAS,CAAC,EAAE,CAAC,SAAS,CAAC,KAAU,CAAC;aACtC,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,YAAY,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QAEnE,sEAAsE;QACtE,yDAAyD;QACzD,MAAM,MAAM,GAAG,IAAI,GAAG,EAAK,CAAC;QAC5B,KAAK,MAAM,IAAI,IAAI,KAAK,EAAE;YACxB,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;SAClB;QACD,OAAO,MAAM,CAAC;KACf;IAAC,OAAO,MAAM,EAAE;KAChB;IACD,OAAO,IAAI,GAAG,EAAE,CAAC;AACnB,CAAC,CAAC","sourcesContent":["/* @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {IdentNode, parseExpressions} from './parsers.js';\n\n\n/**\n * For our purposes, an enumeration is a fixed set of CSS-expression-compatible\n * names. When serialized, a selected subset of the members may be specified as\n * whitespace-separated strings. An enumeration deserializer is a function that\n * parses a serialized subset of an enumeration and returns any members that are\n * found as a Set.\n *\n * The following example will produce a deserializer for the days of the\n * week:\n *\n * const deserializeDaysOfTheWeek = enumerationDeserializer([\n *   'Monday',\n *   'Tuesday',\n *   'Wednesday',\n *   'Thursday',\n *   'Friday',\n *   'Saturday',\n *   'Sunday'\n * ]);\n */\nexport const enumerationDeserializer = <T extends string>(allowedNames: T[]) =>\n    (valueString: string): Set<T> => {\n      try {\n        const expressions = parseExpressions(valueString);\n        const names = (expressions.length ? expressions[0].terms : [])\n                          .filter<IdentNode>(\n                              (valueNode): valueNode is IdentNode =>\n                                  valueNode && valueNode.type === 'ident')\n                          .map(valueNode => valueNode.value as T)\n                          .filter(name => allowedNames.indexOf(name) > -1);\n\n        // NOTE(cdata): IE11 does not support constructing a Set directly from\n        // an iterable, so we need to manually add all the items:\n        const result = new Set<T>();\n        for (const name of names) {\n          result.add(name);\n        }\n        return result;\n      } catch (_error) {\n      }\n      return new Set();\n    };"]}