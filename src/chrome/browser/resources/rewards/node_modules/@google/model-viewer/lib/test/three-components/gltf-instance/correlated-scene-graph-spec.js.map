{"version":3,"file":"correlated-scene-graph-spec.js","sourceRoot":"","sources":["../../../../src/test/three-components/gltf-instance/correlated-scene-graph-spec.ts"],"names":[],"mappings":"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","sourcesContent":["/* @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Group, Mesh, MeshStandardMaterial, Object3D} from 'three';\nimport {GLTF} from 'three/examples/jsm/loaders/GLTFLoader.js';\nimport * as SkeletonUtils from 'three/examples/jsm/utils/SkeletonUtils.js';\n\nimport {CorrelatedSceneGraph} from '../../../three-components/gltf-instance/correlated-scene-graph.js';\nimport {Material, PBRMetallicRoughness, Texture, TextureInfo} from '../../../three-components/gltf-instance/gltf-2.0.js';\nimport {assetPath, loadThreeGLTF} from '../../helpers.js';\n\n\n\nconst expect = chai.expect;\n\nconst HORSE_GLB_PATH = assetPath('models/Horse.glb');\nconst ORDER_TEST_GLB_PATH = assetPath('models/order-test/order-test.glb');\nconst KHRONOS_TRIANGLE_GLB_PATH =\n    assetPath('models/glTF-Sample-Models/2.0/Triangle/glTF/Triangle.gltf');\nconst ENGINE_GLB_PATH = assetPath(\n    'models/glTF-Sample-Models/2.0/2CylinderEngine/glTF-Binary/2CylinderEngine.glb');\nconst ASTRONAUT_GLB_PATH = assetPath('models/Astronaut.glb');\n\nconst getObject3DByName =\n    <T extends Object3D>(root: Object3D, name: string): T|null => {\n      const objects = [root];\n      while (objects.length) {\n        const next = objects.shift()!;\n        if (next.name === name) {\n          return next as T;\n        }\n        objects.push(...next.children);\n      }\n      return null;\n    };\n\nsuite('correlated-scene-graph', () => {\n  suite('CorrelatedSceneGraph', () => {\n    test('maps Three.js materials to glTF elements', async () => {\n      const threeGLTF = await loadThreeGLTF(HORSE_GLB_PATH);\n      const correlatedSceneGraph = CorrelatedSceneGraph.from(threeGLTF);\n\n      const threeMaterial =\n          ((threeGLTF.scene.children[0] as Mesh).material as\n           MeshStandardMaterial);\n      const gltfMaterial = threeGLTF.parser.json.materials[0]! as Material;\n      const gltfReference =\n          correlatedSceneGraph.threeObjectMap.get(threeMaterial);\n\n      expect(gltfReference).to.be.ok;\n\n      const {materials} = gltfReference!;\n\n      const referencedGltfMaterial =\n          threeGLTF.parser.json['materials'][materials!];\n\n      expect(referencedGltfMaterial).to.be.equal(gltfMaterial);\n    });\n\n    test('maps Three.js textures to glTF elements', async () => {\n      const threeGLTF = await loadThreeGLTF(ORDER_TEST_GLB_PATH);\n      const correlatedSceneGraph = CorrelatedSceneGraph.from(threeGLTF);\n\n      const threeMaterial =\n          getObject3DByName<Mesh>(threeGLTF.scene, 'Node0')!.material as\n          MeshStandardMaterial;\n      const threeTexture = threeMaterial.map!;\n\n      const gltfMaterial = threeGLTF.parser.json.materials[2]! as Material;\n      const textureIndex =\n          ((gltfMaterial.pbrMetallicRoughness as PBRMetallicRoughness)\n               .baseColorTexture as TextureInfo)\n              .index;\n\n      const gltfTexture =\n          threeGLTF.parser.json.textures[textureIndex] as Texture;\n      const gltfReference =\n          correlatedSceneGraph.threeObjectMap.get(threeTexture);\n\n      expect(gltfReference).to.be.ok;\n\n      const {textures} = gltfReference!;\n\n      const referencedGltfTexture =\n          threeGLTF.parser.json['textures'][textures!];\n\n      expect(referencedGltfTexture).to.be.equal(gltfTexture);\n    });\n\n    test('has a mapping for each node in scene', async () => {\n      const threeGLTF = await loadThreeGLTF(ENGINE_GLB_PATH);\n      const correlatedSceneGraph = CorrelatedSceneGraph.from(threeGLTF);\n\n      threeGLTF.scene.traverse(node => {\n        if (threeGLTF.scene === node) {\n          return;\n        }\n        expect(correlatedSceneGraph.threeObjectMap.get(node)).to.be.ok;\n      });\n    });\n\n    test('has a mapping for each material & texture', async () => {\n      const threeGLTF = await loadThreeGLTF(ASTRONAUT_GLB_PATH);\n      const correlatedSceneGraph = CorrelatedSceneGraph.from(threeGLTF);\n\n      for (const texture of threeGLTF.parser.json.textures) {\n        expect(correlatedSceneGraph.gltfElementMap.get(texture)).to.be.ok;\n      }\n\n      for (const material of threeGLTF.parser.json.materials) {\n        expect(correlatedSceneGraph.gltfElementMap.get(material)).to.be.ok;\n      }\n    });\n\n    suite('when correlating a cloned glTF', () => {\n      test('creates a GLTFLoader \"default\" material', async () => {\n        const threeGLTF = await loadThreeGLTF(KHRONOS_TRIANGLE_GLB_PATH);\n        const correlatedSceneGraph = CorrelatedSceneGraph.from(threeGLTF);\n\n        const scene = SkeletonUtils.clone(threeGLTF.scene) as Group;\n        const scenes: Group[] = [scene];\n\n        const cloneThreeGLTF: GLTF = {...threeGLTF, scene, scenes};\n\n        const cloneCorrelatedSceneGraph =\n            CorrelatedSceneGraph.from(cloneThreeGLTF, correlatedSceneGraph);\n\n        let name;\n        cloneCorrelatedSceneGraph.threeObjectMap.forEach(\n            (mappings, threeObject) => {\n              if ((threeObject as MeshStandardMaterial).isMaterial) {\n                const index = mappings.materials!;\n                name = cloneCorrelatedSceneGraph.gltf.materials![index].name;\n              }\n            });\n        expect(name).to.be.eq('Default');\n      });\n\n      test('Only one default material after cloning', async () => {\n        const threeGLTF = await loadThreeGLTF(KHRONOS_TRIANGLE_GLB_PATH);\n        const correlatedSceneGraph = CorrelatedSceneGraph.from(threeGLTF);\n\n        const scene = SkeletonUtils.clone(threeGLTF.scene) as Group;\n        const scenes: Group[] = [scene];\n\n        const cloneThreeGLTF: GLTF = {...threeGLTF, scene, scenes};\n\n        const cloneCorrelatedSceneGraph =\n            CorrelatedSceneGraph.from(cloneThreeGLTF, correlatedSceneGraph);\n\n        expect(cloneCorrelatedSceneGraph.gltf.materials!.length).to.be.eq(1);\n        expect(cloneCorrelatedSceneGraph.gltf.materials![0].name)\n            .to.be.eq('Default');\n      });\n    });\n  });\n});\n"]}