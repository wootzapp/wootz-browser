{"version":3,"file":"animation.js","sourceRoot":"","sources":["../../src/features/animation.ts"],"names":[],"mappings":"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","sourcesContent":["/* @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {property} from 'lit/decorators.js';\nimport {LoopOnce, LoopPingPong, LoopRepeat} from 'three';\n\nimport ModelViewerElementBase, {$getModelIsVisible, $needsRender, $onModelLoad, $renderer, $scene, $tick} from '../model-viewer-base.js';\nimport {Constructor} from '../utilities.js';\n\nconst MILLISECONDS_PER_SECOND = 1000.0\n\nconst $changeAnimation = Symbol('changeAnimation');\nconst $paused = Symbol('paused');\n\ninterface PlayAnimationOptions {\n  repetitions: number, pingpong: boolean,\n}\n\nconst DEFAULT_PLAY_OPTIONS: PlayAnimationOptions = {\n  repetitions: Infinity,\n  pingpong: false\n};\n\nexport declare interface AnimationInterface {\n  autoplay: boolean;\n  animationName: string|void;\n  animationCrossfadeDuration: number;\n  readonly availableAnimations: Array<string>;\n  readonly paused: boolean;\n  readonly duration: number;\n  currentTime: number;\n  timeScale: number;\n  pause(): void;\n  play(options?: PlayAnimationOptions): void;\n}\n\nexport const AnimationMixin = <T extends Constructor<ModelViewerElementBase>>(\n    ModelViewerElement: T): Constructor<AnimationInterface>&T => {\n  class AnimationModelViewerElement extends ModelViewerElement {\n    @property({type: Boolean}) autoplay: boolean = false;\n    @property({type: String, attribute: 'animation-name'})\n    animationName: string|undefined = undefined;\n    @property({type: Number, attribute: 'animation-crossfade-duration'})\n    animationCrossfadeDuration: number = 300;\n\n    protected[$paused]: boolean = true;\n\n    constructor(...args: any[]) {\n      super(args);\n\n      this[$scene].subscribeMixerEvent('loop', (e) => {\n        const count = e.action._loopCount;\n        this.dispatchEvent(new CustomEvent('loop', {detail: {count}}));\n      });\n      this[$scene].subscribeMixerEvent('finished', () => {\n        this[$paused] = true;\n        this.dispatchEvent(new CustomEvent('finished'));\n      });\n    }\n\n    /**\n     * Returns an array\n     */\n    get availableAnimations(): Array<string> {\n      if (this.loaded) {\n        return this[$scene].animationNames;\n      }\n\n      return [];\n    }\n\n    get duration(): number {\n      return this[$scene].duration;\n    }\n\n    get paused(): boolean {\n      return this[$paused];\n    }\n\n    get currentTime(): number {\n      return this[$scene].animationTime;\n    }\n\n    set currentTime(value: number) {\n      this[$scene].animationTime = value;\n      this[$needsRender]();\n    }\n\n    get timeScale(): number {\n      return this[$scene].animationTimeScale;\n    }\n\n    set timeScale(value: number) {\n      this[$scene].animationTimeScale = value;\n    }\n\n    pause() {\n      if (this[$paused]) {\n        return;\n      }\n\n      this[$paused] = true;\n      this.dispatchEvent(new CustomEvent('pause'));\n    }\n\n    play(options?: PlayAnimationOptions) {\n      if (this.availableAnimations.length > 0) {\n        this[$paused] = false;\n\n        this[$changeAnimation](options);\n\n        this.dispatchEvent(new CustomEvent('play'));\n      }\n    }\n\n    [$onModelLoad]() {\n      super[$onModelLoad]();\n\n      this[$paused] = true;\n\n      if (this.autoplay) {\n        this.play();\n      }\n    }\n\n    [$tick](_time: number, delta: number) {\n      super[$tick](_time, delta);\n\n      if (this[$paused] ||\n          (!this[$getModelIsVisible]() && !this[$renderer].isPresenting)) {\n        return;\n      }\n\n      this[$scene].updateAnimation(delta / MILLISECONDS_PER_SECOND);\n\n      this[$needsRender]();\n    }\n\n    updated(changedProperties: Map<string, any>) {\n      super.updated(changedProperties);\n\n      if (changedProperties.has('autoplay') && this.autoplay) {\n        this.play();\n      }\n\n      if (changedProperties.has('animationName')) {\n        this[$changeAnimation]();\n      }\n    }\n\n    [$changeAnimation](options: PlayAnimationOptions = DEFAULT_PLAY_OPTIONS) {\n      const repetitions = options.repetitions ?? Infinity;\n      const mode = options.pingpong ?\n          LoopPingPong :\n          (repetitions === 1 ? LoopOnce : LoopRepeat);\n      this[$scene].playAnimation(\n          this.animationName,\n          this.animationCrossfadeDuration / MILLISECONDS_PER_SECOND,\n          mode,\n          repetitions);\n\n      // If we are currently paused, we need to force a render so that\n      // the scene updates to the first frame of the new animation\n      if (this[$paused]) {\n        this[$scene].updateAnimation(0);\n        this[$needsRender]();\n      }\n    }\n  }\n\n  return AnimationModelViewerElement;\n};\n"]}