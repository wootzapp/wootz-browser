{"version":3,"file":"VariantMaterialExporterPlugin.js","sourceRoot":"","sources":["../../../src/three-components/gltf-instance/VariantMaterialExporterPlugin.ts"],"names":[],"mappings":"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","sourcesContent":["/* @license\r\n * Copyright 2021 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the 'License');\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an 'AS IS' BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n/**\r\n * Materials variants extension\r\n *\r\n * Specification:\r\n * https://github.com/takahirox/three-gltf-extensions/tree/main/loaders/KHR_materials_variants\r\n */\r\n\r\n/**\r\n * The code in this file is based on\r\n * https://github.com/takahirox/three-gltf-extensions/tree/main/exporters/KHR_materials_variants\r\n */\r\n\r\nimport {Material, Mesh, Object3D} from 'three';\r\n\r\nimport {VariantData} from '../../features/scene-graph/model';\r\n\r\nimport {UserDataVariantMapping} from './VariantMaterialLoaderPlugin';\r\n\r\n\r\n\r\n/**\r\n * @param object {THREE.Object3D}\r\n * @return {boolean}\r\n */\r\nconst compatibleObject = (object: Object3D) => {\r\n  // @TODO: Need properer variantMaterials format validation?\r\n  return (object as Mesh).material !==\r\n      undefined &&        // easier than (!object.isMesh && !object.isLine &&\r\n                          // !object.isPoints)\r\n      object.userData &&  // just in case\r\n      object.userData.variantMaterials &&\r\n      // Is this line costly?\r\n      !!Array\r\n            .from((object.userData.variantMaterials as\r\n                   Map<number, UserDataVariantMapping>)\r\n                      .values())\r\n            .filter(m => compatibleMaterial(m.material));\r\n};\r\n\r\n/**\r\n * @param material {THREE.Material}\r\n * @return {boolean}\r\n */\r\nconst compatibleMaterial = (material: Material|null) => {\r\n  // @TODO: support multi materials?\r\n  return material && material.isMaterial && !Array.isArray(material);\r\n};\r\n\r\nexport default class GLTFExporterMaterialsVariantsExtension {\r\n  writer: any;  // @TODO: Replace with GLTFWriter when GLTFExporter plugin TS\r\n                // declaration is ready\r\n  name: string;\r\n  variantNames: string[];\r\n\r\n  constructor(writer: any) {\r\n    this.writer = writer;\r\n    this.name = 'KHR_materials_variants';\r\n    this.variantNames = [];\r\n  }\r\n\r\n  beforeParse(objects: Object3D[]) {\r\n    // Find all variant names and store them to the table\r\n    const variantNameSet = new Set<string>();\r\n    for (const object of objects) {\r\n      object.traverse(o => {\r\n        if (!compatibleObject(o)) {\r\n          return;\r\n        }\r\n        const variantMaterials =\r\n            o.userData.variantMaterials as Map<number, UserDataVariantMapping>;\r\n        const variantDataMap =\r\n            o.userData.variantData as Map<string, VariantData>;\r\n        for (const [variantName, variantData] of variantDataMap) {\r\n          const variantMaterial = variantMaterials.get(variantData.index);\r\n          // Ignore unloaded variant materials\r\n          if (variantMaterial && compatibleMaterial(variantMaterial.material)) {\r\n            variantNameSet.add(variantName);\r\n          }\r\n        }\r\n      });\r\n    }\r\n    // We may want to sort?\r\n    variantNameSet.forEach(name => this.variantNames.push(name));\r\n  }\r\n\r\n  writeMesh(mesh: Mesh, meshDef: any) {\r\n    if (!compatibleObject(mesh)) {\r\n      return;\r\n    }\r\n\r\n    const userData = mesh.userData;\r\n    const variantMaterials =\r\n        userData.variantMaterials as Map<number, UserDataVariantMapping>;\r\n    const variantDataMap = userData.variantData as Map<string, VariantData>;\r\n    const mappingTableã€€=\r\n        new Map<number, {material: number, variants: number[]}>();\r\n\r\n    // Removes gaps in the variant indices list (caused by deleting variants).\r\n    const reIndexedVariants = new Map<number, number>();\r\n    const variants = Array.from(variantDataMap.values()).sort((a, b) => {\r\n      return a.index - b.index;\r\n    });\r\n    for (const [i, variantData] of variants.entries()) {\r\n      reIndexedVariants.set(variantData.index, i);\r\n    }\r\n\r\n    for (const variantData of variantDataMap.values()) {\r\n      const variantInstance = variantMaterials.get(variantData.index);\r\n      if (!variantInstance || !compatibleMaterial(variantInstance.material)) {\r\n        continue;\r\n      }\r\n\r\n      const materialIndex =\r\n          this.writer.processMaterial(variantInstance.material);\r\n      if (!mappingTable.has(materialIndex)) {\r\n        mappingTable.set(\r\n            materialIndex, {material: materialIndex, variants: []});\r\n      }\r\n      mappingTable.get(materialIndex)!.variants.push(\r\n          reIndexedVariants.get(variantData.index)!);\r\n    }\r\n\r\n    const mappingsDef =\r\n        Array.from(mappingTable.values())\r\n            .map((m => {return m.variants.sort((a, b) => a - b) && m}))\r\n            .sort((a, b) => a.material - b.material);\r\n\r\n    if (mappingsDef.length === 0) {\r\n      return;\r\n    }\r\n\r\n    const originalMaterialIndex =\r\n        compatibleMaterial(userData.originalMaterial) ?\r\n        this.writer.processMaterial(userData.originalMaterial) :\r\n        -1;\r\n\r\n    for (const primitiveDef of meshDef.primitives) {\r\n      // Override primitiveDef.material with original material.\r\n      if (originalMaterialIndex >= 0) {\r\n        primitiveDef.material = originalMaterialIndex;\r\n      }\r\n      primitiveDef.extensions = primitiveDef.extensions || {};\r\n      primitiveDef.extensions[this.name] = {mappings: mappingsDef};\r\n    }\r\n  }\r\n\r\n  afterParse() {\r\n    if (this.variantNames.length === 0) {\r\n      return;\r\n    }\r\n\r\n    const root = this.writer.json;\r\n    root.extensions = root.extensions || {};\r\n\r\n    const variantsDef = this.variantNames.map(n => {\r\n      return {name: n};\r\n    });\r\n    root.extensions[this.name] = {variants: variantsDef};\r\n    this.writer.extensionsUsed[this.name] = true;\r\n  }\r\n}\r\n"]}