{"version":3,"file":"parsers-spec.js","sourceRoot":"","sources":["../../../src/test/styles/parsers-spec.ts"],"names":[],"mappings":"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","sourcesContent":["/* @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {ASTWalker, IdentNode, NumberNode, numberNode, parseExpressions} from '../../styles/parsers.js';\nimport {expressionNode, functionNode, hexNode, identNode, operatorNode} from '../helpers.js';\n\nconst expect = chai.expect;\n\nsuite('parsers', () => {\n  suite('parseExpressions', () => {\n    test('parses single numbers', () => {\n      expect(parseExpressions('123rad')).to.be.eql([expressionNode(\n          [numberNode(123, 'rad')])]);\n    });\n\n    test('parses number tuples', () => {\n      expect(parseExpressions('123rad 3.14deg -1m 2cm')).to.be.eql([\n        expressionNode([\n          numberNode(123, 'rad'),\n          numberNode(3.14, 'deg'),\n          numberNode(-1, 'm'),\n          numberNode(2, 'cm')\n        ])\n      ]);\n    });\n\n    test('parses exponential numbers', () => {\n      expect(parseExpressions('123e10mm 123E10 123e-3 4e+3')).to.be.eql([\n        expressionNode([\n          numberNode(123e10, 'mm'),\n          numberNode(123e10, null),\n          numberNode(123e-3, null),\n          numberNode(4e3, null)\n        ])\n      ]);\n    });\n\n    test('parses hex colors', () => {\n      expect(parseExpressions('#fff')).to.be.eql([expressionNode(\n          [hexNode('fff')])]);\n      expect(parseExpressions('#abc123')).to.be.eql([expressionNode(\n          [hexNode('abc123')])]);\n      expect(parseExpressions('#daf012ee')).to.be.eql([expressionNode(\n          [hexNode('daf012ee')])]);\n    });\n\n    test('parses functions', () => {\n      expect(parseExpressions('rgba(255, 123, 0, 0.25)'))\n          .to.be.eql([expressionNode([functionNode('rgba', [\n            expressionNode([numberNode(255, null)]),\n            expressionNode([numberNode(123, null)]),\n            expressionNode([numberNode(0, null)]),\n            expressionNode([numberNode(0.25, null)]),\n          ])])]);\n    });\n\n    test('parses nested functions', () => {\n      expect(parseExpressions('rgba(255, calc(100 + var(--blue)), 0, 0.25)'))\n          .to.be.eql([expressionNode([functionNode('rgba', [\n            expressionNode([numberNode(255, null)]),\n            expressionNode([functionNode(\n                'calc', [expressionNode([\n                  numberNode(100, null),\n                  operatorNode('+'),\n                  functionNode('var', [expressionNode([identNode('--blue')])])\n                ])])]),\n            expressionNode([numberNode(0, null)]),\n            expressionNode([numberNode(0.25, null)]),\n          ])])]);\n    });\n\n    test('parses calc algebra', () => {\n      expect(parseExpressions('1m - -2rad / 3 + 4deg * -10.5')).to.be.eql([\n        expressionNode([\n          numberNode(1, 'm'),\n          operatorNode('-'),\n          numberNode(-2, 'rad'),\n          operatorNode('/'),\n          numberNode(3, null),\n          operatorNode('+'),\n          numberNode(4, 'deg'),\n          operatorNode('*'),\n          numberNode(-10.5, null)\n        ])\n      ]);\n    });\n\n    suite('failure cases', () => {\n      suite('mismatched parens', () => {\n        test('trailing paren is gracefully dropped', () => {\n          expect(parseExpressions('calc(calc(123)))')).to.be.eql([\n            expressionNode([functionNode(\n                'calc',\n                [expressionNode([functionNode(\n                    'calc', [expressionNode([numberNode(123, null)])])])])])\n          ]);\n        });\n      });\n    });\n  });\n\n  suite('ASTWalker', () => {\n    test('only walks configured node types', () => {\n      const astWalker =\n          new ASTWalker<NumberNode|IdentNode>(['number', 'ident']);\n      const ast = parseExpressions('calc(123 + var(--size))')\n      let visitedNodes = 0;\n\n      astWalker.walk(ast, (node: NumberNode|IdentNode) => {\n        expect(node.type === 'number' || node.type === 'ident').to.be.true;\n        visitedNodes++;\n      });\n\n      expect(visitedNodes).to.be.equal(4);\n    });\n  });\n});"]}