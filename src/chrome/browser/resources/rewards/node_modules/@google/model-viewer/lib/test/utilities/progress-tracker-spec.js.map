{"version":3,"file":"progress-tracker-spec.js","sourceRoot":"","sources":["../../../src/test/utilities/progress-tracker-spec.ts"],"names":[],"mappings":"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","sourcesContent":["/* @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {waitForEvent} from '../../utilities.js';\nimport {Activity, ProgressDetails, ProgressTracker} from '../../utilities/progress-tracker.js';\n\nconst expect = chai.expect;\n\nsuite('ProgressTracker', () => {\n  let progressTracker: ProgressTracker;\n  setup(() => {\n    progressTracker = new ProgressTracker();\n  });\n\n  test('starts out with zero ongoing activities', () => {\n    expect(progressTracker.ongoingActivityCount).to.be.equal(0);\n  });\n\n  suite('an activity', () => {\n    let firstActivity: Activity;\n\n    setup(() => {\n      firstActivity = progressTracker.beginActivity();\n    });\n\n    test('increases the ongoing activities count', () => {\n      expect(progressTracker.ongoingActivityCount).to.be.equal(1);\n    });\n\n    suite('with partial progress', () => {\n      test(\n          'causes the ProgressTracker to dispatch a progress event',\n          async () => {\n            const progressEventDispatches =\n                waitForEvent<CustomEvent<ProgressDetails>>(\n                    progressTracker, 'progress');\n            firstActivity(0.5);\n            const event = await progressEventDispatches;\n\n            expect(event.detail.totalProgress).to.be.equal(0.5);\n\n            const progressEventDispatches2 =\n                waitForEvent<CustomEvent<ProgressDetails>>(\n                    progressTracker, 'progress');\n            firstActivity(0.75);\n            const event2 = await progressEventDispatches2;\n\n            expect(event2.detail.totalProgress).to.be.equal(0.75);\n          });\n\n      test('only allows progress to advance', () => {\n        const initialProgress = firstActivity(0.5);\n        const nextProgress = firstActivity(0.2);\n\n        expect(nextProgress).to.be.equal(initialProgress);\n      });\n\n      suite('a late-added activity', () => {\n        setup(() => {\n          firstActivity(0.5);\n        });\n\n        test('is added to the current stack of activities', () => {\n          progressTracker.beginActivity();\n          expect(progressTracker.ongoingActivityCount).to.be.equal(2);\n        });\n\n        test('defers marking all activities completed', () => {\n          progressTracker.beginActivity();\n          firstActivity(1.0);\n          expect(progressTracker.ongoingActivityCount).to.be.equal(2);\n        });\n      });\n    });\n\n    suite('completed', () => {\n      test('ProgressTracker dispatches a final progress event', async () => {\n        const progressEventDispatches =\n            waitForEvent<CustomEvent<ProgressDetails>>(\n                progressTracker, 'progress');\n        firstActivity(1.0);\n        const event: CustomEvent<ProgressDetails> =\n            await progressEventDispatches;\n\n        expect(event.detail.totalProgress).to.be.equal(1);\n      });\n\n      test('ProgressTracker resets ongoing activity count', () => {\n        firstActivity(1.0);\n        expect(progressTracker.ongoingActivityCount).to.be.equal(0);\n      });\n    });\n\n    suite('with another activity', () => {\n      let secondActivity: Activity;\n\n      setup(() => {\n        secondActivity = progressTracker.beginActivity();\n      });\n\n      test('increases the ongoing activity count', () => {\n        expect(progressTracker.ongoingActivityCount).to.be.equal(2);\n      });\n\n      test('each activity progresses independently', () => {\n        let firstProgress = firstActivity(0.2);\n        let secondProgress = secondActivity(0.1);\n\n        expect(firstProgress).to.be.equal(0.2);\n        expect(secondProgress).to.be.equal(0.1);\n\n        secondProgress = secondActivity(1.0);\n        firstProgress = firstActivity(0.3);\n\n        expect(firstProgress).to.be.equal(0.3);\n        expect(secondProgress).to.be.equal(1.0);\n      });\n\n      suite('all activities completed', () => {\n        test('ProgressTracker resets ongoing activity count', () => {\n          firstActivity(1.0);\n          secondActivity(1.0);\n          expect(progressTracker.ongoingActivityCount).to.be.equal(0);\n        });\n\n        test(\n            'ProgressTracker dispatches a final progress event after the last activity is completed',\n            async () => {\n              secondActivity(1.0);\n              const progressEventDispatches =\n                  waitForEvent<CustomEvent<ProgressDetails>>(\n                      progressTracker, 'progress');\n              firstActivity(1.0);\n              const event: CustomEvent<ProgressDetails> =\n                  await progressEventDispatches;\n\n              expect(event.detail.totalProgress).to.be.equal(1);\n            });\n      });\n    });\n  });\n});"]}