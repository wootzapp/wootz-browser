{"version":3,"file":"Shadow.js","sourceRoot":"","sources":["../../src/three-components/Shadow.ts"],"names":[],"mappings":"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","sourcesContent":["/* @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {BackSide, Box3, Material, Mesh, MeshBasicMaterial, MeshDepthMaterial, Object3D, OrthographicCamera, PlaneGeometry, RGBAFormat, Scene, ShaderMaterial, Vector3, WebGLRenderer, WebGLRenderTarget, WebGLRenderTargetOptions} from 'three';\nimport {HorizontalBlurShader} from 'three/examples/jsm/shaders/HorizontalBlurShader.js';\nimport {VerticalBlurShader} from 'three/examples/jsm/shaders/VerticalBlurShader.js';\nimport {lerp} from 'three/src/math/MathUtils.js';\n\nimport {ModelScene} from './ModelScene';\n\nexport type Side = 'back'|'bottom';\n\n// The softness [0, 1] of the shadow is mapped to a resolution between\n// 2^LOG_MAX_RESOLUTION and 2^LOG_MIN_RESOLUTION.\nconst LOG_MAX_RESOLUTION = 9;\nconst LOG_MIN_RESOLUTION = 6;\n// Animated models are not in general contained in their bounding box, as this\n// is calculated only for their resting pose. We create a cubic shadow volume\n// for animated models sized to their largest bounding box dimension multiplied\n// by this scale factor.\nconst ANIMATION_SCALING = 2;\n// Since hard shadows are not lightened by blurring and depth, set a lower\n// default intensity to make them more perceptually similar to the intensity of\n// the soft shadows.\nconst DEFAULT_HARD_INTENSITY = 0.3;\n\n/**\n * The Shadow class creates a shadow that fits a given scene and follows a\n * target. This shadow will follow the scene without any updates needed so long\n * as the shadow and scene are both parented to the same object (call it the\n * scene) and this scene is passed as the target parameter to the shadow's\n * constructor. We also must constrain the scene to motion within the horizontal\n * plane and call the setRotation() method whenever the scene's Y-axis rotation\n * changes. For motion outside of the horizontal plane, this.needsUpdate must be\n * set to true.\n *\n * The softness of the shadow is controlled by changing its resolution, making\n * softer shadows faster, but less precise.\n */\nexport class Shadow extends Object3D {\n  private camera = new OrthographicCamera();\n  // private cameraHelper = new CameraHelper(this.camera);\n  private renderTarget: WebGLRenderTarget|null = null;\n  private renderTargetBlur: WebGLRenderTarget|null = null;\n  private depthMaterial = new MeshDepthMaterial();\n  private horizontalBlurMaterial = new ShaderMaterial(HorizontalBlurShader);\n  private verticalBlurMaterial = new ShaderMaterial(VerticalBlurShader);\n  private intensity = 0;\n  private softness = 1;\n  private floor: Mesh;\n  private blurPlane: Mesh;\n  private boundingBox = new Box3;\n  private size = new Vector3;\n  private maxDimension = 0;\n  private isAnimated = false;\n  public needsUpdate = false;\n\n  constructor(scene: ModelScene, softness: number, side: Side) {\n    super();\n\n    const {camera} = this;\n    camera.rotation.x = Math.PI / 2;\n    camera.left = -0.5;\n    camera.right = 0.5;\n    camera.bottom = -0.5;\n    camera.top = 0.5;\n    this.add(camera);\n\n    // this.add(this.cameraHelper);\n    // this.cameraHelper.updateMatrixWorld = function() {\n    //   this.matrixWorld = this.camera.matrixWorld;\n    // };\n\n    const plane = new PlaneGeometry();\n    const shadowMaterial = new MeshBasicMaterial({\n      // color: new Color(1, 0, 0),\n      opacity: 1,\n      transparent: true,\n      side: BackSide,\n    });\n    this.floor = new Mesh(plane, shadowMaterial);\n    this.floor.userData.shadow = true;\n    camera.add(this.floor);\n\n    // the plane onto which to blur the texture\n    this.blurPlane = new Mesh(plane);\n    this.blurPlane.visible = false;\n    camera.add(this.blurPlane);\n\n    scene.target.add(this);\n\n    // like MeshDepthMaterial, but goes from black to transparent\n    this.depthMaterial.onBeforeCompile = function(shader) {\n      shader.fragmentShader = shader.fragmentShader.replace(\n          'gl_FragColor = vec4( vec3( 1.0 - fragCoordZ ), opacity );',\n          'gl_FragColor = vec4( vec3( 0.0 ), ( 1.0 - fragCoordZ ) * opacity );');\n    };\n\n    this.horizontalBlurMaterial.depthTest = false;\n    this.verticalBlurMaterial.depthTest = false;\n\n    this.setScene(scene, softness, side);\n  }\n\n  /**\n   * Update the shadow's size and position for a new scene. Softness is also\n   * needed, as this controls the shadow's resolution.\n   */\n  setScene(scene: ModelScene, softness: number, side: Side) {\n    const {boundingBox, size, rotation, position} = this;\n\n    this.isAnimated = scene.animationNames.length > 0;\n    this.boundingBox.copy(scene.boundingBox);\n    this.size.copy(scene.size);\n    this.maxDimension = Math.max(size.x, size.y, size.z) *\n        (this.isAnimated ? ANIMATION_SCALING : 1);\n\n    this.boundingBox.getCenter(position);\n\n    if (side === 'back') {\n      const {min, max} = boundingBox;\n      [min.y, min.z] = [min.z, min.y];\n      [max.y, max.z] = [max.z, max.y];\n      [size.y, size.z] = [size.z, size.y];\n      rotation.x = Math.PI / 2;\n      rotation.y = Math.PI;\n    } else {\n      rotation.x = 0;\n      rotation.y = 0;\n    }\n\n    if (this.isAnimated) {\n      const minY = boundingBox.min.y;\n      const maxY = boundingBox.max.y;\n      size.y = this.maxDimension;\n      boundingBox.expandByVector(\n          size.subScalar(this.maxDimension).multiplyScalar(-0.5));\n      boundingBox.min.y = minY;\n      boundingBox.max.y = maxY;\n      size.set(this.maxDimension, maxY - minY, this.maxDimension);\n    }\n\n    if (side === 'bottom') {\n      position.y = boundingBox.min.y;\n    } else {\n      position.z = boundingBox.min.y;\n    }\n\n    this.setSoftness(softness);\n  }\n\n  /**\n   * Update the shadow's resolution based on softness (between 0 and 1). Should\n   * not be called frequently, as this results in reallocation.\n   */\n  setSoftness(softness: number) {\n    this.softness = softness;\n    const {size, camera} = this;\n    const scaleY = (this.isAnimated ? ANIMATION_SCALING : 1);\n\n    const resolution = scaleY *\n        Math.pow(\n            2,\n            LOG_MAX_RESOLUTION -\n                softness * (LOG_MAX_RESOLUTION - LOG_MIN_RESOLUTION));\n    this.setMapSize(resolution);\n\n    const softFar = size.y / 2;\n    const hardFar = size.y * scaleY;\n\n    camera.near = 0;\n    camera.far = lerp(hardFar, softFar, softness);\n    // we have co-opted opacity to scale the depth to clip\n    this.depthMaterial.opacity = 1.0 / softness;\n    camera.updateProjectionMatrix();\n    // this.cameraHelper.update();\n\n    this.setIntensity(this.intensity);\n    this.setOffset(0);\n  }\n\n  /**\n   * Lower-level version of the above function.\n   */\n  setMapSize(maxMapSize: number) {\n    const {size} = this;\n\n    if (this.isAnimated) {\n      maxMapSize *= ANIMATION_SCALING;\n    }\n\n    const baseWidth =\n        Math.floor(size.x > size.z ? maxMapSize : maxMapSize * size.x / size.z);\n    const baseHeight =\n        Math.floor(size.x > size.z ? maxMapSize * size.z / size.x : maxMapSize);\n    // width of blur filter in pixels (not adjustable)\n    const TAP_WIDTH = 10;\n    const width = TAP_WIDTH + baseWidth;\n    const height = TAP_WIDTH + baseHeight;\n\n    if (this.renderTarget != null &&\n        (this.renderTarget.width !== width ||\n         this.renderTarget.height !== height)) {\n      this.renderTarget.dispose();\n      this.renderTarget = null;\n      this.renderTargetBlur!.dispose();\n      this.renderTargetBlur = null;\n    }\n\n    if (this.renderTarget == null) {\n      const params: WebGLRenderTargetOptions = {format: RGBAFormat};\n      this.renderTarget = new WebGLRenderTarget(width, height, params);\n      this.renderTargetBlur = new WebGLRenderTarget(width, height, params);\n\n      (this.floor.material as MeshBasicMaterial).map =\n          this.renderTarget.texture;\n    }\n\n    // These pads account for the softening radius around the shadow.\n    this.camera.scale.set(\n        size.x * (1 + TAP_WIDTH / baseWidth),\n        size.z * (1 + TAP_WIDTH / baseHeight),\n        1);\n    this.needsUpdate = true;\n  }\n\n  /**\n   * Set the shadow's intensity (0 to 1), which is just its opacity. Turns off\n   * shadow rendering if zero.\n   */\n  setIntensity(intensity: number) {\n    this.intensity = intensity;\n    if (intensity > 0) {\n      this.visible = true;\n      this.floor.visible = true;\n      (this.floor.material as MeshBasicMaterial).opacity = intensity *\n          lerp(DEFAULT_HARD_INTENSITY, 1, this.softness * this.softness);\n    } else {\n      this.visible = false;\n      this.floor.visible = false;\n    }\n  }\n\n  getIntensity(): number {\n    return this.intensity;\n  }\n\n  /**\n   * An offset can be specified to move the\n   * shadow vertically relative to the bottom of the scene. Positive is up, so\n   * values are generally negative. A small offset keeps our shadow from\n   * z-fighting with any baked-in shadow plane.\n   */\n  setOffset(offset: number) {\n    this.floor.position.z = -offset + 0.001 * this.maxDimension;\n  }\n\n  render(renderer: WebGLRenderer, scene: Scene) {\n    // this.cameraHelper.visible = false;\n\n    // force the depthMaterial to everything\n    scene.overrideMaterial = this.depthMaterial;\n\n    // set renderer clear alpha\n    const initialClearAlpha = renderer.getClearAlpha();\n    renderer.setClearAlpha(0);\n    this.floor.visible = false;\n\n    // disable XR for offscreen rendering\n    const xrEnabled = renderer.xr.enabled;\n    renderer.xr.enabled = false;\n\n    // render to the render target to get the depths\n    const oldRenderTarget = renderer.getRenderTarget();\n    renderer.setRenderTarget(this.renderTarget);\n    renderer.render(scene, this.camera);\n\n    // and reset the override material\n    scene.overrideMaterial = null;\n    this.floor.visible = true;\n\n    this.blurShadow(renderer);\n\n    // reset and render the normal scene\n    renderer.xr.enabled = xrEnabled;\n    renderer.setRenderTarget(oldRenderTarget);\n    renderer.setClearAlpha(initialClearAlpha);\n    // this.cameraHelper.visible = true;\n  }\n\n  blurShadow(renderer: WebGLRenderer) {\n    const {\n      camera,\n      horizontalBlurMaterial,\n      verticalBlurMaterial,\n      renderTarget,\n      renderTargetBlur,\n      blurPlane\n    } = this;\n    blurPlane.visible = true;\n\n    // blur horizontally and draw in the renderTargetBlur\n    blurPlane.material = horizontalBlurMaterial;\n    horizontalBlurMaterial.uniforms.h.value = 1 / this.renderTarget!.width;\n    horizontalBlurMaterial.uniforms.tDiffuse.value = this.renderTarget!.texture;\n\n    renderer.setRenderTarget(renderTargetBlur);\n    renderer.render(blurPlane, camera);\n\n    // blur vertically and draw in the main renderTarget\n    blurPlane.material = verticalBlurMaterial;\n    verticalBlurMaterial.uniforms.v.value = 1 / this.renderTarget!.height;\n    verticalBlurMaterial.uniforms.tDiffuse.value =\n        this.renderTargetBlur!.texture;\n\n    renderer.setRenderTarget(renderTarget);\n    renderer.render(blurPlane, camera);\n\n    blurPlane.visible = false;\n  }\n\n  dispose() {\n    if (this.renderTarget != null) {\n      this.renderTarget.dispose();\n    }\n    if (this.renderTargetBlur != null) {\n      this.renderTargetBlur.dispose();\n    }\n    this.depthMaterial.dispose();\n    this.horizontalBlurMaterial.dispose();\n    this.verticalBlurMaterial.dispose();\n    (this.floor.material as Material).dispose();\n    this.floor.geometry.dispose();\n    this.blurPlane.geometry.dispose();\n    this.removeFromParent();\n  }\n}"]}