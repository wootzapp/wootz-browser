{"version":3,"file":"model-viewer-spec.js","sourceRoot":"","sources":["../../src/test/model-viewer-spec.ts"],"names":[],"mappings":"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","sourcesContent":["import {$renderer} from '../model-viewer-base.js';\nimport {ModelViewerElement} from '../model-viewer.js';\nimport {Constructor, waitForEvent} from '../utilities.js';\n\nimport {assetPath, rafPasses} from './helpers.js';\nimport {BasicSpecTemplate} from './templates.js';\n\nconst expect = chai.expect;\n\nconst SUNRISE_HDR_PATH = 'environments/spruit_sunrise_1k_HDR.hdr';\nconst SUNRISE_LDR_PATH = 'environments/spruit_sunrise_1k_LDR.jpg';\n\nconst COMPONENTS_PER_PIXEL = 4;\n\nconst setupLighting =\n    async (modelViewer: ModelViewerElement, lighting?: string) => {\n  const posterDismissed = waitForEvent(modelViewer, 'poster-dismissed');\n\n  if (lighting) {\n    const lightingPath = assetPath(lighting);\n    modelViewer.environmentImage = lightingPath;\n  }\n  modelViewer.src = assetPath('models/reflective-sphere.gltf');\n\n  await posterDismissed;\n  await rafPasses();\n}\n\n// TODO(sun765): this only test whether the screenshot\n// is colorless or not. Replace this with more robust\n// test in later pr.\nfunction testFidelity(screenshotContext: WebGLRenderingContext|\n                      WebGL2RenderingContext) {\n  const width = screenshotContext.drawingBufferWidth;\n  const height = screenshotContext.drawingBufferHeight;\n\n  const pixels = new Uint8Array(width * height * COMPONENTS_PER_PIXEL);\n  // this function reads in the bottom-up direction from the coordinate\n  // specified ((0,0) is the bottom-left corner).\n  screenshotContext.readPixels(\n      0,\n      0,\n      width,\n      height,\n      screenshotContext.RGBA,\n      screenshotContext.UNSIGNED_BYTE,\n      pixels);\n\n  let transparentPixels = 0;\n  let whitePixels = 0;\n  let blackPixels = 0;\n  for (let row = 0; row < height; row++) {\n    for (let col = 0; col < width; col++) {\n      let isWhite = true;\n      let isBlack = true;\n\n      // read pixel data from top left corner\n      const index = (height - row - 1) * width + col;\n      const position = index * COMPONENTS_PER_PIXEL;\n\n      if (pixels[position + 3] != 255) {\n        transparentPixels++;\n        continue;\n      }\n      for (let i = 0; i < 3; i++) {\n        const colorComponent = pixels[position + i];\n        if (colorComponent != 255) {\n          isWhite = false;\n        }\n        if (colorComponent != 0) {\n          isBlack = false;\n        }\n      }\n\n      if (isWhite) {\n        whitePixels++;\n      }\n      if (isBlack) {\n        blackPixels++;\n      }\n    }\n  }\n\n  const imagePixelCount = width * height;\n  expect(whitePixels + blackPixels + transparentPixels)\n      .to.be.below(\n          imagePixelCount,\n          `Image had ${whitePixels} white pixels and ${\n              blackPixels} black pixels and ${\n              transparentPixels} background pixels.`);\n};\n\nsuite('ModelViewerElement', () => {\n  let nextId: number = 0;\n  let tagName: string;\n  let ModelViewer: Constructor<ModelViewerElement>;\n\n  setup(() => {\n    tagName = `model-viewer-${nextId++}`;\n    ModelViewer = class extends ModelViewerElement {\n      static get is() {\n        return tagName;\n      }\n    }\n    customElements.define(tagName, ModelViewer);\n  });\n\n  BasicSpecTemplate(() => ModelViewer, () => tagName);\n\n  suite('Render Functionality Test', () => {\n    let element: ModelViewerElement;\n\n    setup(async () => {\n      element = new ModelViewerElement();\n      element.style.width = '100px';\n      element.style.height = '100px';\n      document.body.insertBefore(element, document.body.firstChild);\n    });\n\n    teardown(() => {\n      if (element.parentNode != null) {\n        element.parentNode.removeChild(element);\n      }\n    });\n\n    test('Metal roughness sphere with generated lighting', async () => {\n      await setupLighting(element);\n      const screenshotContext = element[$renderer].threeRenderer.getContext();\n      testFidelity(screenshotContext);\n    });\n\n    test('Metal roughness sphere with HDR lighting', async () => {\n      await setupLighting(element, SUNRISE_HDR_PATH);\n      const screenshotContext = element[$renderer].threeRenderer.getContext();\n      testFidelity(screenshotContext);\n    });\n\n    test('Metal roughness sphere with LDR lighting', async () => {\n      await setupLighting(element, SUNRISE_LDR_PATH);\n      const screenshotContext = element[$renderer].threeRenderer.getContext();\n      testFidelity(screenshotContext);\n    });\n  });\n})"]}