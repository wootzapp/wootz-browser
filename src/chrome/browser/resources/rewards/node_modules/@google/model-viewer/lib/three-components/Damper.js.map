{"version":3,"file":"Damper.js","sourceRoot":"","sources":["../../src/three-components/Damper.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;GAaG;AAEH,MAAM,CAAC,MAAM,aAAa,GAAG,KAAK,CAAC,CAAE,qBAAqB;AAC1D,MAAM,sBAAsB,GAAG,KAAK,CAAC;AACrC,MAAM,CAAC,MAAM,kBAAkB,GAAG,EAAE,CAAC;AAErC;;;;;;;GAOG;AACH,MAAM,OAAO,MAAM;IAIjB,YAAY,oBAA4B,kBAAkB;QAHlD,aAAQ,GAAW,CAAC,CAAC;QACrB,qBAAgB,GAAW,CAAC,CAAC;QAGnC,IAAI,CAAC,YAAY,CAAC,iBAAiB,CAAC,CAAC;IACvC,CAAC;IAED,YAAY,CAAC,iBAAyB;QACpC,IAAI,CAAC,gBAAgB;YACjB,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,sBAAsB,EAAE,iBAAiB,CAAC,CAAC;IAC9D,CAAC;IAED,MAAM,CACF,CAAS,EACT,KAAa,EACb,oBAA4B,EAC5B,cAAsB;QAExB,MAAM,QAAQ,GAAG,MAAM,GAAG,IAAI,CAAC,gBAAgB,CAAC;QAEhD,IAAI,CAAC,IAAI,IAAI,IAAI,cAAc,KAAK,CAAC,EAAE;YACrC,OAAO,KAAK,CAAC;SACd;QACD,IAAI,CAAC,KAAK,KAAK,IAAI,IAAI,CAAC,QAAQ,KAAK,CAAC,EAAE;YACtC,OAAO,KAAK,CAAC;SACd;QACD,IAAI,oBAAoB,GAAG,CAAC,EAAE;YAC5B,OAAO,CAAC,CAAC;SACV;QACD,oEAAoE;QACpE,wEAAwE;QACxE,oDAAoD;QACpD,MAAM,MAAM,GAAG,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC;QAC3B,MAAM,oBAAoB,GAAG,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,gBAAgB,GAAG,MAAM,CAAC;QAC5E,MAAM,aAAa,GAAG,MAAM,GAAG,oBAAoB,GAAG,oBAAoB,CAAC;QAC3E,MAAM,KAAK,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,gBAAgB,GAAG,oBAAoB,CAAC,CAAC;QACtE,MAAM,WAAW,GACb,CAAC,oBAAoB,GAAG,IAAI,CAAC,gBAAgB,GAAG,aAAa,CAAC,GAAG,KAAK,CAAC;QAC3E,MAAM,YAAY,GACd,CAAC,IAAI,CAAC,gBAAgB,GAAG,CAAC,WAAW,GAAG,oBAAoB,GAAG,KAAK,CAAC,CAAC;QAC1E,IAAI,IAAI,CAAC,GAAG,CAAC,WAAW,CAAC,GAAG,QAAQ,GAAG,IAAI,CAAC,GAAG,CAAC,cAAc,CAAC;YAC3D,YAAY,GAAG,MAAM,IAAI,CAAC,EAAE;YAC9B,0EAA0E;YAC1E,4CAA4C;YAC5C,IAAI,CAAC,QAAQ,GAAG,CAAC,CAAC;YAClB,OAAO,KAAK,CAAC;SACd;aAAM;YACL,IAAI,CAAC,QAAQ,GAAG,WAAW,CAAC;YAC5B,OAAO,KAAK,GAAG,aAAa,GAAG,KAAK,CAAC;SACtC;IACH,CAAC;CACF","sourcesContent":["/* @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport const SETTLING_TIME = 10000;  // plenty long enough\nconst MIN_DECAY_MILLISECONDS = 0.001;\nexport const DECAY_MILLISECONDS = 50;\n\n/**\n * The Damper class is a generic second-order critically damped system that does\n * one linear step of the desired length of time. The only parameter is\n * DECAY_MILLISECONDS. This common parameter makes all states converge at the\n * same rate regardless of scale. xNormalization is a number to provide the\n * rough scale of x, such that NIL_SPEED clamping also happens at roughly the\n * same convergence for all states.\n */\nexport class Damper {\n  private velocity: number = 0;\n  private naturalFrequency: number = 0;\n\n  constructor(decayMilliseconds: number = DECAY_MILLISECONDS) {\n    this.setDecayTime(decayMilliseconds);\n  }\n\n  setDecayTime(decayMilliseconds: number) {\n    this.naturalFrequency =\n        1 / Math.max(MIN_DECAY_MILLISECONDS, decayMilliseconds);\n  }\n\n  update(\n      x: number,\n      xGoal: number,\n      timeStepMilliseconds: number,\n      xNormalization: number,\n      ): number {\n    const nilSpeed = 0.0002 * this.naturalFrequency;\n\n    if (x == null || xNormalization === 0) {\n      return xGoal;\n    }\n    if (x === xGoal && this.velocity === 0) {\n      return xGoal;\n    }\n    if (timeStepMilliseconds < 0) {\n      return x;\n    }\n    // Exact solution to a critically damped second-order system, where:\n    // acceleration = this.naturalFrequency * this.naturalFrequency * (xGoal\n    // - x) - 2 * this.naturalFrequency * this.velocity;\n    const deltaX = (x - xGoal);\n    const intermediateVelocity = this.velocity + this.naturalFrequency * deltaX;\n    const intermediateX = deltaX + timeStepMilliseconds * intermediateVelocity;\n    const decay = Math.exp(-this.naturalFrequency * timeStepMilliseconds);\n    const newVelocity =\n        (intermediateVelocity - this.naturalFrequency * intermediateX) * decay;\n    const acceleration =\n        -this.naturalFrequency * (newVelocity + intermediateVelocity * decay);\n    if (Math.abs(newVelocity) < nilSpeed * Math.abs(xNormalization) &&\n        acceleration * deltaX >= 0) {\n      // This ensures the controls settle and stop calling this function instead\n      // of asymptotically approaching their goal.\n      this.velocity = 0;\n      return xGoal;\n    } else {\n      this.velocity = newVelocity;\n      return xGoal + intermediateX * decay;\n    }\n  }\n}\n"]}