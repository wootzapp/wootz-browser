{"version":3,"file":"SmoothControls.js","sourceRoot":"","sources":["../../src/three-components/SmoothControls.ts"],"names":[],"mappings":"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","sourcesContent":["/* @license\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Euler, Event as ThreeEvent, EventDispatcher, Matrix3, PerspectiveCamera, Spherical, Vector2, Vector3} from 'three';\n\nimport {$panElement, TouchAction} from '../features/controls.js';\nimport {clamp} from '../utilities.js';\n\nimport {Damper, SETTLING_TIME} from './Damper.js';\nimport {ModelScene} from './ModelScene.js';\n\nconst PAN_SENSITIVITY = 0.018;\nconst TAP_DISTANCE = 2;\nconst TAP_MS = 300;\nconst vector2 = new Vector2();\nconst vector3 = new Vector3();\n\nexport type TouchMode = null|((dx: number, dy: number) => void);\n\nexport interface Pointer {\n  clientX: number;\n  clientY: number;\n  id: number;\n}\n\nexport interface SmoothControlsOptions {\n  // The closest the camera can be to the target\n  minimumRadius?: number;\n  // The farthest the camera can be from the target\n  maximumRadius?: number;\n  // The minimum angle between model-up and the camera polar position\n  minimumPolarAngle?: number;\n  // The maximum angle between model-up and the camera polar position\n  maximumPolarAngle?: number;\n  // The minimum angle between model-forward and the camera azimuthal position\n  minimumAzimuthalAngle?: number;\n  // The maximum angle between model-forward and the camera azimuthal position\n  maximumAzimuthalAngle?: number;\n  // The minimum camera field of view in degrees\n  minimumFieldOfView?: number;\n  // The maximum camera field of view in degrees\n  maximumFieldOfView?: number;\n  // Controls scrolling behavior\n  touchAction?: TouchAction;\n}\n\nexport const DEFAULT_OPTIONS = Object.freeze<SmoothControlsOptions>({\n  minimumRadius: 0,\n  maximumRadius: Infinity,\n  minimumPolarAngle: Math.PI / 8,\n  maximumPolarAngle: Math.PI - Math.PI / 8,\n  minimumAzimuthalAngle: -Infinity,\n  maximumAzimuthalAngle: Infinity,\n  minimumFieldOfView: 10,\n  maximumFieldOfView: 45,\n  touchAction: 'none'\n});\n\n// Constants\nconst KEYBOARD_ORBIT_INCREMENT = Math.PI / 8;\nconst ZOOM_SENSITIVITY = 0.04;\n\n// The move size on pan key event\nconst PAN_KEY_INCREMENT = 10;\n\nexport const KeyCode = {\n  PAGE_UP: 33,\n  PAGE_DOWN: 34,\n  LEFT: 37,\n  UP: 38,\n  RIGHT: 39,\n  DOWN: 40\n};\n\nexport type ChangeSource = 'user-interaction'|'none'|'automatic';\n\nexport const ChangeSource: {[index: string]: ChangeSource} = {\n  USER_INTERACTION: 'user-interaction',\n  NONE: 'none',\n  AUTOMATIC: 'automatic'\n};\n\n/**\n * ChangEvents are dispatched whenever the camera position or orientation has\n * changed\n */\nexport interface ChangeEvent extends ThreeEvent {\n  /**\n   * determines what was the originating reason for the change event eg user or\n   * none\n   */\n  source: ChangeSource,\n}\n\nexport interface PointerChangeEvent extends ThreeEvent {\n  type: 'pointer-change-start'|'pointer-change-end';\n}\n\n/**\n * SmoothControls is a Three.js helper for adding delightful pointer and\n * keyboard-based input to a staged Three.js scene. Its API is very similar to\n * OrbitControls, but it offers more opinionated (subjectively more delightful)\n * defaults, easy extensibility and subjectively better out-of-the-box keyboard\n * support.\n *\n * One important change compared to OrbitControls is that the `update` method\n * of SmoothControls must be invoked on every frame, otherwise the controls\n * will not have an effect.\n *\n * Another notable difference compared to OrbitControls is that SmoothControls\n * does not currently support panning (but probably will in a future revision).\n *\n * Like OrbitControls, SmoothControls assumes that the orientation of the camera\n * has been set in terms of position, rotation and scale, so it is important to\n * ensure that the camera's matrixWorld is in sync before using SmoothControls.\n */\nexport class SmoothControls extends EventDispatcher {\n  public orbitSensitivity = 1;\n  public inputSensitivity = 1;\n  public changeSource = ChangeSource.NONE;\n\n  private _interactionEnabled: boolean = false;\n  private _options: SmoothControlsOptions;\n  private _disableZoom = false;\n  private isUserPointing = false;\n\n  // Pan state\n  public enablePan = true;\n  public enableTap = true;\n  private panProjection = new Matrix3();\n  private panPerPixel = 0;\n\n  // Internal orbital position state\n  private spherical = new Spherical();\n  private goalSpherical = new Spherical();\n  private thetaDamper = new Damper();\n  private phiDamper = new Damper();\n  private radiusDamper = new Damper();\n  private logFov = Math.log(DEFAULT_OPTIONS.maximumFieldOfView!);\n  private goalLogFov = this.logFov;\n  private fovDamper = new Damper();\n\n  // Pointer state\n  private touchMode: TouchMode = null;\n  private pointers: Pointer[] = [];\n  private startTime = 0;\n  private startPointerPosition = {clientX: 0, clientY: 0};\n  private lastSeparation = 0;\n  private touchDecided = false;\n\n  constructor(\n      readonly camera: PerspectiveCamera, readonly element: HTMLElement,\n      readonly scene: ModelScene) {\n    super();\n\n    this._options = Object.assign({}, DEFAULT_OPTIONS);\n\n    this.setOrbit(0, Math.PI / 2, 1);\n    this.setFieldOfView(100);\n    this.jumpToGoal();\n  }\n\n  get interactionEnabled(): boolean {\n    return this._interactionEnabled;\n  }\n\n  enableInteraction() {\n    if (this._interactionEnabled === false) {\n      const {element} = this;\n      element.addEventListener('pointerdown', this.onPointerDown);\n      element.addEventListener('pointercancel', this.onPointerUp);\n\n      if (!this._disableZoom) {\n        element.addEventListener('wheel', this.onWheel);\n      }\n      element.addEventListener('keydown', this.onKeyDown);\n      // This little beauty is to work around a WebKit bug that otherwise makes\n      // touch events randomly not cancelable.\n      element.addEventListener('touchmove', () => {}, {passive: false});\n      element.addEventListener('contextmenu', this.onContext);\n\n      this.element.style.cursor = 'grab';\n      this._interactionEnabled = true;\n\n      this.updateTouchActionStyle();\n    }\n  }\n\n  disableInteraction() {\n    if (this._interactionEnabled === true) {\n      const {element} = this;\n\n      element.removeEventListener('pointerdown', this.onPointerDown);\n      element.removeEventListener('pointermove', this.onPointerMove);\n      element.removeEventListener('pointerup', this.onPointerUp);\n      element.removeEventListener('pointercancel', this.onPointerUp);\n      element.removeEventListener('wheel', this.onWheel);\n      element.removeEventListener('keydown', this.onKeyDown);\n      element.removeEventListener('contextmenu', this.onContext);\n\n      element.style.cursor = '';\n      this.touchMode = null;\n      this._interactionEnabled = false;\n\n      this.updateTouchActionStyle();\n    }\n  }\n\n  /**\n   * The options that are currently configured for the controls instance.\n   */\n  get options() {\n    return this._options;\n  }\n\n  onContext = (event: MouseEvent) => {\n    if (this.enablePan) {\n      event.preventDefault();\n    } else {\n      for (const pointer of this.pointers) {\n        // Required because of a common browser bug where the context menu never\n        // fires a pointercancel event.\n        this.onPointerUp(new PointerEvent(\n            'pointercancel',\n            {...this.startPointerPosition, pointerId: pointer.id}));\n      }\n    }\n  };\n\n  set disableZoom(disable: boolean) {\n    if (this._disableZoom != disable) {\n      this._disableZoom = disable;\n      if (disable === true) {\n        this.element.removeEventListener('wheel', this.onWheel);\n      } else {\n        this.element.addEventListener('wheel', this.onWheel);\n      }\n\n      this.updateTouchActionStyle();\n    }\n  }\n\n  /**\n   * Copy the spherical values that represent the current camera orbital\n   * position relative to the configured target into a provided Spherical\n   * instance. If no Spherical is provided, a new Spherical will be allocated\n   * to copy the values into. The Spherical that values are copied into is\n   * returned.\n   */\n  getCameraSpherical(target: Spherical = new Spherical()) {\n    return target.copy(this.spherical);\n  }\n\n  /**\n   * Returns the camera's current vertical field of view in degrees.\n   */\n  getFieldOfView(): number {\n    return this.camera.fov;\n  }\n\n  /**\n   * Configure the _options of the controls. Configured _options will be\n   * merged with whatever _options have already been configured for this\n   * controls instance.\n   */\n  applyOptions(_options: SmoothControlsOptions) {\n    Object.assign(this._options, _options);\n    // Re-evaluates clamping based on potentially new values for min/max\n    // polar, azimuth and radius:\n    this.setOrbit();\n    this.setFieldOfView(Math.exp(this.goalLogFov));\n  }\n\n  /**\n   * Sets the near and far planes of the camera.\n   */\n  updateNearFar(nearPlane: number, farPlane: number) {\n    this.camera.near = Math.max(nearPlane, farPlane / 1000);\n    this.camera.far = farPlane;\n    this.camera.updateProjectionMatrix();\n  }\n\n  /**\n   * Sets the aspect ratio of the camera\n   */\n  updateAspect(aspect: number) {\n    this.camera.aspect = aspect;\n    this.camera.updateProjectionMatrix();\n  }\n\n  /**\n   * Set the absolute orbital goal of the camera. The change will be\n   * applied over a number of frames depending on configured acceleration and\n   * dampening _options.\n   *\n   * Returns true if invoking the method will result in the camera changing\n   * position and/or rotation, otherwise false.\n   */\n  setOrbit(\n      goalTheta: number = this.goalSpherical.theta,\n      goalPhi: number = this.goalSpherical.phi,\n      goalRadius: number = this.goalSpherical.radius): boolean {\n    const {\n      minimumAzimuthalAngle,\n      maximumAzimuthalAngle,\n      minimumPolarAngle,\n      maximumPolarAngle,\n      minimumRadius,\n      maximumRadius\n    } = this._options;\n\n    const {theta, phi, radius} = this.goalSpherical;\n\n    const nextTheta =\n        clamp(goalTheta, minimumAzimuthalAngle!, maximumAzimuthalAngle!);\n    if (!isFinite(minimumAzimuthalAngle!) &&\n        !isFinite(maximumAzimuthalAngle!)) {\n      this.spherical.theta =\n          this.wrapAngle(this.spherical.theta - nextTheta) + nextTheta;\n    }\n\n    const nextPhi = clamp(goalPhi, minimumPolarAngle!, maximumPolarAngle!);\n    const nextRadius = clamp(goalRadius, minimumRadius!, maximumRadius!);\n\n    if (nextTheta === theta && nextPhi === phi && nextRadius === radius) {\n      return false;\n    }\n\n    this.goalSpherical.theta = nextTheta;\n    this.goalSpherical.phi = nextPhi;\n    this.goalSpherical.radius = nextRadius;\n    this.goalSpherical.makeSafe();\n\n    return true;\n  }\n\n  /**\n   * Subset of setOrbit() above, which only sets the camera's radius.\n   */\n  setRadius(radius: number) {\n    this.goalSpherical.radius = radius;\n    this.setOrbit();\n  }\n\n  /**\n   * Sets the goal field of view for the camera\n   */\n  setFieldOfView(fov: number) {\n    const {minimumFieldOfView, maximumFieldOfView} = this._options;\n    fov = clamp(fov, minimumFieldOfView!, maximumFieldOfView!);\n    this.goalLogFov = Math.log(fov);\n  }\n\n  /**\n   * Sets the smoothing decay time.\n   */\n  setDamperDecayTime(decayMilliseconds: number) {\n    this.thetaDamper.setDecayTime(decayMilliseconds);\n    this.phiDamper.setDecayTime(decayMilliseconds);\n    this.radiusDamper.setDecayTime(decayMilliseconds);\n    this.fovDamper.setDecayTime(decayMilliseconds);\n  }\n\n  /**\n   * Adjust the orbital position of the camera relative to its current orbital\n   * position. Does not let the theta goal get more than pi ahead of the current\n   * theta, which ensures interpolation continues in the direction of the delta.\n   * The deltaZoom parameter adjusts both the field of view and the orbit radius\n   * such that they progress across their allowed ranges in sync.\n   */\n  adjustOrbit(deltaTheta: number, deltaPhi: number, deltaZoom: number) {\n    const {theta, phi, radius} = this.goalSpherical;\n    const {\n      minimumRadius,\n      maximumRadius,\n      minimumFieldOfView,\n      maximumFieldOfView\n    } = this._options;\n\n    const dTheta = this.spherical.theta - theta;\n    const dThetaLimit = Math.PI - 0.001;\n    const goalTheta =\n        theta - clamp(deltaTheta, -dThetaLimit - dTheta, dThetaLimit - dTheta);\n    const goalPhi = phi - deltaPhi;\n\n    const deltaRatio = deltaZoom === 0 ?\n        0 :\n        ((deltaZoom > 0 ? maximumRadius! : minimumRadius!) - radius) /\n            (Math.log(\n                 deltaZoom > 0 ? maximumFieldOfView! : minimumFieldOfView!) -\n             this.goalLogFov);\n\n    const goalRadius = radius +\n        deltaZoom *\n            (isFinite(deltaRatio) ? deltaRatio :\n                                    (maximumRadius! - minimumRadius!) * 2);\n    this.setOrbit(goalTheta, goalPhi, goalRadius);\n\n    if (deltaZoom !== 0) {\n      const goalLogFov = this.goalLogFov + deltaZoom;\n      this.setFieldOfView(Math.exp(goalLogFov));\n    }\n  }\n\n  /**\n   * Move the camera instantly instead of accelerating toward the goal\n   * parameters.\n   */\n  jumpToGoal() {\n    this.update(0, SETTLING_TIME);\n  }\n\n  /**\n   * Update controls. In most cases, this will result in the camera\n   * interpolating its position and rotation until it lines up with the\n   * designated goal orbital position.\n   *\n   * Time and delta are measured in milliseconds.\n   */\n  update(_time: number, delta: number) {\n    if (this.isStationary()) {\n      return;\n    }\n    const {maximumPolarAngle, maximumRadius} = this._options;\n\n    const dTheta = this.spherical.theta - this.goalSpherical.theta;\n    if (Math.abs(dTheta) > Math.PI &&\n        !isFinite(this._options.minimumAzimuthalAngle!) &&\n        !isFinite(this._options.maximumAzimuthalAngle!)) {\n      this.spherical.theta -= Math.sign(dTheta) * 2 * Math.PI;\n    }\n\n    this.spherical.theta = this.thetaDamper.update(\n        this.spherical.theta, this.goalSpherical.theta, delta, Math.PI);\n\n    this.spherical.phi = this.phiDamper.update(\n        this.spherical.phi, this.goalSpherical.phi, delta, maximumPolarAngle!);\n\n    this.spherical.radius = this.radiusDamper.update(\n        this.spherical.radius, this.goalSpherical.radius, delta, maximumRadius!\n    );\n\n    this.logFov = this.fovDamper.update(this.logFov, this.goalLogFov, delta, 1);\n\n    this.moveCamera();\n  }\n\n  updateTouchActionStyle() {\n    const {style} = this.element;\n\n    if (this._interactionEnabled) {\n      const {touchAction} = this._options;\n      if (this._disableZoom && touchAction !== 'none') {\n        style.touchAction = 'manipulation';\n      } else {\n        style.touchAction = touchAction!;\n      }\n    } else {\n      style.touchAction = '';\n    }\n  }\n\n  private isStationary(): boolean {\n    return this.goalSpherical.theta === this.spherical.theta &&\n        this.goalSpherical.phi === this.spherical.phi &&\n        this.goalSpherical.radius === this.spherical.radius &&\n        this.goalLogFov === this.logFov;\n  }\n\n  private dispatchChange() {\n    this.dispatchEvent({type: 'change', source: this.changeSource});\n  }\n\n  private moveCamera() {\n    // Derive the new camera position from the updated spherical:\n    this.spherical.makeSafe();\n    this.camera.position.setFromSpherical(this.spherical);\n    this.camera.setRotationFromEuler(new Euler(\n        this.spherical.phi - Math.PI / 2, this.spherical.theta, 0, 'YXZ'));\n\n    if (this.camera.fov !== Math.exp(this.logFov)) {\n      this.camera.fov = Math.exp(this.logFov);\n      this.camera.updateProjectionMatrix();\n    }\n\n    this.dispatchChange();\n  }\n\n  private userAdjustOrbit(\n      deltaTheta: number, deltaPhi: number, deltaZoom: number) {\n    this.adjustOrbit(\n        deltaTheta * this.orbitSensitivity * this.inputSensitivity,\n        deltaPhi * this.orbitSensitivity * this.inputSensitivity,\n        deltaZoom * this.inputSensitivity);\n\n    // Always make sure that an initial event is triggered in case there is\n    // contention between user interaction and imperative changes. This initial\n    // event will give external observers that chance to observe that\n    // interaction occurred at all:\n    this.dispatchChange();\n  }\n\n  // Wraps to between -pi and pi\n  private wrapAngle(radians: number): number {\n    const normalized = (radians + Math.PI) / (2 * Math.PI);\n    const wrapped = normalized - Math.floor(normalized);\n    return wrapped * 2 * Math.PI - Math.PI;\n  }\n\n  private pixelLengthToSphericalAngle(pixelLength: number): number {\n    return 2 * Math.PI * pixelLength / this.element.clientHeight;\n  }\n\n  private twoTouchDistance(touchOne: Pointer, touchTwo: Pointer): number {\n    const {clientX: xOne, clientY: yOne} = touchOne;\n    const {clientX: xTwo, clientY: yTwo} = touchTwo;\n    const xDelta = xTwo - xOne;\n    const yDelta = yTwo - yOne;\n\n    return Math.sqrt(xDelta * xDelta + yDelta * yDelta);\n  }\n\n  private touchModeZoom: TouchMode = (dx: number, dy: number) => {\n    if (!this._disableZoom) {\n      const touchDistance =\n          this.twoTouchDistance(this.pointers[0], this.pointers[1]);\n      const deltaZoom = ZOOM_SENSITIVITY *\n          (this.lastSeparation - touchDistance) * 50 / this.scene.height;\n      this.lastSeparation = touchDistance;\n\n      this.userAdjustOrbit(0, 0, deltaZoom);\n    }\n\n    if (this.panPerPixel > 0) {\n      this.movePan(dx, dy);\n    }\n  };\n\n  // We implement our own version of the browser's CSS touch-action, enforced by\n  // this function, because the iOS implementation of pan-y is bad and doesn't\n  // match Android. Specifically, even if a touch gesture begins by panning X,\n  // iOS will switch to scrolling as soon as the gesture moves in the Y, rather\n  // than staying in the same mode until the end of the gesture.\n  private disableScroll = (event: TouchEvent) => {\n    event.preventDefault();\n  };\n\n  private touchModeRotate: TouchMode = (dx: number, dy: number) => {\n    const {touchAction} = this._options;\n    if (!this.touchDecided && touchAction !== 'none') {\n      this.touchDecided = true;\n      const dxMag = Math.abs(dx);\n      const dyMag = Math.abs(dy);\n      // If motion is mostly vertical, assume scrolling is the intent.\n      if (this.changeSource === ChangeSource.USER_INTERACTION &&\n          ((touchAction === 'pan-y' && dyMag > dxMag) ||\n           (touchAction === 'pan-x' && dxMag > dyMag))) {\n        this.touchMode = null;\n        return;\n      } else {\n        this.element.addEventListener(\n            'touchmove', this.disableScroll, {passive: false});\n      }\n    }\n    this.handleSinglePointerMove(dx, dy);\n  };\n\n  private handleSinglePointerMove(dx: number, dy: number) {\n    const deltaTheta = this.pixelLengthToSphericalAngle(dx);\n    const deltaPhi = this.pixelLengthToSphericalAngle(dy);\n\n    if (this.isUserPointing === false) {\n      this.isUserPointing = true;\n      this.dispatchEvent({type: 'pointer-change-start'});\n    }\n\n    this.userAdjustOrbit(deltaTheta, deltaPhi, 0);\n  }\n\n  private initializePan() {\n    const {theta, phi} = this.spherical;\n    const psi = theta - this.scene.yaw;\n    this.panPerPixel = PAN_SENSITIVITY / this.scene.height;\n    this.panProjection.set(\n        -Math.cos(psi),\n        -Math.cos(phi) * Math.sin(psi),\n        0,\n        0,\n        Math.sin(phi),\n        0,\n        Math.sin(psi),\n        -Math.cos(phi) * Math.cos(psi),\n        0);\n  }\n\n  private movePan(dx: number, dy: number) {\n    const {scene} = this;\n    const dxy = vector3.set(dx, dy, 0).multiplyScalar(this.inputSensitivity);\n    const metersPerPixel =\n        this.spherical.radius * Math.exp(this.logFov) * this.panPerPixel;\n    dxy.multiplyScalar(metersPerPixel);\n\n    const target = scene.getTarget();\n    target.add(dxy.applyMatrix3(this.panProjection));\n    scene.boundingSphere.clampPoint(target, target);\n    scene.setTarget(target.x, target.y, target.z);\n\n    this.dispatchChange();\n  }\n\n  private recenter(pointer: PointerEvent) {\n    if (performance.now() > this.startTime + TAP_MS ||\n        Math.abs(pointer.clientX - this.startPointerPosition.clientX) >\n            TAP_DISTANCE ||\n        Math.abs(pointer.clientY - this.startPointerPosition.clientY) >\n            TAP_DISTANCE) {\n      return;\n    }\n    const {scene} = this;\n\n    const hit = scene.positionAndNormalFromPoint(\n        scene.getNDC(pointer.clientX, pointer.clientY));\n\n    if (hit == null) {\n      const {cameraTarget} = scene.element;\n      scene.element.cameraTarget = '';\n      scene.element.cameraTarget = cameraTarget;\n      // Zoom all the way out.\n      this.userAdjustOrbit(0, 0, 1);\n    } else {\n      scene.target.worldToLocal(hit.position);\n      scene.setTarget(hit.position.x, hit.position.y, hit.position.z);\n    }\n  }\n\n  private resetRadius() {\n    const {scene} = this;\n\n    const hit = scene.positionAndNormalFromPoint(vector2.set(0, 0));\n    if (hit == null) {\n      return;\n    }\n\n    scene.target.worldToLocal(hit.position);\n    const goalTarget = scene.getTarget();\n    const {theta, phi} = this.spherical;\n\n    // Set target to surface hit point, except the target is still settling,\n    // so offset the goal accordingly so the transition is smooth even though\n    // this will drift the target slightly away from the hit point.\n    const psi = theta - scene.yaw;\n    const n = vector3.set(\n        Math.sin(phi) * Math.sin(psi),\n        Math.cos(phi),\n        Math.sin(phi) * Math.cos(psi));\n    const dr = n.dot(hit.position.sub(goalTarget));\n    goalTarget.add(n.multiplyScalar(dr));\n\n    scene.setTarget(goalTarget.x, goalTarget.y, goalTarget.z);\n    // Change the camera radius to match the change in target so that the\n    // camera itself does not move, unless it hits a radius bound.\n    this.setOrbit(undefined, undefined, this.goalSpherical.radius - dr);\n  }\n\n  private onPointerDown = (event: PointerEvent) => {\n    if (this.pointers.length > 2) {\n      return;\n    }\n    const {element} = this;\n\n    if (this.pointers.length === 0) {\n      element.addEventListener('pointermove', this.onPointerMove);\n      element.addEventListener('pointerup', this.onPointerUp);\n      this.touchMode = null;\n      this.touchDecided = false;\n      this.startPointerPosition.clientX = event.clientX;\n      this.startPointerPosition.clientY = event.clientY;\n      this.startTime = performance.now();\n    }\n\n    try {\n      element.setPointerCapture(event.pointerId);\n    } catch {\n    }\n    this.pointers.push(\n        {clientX: event.clientX, clientY: event.clientY, id: event.pointerId});\n\n    this.isUserPointing = false;\n\n    if (event.pointerType === 'touch') {\n      this.changeSource = event.altKey ?  // set by interact() in controls.ts\n          ChangeSource.AUTOMATIC :\n          ChangeSource.USER_INTERACTION;\n      this.onTouchChange(event);\n    } else {\n      this.changeSource = ChangeSource.USER_INTERACTION;\n      this.onMouseDown(event);\n    }\n  };\n\n  private onPointerMove = (event: PointerEvent) => {\n    const pointer =\n        this.pointers.find((pointer) => pointer.id === event.pointerId);\n    if (pointer == null) {\n      return;\n    }\n\n    const numTouches = this.pointers.length;\n    const dx = (event.clientX - pointer.clientX) / numTouches;\n    const dy = (event.clientY - pointer.clientY) / numTouches;\n    if (dx === 0 && dy === 0) {\n      return;\n    }\n    pointer.clientX = event.clientX;\n    pointer.clientY = event.clientY;\n\n    if (event.pointerType === 'touch') {\n      this.changeSource = event.altKey ?  // set by interact() in controls.ts\n          ChangeSource.AUTOMATIC :\n          ChangeSource.USER_INTERACTION;\n      if (this.touchMode !== null) {\n        this.touchMode(dx, dy);\n      }\n    } else {\n      this.changeSource = ChangeSource.USER_INTERACTION;\n      if (this.panPerPixel > 0) {\n        this.movePan(dx, dy);\n      } else {\n        this.handleSinglePointerMove(dx, dy);\n      }\n    }\n  };\n\n  private onPointerUp = (event: PointerEvent) => {\n    const {element} = this;\n\n    const index =\n        this.pointers.findIndex((pointer) => pointer.id === event.pointerId);\n    if (index !== -1) {\n      this.pointers.splice(index, 1);\n    }\n\n    // altKey indicates an interaction prompt; don't reset radius in this case\n    // as it will cause the camera to drift.\n    if (this.panPerPixel > 0 && !event.altKey) {\n      this.resetRadius();\n    }\n    if (this.pointers.length === 0) {\n      element.removeEventListener('pointermove', this.onPointerMove);\n      element.removeEventListener('pointerup', this.onPointerUp);\n      element.removeEventListener('touchmove', this.disableScroll);\n      if (this.enablePan && this.enableTap) {\n        this.recenter(event);\n      }\n    } else if (this.touchMode !== null) {\n      this.onTouchChange(event);\n    }\n\n    (this.scene.element as any)[$panElement].style.opacity = 0;\n    element.style.cursor = 'grab';\n    this.panPerPixel = 0;\n\n    if (this.isUserPointing) {\n      this.dispatchEvent({type: 'pointer-change-end'});\n    }\n  };\n\n  private onTouchChange(event: PointerEvent) {\n    if (this.pointers.length === 1) {\n      this.touchMode = this.touchModeRotate;\n    } else {\n      if (this._disableZoom) {\n        this.touchMode = null;\n        this.element.removeEventListener('touchmove', this.disableScroll);\n        return;\n      }\n      this.touchMode = (this.touchDecided && this.touchMode === null) ?\n          null :\n          this.touchModeZoom;\n      this.touchDecided = true;\n      this.element.addEventListener(\n          'touchmove', this.disableScroll, {passive: false});\n      this.lastSeparation =\n          this.twoTouchDistance(this.pointers[0], this.pointers[1]);\n\n      if (this.enablePan && this.touchMode != null) {\n        this.initializePan();\n        if (!event.altKey) {  // user interaction, not prompt\n          (this.scene.element as any)[$panElement].style.opacity = 1;\n        }\n      }\n    }\n  }\n\n  private onMouseDown(event: MouseEvent) {\n    this.panPerPixel = 0;\n    if (this.enablePan &&\n        (event.button === 2 || event.ctrlKey || event.metaKey ||\n         event.shiftKey)) {\n      this.initializePan();\n      (this.scene.element as any)[$panElement].style.opacity = 1;\n    }\n    this.element.style.cursor = 'grabbing';\n  }\n\n  private onWheel = (event: Event) => {\n    this.changeSource = ChangeSource.USER_INTERACTION;\n\n    const deltaZoom = (event as WheelEvent).deltaY *\n        ((event as WheelEvent).deltaMode == 1 ? 18 : 1) * ZOOM_SENSITIVITY / 30;\n    this.userAdjustOrbit(0, 0, deltaZoom);\n\n    event.preventDefault();\n  };\n\n  private onKeyDown = (event: KeyboardEvent) => {\n    // We track if the key is actually one we respond to, so as not to\n    // accidentally clobber unrelated key inputs when the <model-viewer> has\n    // focus.\n    const {changeSource} = this;\n    this.changeSource = ChangeSource.USER_INTERACTION;\n\n    const relevantKey = (event.shiftKey && this.enablePan) ?\n        this.panKeyCodeHandler(event) :\n        this.orbitZoomKeyCodeHandler(event);\n\n    if (relevantKey) {\n      event.preventDefault();\n    } else {\n      this.changeSource = changeSource;\n    }\n  };\n\n  /**\n   * Handles the orbit and Zoom key presses\n   * Uses constants for the increment.\n   * @param event The keyboard event for the .key value\n   * @returns boolean to indicate if the key event has been handled\n   */\n  private orbitZoomKeyCodeHandler(event: KeyboardEvent) {\n    let relevantKey = true;\n    switch (event.key) {\n      case 'PageUp':\n        this.userAdjustOrbit(0, 0, ZOOM_SENSITIVITY);\n        break;\n      case 'PageDown':\n        this.userAdjustOrbit(0, 0, -1 * ZOOM_SENSITIVITY);\n        break;\n      case 'ArrowUp':\n        this.userAdjustOrbit(0, -KEYBOARD_ORBIT_INCREMENT, 0);\n        break;\n      case 'ArrowDown':\n        this.userAdjustOrbit(0, KEYBOARD_ORBIT_INCREMENT, 0);\n        break;\n      case 'ArrowLeft':\n        this.userAdjustOrbit(-KEYBOARD_ORBIT_INCREMENT, 0, 0);\n        break;\n      case 'ArrowRight':\n        this.userAdjustOrbit(KEYBOARD_ORBIT_INCREMENT, 0, 0);\n        break;\n      default:\n        relevantKey = false;\n        break;\n    }\n    return relevantKey;\n  }\n\n  /**\n   * Handles the Pan key presses\n   * Uses constants for the increment.\n   * @param event The keyboard event for the .key value\n   * @returns boolean to indicate if the key event has been handled\n   */\n  private panKeyCodeHandler(event: KeyboardEvent) {\n    this.initializePan();\n    let relevantKey = true;\n    switch (event.key) {\n      case 'ArrowUp':\n        this.movePan(\n            0,\n            -1 * PAN_KEY_INCREMENT);  // This is the negative one so that the\n                                      // model appears to move as the arrow\n                                      // direction rather than the view moving\n        break;\n      case 'ArrowDown':\n        this.movePan(0, PAN_KEY_INCREMENT);\n        break;\n      case 'ArrowLeft':\n        this.movePan(-1 * PAN_KEY_INCREMENT, 0);\n        break;\n      case 'ArrowRight':\n        this.movePan(PAN_KEY_INCREMENT, 0);\n        break;\n      default:\n        relevantKey = false;\n        break;\n    }\n    return relevantKey;\n  }\n}\n"]}