{"version":3,"file":"decorators-spec.js","sourceRoot":"","sources":["../../src/test/decorators-spec.ts"],"names":[],"mappings":";;;;;;AAAA;;;;;;;;;;;;;GAaG;AACH,OAAO,EAAC,eAAe,EAAC,MAAM,KAAK,CAAC;AACpC,OAAO,EAAC,QAAQ,EAAC,MAAM,mBAAmB,CAAC;AAE3C,OAAO,EAAC,KAAK,EAAC,MAAM,kBAAkB,CAAC;AACvC,OAAO,EAAC,UAAU,EAAC,MAAM,sBAAsB,CAAC;AAChD,OAAO,EAAC,UAAU,EAAC,MAAM,iBAAiB,CAAC;AAE3C,MAAM,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;AAE3B,MAAM,UAAU,GAAG,MAAM,CAAC,WAAW,CAAC,CAAC;AAEvC,MAAM,aAAa,GAAG;IACpB,KAAK,EAAE,CAAC,UAAU,CAAC,CAAC,EAAE,GAAG,CAAC,EAAE,UAAU,CAAC,IAAI,CAAC,EAAE,EAAE,KAAK,CAAC,CAAC;IACvD,QAAQ,EAAE,EAAC,IAAI,EAAE,CAAC,IAAI,EAAE,UAAU,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,EAAC;CAC/C,CAAC;AAEF,MAAM,eAAgB,SAAQ,eAAe;IAA7C;;QAGE,QAAG,GAAW,YAAY,CAAC;QAE3B,eAAU,GAA4B,EAAE,CAAC;IAK3C,CAAC;IAHC,CAAC,UAAU,CAAC,CAAC,KAAuB;QAClC,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IAC9B,CAAC;CACF;AAPC;IAFC,KAAK,CAAC,EAAC,UAAU,EAAE,aAAa,EAAE,aAAa,EAAE,UAAU,EAAC,CAAC;IAC7D,QAAQ,CAAC,EAAC,IAAI,EAAE,MAAM,EAAC,CAAC;4CACE;AAS7B,KAAK,CAAC,YAAY,EAAE,GAAG,EAAE;IACvB,KAAK,CAAC,QAAQ,EAAE,GAAG,EAAE;QACnB,IAAI,QAAQ,GAAG,CAAC,CAAC;QACjB,IAAI,OAAe,CAAC;QACpB,IAAI,OAAwB,CAAC;QAE7B,KAAK,CAAC,KAAK,IAAI,EAAE;YACf,OAAO,GAAG,oBAAoB,QAAQ,EAAE,EAAE,CAAC;YAC3C,cAAc,CAAC,MAAM,CAAC,OAAO,EAAE,KAAM,SAAQ,eAAe;aAAG,CAAC,CAAC;YAEjE,OAAO,GAAG,QAAQ,CAAC,aAAa,CAAC,OAAO,CAAoB,CAAC;YAC7D,QAAQ,CAAC,IAAI,CAAC,YAAY,CAAC,OAAO,EAAE,QAAQ,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;YAE9D,MAAM,UAAU,EAAE,CAAC;QACrB,CAAC,CAAC,CAAC;QAEH,QAAQ,CAAC,GAAG,EAAE;YACZ,QAAQ,CAAC,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC;QACrC,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,0DAA0D,EAAE,GAAG,EAAE;YACpE,MAAM,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;QACjD,CAAC,CAAC,CAAC;QAEH,IAAI,CACA,6DAA6D,EAC7D,KAAK,IAAI,EAAE;YACT,OAAO,CAAC,GAAG,GAAG,SAAS,CAAC;YACxB,MAAM,UAAU,EAAE,CAAC;YACnB,MAAM,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;QACnE,CAAC,CAAC,CAAC;IACT,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["/* @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport {ReactiveElement} from 'lit';\nimport {property} from 'lit/decorators.js';\n\nimport {style} from '../decorators.js';\nimport {numberNode} from '../styles/parsers.js';\nimport {timePasses} from '../utilities.js';\n\nconst expect = chai.expect;\n\nconst $updateFoo = Symbol('updateFoo');\n\nconst fooIntrinsics = {\n  basis: [numberNode(1, 'm'), numberNode(Math.PI, 'rad')],\n  keywords: {auto: [null, numberNode(200, '%')]}\n};\n\nclass StylableElement extends ReactiveElement {\n  @style({intrinsics: fooIntrinsics, updateHandler: $updateFoo})\n  @property({type: String})\n  foo: string = '200cm 1rad';\n\n  fooUpdates: Array<[number, number]> = [];\n\n  [$updateFoo](style: [number, number]) {\n    this.fooUpdates.push(style);\n  }\n}\n\nsuite('decorators', () => {\n  suite('@style', () => {\n    let instance = 0;\n    let tagName: string;\n    let element: StylableElement;\n\n    setup(async () => {\n      tagName = `stylable-element-${instance++}`;\n      customElements.define(tagName, class extends StylableElement {});\n\n      element = document.createElement(tagName) as StylableElement;\n      document.body.insertBefore(element, document.body.firstChild);\n\n      await timePasses();\n    });\n\n    teardown(() => {\n      document.body.removeChild(element);\n    });\n\n    test('invokes the update handler with the parsed default value', () => {\n      expect(element.fooUpdates).to.be.eql([[2, 1]]);\n    });\n\n    test(\n        'invokes the update handler once with a parsed updated value',\n        async () => {\n          element.foo = '1m auto';\n          await timePasses();\n          expect(element.fooUpdates).to.be.eql([[2, 1], [1, 2 * Math.PI]]);\n        });\n  });\n});"]}