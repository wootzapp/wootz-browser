{"version":3,"file":"texture-info.js","sourceRoot":"","sources":["../../../src/features/scene-graph/texture-info.ts"],"names":[],"mappings":"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","sourcesContent":["/* @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {LinearEncoding, MeshStandardMaterial, sRGBEncoding, Texture as ThreeTexture, TextureEncoding, Vector2} from 'three';\n\nimport {GLTF, TextureInfo as GLTFTextureInfo} from '../../three-components/gltf-instance/gltf-2.0.js';\n\nimport {TextureInfo as TextureInfoInterface} from './api.js';\nimport {$threeTexture} from './image.js';\nimport {Texture} from './texture.js';\n\nconst $texture = Symbol('texture');\nconst $transform = Symbol('transform');\nexport const $materials = Symbol('materials');\nexport const $usage = Symbol('usage');\n\n// Defines what a texture will be used for.\nexport enum TextureUsage {\n  Base,\n  MetallicRoughness,\n  Normal,\n  Occlusion,\n  Emissive,\n}\n\ninterface TextureTransform {\n  rotation: number;\n  scale: Vector2;\n  offset: Vector2;\n}\n\n/**\n * TextureInfo facade implementation for Three.js materials\n */\nexport class TextureInfo implements TextureInfoInterface {\n  private[$texture]: Texture|null = null;\n  private[$transform]: TextureTransform = {\n    rotation: 0,\n    scale: new Vector2(1, 1),\n    offset: new Vector2(0, 0)\n  };\n\n  // Holds a reference to the Three data that backs the material object.\n  [$materials]: Set<MeshStandardMaterial>|null;\n\n  // Texture usage defines the how the texture is used (ie Normal, Emissive...\n  // etc)\n  [$usage]: TextureUsage;\n  onUpdate: () => void;\n\n  constructor(\n      onUpdate: () => void, usage: TextureUsage,\n      threeTexture: ThreeTexture|null, material: Set<MeshStandardMaterial>,\n      gltf: GLTF, gltfTextureInfo: GLTFTextureInfo|null) {\n    // Creates image, sampler, and texture if valid texture info is provided.\n    if (gltfTextureInfo && threeTexture) {\n      const gltfTexture =\n          gltf.textures ? gltf.textures[gltfTextureInfo.index] : null;\n      const sampler = gltfTexture ?\n          (gltf.samplers ? gltf.samplers[gltfTexture.sampler!] : null) :\n          null;\n      const image = gltfTexture ?\n          (gltf.images ? gltf.images[gltfTexture.source!] : null) :\n          null;\n\n      this[$transform].rotation = threeTexture.rotation;\n      this[$transform].scale.copy(threeTexture.repeat);\n      this[$transform].offset.copy(threeTexture.offset);\n\n      this[$texture] =\n          new Texture(onUpdate, threeTexture, gltfTexture, sampler, image);\n    }\n\n    this.onUpdate = onUpdate;\n    this[$materials] = material;\n    this[$usage] = usage;\n  }\n\n  get texture(): Texture|null {\n    return this[$texture];\n  }\n\n  setTexture(texture: Texture|null): void {\n    const threeTexture: ThreeTexture|null =\n        texture != null ? texture.source[$threeTexture] : null;\n    let encoding: TextureEncoding = sRGBEncoding;\n    this[$texture] = texture;\n\n    if (this[$materials]) {\n      for (const material of this[$materials]!) {\n        switch (this[$usage]) {\n          case TextureUsage.Base:\n            material.map = threeTexture;\n            break;\n          case TextureUsage.MetallicRoughness:\n            encoding = LinearEncoding;\n            material.metalnessMap = threeTexture;\n            material.roughnessMap = threeTexture;\n            break;\n          case TextureUsage.Normal:\n            encoding = LinearEncoding;\n            material.normalMap = threeTexture;\n            break;\n          case TextureUsage.Occlusion:\n            encoding = LinearEncoding;\n            material.aoMap = threeTexture;\n            break;\n          case TextureUsage.Emissive:\n            material.emissiveMap = threeTexture;\n            break;\n          default:\n        }\n        material.needsUpdate = true;\n      }\n    }\n\n    if (threeTexture) {\n      // Updates the encoding for the texture, affects all references.\n      threeTexture.encoding = encoding;\n      threeTexture.rotation = this[$transform].rotation;\n      threeTexture.repeat = this[$transform].scale;\n      threeTexture.offset = this[$transform].offset;\n    }\n    this.onUpdate();\n  }\n}\n"]}