{"version":3,"file":"evaluators-spec.js","sourceRoot":"","sources":["../../../src/test/styles/evaluators-spec.ts"],"names":[],"mappings":"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","sourcesContent":["/* @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {CalcEvaluator, EnvEvaluator, OperatorEvaluator, PercentageEvaluator, SphericalIntrinsics, StyleEvaluator} from '../../styles/evaluators.js';\nimport {numberNode} from '../../styles/parsers.js';\nimport {expressionNode, functionNode, identNode, operatorNode, spy} from '../helpers.js';\n\nconst expect = chai.expect;\n\nsuite('evaluators', () => {\n  suite('EnvEvaluator', () => {\n    test('is never constant', () => {\n      const evaluator = new EnvEvaluator(functionNode('env', []));\n      expect(evaluator.isConstant).to.be.false;\n    });\n\n    test('with no arguments, evaluates to zero', () => {\n      const evaluator = new EnvEvaluator(functionNode('env', []));\n      expect(evaluator.evaluate()).to.be.eql(numberNode(0, null));\n    });\n\n    suite('window-scroll-y', () => {\n      test('evaluates to current top-level scroll position', () => {\n        const evaluator = new EnvEvaluator(functionNode(\n            'env', [expressionNode([identNode('window-scroll-y')])]));\n        expect(evaluator.evaluate()).to.be.eql(numberNode(0, null));\n        const scrollPosition = 10000;\n        const scrollMax = 20000;\n\n        const restorePageYOffset =\n            spy(window, 'pageYOffset', {value: scrollPosition});\n        const restoreBodyScrollHeight =\n            spy(document.documentElement, 'clientHeight', {value: scrollMax});\n\n        expect(evaluator.evaluate())\n            .to.be.eql(numberNode(\n                scrollPosition / (scrollMax - window.innerHeight), null));\n\n        restorePageYOffset();\n        restoreBodyScrollHeight();\n      });\n    });\n  });\n\n  suite('PercentageEvaluator', () => {\n    test('multiplies the percentage by the basis', () => {\n      const evaluator =\n          new PercentageEvaluator(numberNode(200, '%'), numberNode(1, 'm'));\n      expect(evaluator.evaluate()).to.be.eql(numberNode(2, 'm'));\n    });\n  });\n\n  suite('CalcEvaluator', () => {\n    test('is constant if its operands are all numbers', () => {\n      const evaluator = new CalcEvaluator(functionNode(\n          'calc',\n          [expressionNode(\n              [numberNode(1, null), operatorNode('+'), numberNode(1, null)])]));\n\n      expect(evaluator.isConstant).to.be.true;\n    });\n\n    test('is constant if nested functions are constant', () => {\n      const evaluator = new CalcEvaluator(functionNode(\n          'calc', [expressionNode([\n            numberNode(1, null),\n            operatorNode('+'),\n            functionNode('calc', [expressionNode([numberNode(1, null)])])\n          ])]));\n\n      expect(evaluator.isConstant).to.be.true;\n    });\n\n    test('is not constant if any nested function is not constant', () => {\n      const evaluator = new CalcEvaluator(functionNode('calc', [\n        expressionNode([\n          numberNode(1, null),\n          operatorNode('+'),\n          functionNode('calc', [expressionNode([numberNode(1, null)])]),\n          operatorNode('+'),\n          functionNode('env', [expressionNode([identNode('window-scroll-y')])])\n        ])\n      ]));\n\n      expect(evaluator.isConstant).to.be.false;\n    });\n\n    test('with no arguments, evaluates to zero', () => {\n      const evaluator = new CalcEvaluator(functionNode('env', []));\n      expect(evaluator.evaluate()).to.be.eql(numberNode(0, null));\n    });\n\n    test('evaluates basic addition', () => {\n      const evaluator = new CalcEvaluator(functionNode(\n          'calc',\n          [expressionNode(\n              [numberNode(1, null), operatorNode('+'), numberNode(1, null)])]));\n\n      expect(evaluator.evaluate()).to.be.eql(numberNode(2, null));\n    });\n\n    test('evaluates basic subtraction', () => {\n      const evaluator = new CalcEvaluator(functionNode(\n          'calc',\n          [expressionNode(\n              [numberNode(1, null), operatorNode('-'), numberNode(1, null)])]));\n\n      expect(evaluator.evaluate()).to.be.eql(numberNode(0, null));\n    });\n\n    test('evaluates basic multiplication', () => {\n      const evaluator = new CalcEvaluator(functionNode(\n          'calc',\n          [expressionNode(\n              [numberNode(5, null), operatorNode('*'), numberNode(4, null)])]));\n\n      expect(evaluator.evaluate()).to.be.eql(numberNode(20, null));\n    });\n\n    test('evaluates basic division', () => {\n      const evaluator = new CalcEvaluator(functionNode('calc', [\n        expressionNode(\n            [numberNode(100, null), operatorNode('/'), numberNode(10, null)])\n      ]));\n\n      expect(evaluator.evaluate()).to.be.eql(numberNode(10, null));\n    });\n\n    test('evaluates complex algebraic expressions', () => {\n      const evaluator = new CalcEvaluator(functionNode('calc', [\n        expressionNode([\n          numberNode(1, null),\n          operatorNode('+'),\n          numberNode(2, null),\n          operatorNode('*'),\n          numberNode(2.5, null),\n          operatorNode('-'),\n          numberNode(-2, null),\n          operatorNode('/'),\n          numberNode(-1, null)\n        ]),\n      ]));\n\n      expect(evaluator.evaluate()).to.be.eql(numberNode(4, null));\n    });\n\n    test('evaluates algebra with nested functions', () => {\n      test('evaluates basic addition', () => {\n        const evaluator = new CalcEvaluator(functionNode(\n            'calc', [expressionNode([\n              numberNode(1, null),\n              operatorNode('+'),\n              functionNode('calc', [expressionNode([numberNode(1, null)])])\n            ])]));\n\n        expect(evaluator.evaluate()).to.be.eql(numberNode(2, null));\n      });\n    });\n  });\n\n  suite('OperatorEvaluator', () => {\n    test('evaluates zero for an unknown operator', () => {\n      const evaluator = new OperatorEvaluator(\n          operatorNode('$' as any), numberNode(1, null), numberNode(1, null));\n\n      expect(evaluator.evaluate()).to.be.eql(numberNode(0, null));\n    });\n\n    test('evaluates zero for operands with mismatching unit types', () => {\n      const evaluator = new OperatorEvaluator(\n          operatorNode('+'), numberNode(1, 'm'), numberNode(1, 'rad'));\n\n      expect(evaluator.evaluate()).to.be.eql(numberNode(0, null));\n    });\n\n    test('normalizes to base meters for length operands', () => {\n      const evaluator = new OperatorEvaluator(\n          operatorNode('+'), numberNode(1, 'm'), numberNode(1000, 'mm'));\n\n      expect(evaluator.evaluate()).to.be.eql(numberNode(2, 'm'));\n    });\n\n    test('normalizes to radians for angular operands', () => {\n      const evaluator = new OperatorEvaluator(\n          operatorNode('+'),\n          numberNode(180, 'deg'),\n          numberNode(Math.PI, 'rad'));\n\n      expect(evaluator.evaluate()).to.be.eql(numberNode(2 * Math.PI, 'rad'));\n    });\n  });\n\n  suite('VectorEvaluator', () => {\n    suite('with SphericalIntrinsics', () => {\n      let intrinsics: SphericalIntrinsics;\n      setup(() => {\n        intrinsics = {\n          basis:\n              [numberNode(1, 'rad'), numberNode(1, 'rad'), numberNode(1, 'm')],\n          keywords: {auto: [numberNode(2, 'rad'), null, numberNode(200, '%')]}\n        };\n      });\n\n      test('evaluates to defaults (e.g., auto) for omitted expressions', () => {\n        const evaluator = new StyleEvaluator([], intrinsics);\n        expect(evaluator.evaluate()).to.be.eql([2, 1, 2]);\n      });\n\n      test(\n          'substitutes the keyword auto for the related intrinsic value',\n          () => {\n            const evaluator = new StyleEvaluator(\n                [expressionNode([identNode('auto')])], intrinsics);\n\n            expect(evaluator.evaluate()).to.be.eql([2, 1, 2]);\n          });\n\n      test('treats missing values as equivalent to auto', () => {\n        const evaluatorOne =\n            new StyleEvaluator([expressionNode([])], intrinsics);\n        const evaluatorTwo = new StyleEvaluator(\n            [expressionNode(\n                [identNode('auto'), identNode('auto'), identNode('auto')])],\n            intrinsics);\n\n        expect(evaluatorOne.evaluate()).to.be.eql(evaluatorTwo.evaluate());\n      });\n\n      test('scales the basis by an input percentage', () => {\n        const evaluator = new StyleEvaluator(\n            [expressionNode([numberNode(300, '%')])], intrinsics);\n\n        expect(evaluator.evaluate()).to.be.eql([3, 1, 2]);\n      });\n\n      test('evaluates spherical values from basic expressions', () => {\n        const evaluator = new StyleEvaluator(\n            [expressionNode([\n              numberNode(1, 'rad'),\n              numberNode(180, 'deg'),\n              numberNode(100, 'cm')\n            ])],\n            intrinsics);\n\n        expect(evaluator.evaluate()).to.be.eql([1, Math.PI, 1]);\n      });\n\n      test('applies a percentage at any expression depth to the basis', () => {\n        const evaluator = new StyleEvaluator(\n            [expressionNode([\n              numberNode(150, '%'),\n              numberNode(180, 'deg'),\n              functionNode('calc', [expressionNode([\n                             numberNode(200, '%'),\n                             operatorNode('*'),\n                             functionNode('calc', [expressionNode(\n                                                      [numberNode(3, 'm')])]),\n                           ])])\n            ])],\n            intrinsics);\n\n        expect(evaluator.evaluate()).to.be.eql([1.5, Math.PI, 6]);\n      });\n\n      test('evaluates spherical values from complex expressions', () => {\n        const evaluator = new StyleEvaluator(\n            [expressionNode([\n              numberNode(1, 'rad'),\n              numberNode(180, 'deg'),\n              functionNode(\n                  'calc', [expressionNode([\n                    numberNode(1, 'm'),\n                    operatorNode('+'),\n                    functionNode(\n                        'calc', [expressionNode([numberNode(1, null)])]),\n                    operatorNode('+'),\n                    functionNode(\n                        'env', [expressionNode([identNode('window-scroll-y')])])\n                  ])])\n            ])],\n            intrinsics);\n\n        expect(evaluator.evaluate()).to.be.eql([1, Math.PI, 2]);\n      });\n    });\n  });\n});"]}