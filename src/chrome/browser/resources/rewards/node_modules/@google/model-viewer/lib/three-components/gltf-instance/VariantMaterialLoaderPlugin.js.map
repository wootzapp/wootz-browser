{"version":3,"file":"VariantMaterialLoaderPlugin.js","sourceRoot":"","sources":["../../../src/three-components/gltf-instance/VariantMaterialLoaderPlugin.ts"],"names":[],"mappings":"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","sourcesContent":["/* @license\r\n * Copyright 2021 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the 'License');\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an 'AS IS' BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n/**\r\n * Materials variants extension\r\n *\r\n * Specification:\r\n * https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Khronos/KHR_materials_variants\r\n */\r\n\r\n/**\r\n * The code in this file is based on\r\n * https://github.com/takahirox/three-gltf-extensions/tree/main/loaders/KHR_materials_variants\r\n */\r\n\r\nimport {Material as ThreeMaterial, Mesh} from 'three';\r\nimport {GLTFReference} from 'three/examples/jsm/loaders/GLTFLoader';\r\nimport {GLTF, GLTFLoaderPlugin, GLTFParser} from 'three/examples/jsm/loaders/GLTFLoader.js';\r\n\r\n\r\nexport interface UserDataVariantMapping {\r\n  material: ThreeMaterial|null;\r\n  gltfMaterialIndex: number;\r\n}\r\n\r\n/**\r\n * KHR_materials_variants specification allows duplicated variant names\r\n * but it makes handling the extension complex.\r\n * We ensure tha names and make it easier.\r\n * If you want to export the extension with the original names\r\n * you are recommended to write GLTFExporter plugin to restore the names.\r\n *\r\n * @param variantNames {Array<string>}\r\n * @return {Array<string>}\r\n */\r\nconst ensureUniqueNames = (variantNames: string[]) => {\r\n  const uniqueNames = [];\r\n  const knownNames = new Set<string>();\r\n\r\n  for (const name of variantNames) {\r\n    let uniqueName = name;\r\n    let suffix = 0;\r\n    // @TODO: An easy solution.\r\n    //        O(N^2) in the worst scenario where N is variantNames.length.\r\n    //        Fix me if needed.\r\n    while (knownNames.has(uniqueName)) {\r\n      uniqueName = name + '.' + (++suffix);\r\n    }\r\n    knownNames.add(uniqueName);\r\n    uniqueNames.push(uniqueName);\r\n  }\r\n\r\n  return uniqueNames;\r\n};\r\n\r\n/**\r\n * Convert mappings array to table object to make handling the extension easier.\r\n *\r\n * @param\r\n *     extensionDef {glTF.meshes[n].primitive.extensions.KHR_materials_variants}\r\n * @param variantNames {Array<string>} Required to be unique names\r\n * @return {Map}\r\n */\r\nconst mappingsArrayToTable = (extensionDef:\r\n                                  any): Map<number, UserDataVariantMapping> => {\r\n  const table = new Map<number, UserDataVariantMapping>();\r\n  for (const mapping of extensionDef.mappings) {\r\n    for (const variant of mapping.variants) {\r\n      table.set(variant, {material: null, gltfMaterialIndex: mapping.material});\r\n    }\r\n  }\r\n  return table;\r\n};\r\n\r\nexport default class GLTFMaterialsVariantsExtension implements\r\n    GLTFLoaderPlugin {\r\n  parser: GLTFParser;\r\n  name: string;\r\n\r\n  constructor(parser: GLTFParser) {\r\n    this.parser = parser;\r\n    this.name = 'KHR_materials_variants';\r\n  }\r\n\r\n  // Note that the following properties will be overridden even if they are\r\n  // pre-defined\r\n  // - gltf.userData.variants\r\n  // - mesh.userData.variantMaterials\r\n  afterRoot(gltf: GLTF) {\r\n    const parser = this.parser;\r\n    const json = parser.json;\r\n\r\n    if (json.extensions === undefined ||\r\n        json.extensions[this.name] === undefined) {\r\n      return null;\r\n    }\r\n\r\n    const extensionDef = json.extensions[this.name];\r\n    const variantsDef = extensionDef.variants || [];\r\n    const variants =\r\n        ensureUniqueNames(variantsDef.map((v: {name: string}) => v.name));\r\n\r\n    for (const scene of gltf.scenes) {\r\n      // Save the variants data under associated mesh.userData\r\n      scene.traverse(object => {\r\n        const mesh = object as Mesh;\r\n\r\n        if (!mesh.isMesh) {\r\n          return;\r\n        }\r\n\r\n        const association = parser.associations.get(mesh) as GLTFReference &\r\n            {primitives: number};\r\n\r\n        if (association == null || association.meshes == null ||\r\n            association.primitives == null) {\r\n          return;\r\n        }\r\n\r\n        const meshDef = json.meshes[association.meshes];\r\n        const primitivesDef = meshDef.primitives;\r\n        const primitiveDef = primitivesDef[association.primitives];\r\n        const extensionsDef = primitiveDef.extensions;\r\n\r\n        if (!extensionsDef || !extensionsDef[this.name]) {\r\n          return;\r\n        }\r\n\r\n        mesh.userData.variantMaterials =\r\n            mappingsArrayToTable(extensionsDef[this.name]);\r\n      });\r\n    }\r\n\r\n    gltf.userData.variants = variants;\r\n\r\n    return Promise.resolve();\r\n  }\r\n}\r\n"]}