{"version":3,"file":"image.js","sourceRoot":"","sources":["../../../src/features/scene-graph/image.ts"],"names":[],"mappings":"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","sourcesContent":["/* @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Mesh, MeshBasicMaterial, OrthographicCamera, PlaneGeometry, Scene, Texture as ThreeTexture, WebGLRenderTarget} from 'three';\n\nimport {blobCanvas} from '../../model-viewer-base.js';\nimport {Image as GLTFImage} from '../../three-components/gltf-instance/gltf-2.0.js';\nimport {Renderer} from '../../three-components/Renderer.js';\n\nimport {Image as ImageInterface} from './api.js';\nimport {$correlatedObjects, $sourceObject, ThreeDOMElement} from './three-dom-element.js';\n\n\nconst quadMaterial = new MeshBasicMaterial();\nconst quad = new PlaneGeometry(2, 2);\nlet adhocNum = 0;\n\nexport const $threeTexture = Symbol('threeTexture');\nexport const $applyTexture = Symbol('applyTexture');\n\n/**\n * Image facade implementation for Three.js textures\n */\nexport class Image extends ThreeDOMElement implements ImageInterface {\n  get[$threeTexture]() {\n    console.assert(\n        this[$correlatedObjects] != null && this[$correlatedObjects]!.size > 0,\n        'Image correlated object is undefined');\n    return this[$correlatedObjects]?.values().next().value as ThreeTexture;\n  }\n\n  constructor(\n      onUpdate: () => void, texture: ThreeTexture|null,\n      gltfImage: GLTFImage|null) {\n    gltfImage = gltfImage ?? {\n      name: (texture && texture.image && texture.image.src) ?\n          texture.image.src.split('/').pop() :\n          'adhoc_image',\n      uri: (texture && texture.image && texture.image.src) ?\n          texture.image.src :\n          'adhoc_image' + adhocNum++\n    };\n    super(onUpdate, gltfImage, new Set<ThreeTexture>(texture ? [texture] : []));\n  }\n\n  get name(): string {\n    return (this[$sourceObject] as GLTFImage).name || '';\n  }\n\n  get uri(): string|undefined {\n    return (this[$sourceObject] as GLTFImage).uri;\n  }\n\n  get bufferView(): number|undefined {\n    return (this[$sourceObject] as GLTFImage).bufferView;\n  }\n\n  get type(): 'embedded'|'external' {\n    return this.uri != null ? 'external' : 'embedded';\n  }\n\n  set name(name: string) {\n    (this[$sourceObject] as GLTFImage).name = name;\n  }\n\n  async createThumbnail(width: number, height: number): Promise<string> {\n    const scene = new Scene();\n    quadMaterial.map = this[$threeTexture];\n    const mesh = new Mesh(quad, quadMaterial);\n    scene.add(mesh);\n    const camera = new OrthographicCamera(-1, 1, 1, -1, 0, 1);\n\n    const {threeRenderer} = Renderer.singleton;\n    const renderTarget = new WebGLRenderTarget(width, height);\n    threeRenderer.setRenderTarget(renderTarget);\n    threeRenderer.render(scene, camera);\n    threeRenderer.setRenderTarget(null);\n\n    const buffer = new Uint8Array(width * height * 4);\n    threeRenderer.readRenderTargetPixels(\n        renderTarget, 0, 0, width, height, buffer);\n\n    blobCanvas.width = width;\n    blobCanvas.height = height;\n    const blobContext = blobCanvas.getContext('2d')!;\n    const imageData = blobContext.createImageData(width, height);\n    imageData.data.set(buffer);\n    blobContext.putImageData(imageData, 0, 0);\n\n    return new Promise<string>(async (resolve, reject) => {\n      blobCanvas.toBlob(blob => {\n        if (!blob) {\n          return reject('Failed to capture thumbnail.');\n        }\n        resolve(URL.createObjectURL(blob));\n      }, 'image/png');\n    });\n  }\n}\n"]}