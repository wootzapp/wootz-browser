// Copyright 2024 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

module lens.mojom;

import "chrome/browser/lens/core/mojom/geometry.mojom";
import "chrome/browser/lens/core/mojom/overlay_object.mojom";
import "chrome/browser/lens/core/mojom/text.mojom";
import "mojo/public/mojom/base/big_string.mojom";
import "ui/gfx/geometry/mojom/geometry.mojom";
import "url/mojom/url.mojom";
import "ui/base/mojom/window_open_disposition.mojom";

// Factory method for creating a new WebUI page handler.
interface LensPageHandlerFactory {
  // The WebUI calls this method when the page is first initialized.
  CreatePageHandler(pending_receiver<LensPageHandler> handler,
                    pending_remote<LensPage> page);

  // The side panel WebUI calls this method when the page is first initialized.
  CreateSidePanelPageHandler(
      pending_receiver<LensSidePanelPageHandler> handler,
      pending_remote<LensSidePanelPage> page);
};

// Browser-side handler for requests from WebUI page. (TypeScript -> C++)
interface LensPageHandler {
  // WebUI calls this when the user wants to dismiss the lens overlay using
  // the close button.
  CloseRequestedByOverlayCloseButton();

  // Like above, but when dismissed by clicking on the overlay background.
  CloseRequestedByOverlayBackgroundClick();

  // Like above, but when dismissed by pressing the escape key.
  CloseRequestedByOverlayEscapeKeyPress();

  // When this method is called, the C++ coordinator will add a blur to the
  // tab contents.
  AddBackgroundBlur();

  // When this method is called, the C++ coordinator will show the feedback
  // dialog.
  FeedbackRequestedByOverlay();

  // When this method is called, the C++ coordinator will open the link to the
  // Help Center article in a new tab.
  InfoRequestedByOverlay(ui.mojom.ClickModifiers click_modifiers);

  // When this method is called, the C++ coordinator sends a Lens request with
  // the given bounding region to the Lens servers and display results in the
  // Chrome side panel. The region should be normalized between 0 and 1.
  // TODO(b/329262670): Verify normalization does not cause off-by-1 pixel
  // errors.
  IssueLensRequest(CenterRotatedBox region);

  // When this method is called, the C++ coordinator issues a SRP request with
  // given text string in the side panel. This function also passes selection
  // indices into a list of words maintained in the WebUI and are passed to the
  // browser-side UI solely for the purposes of maintaining a history stack.
  // They do not and will not be used to be indexed into anything in the
  // browser; when the user traverses history, the indices may be passed back to
  // the WebUI.
  IssueTextSelectionRequest(
      string query, int32 selection_start_index, int32 selection_end_index);

  // Similar to IssueTextSelectionRequest(), but requests that the selected
  // text be translated.
  IssueTranslateSelectionRequest(string query,
                                 string content_language,
                                 int32 selection_start_index,
                                 int32 selection_end_index);

  // When called, the C++ coordinator closes the lens search bubble. When the
  // user selects text or thumbnail on the WebUI overlay, the search bubble
  // must close.
  CloseSearchBubble();
};

// WebUI page handler for request from Browser side. (C++ -> TypeScript)
interface LensPage {
  // TODO(b/335214602): This should pass something other than a data URI as
  // encoding/decoding base64 could be very slow. Large data should instead
  // use something like a blob URL.
  // Pass screenshot data URL string to WebUI.
  ScreenshotDataUriReceived(mojo_base.mojom.BigString screenshot_data_uri);

  // Notifies the WebUI that our results panel is opening.
  NotifyResultsPanelOpened();

  // Notifies the WebUI that a close has been triggered and the overlay will
  // soon be hidden.
  NotifyOverlayClosing();

  // Passes objects received from Lens to WebUI for rendering.
  ObjectsReceived(array<OverlayObject> objects);

  // Passes Text received from Lens to WebUI for rendering.
  TextReceived(Text text);

  // Sets a post selection region to be rendered as selected on the page.
  SetPostRegionSelection(CenterRotatedBox region);

  // Sets text to be rendered as selected on the page.
  SetTextSelection(int32 selection_start_index, int32 selection_end_index);

  // Clears any post region selection on the page. No-op if none selected.
  ClearRegionSelection();

  // Clears any text selection on the page. No-op if none selected.
  ClearTextSelection();

  // Clears any text or post region selection on the page. No-op if none
  // selected.
  ClearAllSelections();
};

// Browser-side handler for requests from Side PanelWebUI page.
// (TypeScript -> C++)
interface LensSidePanelPageHandler {
  // When this method is called, the C++ coordinator will begin the tear-down
  // flow.
  CloseRequestedBySidePanelEscapeKeyPress();

  // Pops the most recent search query from the history stack to load in the
  // side panel.
  PopAndLoadQueryFromHistory();
};

// Side Panel WebUI page handler for request from Browser side.
// (C++ -> TypeScript)
interface LensSidePanelPage {
  // Load a provided URL into the side panel results iframe.
  LoadResultsInFrame(url.mojom.Url results_url);

  // Sets whether the results frame is currently loading. This cannot be done
  // from the renderer because the results iframe is cross-origin. This prevents
  // load events on the iframe from triggering reliably on every navigation.
  // Instead, we listen for the start of the navigations in the browser and set
  // the loading state appropriately.
  SetIsLoadingResults(bool is_loading);

  // Sets visibility for back arrow next to the searchbox.
  SetBackArrowVisible(bool visible);
};
