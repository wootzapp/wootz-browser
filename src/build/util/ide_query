#!/usr/bin/env python3
# Copyright 2024 The Chromium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.
"""A script gets the information needed by lDE language services.

Expected to run it at repository root,  where top DEP, .gn etc exists.
Not intended to run by user.
See go/reqs-for-peep
"""

import argparse
import os
import re
import subprocess
import sys

def _gn_lines(output_dir, path):
    """
    Generator function that returns args.gn lines one at a time, following
    import directives as needed.
    """
    import_re = re.compile(r'\s*import\("(.*)"\)')
    with open(path, encoding="utf-8") as f:
        for line in f:
            match = import_re.match(line)
            if match:
                raw_import_path = match.groups()[0]
                if raw_import_path[:2] == "//":
                    import_path = os.path.normpath(
                        os.path.join(output_dir, "..", "..",
                                     raw_import_path[2:]))
                else:
                    import_path = os.path.normpath(
                        os.path.join(os.path.dirname(path), raw_import_path))
                for import_line in _gn_lines(output_dir, import_path):
                    yield import_line
            else:
                yield line

def _use_reclient(outdir):
  args_gn = os.path.join(outdir, 'args.gn')
  if not os.path.exists(args_gn):
    return False
  for line in _gn_lines(outdir, args_gn):
    line_without_comment = line.split('#')[0]
    if re.search(r"(^|\s)(use_remoteexec)\s*=\s*true($|\s)",
                 line_without_comment):
      return True
  return False

def main():
  parser = argparse.ArgumentParser()
  parser.add_argument('--source', action='append',
    help=('The source file being analyzed.'
          'Multiple --source arguments can be passed in order to batch '
          'process is desired. '))
  parser.add_argument('--perform-build', action='store_true',
    help=('If specified, actually build the target, including any generated '
          'prerequisite files. '
          'If --perform-build is not passed, the contents of '
          'the GeneratedFile results will only be returned if a build has '
          'been previously completed, and may be stale.'))
  parser.add_argument('--out-dir',
    help=('Output directory, containing  args.gn, which specifies the build '
          'configuration.'))
  options = parser.parse_args()

  this_dir = os.path.dirname(__file__)
  repo_root = os.path.join(this_dir, '..', '..')

  targets = []
  for source in options.source:
    # source is repo root (cwd) relative,
    # but siso uses out dir relative target.
    target = os.path.relpath(source, start=options.out_dir) + "^"
    targets.append(target)

  if options.perform_build:
    if _use_reclient(options.out_dir):
      args = ['autoninja', '-C', options.out_dir]
    else:
      args = ['siso', 'ninja', '-C', options.out_dir]
    args.extend(targets)
    p = subprocess.run(args, cwd=repo_root, capture_output=True)
    if p.returncode != 0:
      # TODO: report error in IdeAnalysis.Status?
      sys.stderr.write('build failed with %d\n%s\n%s' % (
          p.returncode, p.stdout, p.stderr))
      return 1

  args = ['siso', 'query', 'ideanalysis', '-C', options.out_dir]
  args.extend(targets)
  subprocess.run(args, cwd=repo_root, check=True)

if __name__ == '__main__':
  sys.exit(main())
