#!/usr/bin/env python3
"""
Script to generate grd
"""
import argparse
import os
import re
import sys
from pathlib import Path


SRC_DIR = os.path.realpath('..')

# Demo page dist path
DEMO_PAGE_DIST_DIR = os.path.join(SRC_DIR, 'chrome', 'browser', 'resources',
                                       'demo_page', 'dist')

WOOTZ_TSX_DIST_DIR = os.path.join(SRC_DIR, 'chrome', 'browser', 'resources',
                                       'wootz_tsx', 'dist')                                       

# Dictionary to map feature name with their directory path.
FEATURE_DIR_PATH_MAP = {
    'demo_page': DEMO_PAGE_DIST_DIR,
    'wootz_tsx_page': WOOTZ_TSX_DIST_DIR,
}

FILE_PATH_LISTS = []


def get_files_lists(module_name, relative_path):
    """
    Method to get the files recursively in the give directory
    """
    for path in Path(relative_path).rglob('*.*'):
        if module_name == 'demo_page':
            curr_path = str(path).replace(DEMO_PAGE_DIST_DIR + os.path.sep, '')
        if module_name == 'wootz_tsx_page':
            curr_path = str(path).replace(WOOTZ_TSX_DIST_DIR + os.path.sep, '')
        # Condition to exclude  .grd and .gn files
        if(curr_path.endswith('.grd') or curr_path.endswith('.gn')):
            continue

        FILE_PATH_LISTS.append(curr_path)


def grd_includes_string(file_lists, prefix):
    """
    Method to create include tag string for grd
    """
    regex = re.compile(r"[^a-zA-Z0-9]")
    idr_prefix = 'IDR_' + prefix.upper()
    for file in file_lists:
        file_name_upper = '_' + regex.sub('_', file).upper()
        # Fixme need to find another option to preety print and split
        if file.split(os.path.sep)[-1] == 'index.html':
            includes_string = '\n\t\t<include name="' + idr_prefix + \
                '" file="' + file + '" type="BINDATA" />'
        else:
            includes_string = '\n\t\t<include name="' + idr_prefix + file_name_upper + \
                '" file="' + file + '" type="BINDATA" />'
        yield includes_string


def grd_file_content(grit_name):
    """
    Method to get the grd file
    """

    top_content = """<?xml version="1.0" encoding="UTF-8"?>
<!-- This file is generated by grd_generation.py script -->
<grit latest_public_release="0" current_release="1" output_all_resource_defines="true">
<outputs>
    <output filename="grit/{@#}_resources.h" type="rc_header">
    <emit emit_type='prepend'></emit>
    </output>
    <output filename="grit/{@#}_resources_map.cc" type="resource_file_map_source" />
    <output filename="grit/{@#}_resources_map.h" type="resource_map_header" />
    <output filename="{@#}_resources.pak" type="data_package" />
</outputs>
<release seq="1">
    <includes>""".replace('{@#}', grit_name)

    for include in grd_includes_string(FILE_PATH_LISTS, grit_name):
        top_content += include

    lower_content = """
    </includes>
</release>
</grit>
    """
    return top_content + lower_content


def main():
    """
    Main function
    """
    parser = argparse.ArgumentParser()
    parser.add_argument('--module_name',
                        help='To identify name of the feature.')
    parser.add_argument('--output', help='Name of the output file.')
    args = parser.parse_args()

    if args.module_name not in FEATURE_DIR_PATH_MAP:
        print('Unknown feature name : ' +
              args.module_name)
        sys.exit(0)

    get_files_lists(args.module_name,
                    FEATURE_DIR_PATH_MAP[args.module_name])
    if args.module_name == 'demo_page':
        grd_dir_path = DEMO_PAGE_DIST_DIR
    if args.module_name == 'wootz_tsx_page':
        grd_dir_path = WOOTZ_TSX_DIST_DIR    
    
    with open(os.path.join(grd_dir_path, args.output + '.grd'), 'w') as grd_file:
        grd_file.write(grd_file_content(args.module_name))


if __name__ == '__main__':
    try:
        sys.exit(main())
    except KeyboardInterrupt:
        print('\nExecution Interrupted')
        sys.exit(0)
