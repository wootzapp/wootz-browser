// Copyright 2024 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

module ash.camera_app.mojom;

import "ash/webui/camera_app_ui/types.mojom";

// The type indicates how the camera app is launched.
enum LaunchType {
  // The default option that most of the launches will fall in.
  kDefault,

  // The camera app is launched by user query through Google Assistant.
  kAssistant,
};

struct StartSessionEventParams {
  LaunchType launch_type;
};

enum Mode {
  kPhoto,
  kVideo,
  kScan,
  kPortrait,
};

enum Facing {
  kEnvironment,
  kUser,
  kExternal,
  kUnknown,
};

enum GridType {
  kNone,
  k3X3,
  k4X4,
  kGolden,
};

enum TimerType {
  kNone,
  k3Seconds,
  k10Seconds,
};

enum ShutterType {
  kUnknown,
  kAssistant,
  kKeyboard,
  kMouse,
  kTouch,
  kVolumeKey,
};

enum AndroidIntentResultType {
  kNotIntent,
  kConfirmed,
  kCanceled,
};

enum ResolutionLevel {
  kUnknown,
  k4K,
  kQuadHD,
  kFullHD,
  kHD,
  k360P,
  kFull,
  kMedium,
};

enum AspectRatioSet {
  kOthers,
  k4To3,
  k16To9,
  kSquare,
};

struct PhotoDetails {
  bool is_video_snapshot;
};

enum RecordType {
  kNotRecording,
  kNormal,
  kGif,
  kTimelapse,
};

enum GifResultType {
  kNotGif,
  kRetake,
  kShare,
  kSave,
};

struct NormalVideoDetails {
};

struct GifVideoDetails {
  GifResultType gif_result_type;
};

struct TimelapseVideoDetails {
  int32 timelapse_speed;
};

union RecordTypeDetails {
  NormalVideoDetails normal_video_details;
  GifVideoDetails gif_video_details;
  TimelapseVideoDetails timelapse_video_details;
};

struct VideoDetails {
  bool is_muted;
  int32 fps;
  bool ever_paused;

  // In milliseconds.
  int32 duration;

  RecordTypeDetails record_type_details;
};

union CaptureDetails {
  PhotoDetails photo_details;
  VideoDetails video_details;
};

struct CaptureEventParams {
  Mode mode;
  Facing facing;
  bool is_mirrored;
  GridType grid_type;
  TimerType timer_type;
  ShutterType shutter_type;
  AndroidIntentResultType android_intent_result_type;
  bool is_window_maximized;
  bool is_window_portrait;
  int32 resolution_width;
  int32 resolution_height;
  ResolutionLevel resolution_level;
  AspectRatioSet aspect_ratio_set;
  CaptureDetails? capture_details;
  double zoom_ratio;
};

struct AndroidIntentEventParams {
  Mode mode;
  bool should_handle_result;
  bool should_downscale;
  bool is_secure;
};

struct OpenPTZPanelEventParams {
  bool support_pan;
  bool support_tilt;
  bool support_zoom;
};

enum DocScanActionType {
  kAddPage,
  kDeletePage,
  kFix,
};

struct DocScanActionEventParams {
  DocScanActionType action_type;
};

enum DocScanResultType {
  kCancel,
  kSaveAsPdf,
  kSaveAsPhoto,
  kShare,
};

enum DocScanFixType {
  kCorner = 1,
  kRotation = 2,
  // Next enum value should be 4.
};

struct DocScanResultEventParams {
  DocScanResultType result_type;

  // A bit mask of the combination of `DocScanFixType` representing what kinds
  // of fix are applied.
  uint32 fix_types_mask;

  int32 fix_count;
  int32 page_count;
};

struct MipiCameraModule {
};

struct UsbCameraModule {
  // If it is in the top 20 module list, the format will be "[vid]:[pid]"
  // (e.g. "abcd:1234"). Otherwise, it will be null.
  string? id;
};

union CameraModule {
  MipiCameraModule mipi_camera;
  UsbCameraModule usb_camera;
};

struct OpenCameraEventParams {
  CameraModule camera_module;
};

enum LowStorageActionType {
  kManageStorageAutoStop,
  kManageStorageCannotStart,
  kShowAutoStopDialog,
  kShowCannotStartDialog,
  kShowWarningMessage,
};

struct LowStorageActionEventParams {
  LowStorageActionType action_type;
};

enum BarcodeContentType {
  kText,
  kUrl,
  kWiFi,
};

struct BarcodeDetectedEventParams {
  BarcodeContentType content_type;
  WifiSecurityType wifi_security_type;
};

enum PerfEventType {
  kCameraSwitching,
  kGifCapturePostProcessing,
  kLaunchingFromLaunchAppCold,
  kLaunchingFromLaunchAppWarm,
  kLaunchingFromWindowCreation,
  kModeSwitching,
  kPhotoCapturePostProcessing,
  kPhotoCaptureShutter,
  kPhotoTaking,
  kPortraitModeCapturePostProcessing,
  kTimelapseCapturePostProcessing,
  kVideoCapturePostProcessing,
};

struct PerfEventParams {
  PerfEventType event_type;

  // In milliseconds.
  int32 duration;

  // Extra information.
  Facing facing;
  int32 resolution_width;
  int32 resolution_height;
};

enum UserBehavior {
  kTakeNormalPhoto = 1,
  kTakePortraitPhoto = 2,
  kScanBarcode = 4,
  kScanDocument = 8,
  kRecordNormalVideo = 16,
  kRecordGifVideo = 32,
  kRecordTimelapseVideo = 64,
  // Next enum value should be 128.
};

struct MemoryUsageEventParams {
  // A bit mask of the combination of `UserBehavior` representing what kinds of
  // behavior the user has performed in this session.
  uint32 behaviors_mask;

  // In bytes.
  uint64 memory_usage;
};

// This interface is used by CCA to send metrics to CrOS Events.
interface EventsSender {
  // Sends an event to indicate a CCA session is started.
  SendStartSessionEvent(StartSessionEventParams params);

  // Sends an event to indicate a capture is happened.
  SendCaptureEvent(CaptureEventParams params);

  // Sends an event when an Android intent is handled by CCA.
  SendAndroidIntentEvent(AndroidIntentEventParams params);

  // Sends an event when the PTZ panel is opened.
  SendOpenPTZPanelEvent(OpenPTZPanelEventParams params);

  // Sends an event when a document scanning related action is performed.
  SendDocScanActionEvent(DocScanActionEventParams params);

  // Sends an event when the user finishes a document scanning session.
  SendDocScanResultEvent(DocScanResultEventParams params);

  // Sends an event when the camera is opened.
  SendOpenCameraEvent(OpenCameraEventParams params);

  // Sends an event when an action is performed due to low storage detection.
  SendLowStorageActionEvent(LowStorageActionEventParams params);

  // Sends an event when a barcode is detected on the preview.
  SendBarcodeDetectedEvent(BarcodeDetectedEventParams params);

  // Sends an event when a performance measurement is performed.
  SendPerfEvent(PerfEventParams params);

  // Sends an event when a barcode is detected and it is unsupported protocol.
  SendUnsupportedProtocolEvent();

  // Update the memory usage events parameter of the current camera session
  // which will be sent when the camera session ends.
  UpdateMemoryUsageEventParams(MemoryUsageEventParams params);
};
